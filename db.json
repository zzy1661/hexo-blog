{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/imgs/006adce2e90d46b6bf6680421b8597fe.png","path":"imgs/006adce2e90d46b6bf6680421b8597fe.png","modified":0,"renderable":0},{"_id":"source/imgs/00bfff7f7dd748058ca38a1a7b0a754d.png","path":"imgs/00bfff7f7dd748058ca38a1a7b0a754d.png","modified":0,"renderable":0},{"_id":"source/imgs/01a207b620f34eaea21cfea282c3f4ba.png","path":"imgs/01a207b620f34eaea21cfea282c3f4ba.png","modified":0,"renderable":0},{"_id":"source/imgs/0255ec42a61443f582afd734d41915cb.png","path":"imgs/0255ec42a61443f582afd734d41915cb.png","modified":0,"renderable":0},{"_id":"source/imgs/026bf9f862e8483f86ecaaf73ec4cb44.png","path":"imgs/026bf9f862e8483f86ecaaf73ec4cb44.png","modified":0,"renderable":0},{"_id":"source/imgs/03a48de8e5e14bfa86aace25630fe9f0.png","path":"imgs/03a48de8e5e14bfa86aace25630fe9f0.png","modified":0,"renderable":0},{"_id":"source/imgs/04acdded1bcb4dc6818e55be7838dc36.png","path":"imgs/04acdded1bcb4dc6818e55be7838dc36.png","modified":0,"renderable":0},{"_id":"source/imgs/050011baf7694e6f8e029d617274b4c5.png","path":"imgs/050011baf7694e6f8e029d617274b4c5.png","modified":0,"renderable":0},{"_id":"source/imgs/064dd050a8f644c0bcc6a3ff23565f97.png","path":"imgs/064dd050a8f644c0bcc6a3ff23565f97.png","modified":0,"renderable":0},{"_id":"source/imgs/06bb1763a47148cc8c74ca46ec66fcbe.png","path":"imgs/06bb1763a47148cc8c74ca46ec66fcbe.png","modified":0,"renderable":0},{"_id":"source/imgs/071f7b1d75294faa9789f01815f25fa0.png","path":"imgs/071f7b1d75294faa9789f01815f25fa0.png","modified":0,"renderable":0},{"_id":"source/imgs/0731bc95d135415e9b5ad45fae7a0e6d.png","path":"imgs/0731bc95d135415e9b5ad45fae7a0e6d.png","modified":0,"renderable":0},{"_id":"source/imgs/075a6d0cbd2a4be1bf15ddaa2f0b5bf2.png","path":"imgs/075a6d0cbd2a4be1bf15ddaa2f0b5bf2.png","modified":0,"renderable":0},{"_id":"source/imgs/07830b476af641af90b3934713ad04c1.png","path":"imgs/07830b476af641af90b3934713ad04c1.png","modified":0,"renderable":0},{"_id":"source/imgs/079325dede394c41b4a5bc39e1ece8a7.png","path":"imgs/079325dede394c41b4a5bc39e1ece8a7.png","modified":0,"renderable":0},{"_id":"source/imgs/07c0a274944f470ba6d20b5df8a62c3f.png","path":"imgs/07c0a274944f470ba6d20b5df8a62c3f.png","modified":0,"renderable":0},{"_id":"source/imgs/081f77e8e6d6428f80387f303c750866.png","path":"imgs/081f77e8e6d6428f80387f303c750866.png","modified":0,"renderable":0},{"_id":"source/imgs/0903e080715f42c49aa2e3dc4be85594.png","path":"imgs/0903e080715f42c49aa2e3dc4be85594.png","modified":0,"renderable":0},{"_id":"source/imgs/09ade9d3689c4b748e2312b2030cf390.png","path":"imgs/09ade9d3689c4b748e2312b2030cf390.png","modified":0,"renderable":0},{"_id":"source/imgs/09ff6519ba1340db8b9a61ea480f57b0.png","path":"imgs/09ff6519ba1340db8b9a61ea480f57b0.png","modified":0,"renderable":0},{"_id":"source/imgs/0a93bdaa9fe94dc5a1ea5ca1a7b6560c.png","path":"imgs/0a93bdaa9fe94dc5a1ea5ca1a7b6560c.png","modified":0,"renderable":0},{"_id":"source/imgs/0b528985f9c84a71a7c80cbc171fc351.png","path":"imgs/0b528985f9c84a71a7c80cbc171fc351.png","modified":0,"renderable":0},{"_id":"source/imgs/0bd071595c974b6eb36ed0b4ba7c22b3.png","path":"imgs/0bd071595c974b6eb36ed0b4ba7c22b3.png","modified":0,"renderable":0},{"_id":"source/imgs/0be2614c9e344dae9bfddf91d293525b.png","path":"imgs/0be2614c9e344dae9bfddf91d293525b.png","modified":0,"renderable":0},{"_id":"source/imgs/0c276dd1937c4e649bcbbc5a034a2b34.png","path":"imgs/0c276dd1937c4e649bcbbc5a034a2b34.png","modified":0,"renderable":0},{"_id":"source/imgs/0cf569ef6ff246ac8494992e2768b814.png","path":"imgs/0cf569ef6ff246ac8494992e2768b814.png","modified":0,"renderable":0},{"_id":"source/imgs/0d3e7a37ccb24c51bcfdc875f442774b.png","path":"imgs/0d3e7a37ccb24c51bcfdc875f442774b.png","modified":0,"renderable":0},{"_id":"source/imgs/0d87ab8a99ff4cfba6d30dfbe2a4cc6b.png","path":"imgs/0d87ab8a99ff4cfba6d30dfbe2a4cc6b.png","modified":0,"renderable":0},{"_id":"source/imgs/0e8108de34d14efdb7b72d13e37121ac.png","path":"imgs/0e8108de34d14efdb7b72d13e37121ac.png","modified":0,"renderable":0},{"_id":"source/imgs/0ed8b2854ce743ab80151ebbb15385ec.png","path":"imgs/0ed8b2854ce743ab80151ebbb15385ec.png","modified":0,"renderable":0},{"_id":"source/imgs/0ee7c29a050f4ff7b580e73d1d1932f7.png","path":"imgs/0ee7c29a050f4ff7b580e73d1d1932f7.png","modified":0,"renderable":0},{"_id":"source/imgs/0f677483d57d40f69267e8e4ef2d3b0e.png","path":"imgs/0f677483d57d40f69267e8e4ef2d3b0e.png","modified":0,"renderable":0},{"_id":"source/imgs/10c5f00eda3c48d29258f27106bdd07d.png","path":"imgs/10c5f00eda3c48d29258f27106bdd07d.png","modified":0,"renderable":0},{"_id":"source/imgs/124a2ee904c54b6fb2e7f064b8d05946.png","path":"imgs/124a2ee904c54b6fb2e7f064b8d05946.png","modified":0,"renderable":0},{"_id":"source/imgs/130d8810ed5248ecb34cbe8c2082c4c2.png","path":"imgs/130d8810ed5248ecb34cbe8c2082c4c2.png","modified":0,"renderable":0},{"_id":"source/imgs/1324acbb236147538ee6038c283548cf.png","path":"imgs/1324acbb236147538ee6038c283548cf.png","modified":0,"renderable":0},{"_id":"source/imgs/14bc0f5d968347b3adbeeba4dab57aed.png","path":"imgs/14bc0f5d968347b3adbeeba4dab57aed.png","modified":0,"renderable":0},{"_id":"source/imgs/14c0aaf10ecf4fa8948b749f56399177.png","path":"imgs/14c0aaf10ecf4fa8948b749f56399177.png","modified":0,"renderable":0},{"_id":"source/imgs/14ea14ac2d4d4295adf4cde4a6a07c50.png","path":"imgs/14ea14ac2d4d4295adf4cde4a6a07c50.png","modified":0,"renderable":0},{"_id":"source/imgs/15e5c3208d1d4b9db3332d27f3c5490d.png","path":"imgs/15e5c3208d1d4b9db3332d27f3c5490d.png","modified":0,"renderable":0},{"_id":"source/imgs/174737fba5f442d6977bcd22bb2805b1.png","path":"imgs/174737fba5f442d6977bcd22bb2805b1.png","modified":0,"renderable":0},{"_id":"source/imgs/18409a0a70274ab69df4664311f0aa93.png","path":"imgs/18409a0a70274ab69df4664311f0aa93.png","modified":0,"renderable":0},{"_id":"source/imgs/1854cdecb8204130ae6ede9bf856cd64.png","path":"imgs/1854cdecb8204130ae6ede9bf856cd64.png","modified":0,"renderable":0},{"_id":"source/imgs/1902c6bb31c6405ca1c5c77e9f35fe1a.png","path":"imgs/1902c6bb31c6405ca1c5c77e9f35fe1a.png","modified":0,"renderable":0},{"_id":"source/imgs/1b26737844194fc09f923cdd6b3b8a92.png","path":"imgs/1b26737844194fc09f923cdd6b3b8a92.png","modified":0,"renderable":0},{"_id":"source/imgs/1db5249a8fc94922ae2a429731b36262.png","path":"imgs/1db5249a8fc94922ae2a429731b36262.png","modified":0,"renderable":0},{"_id":"source/imgs/207986b2db8a442c8f8fdb2435a0ad2a.png","path":"imgs/207986b2db8a442c8f8fdb2435a0ad2a.png","modified":0,"renderable":0},{"_id":"source/imgs/2115d5d726604ad6b04a09a05833413d.png","path":"imgs/2115d5d726604ad6b04a09a05833413d.png","modified":0,"renderable":0},{"_id":"source/imgs/21e20e18c0224cfeaebd4a03966d320a.png","path":"imgs/21e20e18c0224cfeaebd4a03966d320a.png","modified":0,"renderable":0},{"_id":"source/imgs/22c8527da1d441afa6df86d050d08c09.png","path":"imgs/22c8527da1d441afa6df86d050d08c09.png","modified":0,"renderable":0},{"_id":"source/imgs/2427be496cb94155af84d9370af28118.png","path":"imgs/2427be496cb94155af84d9370af28118.png","modified":0,"renderable":0},{"_id":"source/imgs/2435791a1fdd44a4ad5778657f7ebb08.png","path":"imgs/2435791a1fdd44a4ad5778657f7ebb08.png","modified":0,"renderable":0},{"_id":"source/imgs/270ab36fdc864158b7d47e8f5ebc4759.png","path":"imgs/270ab36fdc864158b7d47e8f5ebc4759.png","modified":0,"renderable":0},{"_id":"source/imgs/279f927c1695458eb47fc01391cf08c2.png","path":"imgs/279f927c1695458eb47fc01391cf08c2.png","modified":0,"renderable":0},{"_id":"source/imgs/286bc40bf9dc4c60b5f38b9bf17ca7f7.png","path":"imgs/286bc40bf9dc4c60b5f38b9bf17ca7f7.png","modified":0,"renderable":0},{"_id":"source/imgs/296a67578b674e6bbbc08b04d8714646.png","path":"imgs/296a67578b674e6bbbc08b04d8714646.png","modified":0,"renderable":0},{"_id":"source/imgs/29b6b15893e049a78bcfd9dababd7be7.png","path":"imgs/29b6b15893e049a78bcfd9dababd7be7.png","modified":0,"renderable":0},{"_id":"source/imgs/2a9e90766352487e9445f0db4706ff0c.png","path":"imgs/2a9e90766352487e9445f0db4706ff0c.png","modified":0,"renderable":0},{"_id":"source/imgs/2ae47ba735a443b39c114dd962dd39d0.png","path":"imgs/2ae47ba735a443b39c114dd962dd39d0.png","modified":0,"renderable":0},{"_id":"source/imgs/2aec0f4ee07846c0b7eabf3672691b57.png","path":"imgs/2aec0f4ee07846c0b7eabf3672691b57.png","modified":0,"renderable":0},{"_id":"source/imgs/2b9ca4a010e54d8ca142e68c9eb2f26b.png","path":"imgs/2b9ca4a010e54d8ca142e68c9eb2f26b.png","modified":0,"renderable":0},{"_id":"source/imgs/2bb45eb7f59d40f381a2ad904fa739ea.png","path":"imgs/2bb45eb7f59d40f381a2ad904fa739ea.png","modified":0,"renderable":0},{"_id":"source/imgs/2bcde11c433a42f1892bfd71b6f856c4.png","path":"imgs/2bcde11c433a42f1892bfd71b6f856c4.png","modified":0,"renderable":0},{"_id":"source/imgs/2bd6fecf240e4212a15e1aba62e459a7.png","path":"imgs/2bd6fecf240e4212a15e1aba62e459a7.png","modified":0,"renderable":0},{"_id":"source/imgs/2cac1920e79d41f692a0a3690999cdbb.png","path":"imgs/2cac1920e79d41f692a0a3690999cdbb.png","modified":0,"renderable":0},{"_id":"source/imgs/2e037560cee54fb099ac6ef1a7ab1817.png","path":"imgs/2e037560cee54fb099ac6ef1a7ab1817.png","modified":0,"renderable":0},{"_id":"source/imgs/2eb00def85fa432d97392428410ab592.png","path":"imgs/2eb00def85fa432d97392428410ab592.png","modified":0,"renderable":0},{"_id":"source/imgs/30f4747ae988400594cdf1b5388d6ff5.png","path":"imgs/30f4747ae988400594cdf1b5388d6ff5.png","modified":0,"renderable":0},{"_id":"source/imgs/3209f6a93a2248ca9199a589e075ee45.png","path":"imgs/3209f6a93a2248ca9199a589e075ee45.png","modified":0,"renderable":0},{"_id":"source/imgs/324fd58b217e4370a03fdb879e935aa6.png","path":"imgs/324fd58b217e4370a03fdb879e935aa6.png","modified":0,"renderable":0},{"_id":"source/imgs/32d120de176346f1829c177e1c43fd3e.png","path":"imgs/32d120de176346f1829c177e1c43fd3e.png","modified":0,"renderable":0},{"_id":"source/imgs/32f696318ea74823ae25ef6f8c51453b.png","path":"imgs/32f696318ea74823ae25ef6f8c51453b.png","modified":0,"renderable":0},{"_id":"source/imgs/3301aafe08f84015a75606a2239dc394.png","path":"imgs/3301aafe08f84015a75606a2239dc394.png","modified":0,"renderable":0},{"_id":"source/imgs/336a595311e841fd880a6c0ef46682e1.png","path":"imgs/336a595311e841fd880a6c0ef46682e1.png","modified":0,"renderable":0},{"_id":"source/imgs/35379bb1ef624db4868454ba2df4a31a.png","path":"imgs/35379bb1ef624db4868454ba2df4a31a.png","modified":0,"renderable":0},{"_id":"source/imgs/3709d5cc20cd4f3b925887c5a9c72d51.png","path":"imgs/3709d5cc20cd4f3b925887c5a9c72d51.png","modified":0,"renderable":0},{"_id":"source/imgs/370adb6836494a0a99a708e5c8ecbe3a.png","path":"imgs/370adb6836494a0a99a708e5c8ecbe3a.png","modified":0,"renderable":0},{"_id":"source/imgs/378d8fac26cd462790f75e6ae448bf23.png","path":"imgs/378d8fac26cd462790f75e6ae448bf23.png","modified":0,"renderable":0},{"_id":"source/imgs/37ecaffba91e468f88930691a18d37e1.png","path":"imgs/37ecaffba91e468f88930691a18d37e1.png","modified":0,"renderable":0},{"_id":"source/imgs/3ad8a4dec3364ba582900fe5428c8518.png","path":"imgs/3ad8a4dec3364ba582900fe5428c8518.png","modified":0,"renderable":0},{"_id":"source/imgs/3b9187f6322240598ef5bb8d761c8509.png","path":"imgs/3b9187f6322240598ef5bb8d761c8509.png","modified":0,"renderable":0},{"_id":"source/imgs/3c1031d4444443d0b24ef31233934c57.png","path":"imgs/3c1031d4444443d0b24ef31233934c57.png","modified":0,"renderable":0},{"_id":"source/imgs/3c5cb59c512245b8bf051524553a8083.png","path":"imgs/3c5cb59c512245b8bf051524553a8083.png","modified":0,"renderable":0},{"_id":"source/imgs/3d01e29ce7914c27ad5e62d5fce649d6.png","path":"imgs/3d01e29ce7914c27ad5e62d5fce649d6.png","modified":0,"renderable":0},{"_id":"source/imgs/3dd4d8486dbf41c5bb421fec5a1a3b39.png","path":"imgs/3dd4d8486dbf41c5bb421fec5a1a3b39.png","modified":0,"renderable":0},{"_id":"source/imgs/3de7200406054b6d9db56db980e0035a.png","path":"imgs/3de7200406054b6d9db56db980e0035a.png","modified":0,"renderable":0},{"_id":"source/imgs/3e77c54098c845749ec0c60ee14eeb74.png","path":"imgs/3e77c54098c845749ec0c60ee14eeb74.png","modified":0,"renderable":0},{"_id":"source/imgs/3f6abef66117405f98542802150a8ce5.png","path":"imgs/3f6abef66117405f98542802150a8ce5.png","modified":0,"renderable":0},{"_id":"source/imgs/40637a4f03594f4fb273c6a39ca04b62.png","path":"imgs/40637a4f03594f4fb273c6a39ca04b62.png","modified":0,"renderable":0},{"_id":"source/imgs/421da5155239416399fc34bc31930d0a.png","path":"imgs/421da5155239416399fc34bc31930d0a.png","modified":0,"renderable":0},{"_id":"source/imgs/439caa4a49de4742903a0761fb049db4.png","path":"imgs/439caa4a49de4742903a0761fb049db4.png","modified":0,"renderable":0},{"_id":"source/imgs/441d5fe819d241e0ae5c27a8dc5d05bb.png","path":"imgs/441d5fe819d241e0ae5c27a8dc5d05bb.png","modified":0,"renderable":0},{"_id":"source/imgs/471dff87c016460396407577efc1435c.png","path":"imgs/471dff87c016460396407577efc1435c.png","modified":0,"renderable":0},{"_id":"source/imgs/476fc30fc2fc4d75b5ae6477ceeeba44.png","path":"imgs/476fc30fc2fc4d75b5ae6477ceeeba44.png","modified":0,"renderable":0},{"_id":"source/imgs/47858ec75dee4b88b03b6329ce438d72.png","path":"imgs/47858ec75dee4b88b03b6329ce438d72.png","modified":0,"renderable":0},{"_id":"source/imgs/47adc712f1a34ef79eaf2b5eb691bcdc.png","path":"imgs/47adc712f1a34ef79eaf2b5eb691bcdc.png","modified":0,"renderable":0},{"_id":"source/imgs/4a38234af23e42f1bd98c2c2397c3dc1.png","path":"imgs/4a38234af23e42f1bd98c2c2397c3dc1.png","modified":0,"renderable":0},{"_id":"source/imgs/4a95dd017a6a4efa8f4abb4382afda1c.png","path":"imgs/4a95dd017a6a4efa8f4abb4382afda1c.png","modified":0,"renderable":0},{"_id":"source/imgs/4ad9b45c288243cc871d388a9e4ee02c.png","path":"imgs/4ad9b45c288243cc871d388a9e4ee02c.png","modified":0,"renderable":0},{"_id":"source/imgs/4b2e4540dcc440fc95a8bb27c35ece17.png","path":"imgs/4b2e4540dcc440fc95a8bb27c35ece17.png","modified":0,"renderable":0},{"_id":"source/imgs/4f4655e4f3064e6ca0929d75fbdf93ab.png","path":"imgs/4f4655e4f3064e6ca0929d75fbdf93ab.png","modified":0,"renderable":0},{"_id":"source/imgs/4f79340e5802405c8528233799680046.png","path":"imgs/4f79340e5802405c8528233799680046.png","modified":0,"renderable":0},{"_id":"source/imgs/4fcd03d8db8d4007845f8aa23a9bcb93.png","path":"imgs/4fcd03d8db8d4007845f8aa23a9bcb93.png","modified":0,"renderable":0},{"_id":"source/imgs/503f78a59ccd4cb58576e9fc02767ecd.png","path":"imgs/503f78a59ccd4cb58576e9fc02767ecd.png","modified":0,"renderable":0},{"_id":"source/imgs/52350b7339754e268c6d51be4abbbd53.png","path":"imgs/52350b7339754e268c6d51be4abbbd53.png","modified":0,"renderable":0},{"_id":"source/imgs/54d69cada2784fccb0e1e17a443a57d2.png","path":"imgs/54d69cada2784fccb0e1e17a443a57d2.png","modified":0,"renderable":0},{"_id":"source/imgs/566bb1081f7a4747a00139f8e144116e.png","path":"imgs/566bb1081f7a4747a00139f8e144116e.png","modified":0,"renderable":0},{"_id":"source/imgs/5684e00d041c465abf5555c420de8e70.png","path":"imgs/5684e00d041c465abf5555c420de8e70.png","modified":0,"renderable":0},{"_id":"source/imgs/578e5e1e1c6a4f34a9d30ab36f34dcce.png","path":"imgs/578e5e1e1c6a4f34a9d30ab36f34dcce.png","modified":0,"renderable":0},{"_id":"source/imgs/584137cb90ef45a98d2887a4fe5579e8.png","path":"imgs/584137cb90ef45a98d2887a4fe5579e8.png","modified":0,"renderable":0},{"_id":"source/imgs/5a4ba5ff4494443f8dd7ec51077522b7.png","path":"imgs/5a4ba5ff4494443f8dd7ec51077522b7.png","modified":0,"renderable":0},{"_id":"source/imgs/5ab6d4336eae4c378909d6f4fc8e9560.png","path":"imgs/5ab6d4336eae4c378909d6f4fc8e9560.png","modified":0,"renderable":0},{"_id":"source/imgs/5b0a81f603a74a308024c7f56ffb4ba5.png","path":"imgs/5b0a81f603a74a308024c7f56ffb4ba5.png","modified":0,"renderable":0},{"_id":"source/imgs/5b1a7835440741e788b41f42c44210ca.png","path":"imgs/5b1a7835440741e788b41f42c44210ca.png","modified":0,"renderable":0},{"_id":"source/imgs/5c1163271f3d47b4a911d8b08e248644.png","path":"imgs/5c1163271f3d47b4a911d8b08e248644.png","modified":0,"renderable":0},{"_id":"source/imgs/5cd0b10a948842ae91a979859ff8ac1e.png","path":"imgs/5cd0b10a948842ae91a979859ff8ac1e.png","modified":0,"renderable":0},{"_id":"source/imgs/5d28b35a63a94d68a8962c1baa5a6418.png","path":"imgs/5d28b35a63a94d68a8962c1baa5a6418.png","modified":0,"renderable":0},{"_id":"source/imgs/5eed898b39224137bea299ec92cf5a8a.png","path":"imgs/5eed898b39224137bea299ec92cf5a8a.png","modified":0,"renderable":0},{"_id":"source/imgs/5eefdcf6ba2440b1b0669f673f8c95b6.png","path":"imgs/5eefdcf6ba2440b1b0669f673f8c95b6.png","modified":0,"renderable":0},{"_id":"source/imgs/607c8312c8c041f98238c8207f7d6486.png","path":"imgs/607c8312c8c041f98238c8207f7d6486.png","modified":0,"renderable":0},{"_id":"source/imgs/60e2c179cd9d4caa9cfd576459bd8a08.png","path":"imgs/60e2c179cd9d4caa9cfd576459bd8a08.png","modified":0,"renderable":0},{"_id":"source/imgs/627e6d35689843cda4b8f515bc81edd6.png","path":"imgs/627e6d35689843cda4b8f515bc81edd6.png","modified":0,"renderable":0},{"_id":"source/imgs/62e213d1a84048648ebc55b40cef1913.png","path":"imgs/62e213d1a84048648ebc55b40cef1913.png","modified":0,"renderable":0},{"_id":"source/imgs/658415d364934e01a794eb8c1642a252.png","path":"imgs/658415d364934e01a794eb8c1642a252.png","modified":0,"renderable":0},{"_id":"source/imgs/661fa47033d847afb2b799732ff39033.png","path":"imgs/661fa47033d847afb2b799732ff39033.png","modified":0,"renderable":0},{"_id":"source/imgs/68b2855217d14296af6aa3e10dfa18d7.png","path":"imgs/68b2855217d14296af6aa3e10dfa18d7.png","modified":0,"renderable":0},{"_id":"source/imgs/6966a88766614ea5a249363a6f129797.png","path":"imgs/6966a88766614ea5a249363a6f129797.png","modified":0,"renderable":0},{"_id":"source/imgs/69bd0195c4084280966f95ae944744c2.png","path":"imgs/69bd0195c4084280966f95ae944744c2.png","modified":0,"renderable":0},{"_id":"source/imgs/6b6c08c2c5fa427b8fb4097dae06489e.png","path":"imgs/6b6c08c2c5fa427b8fb4097dae06489e.png","modified":0,"renderable":0},{"_id":"source/imgs/6c32109e9dc845c1843613ffd8095fe1.png","path":"imgs/6c32109e9dc845c1843613ffd8095fe1.png","modified":0,"renderable":0},{"_id":"source/imgs/6cea5abb144a400aa90e04c5d2477863.png","path":"imgs/6cea5abb144a400aa90e04c5d2477863.png","modified":0,"renderable":0},{"_id":"source/imgs/6d3566e0ddcd4bbdab3d5a39d04c918c.png","path":"imgs/6d3566e0ddcd4bbdab3d5a39d04c918c.png","modified":0,"renderable":0},{"_id":"source/imgs/6d8aa40eee8a404c894642e4c613d7ff.png","path":"imgs/6d8aa40eee8a404c894642e4c613d7ff.png","modified":0,"renderable":0},{"_id":"source/imgs/6de6c2ae614f4716af6c0ba282fb0e8f.png","path":"imgs/6de6c2ae614f4716af6c0ba282fb0e8f.png","modified":0,"renderable":0},{"_id":"source/imgs/6df0bf2c4e544049831f180910faabcd.png","path":"imgs/6df0bf2c4e544049831f180910faabcd.png","modified":0,"renderable":0},{"_id":"source/imgs/6e0b1b1548574754a0e3b59abe3996b7.png","path":"imgs/6e0b1b1548574754a0e3b59abe3996b7.png","modified":0,"renderable":0},{"_id":"source/imgs/6e3bfe5b9ff64cea9530258638e7adc9.png","path":"imgs/6e3bfe5b9ff64cea9530258638e7adc9.png","modified":0,"renderable":0},{"_id":"source/imgs/6ec7d114aa1248869f6a08e87ee57878.png","path":"imgs/6ec7d114aa1248869f6a08e87ee57878.png","modified":0,"renderable":0},{"_id":"source/imgs/6fd8a8300c434df5968d87088c4d41b3.png","path":"imgs/6fd8a8300c434df5968d87088c4d41b3.png","modified":0,"renderable":0},{"_id":"source/imgs/702ab02646dc49fb893867edb9fd0142.png","path":"imgs/702ab02646dc49fb893867edb9fd0142.png","modified":0,"renderable":0},{"_id":"source/imgs/71ba173548ce4f9eb5e1e84cea9501eb.png","path":"imgs/71ba173548ce4f9eb5e1e84cea9501eb.png","modified":0,"renderable":0},{"_id":"source/imgs/744095f84fc54d0faa6a002ecd90045f.png","path":"imgs/744095f84fc54d0faa6a002ecd90045f.png","modified":0,"renderable":0},{"_id":"source/imgs/74906f4b22a24b28800bbbb6c7bcfd40.png","path":"imgs/74906f4b22a24b28800bbbb6c7bcfd40.png","modified":0,"renderable":0},{"_id":"source/imgs/751b1d25cf79455ba6d7e3edcffeda52.png","path":"imgs/751b1d25cf79455ba6d7e3edcffeda52.png","modified":0,"renderable":0},{"_id":"source/imgs/754b8961911e4a0e8aae1b9b7a77b4bd.png","path":"imgs/754b8961911e4a0e8aae1b9b7a77b4bd.png","modified":0,"renderable":0},{"_id":"source/imgs/75fabe11d8b948718b89fc10e8b82e17.png","path":"imgs/75fabe11d8b948718b89fc10e8b82e17.png","modified":0,"renderable":0},{"_id":"source/imgs/76bd8f8d77934079b3d1921ee8c65baa.png","path":"imgs/76bd8f8d77934079b3d1921ee8c65baa.png","modified":0,"renderable":0},{"_id":"source/imgs/76f87b5543964d0f95c43cb948a0aaa9.png","path":"imgs/76f87b5543964d0f95c43cb948a0aaa9.png","modified":0,"renderable":0},{"_id":"source/imgs/7711dd594c064fc48111b158c2c110b9.png","path":"imgs/7711dd594c064fc48111b158c2c110b9.png","modified":0,"renderable":0},{"_id":"source/imgs/77a53feae9054e88b68b47f8291f899d.png","path":"imgs/77a53feae9054e88b68b47f8291f899d.png","modified":0,"renderable":0},{"_id":"source/imgs/77e251176fed4a97a7ca946262916095.png","path":"imgs/77e251176fed4a97a7ca946262916095.png","modified":0,"renderable":0},{"_id":"source/imgs/790c475ec884462bbe2151edd7b0fe43.png","path":"imgs/790c475ec884462bbe2151edd7b0fe43.png","modified":0,"renderable":0},{"_id":"source/imgs/79d57ee723c0414fa58067db9964da81.png","path":"imgs/79d57ee723c0414fa58067db9964da81.png","modified":0,"renderable":0},{"_id":"source/imgs/79fe9b3629fa4bda83dcb76fa774fa3a.png","path":"imgs/79fe9b3629fa4bda83dcb76fa774fa3a.png","modified":0,"renderable":0},{"_id":"source/imgs/7ebeb02d90d54c5c88501bab914a2dcd.png","path":"imgs/7ebeb02d90d54c5c88501bab914a2dcd.png","modified":0,"renderable":0},{"_id":"source/imgs/7ed844989c4640a9be7cc2922107c3d3.png","path":"imgs/7ed844989c4640a9be7cc2922107c3d3.png","modified":0,"renderable":0},{"_id":"source/imgs/7fdde6d3d1044fed90b9d23aba1e6765.png","path":"imgs/7fdde6d3d1044fed90b9d23aba1e6765.png","modified":0,"renderable":0},{"_id":"source/imgs/80f00eaaeaad4fe582d2b84708c8cccd.png","path":"imgs/80f00eaaeaad4fe582d2b84708c8cccd.png","modified":0,"renderable":0},{"_id":"source/imgs/81a67e5d708a4e75af8b9a9fc7c2d317.png","path":"imgs/81a67e5d708a4e75af8b9a9fc7c2d317.png","modified":0,"renderable":0},{"_id":"source/imgs/82392bd016a74c298191ef55fff8d75c.png","path":"imgs/82392bd016a74c298191ef55fff8d75c.png","modified":0,"renderable":0},{"_id":"source/imgs/83ac44a2a5984f138e3b756c1675d8be.png","path":"imgs/83ac44a2a5984f138e3b756c1675d8be.png","modified":0,"renderable":0},{"_id":"source/imgs/83cd1beeb0ba4350b6216de5022b1217.png","path":"imgs/83cd1beeb0ba4350b6216de5022b1217.png","modified":0,"renderable":0},{"_id":"source/imgs/8616c565ebff4ce8a4b478c7937e8698.png","path":"imgs/8616c565ebff4ce8a4b478c7937e8698.png","modified":0,"renderable":0},{"_id":"source/imgs/864e1f106d2d4687978cfcf98ec59a4d.png","path":"imgs/864e1f106d2d4687978cfcf98ec59a4d.png","modified":0,"renderable":0},{"_id":"source/imgs/89bd18d28389452c962cd3384ac18434.png","path":"imgs/89bd18d28389452c962cd3384ac18434.png","modified":0,"renderable":0},{"_id":"source/imgs/89ff069b244a4e5d8073f425cab0a975.png","path":"imgs/89ff069b244a4e5d8073f425cab0a975.png","modified":0,"renderable":0},{"_id":"source/imgs/8c6de6a98ca945b18885737a76a0bc37.png","path":"imgs/8c6de6a98ca945b18885737a76a0bc37.png","modified":0,"renderable":0},{"_id":"source/imgs/8f0428ba4af94e59b6081a6b83759acd.png","path":"imgs/8f0428ba4af94e59b6081a6b83759acd.png","modified":0,"renderable":0},{"_id":"source/imgs/8f3f8dbd4a4e4a80802e449f0caaca28.png","path":"imgs/8f3f8dbd4a4e4a80802e449f0caaca28.png","modified":0,"renderable":0},{"_id":"source/imgs/8f8b19af5c424949a663d44f3d02bff2.png","path":"imgs/8f8b19af5c424949a663d44f3d02bff2.png","modified":0,"renderable":0},{"_id":"source/imgs/8fc2530298d944708d0ab28d9deca363.png","path":"imgs/8fc2530298d944708d0ab28d9deca363.png","modified":0,"renderable":0},{"_id":"source/imgs/902d670f367a43bd9847e3e14eae3c0b.png","path":"imgs/902d670f367a43bd9847e3e14eae3c0b.png","modified":0,"renderable":0},{"_id":"source/imgs/90f63a48a6cc42b7aedab51da67cf398.png","path":"imgs/90f63a48a6cc42b7aedab51da67cf398.png","modified":0,"renderable":0},{"_id":"source/imgs/914e69f427bc412a90384306391d10bf.png","path":"imgs/914e69f427bc412a90384306391d10bf.png","modified":0,"renderable":0},{"_id":"source/imgs/93c65034030940bca0c2f06a6cb5a3d2.png","path":"imgs/93c65034030940bca0c2f06a6cb5a3d2.png","modified":0,"renderable":0},{"_id":"source/imgs/987a8555af9c415083f9507ef7553f0b.png","path":"imgs/987a8555af9c415083f9507ef7553f0b.png","modified":0,"renderable":0},{"_id":"source/imgs/993504fc4765448fbba439d0f2af30aa.png","path":"imgs/993504fc4765448fbba439d0f2af30aa.png","modified":0,"renderable":0},{"_id":"source/imgs/999db97b32c64a63b4411bda28308618.png","path":"imgs/999db97b32c64a63b4411bda28308618.png","modified":0,"renderable":0},{"_id":"source/imgs/9a1f879dc0884635838d29764d08a6de.png","path":"imgs/9a1f879dc0884635838d29764d08a6de.png","modified":0,"renderable":0},{"_id":"source/imgs/9a9e3fecab1a430099f67a25ecf96322.png","path":"imgs/9a9e3fecab1a430099f67a25ecf96322.png","modified":0,"renderable":0},{"_id":"source/imgs/9bdccc09f7be445cb0edef1627f5c567.png","path":"imgs/9bdccc09f7be445cb0edef1627f5c567.png","modified":0,"renderable":0},{"_id":"source/imgs/9cae13a7088c416281438340e15e85ba.png","path":"imgs/9cae13a7088c416281438340e15e85ba.png","modified":0,"renderable":0},{"_id":"source/imgs/9f72aa0dd7eb47db9af5f3d0d6a29c87.png","path":"imgs/9f72aa0dd7eb47db9af5f3d0d6a29c87.png","modified":0,"renderable":0},{"_id":"source/imgs/a03b864b3bed427592c6c363019b0943.png","path":"imgs/a03b864b3bed427592c6c363019b0943.png","modified":0,"renderable":0},{"_id":"source/imgs/a0a1f189ea544841a6de2146387bc0a4.png","path":"imgs/a0a1f189ea544841a6de2146387bc0a4.png","modified":0,"renderable":0},{"_id":"source/imgs/a2876bf6aa8c48179ab7bf61cc768452.png","path":"imgs/a2876bf6aa8c48179ab7bf61cc768452.png","modified":0,"renderable":0},{"_id":"source/imgs/a30fe3ee74af45c1adf9ca78fac1f150.png","path":"imgs/a30fe3ee74af45c1adf9ca78fac1f150.png","modified":0,"renderable":0},{"_id":"source/imgs/a3745c91af4948b8828204411aba625f.png","path":"imgs/a3745c91af4948b8828204411aba625f.png","modified":0,"renderable":0},{"_id":"source/imgs/a42f3e72cd64454e94cd03b2bce634fe.png","path":"imgs/a42f3e72cd64454e94cd03b2bce634fe.png","modified":0,"renderable":0},{"_id":"source/imgs/a5a182f1f49b425b8a240459655c066b.png","path":"imgs/a5a182f1f49b425b8a240459655c066b.png","modified":0,"renderable":0},{"_id":"source/imgs/a6d3f98c7b4548f09e762d86df162d37.png","path":"imgs/a6d3f98c7b4548f09e762d86df162d37.png","modified":0,"renderable":0},{"_id":"source/imgs/a71e28d5fa794601a6dd09a9f3832958.png","path":"imgs/a71e28d5fa794601a6dd09a9f3832958.png","modified":0,"renderable":0},{"_id":"source/imgs/a7739d7ba24a40dda484ee0823b99f4e.png","path":"imgs/a7739d7ba24a40dda484ee0823b99f4e.png","modified":0,"renderable":0},{"_id":"source/imgs/a777431b0212407d999884280b44aaa1.png","path":"imgs/a777431b0212407d999884280b44aaa1.png","modified":0,"renderable":0},{"_id":"source/imgs/a7c6fea42810464aa34b8a331ac925af.png","path":"imgs/a7c6fea42810464aa34b8a331ac925af.png","modified":0,"renderable":0},{"_id":"source/imgs/a88f793d5035421bae5bf09dc91d0444.png","path":"imgs/a88f793d5035421bae5bf09dc91d0444.png","modified":0,"renderable":0},{"_id":"source/imgs/aae076ba4570447aa47c7242c4be29f5.png","path":"imgs/aae076ba4570447aa47c7242c4be29f5.png","modified":0,"renderable":0},{"_id":"source/imgs/ab523cf7253e43bfb13334615183db2c.png","path":"imgs/ab523cf7253e43bfb13334615183db2c.png","modified":0,"renderable":0},{"_id":"source/imgs/aba1b3919d7f434c8c4c41eb65dde1d7.png","path":"imgs/aba1b3919d7f434c8c4c41eb65dde1d7.png","modified":0,"renderable":0},{"_id":"source/imgs/ac27b01d800e49c6ab28d7b360be367b.png","path":"imgs/ac27b01d800e49c6ab28d7b360be367b.png","modified":0,"renderable":0},{"_id":"source/imgs/ac8f8d2c1c02487e9ae9489cefac018a.png","path":"imgs/ac8f8d2c1c02487e9ae9489cefac018a.png","modified":0,"renderable":0},{"_id":"source/imgs/ad653329549a4673a85f0bff18ac4bfd.png","path":"imgs/ad653329549a4673a85f0bff18ac4bfd.png","modified":0,"renderable":0},{"_id":"source/imgs/aeddca64831a45309a3e99a9d6ac3aa0.png","path":"imgs/aeddca64831a45309a3e99a9d6ac3aa0.png","modified":0,"renderable":0},{"_id":"source/imgs/af4554dd19ce4a6aa911769fc36a839f.png","path":"imgs/af4554dd19ce4a6aa911769fc36a839f.png","modified":0,"renderable":0},{"_id":"source/imgs/afa38d71d32e47339603f1a510606961.png","path":"imgs/afa38d71d32e47339603f1a510606961.png","modified":0,"renderable":0},{"_id":"source/imgs/b14906e8bf9d42adabf68728b85f47cc.png","path":"imgs/b14906e8bf9d42adabf68728b85f47cc.png","modified":0,"renderable":0},{"_id":"source/imgs/b1b144ee16394b449e0d9cb9952ebcce.png","path":"imgs/b1b144ee16394b449e0d9cb9952ebcce.png","modified":0,"renderable":0},{"_id":"source/imgs/b2cffc1c128c453aa87bcc8c436b5edb.png","path":"imgs/b2cffc1c128c453aa87bcc8c436b5edb.png","modified":0,"renderable":0},{"_id":"source/imgs/b2f374a4c4bc4e7c8220819ea727b931.png","path":"imgs/b2f374a4c4bc4e7c8220819ea727b931.png","modified":0,"renderable":0},{"_id":"source/imgs/b30c992919e44b42b5837344a3ee85f5.png","path":"imgs/b30c992919e44b42b5837344a3ee85f5.png","modified":0,"renderable":0},{"_id":"source/imgs/b3ad6b12445348d59a136143f3d19b24.png","path":"imgs/b3ad6b12445348d59a136143f3d19b24.png","modified":0,"renderable":0},{"_id":"source/imgs/b4009d0f599c4ac39009eef3265d140e.png","path":"imgs/b4009d0f599c4ac39009eef3265d140e.png","modified":0,"renderable":0},{"_id":"source/imgs/b6ea9aea43b94d7a931c4180550f1f14.png","path":"imgs/b6ea9aea43b94d7a931c4180550f1f14.png","modified":0,"renderable":0},{"_id":"source/imgs/bb5d2fc3c7394c6fb05687546f49047b.png","path":"imgs/bb5d2fc3c7394c6fb05687546f49047b.png","modified":0,"renderable":0},{"_id":"source/imgs/bb7773a4f2124134b153436c3d9083a8.png","path":"imgs/bb7773a4f2124134b153436c3d9083a8.png","modified":0,"renderable":0},{"_id":"source/imgs/bbc47e5ba90344129027b9cf69933a11.png","path":"imgs/bbc47e5ba90344129027b9cf69933a11.png","modified":0,"renderable":0},{"_id":"source/imgs/bc2df772897746ab890b3fe9890677fb.png","path":"imgs/bc2df772897746ab890b3fe9890677fb.png","modified":0,"renderable":0},{"_id":"source/imgs/bf9e9b12206f47aaa241a0ab36fdce35.png","path":"imgs/bf9e9b12206f47aaa241a0ab36fdce35.png","modified":0,"renderable":0},{"_id":"source/imgs/bfb8a4db30f74136811c79d6a2063b74.png","path":"imgs/bfb8a4db30f74136811c79d6a2063b74.png","modified":0,"renderable":0},{"_id":"source/imgs/c3e1ac10e91f4a249046400414dd795c.png","path":"imgs/c3e1ac10e91f4a249046400414dd795c.png","modified":0,"renderable":0},{"_id":"source/imgs/c70711d142154a3f8681fe8339ac5f22.png","path":"imgs/c70711d142154a3f8681fe8339ac5f22.png","modified":0,"renderable":0},{"_id":"source/imgs/c723562b8e9c44e1bec04f299dc10034.png","path":"imgs/c723562b8e9c44e1bec04f299dc10034.png","modified":0,"renderable":0},{"_id":"source/imgs/c83d1f4b443f480f8c579f6ad5651e88.png","path":"imgs/c83d1f4b443f480f8c579f6ad5651e88.png","modified":0,"renderable":0},{"_id":"source/imgs/c9dba75186da46c384c5783cca062791.png","path":"imgs/c9dba75186da46c384c5783cca062791.png","modified":0,"renderable":0},{"_id":"source/imgs/ca28f113fdbf4f3a8803fcff7e67687e.png","path":"imgs/ca28f113fdbf4f3a8803fcff7e67687e.png","modified":0,"renderable":0},{"_id":"source/imgs/ca7ca0ea83704218b251c1d867dfc2fd.png","path":"imgs/ca7ca0ea83704218b251c1d867dfc2fd.png","modified":0,"renderable":0},{"_id":"source/imgs/cd9fd718405249d7b843d4d30271f96a.png","path":"imgs/cd9fd718405249d7b843d4d30271f96a.png","modified":0,"renderable":0},{"_id":"source/imgs/cddfa26a428743cc8389ba3ccf05f2c5.png","path":"imgs/cddfa26a428743cc8389ba3ccf05f2c5.png","modified":0,"renderable":0},{"_id":"source/imgs/ce724a5dffb94210bc95e6efedaef78d.png","path":"imgs/ce724a5dffb94210bc95e6efedaef78d.png","modified":0,"renderable":0},{"_id":"source/imgs/cedbde566e724fbc9aeb58746042da1b.png","path":"imgs/cedbde566e724fbc9aeb58746042da1b.png","modified":0,"renderable":0},{"_id":"source/imgs/cf06032c734549a09510f6424aaa5b81.png","path":"imgs/cf06032c734549a09510f6424aaa5b81.png","modified":0,"renderable":0},{"_id":"source/imgs/d02225b4919f4ea2adf6be3a0d35f97e.png","path":"imgs/d02225b4919f4ea2adf6be3a0d35f97e.png","modified":0,"renderable":0},{"_id":"source/imgs/d0497dc61b2a4607abca4bef7bcc1291.png","path":"imgs/d0497dc61b2a4607abca4bef7bcc1291.png","modified":0,"renderable":0},{"_id":"source/imgs/d0e700cafcb646fca5460f7d268aa1b9.png","path":"imgs/d0e700cafcb646fca5460f7d268aa1b9.png","modified":0,"renderable":0},{"_id":"source/imgs/d1336902565d488a9abb3e3621db5c1d.png","path":"imgs/d1336902565d488a9abb3e3621db5c1d.png","modified":0,"renderable":0},{"_id":"source/imgs/d29604aaea8d405183b8273b0578eab3.png","path":"imgs/d29604aaea8d405183b8273b0578eab3.png","modified":0,"renderable":0},{"_id":"source/imgs/d2c1ca8234704e8cb918d7b53a008d00.png","path":"imgs/d2c1ca8234704e8cb918d7b53a008d00.png","modified":0,"renderable":0},{"_id":"source/imgs/d4a7b5a1fd644cbb8a63acc576a6708b.png","path":"imgs/d4a7b5a1fd644cbb8a63acc576a6708b.png","modified":0,"renderable":0},{"_id":"source/imgs/d55d28b03e5345b0a6d0b4e16968694a.png","path":"imgs/d55d28b03e5345b0a6d0b4e16968694a.png","modified":0,"renderable":0},{"_id":"source/imgs/d5a73937beb048adb64124aa285ec196.png","path":"imgs/d5a73937beb048adb64124aa285ec196.png","modified":0,"renderable":0},{"_id":"source/imgs/d642f69551e74e95b50d02aacc6e3148.png","path":"imgs/d642f69551e74e95b50d02aacc6e3148.png","modified":0,"renderable":0},{"_id":"source/imgs/d689027c2c594f89b566a1e2c5465887.png","path":"imgs/d689027c2c594f89b566a1e2c5465887.png","modified":0,"renderable":0},{"_id":"source/imgs/d6c862c665f04645b862bdcf3158a82b.png","path":"imgs/d6c862c665f04645b862bdcf3158a82b.png","modified":0,"renderable":0},{"_id":"source/imgs/d886abe69e114dddb8a1c6235046d729.png","path":"imgs/d886abe69e114dddb8a1c6235046d729.png","modified":0,"renderable":0},{"_id":"source/imgs/d9f5150d7a604f33874fe565cd684888.png","path":"imgs/d9f5150d7a604f33874fe565cd684888.png","modified":0,"renderable":0},{"_id":"source/imgs/dd6b2573899b44ba945a1763a0cfa88e.png","path":"imgs/dd6b2573899b44ba945a1763a0cfa88e.png","modified":0,"renderable":0},{"_id":"source/imgs/dece515d4cda456cb685723dc7715a50.png","path":"imgs/dece515d4cda456cb685723dc7715a50.png","modified":0,"renderable":0},{"_id":"source/imgs/e00ad4c11d534af69efa593d6876fabf.png","path":"imgs/e00ad4c11d534af69efa593d6876fabf.png","modified":0,"renderable":0},{"_id":"source/imgs/e01b6f56c7ee4723811457dc17ac563c.png","path":"imgs/e01b6f56c7ee4723811457dc17ac563c.png","modified":0,"renderable":0},{"_id":"source/imgs/e03c00247a8d44febb9a8f79bade6c66.png","path":"imgs/e03c00247a8d44febb9a8f79bade6c66.png","modified":0,"renderable":0},{"_id":"source/imgs/e0c516bdfadb4be5b800d09bfce3e6b8.png","path":"imgs/e0c516bdfadb4be5b800d09bfce3e6b8.png","modified":0,"renderable":0},{"_id":"source/imgs/e0e722be9ff347c79397261498aa2a3d.png","path":"imgs/e0e722be9ff347c79397261498aa2a3d.png","modified":0,"renderable":0},{"_id":"source/imgs/e27249efe15b4c27b00bb6e5096c23d9.png","path":"imgs/e27249efe15b4c27b00bb6e5096c23d9.png","modified":0,"renderable":0},{"_id":"source/imgs/e390b931693b43798877d4879c10b445.png","path":"imgs/e390b931693b43798877d4879c10b445.png","modified":0,"renderable":0},{"_id":"source/imgs/e3d7b03357a54239877eb4a9e93b8aaf.png","path":"imgs/e3d7b03357a54239877eb4a9e93b8aaf.png","modified":0,"renderable":0},{"_id":"source/imgs/e50340b5c1cb474d9601715ee83b358f.png","path":"imgs/e50340b5c1cb474d9601715ee83b358f.png","modified":0,"renderable":0},{"_id":"source/imgs/e5730d7a315d4863b7ac568223aeefdc.png","path":"imgs/e5730d7a315d4863b7ac568223aeefdc.png","modified":0,"renderable":0},{"_id":"source/imgs/e8e040971352443faa8d18bd39eb37fa.png","path":"imgs/e8e040971352443faa8d18bd39eb37fa.png","modified":0,"renderable":0},{"_id":"source/imgs/e98140601dec461ca4b95b58c730f66f.png","path":"imgs/e98140601dec461ca4b95b58c730f66f.png","modified":0,"renderable":0},{"_id":"source/imgs/ee25feb848e4433c94b1ccce931b26b5.png","path":"imgs/ee25feb848e4433c94b1ccce931b26b5.png","modified":0,"renderable":0},{"_id":"source/imgs/ee559a33603348b7ab100b67c07cc172.png","path":"imgs/ee559a33603348b7ab100b67c07cc172.png","modified":0,"renderable":0},{"_id":"source/imgs/f0768686252f4a8589a36b0f587ee340.png","path":"imgs/f0768686252f4a8589a36b0f587ee340.png","modified":0,"renderable":0},{"_id":"source/imgs/f08580f2d68a41f89945c559ebb019b3.png","path":"imgs/f08580f2d68a41f89945c559ebb019b3.png","modified":0,"renderable":0},{"_id":"source/imgs/f13bc82ca99e439ba1faa9a552676d10.png","path":"imgs/f13bc82ca99e439ba1faa9a552676d10.png","modified":0,"renderable":0},{"_id":"source/imgs/f199300488514aa3847075b4b8541c02.png","path":"imgs/f199300488514aa3847075b4b8541c02.png","modified":0,"renderable":0},{"_id":"source/imgs/f1f6b49c0a334c908a0b12e0c1066146.png","path":"imgs/f1f6b49c0a334c908a0b12e0c1066146.png","modified":0,"renderable":0},{"_id":"source/imgs/f210a5129458480ebaeec2e859a5937a.png","path":"imgs/f210a5129458480ebaeec2e859a5937a.png","modified":0,"renderable":0},{"_id":"source/imgs/f2b797abc9154267b021031cc121ca9b.png","path":"imgs/f2b797abc9154267b021031cc121ca9b.png","modified":0,"renderable":0},{"_id":"source/imgs/f3e0b8a534b7484eb21fba6411ff6353.png","path":"imgs/f3e0b8a534b7484eb21fba6411ff6353.png","modified":0,"renderable":0},{"_id":"source/imgs/f575ae6f1be64e1cbde17d134299d262.png","path":"imgs/f575ae6f1be64e1cbde17d134299d262.png","modified":0,"renderable":0},{"_id":"source/imgs/f5ea49d308974526bb0f7708ed122536.png","path":"imgs/f5ea49d308974526bb0f7708ed122536.png","modified":0,"renderable":0},{"_id":"source/imgs/f5ebeffe23104624bd7cea053bad1fa2.png","path":"imgs/f5ebeffe23104624bd7cea053bad1fa2.png","modified":0,"renderable":0},{"_id":"source/imgs/f75403f63adc4770be663b727db0dc72.png","path":"imgs/f75403f63adc4770be663b727db0dc72.png","modified":0,"renderable":0},{"_id":"source/imgs/f783efff2b084fc5b4a1f578d40f0cff.png","path":"imgs/f783efff2b084fc5b4a1f578d40f0cff.png","modified":0,"renderable":0},{"_id":"source/imgs/f7aeab1411a1476cab6094fa7d7c3038.png","path":"imgs/f7aeab1411a1476cab6094fa7d7c3038.png","modified":0,"renderable":0},{"_id":"source/imgs/f7ba852d33624024aa23082379214dbd.png","path":"imgs/f7ba852d33624024aa23082379214dbd.png","modified":0,"renderable":0},{"_id":"source/imgs/f7c1eace740044619142888b35fcb580.png","path":"imgs/f7c1eace740044619142888b35fcb580.png","modified":0,"renderable":0},{"_id":"source/imgs/f849f6db6f584dc6b27307ae1f738aa5.png","path":"imgs/f849f6db6f584dc6b27307ae1f738aa5.png","modified":0,"renderable":0},{"_id":"source/imgs/f877c9447b8447c2a70b2de3d7e87316.png","path":"imgs/f877c9447b8447c2a70b2de3d7e87316.png","modified":0,"renderable":0},{"_id":"source/imgs/f89dd471a85f4238949f7c0850cf121f.png","path":"imgs/f89dd471a85f4238949f7c0850cf121f.png","modified":0,"renderable":0},{"_id":"source/imgs/f904fc883f7942fd809e7e09c84ac5ef.png","path":"imgs/f904fc883f7942fd809e7e09c84ac5ef.png","modified":0,"renderable":0},{"_id":"source/imgs/fa66a173ce194fedbdd97c27d3715544.png","path":"imgs/fa66a173ce194fedbdd97c27d3715544.png","modified":0,"renderable":0},{"_id":"source/imgs/fab6f6cc9c23439fa4783422b7bd1784.png","path":"imgs/fab6f6cc9c23439fa4783422b7bd1784.png","modified":0,"renderable":0},{"_id":"source/imgs/fb1bc2b58f4c4fc2a1af5cdec46e6e97.png","path":"imgs/fb1bc2b58f4c4fc2a1af5cdec46e6e97.png","modified":0,"renderable":0},{"_id":"source/imgs/fb244a2e456a42569d5f8887d5c3ca77.png","path":"imgs/fb244a2e456a42569d5f8887d5c3ca77.png","modified":0,"renderable":0},{"_id":"source/imgs/fb8618145de9463981c94d9afcd58dab.png","path":"imgs/fb8618145de9463981c94d9afcd58dab.png","modified":0,"renderable":0},{"_id":"source/imgs/fc8e8a6100d64734be18b899a8d23dc2.png","path":"imgs/fc8e8a6100d64734be18b899a8d23dc2.png","modified":0,"renderable":0},{"_id":"source/imgs/fe65e292fc9e40da8d37030a0f290c18.png","path":"imgs/fe65e292fc9e40da8d37030a0f290c18.png","modified":0,"renderable":0},{"_id":"source/imgs/fe6f3b7830174af792016fe55c80246d.png","path":"imgs/fe6f3b7830174af792016fe55c80246d.png","modified":0,"renderable":0},{"_id":"source/imgs/fea1fc3b1a6e456d95dc097e7636e292.png","path":"imgs/fea1fc3b1a6e456d95dc097e7636e292.png","modified":0,"renderable":0},{"_id":"source/imgs/ff45d2fffea849128e2423b23572f2c4.png","path":"imgs/ff45d2fffea849128e2423b23572f2c4.png","modified":0,"renderable":0},{"_id":"source/imgs/ffaffd3f6eb24adbb8e63baf1a852f93.png","path":"imgs/ffaffd3f6eb24adbb8e63baf1a852f93.png","modified":0,"renderable":0},{"_id":"source/imgs/lowcode-artitect.drawio","path":"imgs/lowcode-artitect.drawio","modified":0,"renderable":0},{"_id":"themes/vivia/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-dark-128.png","path":"images/favicon-dark-128.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-dark-180.png","path":"images/favicon-dark-180.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-dark-192.png","path":"images/favicon-dark-192.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-dark-32.png","path":"images/favicon-dark-32.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-light-128.png","path":"images/favicon-light-128.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-light-180.png","path":"images/favicon-light-180.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-light-192.png","path":"images/favicon-light-192.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-light-32.png","path":"images/favicon-light-32.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/tile.png","path":"images/tile.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/color.global.min.js","path":"js/color.global.min.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/light-dark-switch.js","path":"js/light-dark-switch.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/load-settings.js","path":"js/load-settings.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/Roboto-Bold.ttf","path":"css/fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/Roboto-Medium.ttf","path":"css/fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/Roboto-Regular.ttf","path":"css/fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_drafts/不同低代码平台的分类和特点.md","hash":"2c4770cde45c3f9b25829c3e205df348fad7e73f","modified":1712233814353},{"_id":"source/_drafts/低代码平台功能性和易用性悖论（一）.md","hash":"e9ca0416fe4fc5092296556871bfa55a289adf94","modified":1712233814354},{"_id":"source/_drafts/低代码平台的功能性和易用性悖论.md","hash":"20bd47141e5d2eb99c69e1304478b18c3afa6031","modified":1712233814354},{"_id":"source/_posts/@nestjsx crud快速入门.md","hash":"79a40cdc99b44e566217583db5e78f6d372fce2b","modified":1712244423212},{"_id":"source/_posts/CSS函数大全（一）：运算、网格和伪类.md","hash":"97ba351a70f61473fa9799bd1ff226203a860eff","modified":1712244423531},{"_id":"source/_posts/CSS函数大全（二）：转换、动画和形状 path.md","hash":"2e1f9e8b54d1fbb323170a133960976fa056ede7","modified":1712244423507},{"_id":"source/_posts/Mobx6核心源码解析（一）  实现一个简易的observable和autorun.md","hash":"38a85cede44fc14d1e5c2f10bf84ca88b806b752","modified":1712244423577},{"_id":"source/_posts/CSS函数大全（三）：颜色、渐变和滤镜.md","hash":"713264318141a868b3f7e05e9b0c40dd84946df4","modified":1712244423515},{"_id":"source/_posts/CSS函数大全（四）：杂项和未来.md","hash":"190e84abdae966a34c9343a2093d651db383a702","modified":1712244423523},{"_id":"source/_posts/Mobx6核心源码解析（五）  Reaction和事务.md","hash":"4b996c61226bf5953d1e2bfaf39596f0013184f3","modified":1712244423570},{"_id":"source/_posts/MongoDB 整库导入.md","hash":"9c5024f1324cdc605ad72455adde6bf5a0a710e5","modified":1712244423585},{"_id":"source/_posts/Mobx6核心源码解析（四）  ObservableValue.md","hash":"cda812920f8aae71c468ce72a3058c978547beb8","modified":1712244423562},{"_id":"source/_posts/React library 快速入门——React Query.md","hash":"d8ea8da4ea715e0f8792433fc10a5f32a7ceb3c8","modified":1712244423618},{"_id":"source/_posts/Mobx6核心源码解析（二）  observable.md","hash":"c205b410f5f164f5496d4bffee2cd0e84edeeed4","modified":1712244423548},{"_id":"source/_posts/React library快速入门——Redux Toolkit.md","hash":"bb55931f0073c02653d9a57172daaaf5a7a7b4d5","modified":1712244423643},{"_id":"source/_posts/Mobx6核心源码解析（三）  ObservableObjectAdministration.md","hash":"bc590ba99a25bea3de8d946175fcf35a65fbd737","modified":1712244423554},{"_id":"source/_posts/React-Redux7源码解析——Provider.md","hash":"9c91a9fc463e476e97148d0efe8d62586423d6b2","modified":1712244423661},{"_id":"source/_posts/React library快速入门——Mobx.md","hash":"ee5fbfeae7ef9253b2d7e57723fe299cf4e782c7","modified":1712244423635},{"_id":"source/_posts/React library 快速入门——Recoil.md","hash":"c1512c2c165f02f948195d8afd8fe7ca66c97821","modified":1712244423627},{"_id":"source/_posts/React 关于ref，你想知道的都在这里.md","hash":"955569618399970575ca448f710478f6581ac208","modified":1712244423602},{"_id":"source/_posts/React-Redux7源码解析——connect.md","hash":"f3d0869a6b1e139c9533fe2acf6c721bf062564b","modified":1712244423652},{"_id":"source/_posts/React hooks的闭包陷阱：function props.md","hash":"afa25e4a1d4d1f5d7cd11e354905812b3b00f5c5","modified":1712244423610},{"_id":"source/_posts/React中使用UMEditor.md","hash":"fde33603006ace984604e49fdc4a4e8cd67a8537","modified":1712244423694},{"_id":"source/_posts/Redux5源码解析：store与reducer.md","hash":"5c599887cc44c19b7875a06598dedcb9c579bc4d","modified":1712244423727},{"_id":"source/_posts/React18中的新特性——Automatic batching.md","hash":"b311f4b4afafd59ab6b787cd29494885c7573758","modified":1712244423669},{"_id":"source/_posts/React18中的新特性——useSyncExternalStore.md","hash":"e277b4007eadd811a8d7d697bb787034fbe659d7","modified":1712244423686},{"_id":"source/_posts/React18中的新特性——startTransition.md","hash":"fbdd2e16aac353114572639b920583185e892928","modified":1712244423677},{"_id":"source/_posts/TypeORM 快速入门.md","hash":"fe4bbafab3f7497281a87aadc5089da2a5cf3326","modified":1712244423770},{"_id":"source/_posts/UML快速入门——活动图.md","hash":"2d30124e1c0bbfeffc069c8aed3b357d0ca9219d","modified":1712244423805},{"_id":"source/_posts/TypeORM之增删改查.md","hash":"15b998a1f2ac308b5e3f512069e64146cba84466","modified":1712244423778},{"_id":"source/_posts/UML快速入门——顺序图和通信图.md","hash":"1a4aeb598079bf078101caf993e7548d7bc3c65f","modified":1712244423832},{"_id":"source/_posts/Vue2源码解析：从nextTick与异步更新说起.md","hash":"6007e286cb7a8d4e125b58abb912024308ad46ef","modified":1712244423849},{"_id":"source/_posts/Redux5源码解析  applyMiddleware——源码初探.md","hash":"65414e6bd93f83489b68fd763f27356cb70ab685","modified":1712244423712},{"_id":"source/_posts/Redux5源码解析  compose.md","hash":"d7b6554b56622c8acbb80722b424c338c7c133b8","modified":1712244423719},{"_id":"source/_posts/Redux5源码解析  applyMiddleware——解剖“洋葱圈”.md","hash":"e7088eb45c5dff8e77cb59f13e598bfbd8e96da6","modified":1712244423703},{"_id":"source/_posts/TypeScript4中的短路运算符.md","hash":"13b3202c020b4cbf300af2906ad2c12c72f66017","modified":1712244423786},{"_id":"source/_posts/eslint + typescript 配置参考.md","hash":"62a37d52b9b1f2fb932ef89d108610b06d106861","modified":1712244423539},{"_id":"source/_posts/nodejs对项目下所有空文件夹创建gitkeep.md","hash":"b6e64997cac3fad573f3de3efc0876698b2b9ed2","modified":1712244423594},{"_id":"source/_posts/asnyc await的并行.md","hash":"05d05fa53da5270a3a205d1bb80212ac4ea29e79","modified":1712244423499},{"_id":"source/_posts/tailwind使用指南——常见问题和实践建议.md","hash":"d1b085df03b79fb239ce8b0f247ae030c825cbe6","modified":1712244423735},{"_id":"source/_posts/tailwind使用指南——老项目迁移.md","hash":"2ae6fcf7bc8b5d314e68130b74c7984ed34f1526","modified":1712244423744},{"_id":"source/_posts/ueditor自定义控件和图片请求.md","hash":"3c6e4f2457432cf4e5ed1d766bfd6a32cdd51014","modified":1712244423796},{"_id":"source/_posts/UML快速入门——类图进阶.md","hash":"8250dff1e12b3226fa89fdde9e48d76be4e4b336","modified":1712244423823},{"_id":"source/_posts/UML快速入门——类图基础.md","hash":"f84697ca88cd7d7751fea516ff8d055700e57c7a","modified":1712244423813},{"_id":"source/_posts/webpack5 升级踩坑.md","hash":"7d4352193e05f70f806792b78717690af538fb40","modified":1712244423857},{"_id":"source/_posts/【翻译】`at`将加入ECMAScript.md","hash":"77fd7fa7c9a6dcd213bd69707e38ba0f620f2485","modified":1712244423202},{"_id":"source/_posts/【翻译】对某些元素抵消样式不如活用选择器.md","hash":"4d24e48e363243e19da40b857a3ba71315a76b10","modified":1712244423206},{"_id":"source/_posts/tailwind使用指南——起步.md","hash":"2c223fa9ebae5bb61c00f723ac9657fdd65721bd","modified":1712244423761},{"_id":"source/_posts/useContext和useReducer真的可以代替Redux吗.md","hash":"5cd6bf0890e151c44478f4028fa9af39d7d4a1d8","modified":1712244423840},{"_id":"source/_posts/tailwind使用指南——配置.md","hash":"2bcf0626e67ff971db1691d3de018d44e918c4c0","modified":1712244423752},{"_id":"source/_posts/三分钟搞懂正则之反向引用和零宽断言.md","hash":"8e345b46dfcd592da7d3b40606755d6cf722808f","modified":1712244423396},{"_id":"source/_posts/【翻译】css中的“gap”.md","hash":"aa31a6e7152534011a3696f0da93a953cc332e67","modified":1712244423209},{"_id":"source/_posts/为什么慢两拍：关于promise规范thenable的白话解释.md","hash":"939d4cf0c5eaefff76a25dac643394d9d0c63edb","modified":1712244423450},{"_id":"source/_posts/使用AVA测试你的Typescript.md","hash":"11eca6f96ee3a3b2ef75f04b84109a966d45bb91","modified":1712244423427},{"_id":"source/_posts/再看箭头函数的this指向——《JavaScript高级程序设计》造成的歧义.md","hash":"a3af81f1ef81fb71661773229d5a74692db3e8fd","modified":1712244423466},{"_id":"source/_posts/使用less生成公共样式.md","hash":"c1d31cd508434a84bf876021acf3816319df29b1","modified":1712244423435},{"_id":"source/_posts/三分钟搞懂js属性描述符之基础知识.md","hash":"9c0eb5cbe59e18fc9053584f4894b87e9b2a5283","modified":1712244423404},{"_id":"source/_posts/什么时候该用useReducer.md","hash":"d78f9db86b47e807bce944c155d04d0e43f9ecf0","modified":1712244423412},{"_id":"source/_posts/三分钟搞懂正则之捕获.md","hash":"bbccb14f335d555b48e151c40bc5eec6478524d5","modified":1712244423389},{"_id":"source/_posts/前端docker快速入门——Compose.md","hash":"37c7e5abc6a6158a4fd3039ad971719544b7ff67","modified":1712244423358},{"_id":"source/_posts/前端脚手架：从入门到进阶——CLI常用的npm包(三).md","hash":"4b3992e09bcc4b31bb134dcece2490ff976d40a7","modified":1712244423282},{"_id":"source/_posts/前端脚手架：从入门到进阶——CLI常用的npm包(二).md","hash":"83b3222f3e3f741f03b63aa92afc8d13cb90d8a7","modified":1712244423276},{"_id":"source/_posts/前端docker快速入门——Dockerfile.md","hash":"2ceeecabcc7e650d5446a23470e458fb448e0610","modified":1712244423366},{"_id":"source/_posts/前端docker快速入门——常用命令.md","hash":"11fd345aa90fd40154f1ef4a903caa7df3a08b11","modified":1712244423351},{"_id":"source/_posts/前端脚手架：从入门到进阶——Create React App源码解析（二）.md","hash":"f474bb94e9968f6d329972770094b307adb2bd1b","modified":1712244423289},{"_id":"source/_posts/前端脚手架：从入门到进阶——Create React App源码解析（四）.md","hash":"2553b59db139617c0927bb0c754202c8540f1fec","modified":1712244423301},{"_id":"source/_posts/前端脚手架：从入门到进阶——Yeoman Generator Api.md","hash":"a7b6de8c81aff76e194b4ac1089196a5f3ec2776","modified":1712244423322},{"_id":"source/_posts/使用postman创建collection测试接口.md","hash":"0a3f93275517afca2032642006a19a718d07c95e","modified":1712244517809},{"_id":"source/_posts/响应式网页设计之响应式图片(一).md","hash":"20c7d5780da7c2c594cd77120d7738a64cd4d409","modified":1712244423458},{"_id":"source/_posts/前端脚手架：从入门到进阶——Create React App源码解析（一）.md","hash":"d11af84bf8e52544041d8c00824dee14f31e8803","modified":1712244423308},{"_id":"source/_posts/前端脚手架：从入门到进阶——Create React App源码解析（三）.md","hash":"cb14de803c9d9e0cfc913b9d325413928d60cda3","modified":1712244423295},{"_id":"source/_posts/前端脚手架：从入门到进阶——Yeoman 自定义Generator.md","hash":"2d688721416ad30c2e4bca082b316fc634c64fa9","modified":1712244423315},{"_id":"source/_posts/在React中优雅地使用弹窗——useModal.md","hash":"189033bc05beacf1f37f9b4d1a1365038504947e","modified":1712244423475},{"_id":"source/_posts/在React中优雅地使用弹窗——useModal的优化.md","hash":"2f7936070766ce5fcfcf6686f50572667907c82d","modified":1712244423483},{"_id":"source/_posts/前端面试官进阶指南(上).md","hash":"31bacc65e21299dfc06b28d0ec4529a2eaf8dcbb","modified":1712244423337},{"_id":"source/_posts/前端脚手架：从入门到进阶——Yeoman.md","hash":"fb5f3f26a26a643e5de95c09c4be8a68f46c7224","modified":1712244423329},{"_id":"source/_posts/如何使TypeScript根据函数的实参推导其返回值类型.md","hash":"4cd507faf0fdc174f3599abd51021083a862dd22","modified":1712244423382},{"_id":"source/_posts/如何备份掘金上的博客？用node写个爬虫吧~.md","hash":"2551a582162293469886617ab487e4398c319fd5","modified":1712244423374},{"_id":"source/_posts/在React中优雅地使用弹窗——withModal.md","hash":"5266bb55b2d652ad87f8e9283146a505139587d5","modified":1712244423491},{"_id":"source/_posts/排序算法之冒泡排序.md","hash":"2dd219f7e2680c930fb5c3955265ea9eb90071cd","modified":1712244423250},{"_id":"source/_posts/前端面试官进阶指南(下).md","hash":"3ae39ede5d502d9016c52e47748410918f04607e","modified":1712244423344},{"_id":"source/_posts/抛开State和Context谈前端组件通信(一)——实例劫持+中介者通信.md","hash":"85c3ac2560721c5d5e2d01926ffa25a361ea9a13","modified":1712244423270},{"_id":"source/_posts/抛开State和Context谈前端组件通信(二)——CustomEvent与 HotEvent.md","hash":"826d2bea5f34f1d3eafa837d6056970ad6cdd4bb","modified":1712244423265},{"_id":"source/_posts/基于swagger和AST的轻量级mock方案.md","hash":"369d5af332fc542e345d10bd48c9bcc75f24b626","modified":1712244423221},{"_id":"source/_posts/排序算法之快速排序.md","hash":"b067cb4eb020ddf08acaa95a8f99d281961b189c","modified":1712244423244},{"_id":"source/_posts/排序算法之插入排序.md","hash":"f7a4ff391bf77c8a509cd9142a0084cffc8fcedf","modified":1712244423232},{"_id":"source/_posts/排序算法之桶排序.md","hash":"8ff7c0688de01f36eaa765949fa340dccf47ab97","modified":1712244423256},{"_id":"source/_posts/排序算法之选择排序.md","hash":"12cd1e13ec78c90739766b948c1be2338956a159","modified":1712244423260},{"_id":"source/_posts/实操使用原子级样式快速精准还原设计稿.md","hash":"c29b6561f511402a8d1dc87d11de0a47f76db48c","modified":1712244423420},{"_id":"source/imgs/006adce2e90d46b6bf6680421b8597fe.png","hash":"19791c65ed372c367482b2d1d23acc382d31784e","modified":1712233814369},{"_id":"source/_posts/封装一个Request库需要考虑哪些.md","hash":"6a76c9a3361de872b3cc5b0bdacb1526eb24c7c2","modified":1712244423215},{"_id":"source/_posts/排序算法之归并排序.md","hash":"92540b2e373defba9c0cd6cef71ddccba86689fd","modified":1712244423236},{"_id":"source/_posts/架构方法之C4模型.md","hash":"add2219367a28f5cbed72856ec7bb5a188f31aa7","modified":1712244423225},{"_id":"source/_posts/解决antd icon打包过大的问题.md","hash":"3652f710f873b532eede2f37d2a74d48b394c50e","modified":1712244423228},{"_id":"source/imgs/00bfff7f7dd748058ca38a1a7b0a754d.png","hash":"8b4ac7e1abc9f51f9f8cdd32a12372957dae22a5","modified":1712233814369},{"_id":"source/imgs/01a207b620f34eaea21cfea282c3f4ba.png","hash":"0e32fe66fbc377105a94673ebcee639be267abe9","modified":1712233814369},{"_id":"source/imgs/0255ec42a61443f582afd734d41915cb.png","hash":"869edf9833cd55fd36090f8e2b56528510008159","modified":1712233814369},{"_id":"source/imgs/026bf9f862e8483f86ecaaf73ec4cb44.png","hash":"e5c561c40e325c7c62d3529a9efe75cfae38b2ce","modified":1712233814370},{"_id":"source/imgs/03a48de8e5e14bfa86aace25630fe9f0.png","hash":"0dfdf746cc1a820aa02e35863d9f7c5164d55eea","modified":1712233814370},{"_id":"source/imgs/04acdded1bcb4dc6818e55be7838dc36.png","hash":"440f5ee7bec3a7f2ed09a21c01a472651ae9dab3","modified":1712233814370},{"_id":"source/imgs/050011baf7694e6f8e029d617274b4c5.png","hash":"c325b80b585768522e62d7b150ea2c98db4fd672","modified":1712233814370},{"_id":"source/imgs/064dd050a8f644c0bcc6a3ff23565f97.png","hash":"8923985c6de4f2ae4129bd448cf9137481b9531c","modified":1712233814370},{"_id":"source/imgs/06bb1763a47148cc8c74ca46ec66fcbe.png","hash":"7adf5817fc0cd75f19c1fe5cc2a32224ad2f0cb9","modified":1712233814370},{"_id":"source/imgs/0731bc95d135415e9b5ad45fae7a0e6d.png","hash":"58c85b2e0f70a0565e1872b7af086af686962bf9","modified":1712233814371},{"_id":"source/imgs/075a6d0cbd2a4be1bf15ddaa2f0b5bf2.png","hash":"c2d7abc6b764e21e754ff79a2f5cb2dc50b94c54","modified":1712233814371},{"_id":"source/imgs/07830b476af641af90b3934713ad04c1.png","hash":"3f159a813bee71c57710872d966130f20981a541","modified":1712233814372},{"_id":"source/imgs/079325dede394c41b4a5bc39e1ece8a7.png","hash":"40fbada5c2cfcdd914fa40ab1fbcb6514d6b26ad","modified":1712233814372},{"_id":"source/imgs/07c0a274944f470ba6d20b5df8a62c3f.png","hash":"b47d8ac429ab47fa18433be5841ebb42d7918c56","modified":1712233814372},{"_id":"source/imgs/081f77e8e6d6428f80387f303c750866.png","hash":"cfe31f3603d3f7a9609610d68515c06ce6553249","modified":1712233814372},{"_id":"source/imgs/0903e080715f42c49aa2e3dc4be85594.png","hash":"a37549ce6b9479a1a8c901747be6fa2814197530","modified":1712233814372},{"_id":"source/imgs/09ade9d3689c4b748e2312b2030cf390.png","hash":"15627cb3262246870a7d4d34be282cb743fa8a17","modified":1712233814373},{"_id":"source/imgs/09ff6519ba1340db8b9a61ea480f57b0.png","hash":"c012ffd5ff1992c33e575e823c3b0433c5600611","modified":1712233814373},{"_id":"source/imgs/0a93bdaa9fe94dc5a1ea5ca1a7b6560c.png","hash":"e5097f011ed093a1b11dd15689358e1ac6f9c098","modified":1712233814373},{"_id":"source/imgs/0b528985f9c84a71a7c80cbc171fc351.png","hash":"758068fc89110538bd2998bb80fefbe07c5d80a6","modified":1712233814373},{"_id":"source/imgs/0bd071595c974b6eb36ed0b4ba7c22b3.png","hash":"ada01b5111769f8178a0fe3805bdce993a8a53f3","modified":1712233814373},{"_id":"source/imgs/0be2614c9e344dae9bfddf91d293525b.png","hash":"8edd090b2c38be1c0e8c28c08c9df730514b9dd5","modified":1712233814374},{"_id":"source/imgs/0cf569ef6ff246ac8494992e2768b814.png","hash":"b5a86222b18af31ca84654314feca6088d2c3861","modified":1712233814374},{"_id":"source/imgs/0d3e7a37ccb24c51bcfdc875f442774b.png","hash":"750182a258c92dce89d3568c135c80eb836f9de3","modified":1712233814374},{"_id":"source/imgs/0c276dd1937c4e649bcbbc5a034a2b34.png","hash":"59f1ab1eae2ce9ff4a3efa5a36f22d6e46f7f70c","modified":1712233814374},{"_id":"source/imgs/0d87ab8a99ff4cfba6d30dfbe2a4cc6b.png","hash":"b75286b2494aeafcfa4229f1b5ec86b18106d657","modified":1712233814374},{"_id":"source/imgs/0ed8b2854ce743ab80151ebbb15385ec.png","hash":"b8fb396c03721ed4b67ad2184b2bb132d33c2536","modified":1712233814375},{"_id":"source/imgs/0e8108de34d14efdb7b72d13e37121ac.png","hash":"22286564fcd9dbaa1eb8f5b10c430b6b3a988655","modified":1712233814375},{"_id":"source/imgs/0f677483d57d40f69267e8e4ef2d3b0e.png","hash":"0e0f280995f8d7d5e3316777b5dd1e855deb1379","modified":1712233814375},{"_id":"source/imgs/0ee7c29a050f4ff7b580e73d1d1932f7.png","hash":"70c5d43a1129a138b5d3e349145f985688939b61","modified":1712233814375},{"_id":"source/imgs/124a2ee904c54b6fb2e7f064b8d05946.png","hash":"c42b66f75d3bb409dec1e1071885a6cb97a3bb58","modified":1712233814375},{"_id":"source/_posts/排序算法之计数排序.md","hash":"e20572cecace7d20f2ac12ad713c61dd45047aaf","modified":1712244423241},{"_id":"source/_posts/过年啦，用canvas画个烟花吧.md","hash":"b5982ae8a47e7e2c06cbb2f2a430dc1e25e1c0ed","modified":1712244423218},{"_id":"source/imgs/1324acbb236147538ee6038c283548cf.png","hash":"f85e618f69dd051c8788201fe285407e22147ce5","modified":1712233814376},{"_id":"source/imgs/14bc0f5d968347b3adbeeba4dab57aed.png","hash":"cc8ab90f48d3b07d257616ae4b9514cd0828e519","modified":1712233814376},{"_id":"source/imgs/10c5f00eda3c48d29258f27106bdd07d.png","hash":"51bd6626e30333bc742e24d8df5f4bd46453bb14","modified":1712233814375},{"_id":"source/imgs/14c0aaf10ecf4fa8948b749f56399177.png","hash":"3292fbeac37c6307c6f68939a4d921007f39e911","modified":1712233814376},{"_id":"source/imgs/130d8810ed5248ecb34cbe8c2082c4c2.png","hash":"25b3c10ab976442aede317829d417caec06a5578","modified":1712233814376},{"_id":"source/imgs/14ea14ac2d4d4295adf4cde4a6a07c50.png","hash":"ac744dbddd162572f9e8f9e28467eb0bf689e9d8","modified":1712233814376},{"_id":"source/imgs/174737fba5f442d6977bcd22bb2805b1.png","hash":"f75164a872a30e98309355ab9349113c0d4038e9","modified":1712233814377},{"_id":"source/imgs/15e5c3208d1d4b9db3332d27f3c5490d.png","hash":"897e94bff1e9939dd977c1069c86848fe560f11a","modified":1712233814377},{"_id":"source/imgs/1902c6bb31c6405ca1c5c77e9f35fe1a.png","hash":"400bd61dcfbf9418d13bbc2711ffbab031abcf86","modified":1712233814377},{"_id":"source/imgs/18409a0a70274ab69df4664311f0aa93.png","hash":"83b0c6c99c36b5ccf917a8ad07c2540b558ae3fa","modified":1712233814377},{"_id":"source/imgs/1b26737844194fc09f923cdd6b3b8a92.png","hash":"4f542790f9219aac2af94268b8a8ea0bacd214c5","modified":1712233814377},{"_id":"source/imgs/1854cdecb8204130ae6ede9bf856cd64.png","hash":"2e739abc72f9f0c1608275ff7bda33c26810b77f","modified":1712233814377},{"_id":"source/imgs/2115d5d726604ad6b04a09a05833413d.png","hash":"551bde998cfdd2e9bd9278711164ebb1c260b975","modified":1712233814378},{"_id":"source/imgs/207986b2db8a442c8f8fdb2435a0ad2a.png","hash":"359dfc8aa74bd97aab90fc874607bdd66b34c14a","modified":1712233814378},{"_id":"source/imgs/21e20e18c0224cfeaebd4a03966d320a.png","hash":"aba12fc3fca24b13c8ad707b69fc76d202c50ee7","modified":1712233814378},{"_id":"source/imgs/2427be496cb94155af84d9370af28118.png","hash":"16c7a6e22fdf97482aa8743ae8d8f23d38910f1f","modified":1712233814378},{"_id":"source/imgs/1db5249a8fc94922ae2a429731b36262.png","hash":"fbaa14b3ea3bcdfe637b0e4a8cb18eca1ae4de31","modified":1712233814378},{"_id":"source/imgs/270ab36fdc864158b7d47e8f5ebc4759.png","hash":"63bfdaa2e7e5a00aef77b1e917260178855e6c4c","modified":1712233814379},{"_id":"source/imgs/286bc40bf9dc4c60b5f38b9bf17ca7f7.png","hash":"5c7467fba97e48be2474812f46037be503266536","modified":1712233814379},{"_id":"source/imgs/2435791a1fdd44a4ad5778657f7ebb08.png","hash":"17d459e9d96ba5eead84fee44d326981df3bf850","modified":1712233814379},{"_id":"source/imgs/279f927c1695458eb47fc01391cf08c2.png","hash":"b24683037b04832e04b4f65d403f0889b26284c0","modified":1712233814379},{"_id":"source/imgs/2ae47ba735a443b39c114dd962dd39d0.png","hash":"a0ae7b88ae6e2f5a487042edbd922789e8f4857b","modified":1712233814381},{"_id":"source/imgs/2a9e90766352487e9445f0db4706ff0c.png","hash":"7d3725a3ac8b10b88d7273d75cb849647fc8b90e","modified":1712233814381},{"_id":"source/imgs/2aec0f4ee07846c0b7eabf3672691b57.png","hash":"f22f744ddc157894cd58943b6b82fc13a20009a7","modified":1712233814382},{"_id":"source/imgs/296a67578b674e6bbbc08b04d8714646.png","hash":"3226cbc3196856c8c15455d65d39384683929eb4","modified":1712233814379},{"_id":"source/imgs/22c8527da1d441afa6df86d050d08c09.png","hash":"4c695835e2af40f454cf46be5447ae7b9987d559","modified":1712233814378},{"_id":"source/imgs/2bb45eb7f59d40f381a2ad904fa739ea.png","hash":"12cb4868c2eff172dfe1acca57e8bdd644355279","modified":1712233814382},{"_id":"source/imgs/2cac1920e79d41f692a0a3690999cdbb.png","hash":"f48113180610c7b2354ba672dcc143fd43820535","modified":1712233814383},{"_id":"source/imgs/2b9ca4a010e54d8ca142e68c9eb2f26b.png","hash":"bf513c27995f964ce599431cdd15a28b09ed4fb7","modified":1712233814382},{"_id":"source/imgs/2bd6fecf240e4212a15e1aba62e459a7.png","hash":"e88b5c6c4ed979cb71dea4323912187df76b2bdf","modified":1712233814382},{"_id":"source/imgs/2e037560cee54fb099ac6ef1a7ab1817.png","hash":"aecff3ad2749169429f5ddaa2eb9d497239c9faf","modified":1712233814383},{"_id":"source/imgs/30f4747ae988400594cdf1b5388d6ff5.png","hash":"0424a38ac5e8d0ceee54abfbc5eaf8103b8dec11","modified":1712233814383},{"_id":"source/imgs/2eb00def85fa432d97392428410ab592.png","hash":"cc9bf230c39b6aee98827b2fabc2e583d0b48402","modified":1712233814383},{"_id":"source/imgs/32f696318ea74823ae25ef6f8c51453b.png","hash":"d9ac9dcb43f8849720916604eacd2328766d1b4d","modified":1712233814384},{"_id":"source/imgs/32d120de176346f1829c177e1c43fd3e.png","hash":"3bf4998eeae6de64206a172ad19152f8e2139ceb","modified":1712233814383},{"_id":"source/imgs/3301aafe08f84015a75606a2239dc394.png","hash":"8374c6c49b4e97ee16ed98c7ad9442f7402861e6","modified":1712233814384},{"_id":"source/imgs/324fd58b217e4370a03fdb879e935aa6.png","hash":"df9c37d1bc1a5dae10cbb4319a2680e13c7d01f2","modified":1712233814383},{"_id":"source/imgs/336a595311e841fd880a6c0ef46682e1.png","hash":"f6c9667a3a792c0c3d7fa3f19b948710c6295137","modified":1712233814384},{"_id":"source/imgs/370adb6836494a0a99a708e5c8ecbe3a.png","hash":"7a0f51fae35f8dda8d12b5ae7c20bf9e0c01f882","modified":1712233814386},{"_id":"source/imgs/35379bb1ef624db4868454ba2df4a31a.png","hash":"1ae73ebb9154d985806dbc5c5c12905ee70b4d3e","modified":1712233814384},{"_id":"source/imgs/3209f6a93a2248ca9199a589e075ee45.png","hash":"455fef613f1a585051a6681dc259fd55f2cb4313","modified":1712233814383},{"_id":"source/imgs/37ecaffba91e468f88930691a18d37e1.png","hash":"1f4a9cc7074d4f11434daa9cf44b650deccea207","modified":1712233814387},{"_id":"source/imgs/3ad8a4dec3364ba582900fe5428c8518.png","hash":"c8e2f307e0a1be1aa68c358ccfe63fe4429826a2","modified":1712233814387},{"_id":"source/imgs/3b9187f6322240598ef5bb8d761c8509.png","hash":"1581f23b7e86ef325aacf3f6c24f84c75287a6ba","modified":1712233814387},{"_id":"source/imgs/3c5cb59c512245b8bf051524553a8083.png","hash":"a1711ab4c06a7b050695d8c42f0592530c40b48e","modified":1712233814388},{"_id":"source/imgs/3dd4d8486dbf41c5bb421fec5a1a3b39.png","hash":"59782a937f22f1c04d6ddba01bbbaaea38e7885e","modified":1712233814388},{"_id":"source/imgs/3d01e29ce7914c27ad5e62d5fce649d6.png","hash":"b6e55eb510468bac53260c2fd333ed8fe4e10e5f","modified":1712233814388},{"_id":"source/imgs/3de7200406054b6d9db56db980e0035a.png","hash":"7bca8de32525251b7a71668f619539a89072d303","modified":1712233814389},{"_id":"source/imgs/3e77c54098c845749ec0c60ee14eeb74.png","hash":"23fe15bfd9bfce21b31d8390eefd4e7175abeeb0","modified":1712233814389},{"_id":"source/imgs/40637a4f03594f4fb273c6a39ca04b62.png","hash":"2b0243a420f64b0154d0d083841500bd5ee6533d","modified":1712233814389},{"_id":"source/imgs/3f6abef66117405f98542802150a8ce5.png","hash":"2d5a2e21960be6a38f111ee36e5dd6bc757ea6f1","modified":1712233814389},{"_id":"source/imgs/421da5155239416399fc34bc31930d0a.png","hash":"1df912cb34ce53c6676593a74402bc0c5502352c","modified":1712233814389},{"_id":"source/imgs/439caa4a49de4742903a0761fb049db4.png","hash":"7eaf78fcc0b11cb9babaec2de52167d9ef87f718","modified":1712233814390},{"_id":"source/imgs/471dff87c016460396407577efc1435c.png","hash":"4a84fee30ac46f6beef314e82e7d8d488b499a0d","modified":1712233814390},{"_id":"source/imgs/441d5fe819d241e0ae5c27a8dc5d05bb.png","hash":"658ab04e0a3b502c4734531ce2581f1d70f28631","modified":1712233814390},{"_id":"source/imgs/476fc30fc2fc4d75b5ae6477ceeeba44.png","hash":"0453f0f6acd952ac4c98cb18125bc1ec20dc6423","modified":1712233814390},{"_id":"source/imgs/4a38234af23e42f1bd98c2c2397c3dc1.png","hash":"fce1958971b7e6f34d5be87c00d15b5465ab9b5c","modified":1712233814391},{"_id":"source/imgs/4a95dd017a6a4efa8f4abb4382afda1c.png","hash":"fe4ced22ad9bd76474bef00955e770b78f1a7f79","modified":1712233814391},{"_id":"source/imgs/47adc712f1a34ef79eaf2b5eb691bcdc.png","hash":"44c696f25cded65f4c63b9e70ce75403177803f3","modified":1712233814390},{"_id":"source/imgs/4ad9b45c288243cc871d388a9e4ee02c.png","hash":"4a3f2c9a080baeaef454b6579fc4914c1e80aa1c","modified":1712233814391},{"_id":"source/imgs/47858ec75dee4b88b03b6329ce438d72.png","hash":"4b1b45112be7020d61c78cc77e5e9c62d6d938bd","modified":1712233814390},{"_id":"source/imgs/4f4655e4f3064e6ca0929d75fbdf93ab.png","hash":"675b9aeee4b369ce1c67fc32b2ae823e1160d939","modified":1712233814391},{"_id":"source/imgs/4f79340e5802405c8528233799680046.png","hash":"e200fb1cdb75714031119a67338dcf5aa69be031","modified":1712233814391},{"_id":"source/imgs/4fcd03d8db8d4007845f8aa23a9bcb93.png","hash":"1ab2864f647946b61f6cb2aab8821f4187d0be79","modified":1712233814392},{"_id":"source/imgs/4b2e4540dcc440fc95a8bb27c35ece17.png","hash":"cd87c16f96475f0065204441347242c195361a43","modified":1712233814391},{"_id":"source/imgs/52350b7339754e268c6d51be4abbbd53.png","hash":"10d61873d8095c880c0b664da4a496a9b42412fa","modified":1712233814392},{"_id":"source/imgs/566bb1081f7a4747a00139f8e144116e.png","hash":"225a56c4a71ff5baade4b6eecd54b579d35d8ade","modified":1712233814392},{"_id":"source/imgs/54d69cada2784fccb0e1e17a443a57d2.png","hash":"ae2ecf469d5ff0fbf50fe084c146246c48e1a7f4","modified":1712233814392},{"_id":"source/imgs/5a4ba5ff4494443f8dd7ec51077522b7.png","hash":"2afdd53a2c51243ef96ebc1befaa59863d5dbb96","modified":1712233814393},{"_id":"source/imgs/5684e00d041c465abf5555c420de8e70.png","hash":"a9470633d33091e46f2862931452e4c31c790f34","modified":1712233814392},{"_id":"source/imgs/584137cb90ef45a98d2887a4fe5579e8.png","hash":"57182819be6bc3f94123fd09311e068c325c8def","modified":1712233814393},{"_id":"source/imgs/503f78a59ccd4cb58576e9fc02767ecd.png","hash":"3b7566fabbd4b9d5fcec77e531cf7d6636481786","modified":1712233814392},{"_id":"source/imgs/5b0a81f603a74a308024c7f56ffb4ba5.png","hash":"85e3c2c7dc42e8c85f4c7959b51d01f99862bbac","modified":1712233814393},{"_id":"source/imgs/5ab6d4336eae4c378909d6f4fc8e9560.png","hash":"ec51d61f1993a2d304dddf0126c615040c4437a1","modified":1712233814393},{"_id":"source/imgs/578e5e1e1c6a4f34a9d30ab36f34dcce.png","hash":"3c6b06fbf0a09c1f33979edd5e63a7581e8b687b","modified":1712233814393},{"_id":"source/imgs/5c1163271f3d47b4a911d8b08e248644.png","hash":"b509d1726643afac9f2a71fd876497dff9b575a2","modified":1712233814393},{"_id":"source/imgs/5d28b35a63a94d68a8962c1baa5a6418.png","hash":"d13a4a0683517be077e266c9a85cf382a9877336","modified":1712233814394},{"_id":"source/imgs/5b1a7835440741e788b41f42c44210ca.png","hash":"c9f47ffc3887bea4ca161799b2fc9f068d1d82e6","modified":1712233814393},{"_id":"source/imgs/5eed898b39224137bea299ec92cf5a8a.png","hash":"3968e8fe00fe96b78dad9607a8e504e8dc6dbbea","modified":1712233814394},{"_id":"source/imgs/5cd0b10a948842ae91a979859ff8ac1e.png","hash":"772ad8f4c768d948c48bfc9da8fce42f624e980c","modified":1712233814393},{"_id":"source/imgs/5eefdcf6ba2440b1b0669f673f8c95b6.png","hash":"4745cac6946528055234c59dd46986b305797f7f","modified":1712233814394},{"_id":"source/imgs/607c8312c8c041f98238c8207f7d6486.png","hash":"ba28a7760b48ebe357604b5f7136e2419c6bc5bf","modified":1712233814394},{"_id":"source/imgs/627e6d35689843cda4b8f515bc81edd6.png","hash":"a663ee7c2b5ca70dd53e13db852e6373cb9e9d32","modified":1712233814395},{"_id":"source/imgs/62e213d1a84048648ebc55b40cef1913.png","hash":"ef2801bb310f24d1510335b41619a9a6854a5c34","modified":1712233814395},{"_id":"source/imgs/60e2c179cd9d4caa9cfd576459bd8a08.png","hash":"9c5c91d3dfc19b61ea75d5426ab1db23421d9d56","modified":1712233814394},{"_id":"source/imgs/658415d364934e01a794eb8c1642a252.png","hash":"34c7c57c8e8c56a6e1b6178990b2d0882ce9c027","modified":1712233814395},{"_id":"source/imgs/6966a88766614ea5a249363a6f129797.png","hash":"b784bb387acd4797a89a02e3fdb69d561b9c4930","modified":1712233814396},{"_id":"source/imgs/661fa47033d847afb2b799732ff39033.png","hash":"66e0283c1b19aedd42cb861b0acc3d8ccaf710c3","modified":1712233814395},{"_id":"source/imgs/6c32109e9dc845c1843613ffd8095fe1.png","hash":"0f07df673e4afb21f7b752ed3dc613fed7e454ca","modified":1712233814397},{"_id":"source/imgs/68b2855217d14296af6aa3e10dfa18d7.png","hash":"466c12ef40b2c5422ef8317d3e4264346f4bd411","modified":1712233814395},{"_id":"source/imgs/6b6c08c2c5fa427b8fb4097dae06489e.png","hash":"97a1cdd02527883090de7348ae5c4236aea26c7e","modified":1712233814397},{"_id":"source/imgs/6d3566e0ddcd4bbdab3d5a39d04c918c.png","hash":"272034380fbcca44629495b9ea88e35b5b1a4a8f","modified":1712233814397},{"_id":"source/imgs/69bd0195c4084280966f95ae944744c2.png","hash":"805a7c8e445bdf971f48bd4e148d52e64b7fa2ca","modified":1712233814396},{"_id":"source/imgs/6de6c2ae614f4716af6c0ba282fb0e8f.png","hash":"792dfcd8d896246726d0f3b03003ac5fb9129303","modified":1712233814398},{"_id":"source/imgs/6d8aa40eee8a404c894642e4c613d7ff.png","hash":"4ed50311e9934aa292c217a88da45df492d95a58","modified":1712233814397},{"_id":"source/imgs/6e3bfe5b9ff64cea9530258638e7adc9.png","hash":"24013ed82905a4c84b4cc4dd266dd8f7ee22ef7c","modified":1712233814398},{"_id":"source/imgs/6ec7d114aa1248869f6a08e87ee57878.png","hash":"d427967c4edaee27660c7218084ec713a872508d","modified":1712233814398},{"_id":"source/imgs/6df0bf2c4e544049831f180910faabcd.png","hash":"e906185c172ae99a995bbb1717bb42a8c2e63e99","modified":1712233814398},{"_id":"source/imgs/6e0b1b1548574754a0e3b59abe3996b7.png","hash":"d30d927baa5e70cee6c596960c4d26b9f4504772","modified":1712233814398},{"_id":"source/imgs/702ab02646dc49fb893867edb9fd0142.png","hash":"cb0ef31ecb051eeed3ca653140379845e4b527d6","modified":1712233814398},{"_id":"source/imgs/71ba173548ce4f9eb5e1e84cea9501eb.png","hash":"70f68b86aba5e2df502d8ed08c077c699bc473df","modified":1712233814398},{"_id":"source/imgs/6fd8a8300c434df5968d87088c4d41b3.png","hash":"730513a6d8f664cb1655671708d46f6e9cf23273","modified":1712233814398},{"_id":"source/imgs/744095f84fc54d0faa6a002ecd90045f.png","hash":"084c749fda8e431b45f6b3d45028eab5b5e83f43","modified":1712233814398},{"_id":"source/imgs/754b8961911e4a0e8aae1b9b7a77b4bd.png","hash":"cf968699bab54e699f582d2b61d094eb131be186","modified":1712233814399},{"_id":"source/imgs/751b1d25cf79455ba6d7e3edcffeda52.png","hash":"af53393d87c1ea453b80e210ea06662ce09bc52c","modified":1712233814399},{"_id":"source/imgs/75fabe11d8b948718b89fc10e8b82e17.png","hash":"cd626ab9df0fccab2aea8e201a5fa57a7ad00a84","modified":1712233814399},{"_id":"source/imgs/74906f4b22a24b28800bbbb6c7bcfd40.png","hash":"3bdb7525be63d466280666085d36dd732d7e5aae","modified":1712233814399},{"_id":"source/imgs/76bd8f8d77934079b3d1921ee8c65baa.png","hash":"275d94cc742e7837565e64fa5febd78fbe17dd1c","modified":1712233814399},{"_id":"source/imgs/76f87b5543964d0f95c43cb948a0aaa9.png","hash":"f2c8c6751c90ba21a697611d684133850ff62de9","modified":1712233814399},{"_id":"source/imgs/77a53feae9054e88b68b47f8291f899d.png","hash":"3677dcc68b51688bb88d5909ce22b32d17d9ecdc","modified":1712233814399},{"_id":"source/imgs/7711dd594c064fc48111b158c2c110b9.png","hash":"fc37a889f0b7fae0e0ec0e29a29a16a05498b37d","modified":1712233814399},{"_id":"source/imgs/79d57ee723c0414fa58067db9964da81.png","hash":"aab762e87087229ee829ba5c0e61f6e1b6990038","modified":1712233814400},{"_id":"source/imgs/79fe9b3629fa4bda83dcb76fa774fa3a.png","hash":"0e2284f246c023a300a3a54e5b4f1a77f9c121fa","modified":1712233814400},{"_id":"source/imgs/7ebeb02d90d54c5c88501bab914a2dcd.png","hash":"81feace5036a124ee146af5b850d8b6cd2a7c375","modified":1712233814400},{"_id":"source/imgs/7ed844989c4640a9be7cc2922107c3d3.png","hash":"55bb77d5b43e230b2c3ecd1110d662417f13cad6","modified":1712233814400},{"_id":"source/imgs/77e251176fed4a97a7ca946262916095.png","hash":"51ad0516052ccb1d79f327770a53ad2d18c782a5","modified":1712233814400},{"_id":"source/imgs/790c475ec884462bbe2151edd7b0fe43.png","hash":"86b9ffa1ed73db2f048fe6c51e7e8aa730128ce2","modified":1712233814400},{"_id":"source/imgs/7fdde6d3d1044fed90b9d23aba1e6765.png","hash":"10db8aa0035961d78e13146b199179cd5b5de076","modified":1712233814400},{"_id":"source/imgs/80f00eaaeaad4fe582d2b84708c8cccd.png","hash":"acc304e77daa4a6abb3ca69173d1be1d9388b392","modified":1712233814401},{"_id":"source/imgs/8616c565ebff4ce8a4b478c7937e8698.png","hash":"ae0bc9174421eb1aebed5700c73d014fb30f232f","modified":1712233814401},{"_id":"source/imgs/82392bd016a74c298191ef55fff8d75c.png","hash":"2053094c62443377986cd85452cf880f3ac3e234","modified":1712233814401},{"_id":"source/imgs/81a67e5d708a4e75af8b9a9fc7c2d317.png","hash":"8e7581667d5004215b557ef13e4732b43367d8a3","modified":1712233814401},{"_id":"source/imgs/83cd1beeb0ba4350b6216de5022b1217.png","hash":"6313856eb4b4a25320aad0ff6e5b095ea4c6866a","modified":1712233814401},{"_id":"source/imgs/89bd18d28389452c962cd3384ac18434.png","hash":"212ddf4e85764532a688b818a31eb9d921cf740e","modified":1712233814402},{"_id":"source/imgs/89ff069b244a4e5d8073f425cab0a975.png","hash":"889be8abcacb32851194ae33bfd4c21185fb8ae9","modified":1712233814402},{"_id":"source/imgs/8f0428ba4af94e59b6081a6b83759acd.png","hash":"e5231a78e57b1b46b0eaf273e6c461c270233dbf","modified":1712233814402},{"_id":"source/imgs/864e1f106d2d4687978cfcf98ec59a4d.png","hash":"93ec14c46db6d3fe362c862416cda9e4ca0152e3","modified":1712233814401},{"_id":"source/imgs/8fc2530298d944708d0ab28d9deca363.png","hash":"af54bff28b80414e43068560ab3f7ded6b325a85","modified":1712233814402},{"_id":"source/imgs/902d670f367a43bd9847e3e14eae3c0b.png","hash":"a044246aebf84c9d16d14d8b75bbf6bda0ddec47","modified":1712233814402},{"_id":"source/imgs/8f8b19af5c424949a663d44f3d02bff2.png","hash":"6dbfefadcb34ca7eb668c51837e3112f347585ad","modified":1712233814402},{"_id":"source/imgs/8c6de6a98ca945b18885737a76a0bc37.png","hash":"fec94945fb2129b60313448542fc7486c092906b","modified":1712233814402},{"_id":"source/imgs/987a8555af9c415083f9507ef7553f0b.png","hash":"c34776f4307d50352370dc8ab3f71247c8313e01","modified":1712233814403},{"_id":"source/imgs/8f3f8dbd4a4e4a80802e449f0caaca28.png","hash":"35d4d7a8eaa76e97e5d57a7b0744ff0a14a60a91","modified":1712233814402},{"_id":"source/imgs/993504fc4765448fbba439d0f2af30aa.png","hash":"194fb2c5b3c6a453a3c7ac607659cda316ff96fd","modified":1712233814403},{"_id":"source/imgs/93c65034030940bca0c2f06a6cb5a3d2.png","hash":"28da8199dd2101900e478e937b8a559cd8532662","modified":1712233814403},{"_id":"source/imgs/90f63a48a6cc42b7aedab51da67cf398.png","hash":"545ec3115528dddf7280653e67201883b56375e8","modified":1712233814402},{"_id":"source/imgs/999db97b32c64a63b4411bda28308618.png","hash":"cae4ea0478d55c3dae3a63a731693ed8b4e6eb3f","modified":1712233814403},{"_id":"source/imgs/914e69f427bc412a90384306391d10bf.png","hash":"a6b9657a6acf54973cc7a195c3c22bad1f5d7e35","modified":1712233814403},{"_id":"source/imgs/9a1f879dc0884635838d29764d08a6de.png","hash":"0b9d4515849a96b91df0628a8364f8cdcb15551f","modified":1712233814403},{"_id":"source/imgs/9bdccc09f7be445cb0edef1627f5c567.png","hash":"ae12f8ca096d41bb85ebe23e411dfa5ad5bea61d","modified":1712233814404},{"_id":"source/imgs/a0a1f189ea544841a6de2146387bc0a4.png","hash":"c2ba5d94650fd8c52a86ad262d3581013dd68f1b","modified":1712233814405},{"_id":"source/imgs/a03b864b3bed427592c6c363019b0943.png","hash":"3fbf7d790dfef0e204bafde778bf801c4d18829e","modified":1712233814405},{"_id":"source/imgs/a30fe3ee74af45c1adf9ca78fac1f150.png","hash":"965493ee525febee1b1a5f47222e47a76084d3a4","modified":1712233814405},{"_id":"source/imgs/a2876bf6aa8c48179ab7bf61cc768452.png","hash":"c12404a161bd9c509ded02e773c9dc1c883f87ef","modified":1712233814405},{"_id":"source/imgs/9f72aa0dd7eb47db9af5f3d0d6a29c87.png","hash":"6f8915344bcd4e7b1a46f64ef13461005078b585","modified":1712233814405},{"_id":"source/imgs/a3745c91af4948b8828204411aba625f.png","hash":"fcd9aea314ba5d58af764df7e5dc5c80128e2399","modified":1712233814405},{"_id":"source/imgs/a42f3e72cd64454e94cd03b2bce634fe.png","hash":"714f8b7a88e31402aa365dd96fbb0a5c9702ff30","modified":1712233814405},{"_id":"source/imgs/a5a182f1f49b425b8a240459655c066b.png","hash":"0dd9e0c9a611095c075192107d60ea7e69b706ac","modified":1712233814405},{"_id":"source/imgs/9a9e3fecab1a430099f67a25ecf96322.png","hash":"9c2c4ad7f682e71731b842599eb754f25845dce3","modified":1712233814403},{"_id":"source/imgs/a6d3f98c7b4548f09e762d86df162d37.png","hash":"20ed7e61c64d876ba487370050c9c789e7a04858","modified":1712233814406},{"_id":"source/imgs/a7739d7ba24a40dda484ee0823b99f4e.png","hash":"dcc6ed2eafcaf8d5b76e4b7ec91a6d426159be4a","modified":1712233814406},{"_id":"source/imgs/a88f793d5035421bae5bf09dc91d0444.png","hash":"7bee4d43f556829a733cb48ab491e3fde896f3f0","modified":1712233814406},{"_id":"source/imgs/a71e28d5fa794601a6dd09a9f3832958.png","hash":"4d5f0ca32eaaad203518d2b680cea0d41321921f","modified":1712233814406},{"_id":"source/imgs/ab523cf7253e43bfb13334615183db2c.png","hash":"c06f70db2d8a70f8c892e3bde1841d2ad501747d","modified":1712233814407},{"_id":"source/imgs/aba1b3919d7f434c8c4c41eb65dde1d7.png","hash":"2393d88ec068c26447bb03f993c7a948b9abfcbb","modified":1712233814407},{"_id":"source/imgs/aae076ba4570447aa47c7242c4be29f5.png","hash":"b7c831e909edfec29b1898bf3a95ee76b5a7edb3","modified":1712233814406},{"_id":"source/imgs/ac8f8d2c1c02487e9ae9489cefac018a.png","hash":"a85434e4971cce303388a7b46c585a72f20464bc","modified":1712233814407},{"_id":"source/imgs/a7c6fea42810464aa34b8a331ac925af.png","hash":"01b0043ed0eb9428e349616ee951690a1feb8050","modified":1712233814406},{"_id":"source/imgs/ad653329549a4673a85f0bff18ac4bfd.png","hash":"a95d532b4f8030f3828951b13ca9f7ef9ab6b6ca","modified":1712233814407},{"_id":"source/imgs/aeddca64831a45309a3e99a9d6ac3aa0.png","hash":"d23c14081dc405dc3e360f481a31f7cf9a6c934a","modified":1712233814407},{"_id":"source/imgs/a777431b0212407d999884280b44aaa1.png","hash":"76349dfcde4435cc5e7c901622b05a154b57494b","modified":1712233814406},{"_id":"source/imgs/b14906e8bf9d42adabf68728b85f47cc.png","hash":"7a266c1b186537bf6342752672c633a2503ebf76","modified":1712233814408},{"_id":"source/imgs/b2cffc1c128c453aa87bcc8c436b5edb.png","hash":"3292479608681f467562731ba2a1a2ef5448ce52","modified":1712233814408},{"_id":"source/imgs/afa38d71d32e47339603f1a510606961.png","hash":"b5eb0c3feb6ec92a0ac18823e40b94ceb8d38f75","modified":1712233814408},{"_id":"source/imgs/af4554dd19ce4a6aa911769fc36a839f.png","hash":"5eefd4f0b2468ef135ffc125e5573e2a3d146b40","modified":1712233814408},{"_id":"source/imgs/b2f374a4c4bc4e7c8220819ea727b931.png","hash":"a8336915c6194bc4da32961f165634be77756f4c","modified":1712233814408},{"_id":"source/imgs/b1b144ee16394b449e0d9cb9952ebcce.png","hash":"7b6f0038167bb1228f03920082017536cef8ee3c","modified":1712233814408},{"_id":"source/imgs/b3ad6b12445348d59a136143f3d19b24.png","hash":"f34f6d11a56fdb3e7bd2dfc9f891e13328e46de9","modified":1712233814409},{"_id":"source/imgs/b4009d0f599c4ac39009eef3265d140e.png","hash":"44057bce09d1f15de087c17a872473f49afa2967","modified":1712233814409},{"_id":"source/imgs/b30c992919e44b42b5837344a3ee85f5.png","hash":"129f28413d4a0f72c922d9e4e5d5c440ef3cc1f4","modified":1712233814409},{"_id":"source/imgs/b6ea9aea43b94d7a931c4180550f1f14.png","hash":"59c057310fbdcbae01ce3ffd643b7ec7cfd9d934","modified":1712233814409},{"_id":"source/imgs/bb7773a4f2124134b153436c3d9083a8.png","hash":"c8166d049aebbf8993bb0f095da74141bdac3aac","modified":1712233814409},{"_id":"source/imgs/bc2df772897746ab890b3fe9890677fb.png","hash":"ae8e013e41bb493c5ba3615ae1940a98359a8be0","modified":1712233814409},{"_id":"source/imgs/bbc47e5ba90344129027b9cf69933a11.png","hash":"3c400a1bc8647ea5d2947487265f697d425290d6","modified":1712233814409},{"_id":"source/imgs/bb5d2fc3c7394c6fb05687546f49047b.png","hash":"c68546dc31492485b679f89c3b0e4023c4f60772","modified":1712233814409},{"_id":"source/imgs/bfb8a4db30f74136811c79d6a2063b74.png","hash":"946e98805091fdf5fc80583fede112a3960cc94b","modified":1712233814409},{"_id":"source/imgs/c70711d142154a3f8681fe8339ac5f22.png","hash":"00381de855c279bb429b3e02afcf86e15ea6793e","modified":1712233814410},{"_id":"source/imgs/bf9e9b12206f47aaa241a0ab36fdce35.png","hash":"97cc61aaa8f7d27bf89b78ca6858fa78a928c22b","modified":1712233814409},{"_id":"source/imgs/c3e1ac10e91f4a249046400414dd795c.png","hash":"0dc1fc22636dced8e4868a773c6fc2757279be03","modified":1712233814410},{"_id":"source/imgs/ca28f113fdbf4f3a8803fcff7e67687e.png","hash":"cb512a1fd94ebc0e0083cce84d6561988b62f1ce","modified":1712233814410},{"_id":"source/imgs/c83d1f4b443f480f8c579f6ad5651e88.png","hash":"50c5f11f1211e87a721e7d0a37f2928a4e86e1e5","modified":1712233814410},{"_id":"source/imgs/c9dba75186da46c384c5783cca062791.png","hash":"27634ca665407a4aa864e1196307436bfa7faa9d","modified":1712233814410},{"_id":"source/imgs/c723562b8e9c44e1bec04f299dc10034.png","hash":"e93056395339af4048fd79d24a0635374e5c9eb9","modified":1712233814410},{"_id":"source/imgs/cddfa26a428743cc8389ba3ccf05f2c5.png","hash":"98c52a9dfb3a9de1974098ff0da66c69dafabbe3","modified":1712233814411},{"_id":"source/imgs/cd9fd718405249d7b843d4d30271f96a.png","hash":"0af5858d4f9488e52d0143b0ec712bbc21a3327b","modified":1712233814410},{"_id":"source/imgs/cedbde566e724fbc9aeb58746042da1b.png","hash":"ea970929a8c2be846010c0269b778cd657a1186a","modified":1712233814411},{"_id":"source/imgs/cf06032c734549a09510f6424aaa5b81.png","hash":"d04f32de05e6e68805d65d6566d71e2b7b38b915","modified":1712233814411},{"_id":"source/imgs/d02225b4919f4ea2adf6be3a0d35f97e.png","hash":"ec4d5947b5db6a30b8ece085145e736d7ab909a4","modified":1712233814411},{"_id":"source/imgs/ca7ca0ea83704218b251c1d867dfc2fd.png","hash":"a7527345e75df92157b2b8f835945a70978bf6e1","modified":1712233814410},{"_id":"source/imgs/d0e700cafcb646fca5460f7d268aa1b9.png","hash":"c7d6b5b5c874850dad166095f852efd9cbcbcf45","modified":1712233814411},{"_id":"source/imgs/d1336902565d488a9abb3e3621db5c1d.png","hash":"dcd8c2095b432ef714922a0958964ee9e4da0944","modified":1712233814412},{"_id":"source/imgs/ce724a5dffb94210bc95e6efedaef78d.png","hash":"880bec30b1c16decfdf114f4c46e8002d19dc73c","modified":1712233814411},{"_id":"source/imgs/d29604aaea8d405183b8273b0578eab3.png","hash":"8d3fae28a2a11ef7ebdb54ab53205cc92a3578f4","modified":1712233814412},{"_id":"source/imgs/d55d28b03e5345b0a6d0b4e16968694a.png","hash":"b3f0665f9dc776dfc0a8d1c56521dafb0c453d26","modified":1712233814412},{"_id":"source/imgs/d2c1ca8234704e8cb918d7b53a008d00.png","hash":"dab33eb5ce98289be231094f85f267df4b5a119a","modified":1712233814412},{"_id":"source/imgs/d0497dc61b2a4607abca4bef7bcc1291.png","hash":"7a952c07bf208e47167091768f2c802d7a6076b9","modified":1712233814411},{"_id":"source/imgs/d5a73937beb048adb64124aa285ec196.png","hash":"d9b392a8fbf594c23a2c79656ddc38d7eeed029e","modified":1712233814412},{"_id":"source/imgs/d689027c2c594f89b566a1e2c5465887.png","hash":"56ba55a47c5f9971b083bfa0789dcd560a1211e7","modified":1712233814412},{"_id":"source/imgs/d4a7b5a1fd644cbb8a63acc576a6708b.png","hash":"9b524eaacb3ecb16a1165b6613a094b71b295097","modified":1712233814412},{"_id":"source/imgs/d642f69551e74e95b50d02aacc6e3148.png","hash":"830e36acebb37ed7890edfa323722ef49df4c982","modified":1712233814412},{"_id":"source/imgs/d9f5150d7a604f33874fe565cd684888.png","hash":"cabc34b47da81decb5e8c4e1f348b7a657b96500","modified":1712233814413},{"_id":"source/imgs/dd6b2573899b44ba945a1763a0cfa88e.png","hash":"6138b065a147730b40c0a5118d3620fafe179839","modified":1712233814413},{"_id":"source/imgs/d6c862c665f04645b862bdcf3158a82b.png","hash":"b08f29674939d83555ca13bae6529b1a4ff072f5","modified":1712233814413},{"_id":"source/imgs/dece515d4cda456cb685723dc7715a50.png","hash":"01c6496fae5986a5704fa5e82838ff57fb843a4d","modified":1712233814413},{"_id":"source/imgs/d886abe69e114dddb8a1c6235046d729.png","hash":"906e72e1dc65ba4fb6679c4fedbfeafea697f900","modified":1712233814413},{"_id":"source/imgs/e00ad4c11d534af69efa593d6876fabf.png","hash":"a151c8acae7b6910ed4ead230f2eb60480dcff9f","modified":1712233814413},{"_id":"source/imgs/e0c516bdfadb4be5b800d09bfce3e6b8.png","hash":"d79513de5fe444c24fa99171baabed3b263cd986","modified":1712233814414},{"_id":"source/imgs/e0e722be9ff347c79397261498aa2a3d.png","hash":"518f4be20c2c8a598a178cfc3034ed8f5e599c62","modified":1712233814414},{"_id":"source/imgs/e27249efe15b4c27b00bb6e5096c23d9.png","hash":"3021ebcf6af7fcddc7a2ec5e638b6b4a5b1079cc","modified":1712233814414},{"_id":"source/imgs/e03c00247a8d44febb9a8f79bade6c66.png","hash":"3826b33d6177c9f2e602fef0ce66e6a0170a4153","modified":1712233814414},{"_id":"source/imgs/e390b931693b43798877d4879c10b445.png","hash":"a045ab027b93dbf39625abe45af29edc888cc07a","modified":1712233814414},{"_id":"source/imgs/e01b6f56c7ee4723811457dc17ac563c.png","hash":"62c391e4b84197d836511238b5d724c88b4e88e5","modified":1712233814413},{"_id":"source/imgs/e3d7b03357a54239877eb4a9e93b8aaf.png","hash":"ca5eaceb466025244922ab2c9de680102413da2d","modified":1712233814414},{"_id":"source/imgs/e8e040971352443faa8d18bd39eb37fa.png","hash":"c375f0368115a897e85fce994d2a456762c67a40","modified":1712233814415},{"_id":"source/imgs/e98140601dec461ca4b95b58c730f66f.png","hash":"2ecd260426cc5ee208f42e73942c3c6241cd4bfb","modified":1712233814416},{"_id":"source/imgs/ee25feb848e4433c94b1ccce931b26b5.png","hash":"f86069557a42ddd3a6169ae3afa4edf5b231fd64","modified":1712233814416},{"_id":"source/imgs/ee559a33603348b7ab100b67c07cc172.png","hash":"0a68f84919003a85996b254545c8d5566cc7e9be","modified":1712233814416},{"_id":"source/imgs/f08580f2d68a41f89945c559ebb019b3.png","hash":"9aa03a177303310d55a9bbc9c286373cdd04efdb","modified":1712233814416},{"_id":"source/imgs/f13bc82ca99e439ba1faa9a552676d10.png","hash":"448445e43e4642a33e299e3fc1fad0ef4e5834b9","modified":1712233814416},{"_id":"source/imgs/f199300488514aa3847075b4b8541c02.png","hash":"e5de5f02b425b6e7c0168c8d57d20e02c3afd535","modified":1712233814416},{"_id":"source/imgs/f0768686252f4a8589a36b0f587ee340.png","hash":"df89faebafff4f79d7bae6101fbc553d0d87d6ee","modified":1712233814416},{"_id":"source/imgs/f210a5129458480ebaeec2e859a5937a.png","hash":"301447573bed8136e8fd25500f2f13769db42960","modified":1712233814417},{"_id":"source/imgs/f1f6b49c0a334c908a0b12e0c1066146.png","hash":"9f66e302921eb478b4d056becdb2901a2dcc4f25","modified":1712233814416},{"_id":"source/imgs/f575ae6f1be64e1cbde17d134299d262.png","hash":"57907ee17b15ae952c0a6a58ac4e4f35aefbba39","modified":1712233814417},{"_id":"source/imgs/f2b797abc9154267b021031cc121ca9b.png","hash":"79ba50eb8d6d7396625e149cce4e5d7e5e4c4d66","modified":1712233814417},{"_id":"source/imgs/e5730d7a315d4863b7ac568223aeefdc.png","hash":"a88c3d93e9a20555c0db0e546c36169223adc9a7","modified":1712233814415},{"_id":"source/imgs/f3e0b8a534b7484eb21fba6411ff6353.png","hash":"284307798f689734dfce5a1e260a5959152a84ba","modified":1712233814417},{"_id":"source/imgs/f5ebeffe23104624bd7cea053bad1fa2.png","hash":"8db78bb6bb2ffc77c46717bc9e171f909d88a647","modified":1712233814417},{"_id":"source/imgs/f75403f63adc4770be663b727db0dc72.png","hash":"40f96b28ed4ff6da1509ef214949c048dbabeea7","modified":1712233814417},{"_id":"source/imgs/f7aeab1411a1476cab6094fa7d7c3038.png","hash":"c185c958362b7ea4bb08ffffb6fd650fde2b009f","modified":1712233814418},{"_id":"source/imgs/f783efff2b084fc5b4a1f578d40f0cff.png","hash":"18f4eb4a0b07417469b4507c2de56f9a2fcae51f","modified":1712233814417},{"_id":"source/imgs/f5ea49d308974526bb0f7708ed122536.png","hash":"f6b1fc34362e9cc3de5e3790091dbb0729f3e885","modified":1712233814417},{"_id":"source/imgs/f7ba852d33624024aa23082379214dbd.png","hash":"4b2cb4abcf25233622af1aaf38e3dd6e3d630d0b","modified":1712233814418},{"_id":"source/imgs/f849f6db6f584dc6b27307ae1f738aa5.png","hash":"1c852038099ba3ce52a40e2506a4fe82439ec49a","modified":1712233814419},{"_id":"source/imgs/f904fc883f7942fd809e7e09c84ac5ef.png","hash":"e769ab0c7ba182faf32e8db5a58a071f52c79015","modified":1712233814419},{"_id":"source/imgs/fa66a173ce194fedbdd97c27d3715544.png","hash":"8b0403bd0f4bcdb74b1da76f87ffa8fa6de619ab","modified":1712233814419},{"_id":"source/imgs/fab6f6cc9c23439fa4783422b7bd1784.png","hash":"dd5671a99feb18d1e8b387e64b7ecd663565a31f","modified":1712233814420},{"_id":"source/imgs/fb1bc2b58f4c4fc2a1af5cdec46e6e97.png","hash":"e0a921dbdae1b4c88f7c1612a67181445f0a1c64","modified":1712233814420},{"_id":"source/imgs/fb244a2e456a42569d5f8887d5c3ca77.png","hash":"bb5335651ffaf6ce8fbaf32d4b77d1adf3a53b2d","modified":1712233814420},{"_id":"source/imgs/f89dd471a85f4238949f7c0850cf121f.png","hash":"dd34b15ba361438a73ef0d9426ffae65bdd4e24b","modified":1712233814419},{"_id":"source/imgs/f877c9447b8447c2a70b2de3d7e87316.png","hash":"9980fa22623e942332c9efa7cd06c6a36b6658af","modified":1712233814419},{"_id":"source/imgs/fb8618145de9463981c94d9afcd58dab.png","hash":"dc4e7822c4789f898fe7b0f09b5eaccfa191a496","modified":1712233814421},{"_id":"source/imgs/fc8e8a6100d64734be18b899a8d23dc2.png","hash":"a5fdf7c5732776eea942879cafcd8f2a64fe4884","modified":1712233814421},{"_id":"source/imgs/fe6f3b7830174af792016fe55c80246d.png","hash":"3190e1cec4b9c11c38adadd25b2d810ddac62712","modified":1712233814421},{"_id":"source/imgs/fea1fc3b1a6e456d95dc097e7636e292.png","hash":"ffc9e91d1a6bf9dd5d4c062245aa771e6ee74c4b","modified":1712233814421},{"_id":"source/imgs/ffaffd3f6eb24adbb8e63baf1a852f93.png","hash":"609d8a35b6c3471ce98eb6ac5210f1033822c3f8","modified":1712233814422},{"_id":"source/imgs/lowcode-artitect.drawio","hash":"428439e5110593fc711bcc5392b6c095d4765e2d","modified":1712233814422},{"_id":"source/imgs/ff45d2fffea849128e2423b23572f2c4.png","hash":"ca39f14413f278be0be20b9adf3a126bcc05ee65","modified":1712233814422},{"_id":"source/imgs/fe65e292fc9e40da8d37030a0f290c18.png","hash":"5c7efa907d533cc8b236fcab1fba276e83073224","modified":1712233814421},{"_id":"source/imgs/071f7b1d75294faa9789f01815f25fa0.png","hash":"df1cf73f1fd5a255244240508f538512e1e771a1","modified":1712233814371},{"_id":"source/imgs/2bcde11c433a42f1892bfd71b6f856c4.png","hash":"e044146123a83ecbf74fa4d44b94fe8a7b8e79d1","modified":1712233814382},{"_id":"source/imgs/378d8fac26cd462790f75e6ae448bf23.png","hash":"51d56458d0e147d5ed41593c9d65f8cac877edad","modified":1712233814387},{"_id":"source/imgs/3c1031d4444443d0b24ef31233934c57.png","hash":"52a0889515778aa0df89ede1fd1b7257be0fd286","modified":1712233814388},{"_id":"source/imgs/6cea5abb144a400aa90e04c5d2477863.png","hash":"46fb15dcadb2f8adc0f08dccd749ec932343a89e","modified":1712233814397},{"_id":"source/imgs/83ac44a2a5984f138e3b756c1675d8be.png","hash":"51371995cdb8a13fa2cde74d5b856853d3989439","modified":1712233814401},{"_id":"source/imgs/ac27b01d800e49c6ab28d7b360be367b.png","hash":"1649a13c4cd2f187a7883edcdca1a1eb3d212708","modified":1712233814407},{"_id":"source/imgs/9cae13a7088c416281438340e15e85ba.png","hash":"2819ab979a090ef8f2dddd0c3f67390c1788536f","modified":1712233814404},{"_id":"source/imgs/e50340b5c1cb474d9601715ee83b358f.png","hash":"6044b5a6d3b6885d4a33959096b7b9b718f090cd","modified":1712233814415},{"_id":"source/imgs/f7c1eace740044619142888b35fcb580.png","hash":"a44ca4a9a0ef170c3c901bedc5041c33358a6adc","modified":1712233814418},{"_id":"source/imgs/29b6b15893e049a78bcfd9dababd7be7.png","hash":"18facb7b743aeac27410284de9fa8c2a104ba3c6","modified":1712233814381},{"_id":"themes/vivia/LICENSE","hash":"1039079fb6969c255e3df9a411ff5f94702f53ad","modified":1712233814422},{"_id":"themes/vivia/.gitattributes","hash":"ba3dfe345280bdcc5e817bb02cf49b8b8d8e1c4c","modified":1712233814422},{"_id":"themes/vivia/example_zh_CN_config.vivia.yml","hash":"756b4d5965cff0cb89062ab52d50714f92532a01","modified":1712233814422},{"_id":"themes/vivia/example_config.vivia.yml","hash":"1105cff0e9967389176aeb64e26530665af80aa1","modified":1712233814422},{"_id":"themes/vivia/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1712233814422},{"_id":"themes/vivia/package.json","hash":"dda08139954a6e50e056bdb197b55fd1eb6925ae","modified":1712233814426},{"_id":"themes/vivia/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1712233814422},{"_id":"themes/vivia/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1712233814422},{"_id":"themes/vivia/languages/en.yml","hash":"b4b55e56a0554bfdc383650742c2038cef777142","modified":1712233814423},{"_id":"themes/vivia/languages/zh-CN.yml","hash":"89154c7877fa274d340e2adb2241167abda71c60","modified":1712233814423},{"_id":"themes/vivia/languages/zh-TW.yml","hash":"9098818e791e19d9921e256c771664b2cd999e13","modified":1712233814423},{"_id":"themes/vivia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1712233814425},{"_id":"themes/vivia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1712233814425},{"_id":"themes/vivia/languages/zh.yml","hash":"e56bebd19d2abd1698e9aa87d337941957977468","modified":1712233814423},{"_id":"themes/vivia/README.zh-CN.md","hash":"8b614f3b300fd0b4a4b7858b0897cd55ae00ef48","modified":1712233814422},{"_id":"themes/vivia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1712233814426},{"_id":"themes/vivia/layout/index.ejs","hash":"c9d8dca730a254ab3f48309677a3cb994e513ad6","modified":1712233814425},{"_id":"themes/vivia/README.md","hash":"f3bb9857bd474e06d9fa42cc1911c6ee8d86649f","modified":1712233814422},{"_id":"themes/vivia/layout/layout.ejs","hash":"11c0de0294fa83f38d70fcb3d5c47f77ed1e98da","modified":1712233814425},{"_id":"themes/vivia/scripts/archive-helper.js","hash":"a04e4c8c0925652635e50605182dc5f1509b910f","modified":1712233814426},{"_id":"themes/vivia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1712233814426},{"_id":"themes/vivia/scripts/categories-process.js","hash":"41b6be3986763efb8a8b363cbabba177c502a193","modified":1712233814426},{"_id":"themes/vivia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1712233814426},{"_id":"themes/vivia/scripts/color-generate.js","hash":"90dff57087b692d2aa687c49980a0eed56a2f058","modified":1712233814426},{"_id":"themes/vivia/layout/_icon/menu.ejs","hash":"47f04d2c6413beaffee57d6164b5637bdb2cd1cb","modified":1712233814423},{"_id":"themes/vivia/layout/_icon/dark_mode.ejs","hash":"0ea0e23fb16103f424591cf46939fcf07738ccc1","modified":1712233814423},{"_id":"themes/vivia/layout/_icon/rss_feed.ejs","hash":"8bac3aa45c0e7a55f38783e7350039d0b1adb48b","modified":1712233814423},{"_id":"themes/vivia/layout/_icon/navigate_next.ejs","hash":"c3ecb137ebc9bb949aebe3fc0631b05ba578c8e1","modified":1712233814423},{"_id":"themes/vivia/layout/_icon/wb_sunny.ejs","hash":"ef254cc64ba10918218a6672e34fd5f6d4ce08bb","modified":1712233814423},{"_id":"themes/vivia/layout/_partial/article.ejs","hash":"b63c43eb5902d2c2d64be1e700c639eb81b8a4e4","modified":1712233814423},{"_id":"themes/vivia/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1712233814423},{"_id":"themes/vivia/layout/_partial/archive.ejs","hash":"18ce04699f53584ee6003bb2fc793d792e75157d","modified":1712247004419},{"_id":"themes/vivia/layout/_icon/navigate_before.ejs","hash":"1c11e29aa2719674b161c072e53576ac38b1ee65","modified":1712233814423},{"_id":"themes/vivia/layout/_partial/back-to-top.ejs","hash":"a5132c5ab08b55891bcfe10d36ec83cacbfd60af","modified":1712233814423},{"_id":"themes/vivia/layout/_partial/baidu-analytics.ejs","hash":"5951d0adc0490ff4d5c956e54d4828119755d1e7","modified":1712233814424},{"_id":"themes/vivia/layout/_partial/banner.ejs","hash":"7f9c0b7d10238b45c1c1a65df7f801c904ae898c","modified":1712233814424},{"_id":"themes/vivia/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1712233814424},{"_id":"themes/vivia/layout/_partial/head.ejs","hash":"b52fd8595ec4849944564721810e74948895675f","modified":1712233814424},{"_id":"themes/vivia/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1712233814424},{"_id":"themes/vivia/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1712233814424},{"_id":"themes/vivia/layout/_partial/navbar.ejs","hash":"7d4a434cba72a3bca58b59fab4ce15894da68049","modified":1712233814424},{"_id":"themes/vivia/layout/_partial/sidebar.ejs","hash":"97eee27bfb59ccc109fcd9ce87963f686c2b6ba9","modified":1712233814425},{"_id":"themes/vivia/layout/_partial/footer.ejs","hash":"e78a36c94879f70df2ec615ccc2b5d459eeb4fe7","modified":1712233814424},{"_id":"themes/vivia/layout/_widget/category.ejs","hash":"cc465be58bf6aeee7947e9cf9563c651e42e7a5d","modified":1712233814425},{"_id":"themes/vivia/layout/_widget/color.ejs","hash":"9e00f6c621db3c5c659b03d1dad6caa90d6217d9","modified":1712233814425},{"_id":"themes/vivia/layout/_widget/archive.ejs","hash":"1dd3efd775f09f3e5a0e0205ddb8388851dfad57","modified":1712233814425},{"_id":"themes/vivia/source/css/_extend.styl","hash":"cc37f2c5f8ccdb77f87cf8ed35ea71a2d66c9605","modified":1712233814426},{"_id":"themes/vivia/layout/_widget/recent_posts.ejs","hash":"647f4151e7fca48af2b727228b84deb0652a6376","modified":1712233814425},{"_id":"themes/vivia/layout/_widget/profile.ejs","hash":"ccd8c2442f3437b6752946f4d573edefaf2cd4c0","modified":1712233814425},{"_id":"themes/vivia/layout/_widget/tag.ejs","hash":"f231a62130014c07dc1888ed30399bcfde3ed0c0","modified":1712233814425},{"_id":"themes/vivia/source/css/_variables.styl","hash":"b6b8419839cfbed3a0bde16ed1e6ad44bc59b7fe","modified":1712233814428},{"_id":"themes/vivia/source/css/style.styl","hash":"32cceae9c16fb4de06fd64bc333f07a1ba4d7528","modified":1712233814431},{"_id":"themes/vivia/source/images/favicon-dark-180.png","hash":"4771a6bd0386924ad31719f8999c036b36ad5688","modified":1712233814432},{"_id":"themes/vivia/source/images/favicon-dark-128.png","hash":"44cceeef5fddc81a613faf6caa53bac139a6b564","modified":1712233814432},{"_id":"themes/vivia/source/images/favicon-dark-32.png","hash":"8ef87b664e5c6250e5badd7312fe192e30fe2e83","modified":1712233814432},{"_id":"themes/vivia/source/images/favicon-light-128.png","hash":"9c93c4ac222da14ca4f43b2d54573ce4099a161b","modified":1712233814432},{"_id":"themes/vivia/source/images/favicon-dark-192.png","hash":"929acfdd6e69ceacdecf40a03ed520f826750c06","modified":1712233814432},{"_id":"themes/vivia/source/images/favicon-light-192.png","hash":"0d5f76f309b6a0661d695d6bf4db8ef8a56e4ae5","modified":1712233814432},{"_id":"themes/vivia/source/images/favicon-light-180.png","hash":"6b26caab1d036726beaf47510bada4cddf253b24","modified":1712233814432},{"_id":"themes/vivia/source/images/favicon-light-32.png","hash":"604915a91ddede7874d5dcfa4de0bc4b04ae5da6","modified":1712233814432},{"_id":"themes/vivia/source/images/tile.png","hash":"fbc016bfb004a5ca4a8c6f0b078ae320ec98ba20","modified":1712233814432},{"_id":"themes/vivia/source/js/light-dark-switch.js","hash":"371eacee9af459d04de60190c549fe7f8374be36","modified":1712233814433},{"_id":"themes/vivia/source/js/load-settings.js","hash":"f420677aad3d200b4f92fca60ab5cb47c7db9a21","modified":1712233814433},{"_id":"themes/vivia/source/js/color.global.min.js","hash":"8140005be5afebb828b2890ce6e686ece34e78df","modified":1712233814432},{"_id":"themes/vivia/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1712233814433},{"_id":"themes/vivia/layout/_partial/post/nav.ejs","hash":"86886e1ca10aec7087b44048f92719d24ac738f4","modified":1712233814424},{"_id":"themes/vivia/layout/_partial/post/category.ejs","hash":"9f06ff87e50ff5005080c6bdebf4a0bbaf550aba","modified":1712233814424},{"_id":"themes/vivia/layout/_partial/post/gallery.ejs","hash":"0282d116251bd60b91e05c786386e4d570035996","modified":1712233814424},{"_id":"themes/vivia/layout/_partial/post/date.ejs","hash":"760970e719ef973c18ac36c9fc9e13d0edaaaa5a","modified":1712233814424},{"_id":"themes/vivia/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1712233814424},{"_id":"themes/vivia/layout/_partial/post/title.ejs","hash":"14e34508135bf83763d8c1f1f8d8467dff689002","modified":1712233814425},{"_id":"themes/vivia/source/css/_partial/archive.styl","hash":"ee7b27115aed0182dc9ac51b637a2bf986b56f55","modified":1712233814426},{"_id":"themes/vivia/source/css/_partial/article.styl","hash":"cb77215312d030593afc5067810198cd2e2a710c","modified":1712233814427},{"_id":"themes/vivia/source/css/_partial/back-to-top.styl","hash":"1fde6eb62fd961ff33995b7c9472ef00a4bbb329","modified":1712233814427},{"_id":"themes/vivia/source/css/_partial/main-title.styl","hash":"73df1241b15d62cc19665883cd789440d4c7e7a6","modified":1712233814427},{"_id":"themes/vivia/source/css/_partial/comment.styl","hash":"35cca399adc17633885ca416e8c48acd468d0e31","modified":1712233814427},{"_id":"themes/vivia/source/css/_partial/settings.styl","hash":"6e67f8c3659f6a9dd49e513a595a01c1afebf87c","modified":1712233814427},{"_id":"themes/vivia/source/css/_partial/footer.styl","hash":"f038558bfe427b2cedd029cb9638c1d70d936763","modified":1712233814427},{"_id":"themes/vivia/source/css/_partial/header.styl","hash":"c7a95fbec06dba431c45e558dbaa767f0dacd1a3","modified":1712233814427},{"_id":"themes/vivia/source/css/_partial/highlight.styl","hash":"3abb118aae2dba149cb616bbcbfed129ccfcb5b7","modified":1712233814427},{"_id":"themes/vivia/source/css/_partial/sidebar-aside.styl","hash":"87da0ef32f6e4e6cf742450f91731c68a68796ae","modified":1712233814427},{"_id":"themes/vivia/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1712233814427},{"_id":"themes/vivia/source/css/_partial/sidebar.styl","hash":"69a08fe059c5e2ee00760ae61f1123d61d90c39a","modified":1712233814427},{"_id":"themes/vivia/source/css/_util/color.styl","hash":"f98e30552996949e07529f13342f26ebd45a2281","modified":1712233814427},{"_id":"themes/vivia/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1712233814428},{"_id":"themes/vivia/source/css/_util/config.styl","hash":"8d603fa8f7957cd6a06f01616ea54977bdf62db2","modified":1712233814428},{"_id":"themes/vivia/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1712233814428},{"_id":"source/imgs/3709d5cc20cd4f3b925887c5a9c72d51.png","hash":"88941efeac58bedc1ffad234df2f74f0967e1bab","modified":1712233814386},{"_id":"themes/vivia/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1712233814433},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1712233814431},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1712233814431},{"_id":"themes/vivia/source/css/fonts/Roboto-Bold.ttf","hash":"62442a18a9fe9457c1afeabf683d263a691b7798","modified":1712233814429},{"_id":"themes/vivia/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1712233814428},{"_id":"themes/vivia/source/css/fonts/Roboto-Medium.ttf","hash":"3c6a09fcc6a454924c81af7dff94fc6d399ed79b","modified":1712233814429},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1712233814430},{"_id":"themes/vivia/source/css/fonts/Roboto-Regular.ttf","hash":"56c5c0d38bde4c1f1549dda43db37b09c608aad3","modified":1712233814429},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1712233814431},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1712233814431},{"_id":"public/archives/page/7/index.html","hash":"58cfa0d841c1977ed952b43f44ac161ea9705643","modified":1712247399188},{"_id":"public/archives/2019/09/index.html","hash":"db0f883d05891fb6a4b6530c8d857daa23c336a5","modified":1712247399188},{"_id":"public/archives/2019/01/index.html","hash":"057fcf2dbf8953a5140365e24b7b97e8920095dd","modified":1712247399188},{"_id":"public/archives/2020/index.html","hash":"82b4b079f1e110729c19f65c1016e094dc5da828","modified":1712247399188},{"_id":"public/archives/2020/01/index.html","hash":"d28082bd1ce679c558aea0c74e36c54d1254c10c","modified":1712247399188},{"_id":"public/archives/2021/page/4/index.html","hash":"114bbe89ca920e484f0077a7b58b4ce5ea23cd36","modified":1712247399188},{"_id":"public/archives/2021/01/index.html","hash":"82449e853d34d6629b4418d77cf9ca83958f8f2f","modified":1712247399188},{"_id":"public/archives/2021/04/index.html","hash":"7a523e93a766693c7ea7fe83450904634851fe3a","modified":1712247399188},{"_id":"public/archives/2021/05/index.html","hash":"e68723d1709fcb5c6e4d36d145872aefcd03bf79","modified":1712247399188},{"_id":"public/archives/2021/07/index.html","hash":"b57317485b8ef8d0e0b9f5d3ca0d53289ab3cbb4","modified":1712247399188},{"_id":"public/archives/2021/08/index.html","hash":"7750b8716a4940c498d3668393e8578508c6cd51","modified":1712247399188},{"_id":"public/archives/2021/09/index.html","hash":"860e4edfc68e90698687ce93c9df15aec4782868","modified":1712247399188},{"_id":"public/archives/2021/10/index.html","hash":"7e93d6d334cd2faaac35aa810802536e29eb30db","modified":1712247399188},{"_id":"public/archives/2022/page/3/index.html","hash":"d871d0a46989c35b62d346fb6531840cee687cc7","modified":1712247399188},{"_id":"public/archives/2022/02/page/2/index.html","hash":"545d78dcb916895b6978445575c3ce5e2e326ae9","modified":1712247399188},{"_id":"public/archives/2022/03/index.html","hash":"e9d65f6afb2cfa3e349ca865e1d082090933caf6","modified":1712247399188},{"_id":"public/tags/NestJS/index.html","hash":"74ee490749fc9b3f75eb726bcf8146a4f5cb5b4f","modified":1712247399188},{"_id":"public/tags/前端/page/6/index.html","hash":"8329aee4cca616eeaf46bc8e16682687d73b890d","modified":1712247399188},{"_id":"public/tags/MobX/index.html","hash":"74a0ef95e32ec56dc98cb83a12172c2a7f292023","modified":1712247399188},{"_id":"public/tags/MongoDB/index.html","hash":"056dae4c6d2f25c4cc454197731ec3bbbef33a88","modified":1712247399188},{"_id":"public/tags/源码/index.html","hash":"47e92f18e4205399f68f42a4636426d188e3fbb2","modified":1712247399188},{"_id":"public/tags/Redux/index.html","hash":"6d222e8076c0095d46fd8ae75e66baae503a4030","modified":1712247399188},{"_id":"public/tags/TypeScript/index.html","hash":"8335bf0fbe94a1c282c418ad7c8db244d30d7997","modified":1712247399188},{"_id":"public/tags/架构/index.html","hash":"1813f4779178733204ac48b4b3fb1614b8e50ea0","modified":1712247399188},{"_id":"public/tags/ECMAScript-6/index.html","hash":"29d1f96b91a0fb2986cc2a6d8348179cb2983e59","modified":1712247399188},{"_id":"public/tags/UML/index.html","hash":"7f58a31b79f6de939d5eaa85d7f47071476e497f","modified":1712247399188},{"_id":"public/tags/JavaScript/index.html","hash":"ffbd39922fdf28a48ccfa73ad3aa7b6952727ba0","modified":1712247399188},{"_id":"public/tags/正则表达式/index.html","hash":"b0798cbaaf56db22fac10850847976c6d41400d0","modified":1712247399188},{"_id":"public/tags/Webpack/index.html","hash":"a36e7a177ab0a28c945ea3f7b8c5037c46fcd337","modified":1712247399188},{"_id":"public/tags/Less/index.html","hash":"9ec8b647e6a0c2bf9245fe6b68b76a37f72bb2b8","modified":1712247399188},{"_id":"public/tags/Postman/index.html","hash":"5cdc50c71f0e991f7f9baa65b26391bf7faf276b","modified":1712247399188},{"_id":"public/tags/Docker/index.html","hash":"429b8b4a84178aa196f64a1a765d5aa6c6a38fda","modified":1712247399188},{"_id":"public/tags/NPM/index.html","hash":"bbebf8382fb1a40fa3554cf824425282f537bb87","modified":1712247399188},{"_id":"public/tags/Yeoman/index.html","hash":"e2920a79bb0e75f33f7fd705061ddca33e856349","modified":1712247399188},{"_id":"public/tags/面试/index.html","hash":"0ec005214538374a3177584b0cc7159195b6e1bf","modified":1712247399188},{"_id":"public/tags/爬虫/index.html","hash":"4f01f4dbac3659fd1141432d2f2620c0a431ec72","modified":1712247399188},{"_id":"public/tags/Canvas/index.html","hash":"dc634776900e605af62efde0799ce3ac0324a6bc","modified":1712247399188},{"_id":"public/tags/Ant-Design/index.html","hash":"a204feb7fd04b771d55e2566a8717b8490ee7f74","modified":1712247399188},{"_id":"public/2022/03/16/再看箭头函数的this指向——《JavaScript高级程序设计》造成的歧义/index.html","hash":"05c2e64912ffa1d79dae0b4d4db262cc485243e8","modified":1712247399188},{"_id":"public/2022/03/06/前端docker快速入门——Compose/index.html","hash":"82d73a930b416d7e492089c58e17ce7cd5c65b6c","modified":1712247399188},{"_id":"public/2022/03/05/前端docker快速入门——Dockerfile/index.html","hash":"1d76c0697e9dbd0769e241bcd4a7b656cc695006","modified":1712247399188},{"_id":"public/2022/02/28/前端docker快速入门——常用命令/index.html","hash":"06023afce3ca982ad8a40a67bba0aab1395f6e6a","modified":1712247399188},{"_id":"public/2022/02/27/排序算法之桶排序/index.html","hash":"2af1b039d206c8e8c37341e725fb5ad8cbd24bba","modified":1712247399188},{"_id":"public/2022/02/24/MongoDB 整库导入/index.html","hash":"e400e37872d80aded5ee81a2b09a32e6541592eb","modified":1712247399188},{"_id":"public/2022/02/22/UML快速入门——活动图/index.html","hash":"78653bfe7ec587664e65e6430dff90ec562f0b5c","modified":1712247399188},{"_id":"public/2022/02/21/UML快速入门——顺序图和通信图/index.html","hash":"4b3cf116c40ec6319719e9a59a4394cc93033230","modified":1712247399188},{"_id":"public/2022/02/20/UML快速入门——类图进阶/index.html","hash":"dfeb0239b3d517ef60762bf0a94916440493ae72","modified":1712247399188},{"_id":"public/2022/02/19/UML快速入门——类图基础/index.html","hash":"ea128f4ebe60b5dad403cd1292694dc14dd1d894","modified":1712247399188},{"_id":"public/2022/02/18/@nestjsx crud快速入门/index.html","hash":"1dcacf45915055eb3a024ec69ec511ba8d97b083","modified":1712247399188},{"_id":"public/2022/02/16/排序算法之计数排序/index.html","hash":"bf65a841f8bafa24fb6bbf40d53853098d841e49","modified":1712247399188},{"_id":"public/2022/02/15/TypeORM之增删改查/index.html","hash":"a96e3305a4dce847b147000e6350785b437720d8","modified":1712247399188},{"_id":"public/2022/02/14/TypeORM 快速入门/index.html","hash":"e768989f1c13436a6e2e6f1f6b0c5d64264f14ed","modified":1712247399188},{"_id":"public/2022/02/13/排序算法之快速排序/index.html","hash":"a09cee36cd4aeeb65878e9648b02fca402643d5f","modified":1712247399188},{"_id":"public/2022/02/12/排序算法之归并排序/index.html","hash":"f64c757d2724060ba3aa2c6e00519b1c2de6b189","modified":1712247399188},{"_id":"public/2022/02/11/排序算法之插入排序/index.html","hash":"29fbc4bde757b2960990e92418ea7e8348fe3736","modified":1712247399188},{"_id":"public/2022/02/10/排序算法之选择排序/index.html","hash":"e60b832cda0167efd108c01bb4076e139d4861a1","modified":1712247399188},{"_id":"public/2022/02/09/排序算法之冒泡排序/index.html","hash":"596298438de1efad368d12302fca977dca04b579","modified":1712247399188},{"_id":"public/2022/02/08/架构方法之C4模型/index.html","hash":"b2141cfda8082e619b0f49e6b3335f959b7f1f0b","modified":1712247399188},{"_id":"public/2022/02/07/什么时候该用useReducer/index.html","hash":"bc0f4cfd8e8de863e2fc27ee95a34c0f8ce6457f","modified":1712247399188},{"_id":"public/2022/01/29/如何备份掘金上的博客？用node写个爬虫吧~/index.html","hash":"700fabc3955568b43c420e03c7175d64206ae6a7","modified":1712247399188},{"_id":"public/2022/01/27/React-Redux7源码解析——connect/index.html","hash":"77b0f4df542bd65962a6ee5e98613dfb47e241de","modified":1712247399188},{"_id":"public/2022/01/26/useContext和useReducer真的可以代替Redux吗/index.html","hash":"b3e34fa7854fe90b13a54ecdc4c97c6829fc5171","modified":1712247399188},{"_id":"public/2022/01/25/React-Redux7源码解析——Provider/index.html","hash":"022e6bd22b799fd7e41677f7d582902bb17e41ab","modified":1712247399188},{"_id":"public/2022/01/24/React18中的新特性——useSyncExternalStore/index.html","hash":"c4b72c95d206902767699b94a195e48a8d683ed2","modified":1712247399188},{"_id":"public/2022/01/23/React18中的新特性——startTransition/index.html","hash":"1c08b701a17f3acebd570f56d9defc1dbdb4fd56","modified":1712247399188},{"_id":"public/2022/01/22/React18中的新特性——Automatic batching/index.html","hash":"902beaac2f93706bca2828e725c77c8fea1f1aab","modified":1712247399188},{"_id":"public/2022/01/21/Redux5源码解析：store与reducer/index.html","hash":"25106a8e56601603890472faa2103dfa6fbd59c2","modified":1712247399188},{"_id":"public/2022/01/20/Redux5源码解析  applyMiddleware——解剖“洋葱圈”/index.html","hash":"5fe516898e921003bdc25a0f9431159d3651a778","modified":1712247399188},{"_id":"public/2022/01/19/Redux5源码解析  applyMiddleware——源码初探/index.html","hash":"77ec707ca93c7e0df71f67bbf8faeb913f8c3a8d","modified":1712247399188},{"_id":"public/2022/01/18/Redux5源码解析  compose/index.html","hash":"560546add76d22b5c5477bac7c846bc778b69355","modified":1712247399188},{"_id":"public/2021/12/23/前端面试官进阶指南(下)/index.html","hash":"a0217c97be16b6bc9e4195e56748d95e2b40a1cf","modified":1712247399188},{"_id":"public/2021/12/19/前端面试官进阶指南(上)/index.html","hash":"3a82c03dd1c6c85f8edc7a263d77a6a804f6c64f","modified":1712247399188},{"_id":"public/2021/12/07/Mobx6核心源码解析（五）  Reaction和事务/index.html","hash":"dc5cae24ecc75387e58f93b8d60cbb3d740a1ac1","modified":1712247399188},{"_id":"public/2021/12/06/Mobx6核心源码解析（四）  ObservableValue/index.html","hash":"9b2d11aa305a9e9c2e758935945584521fcbaa17","modified":1712247399188},{"_id":"public/2021/12/03/Mobx6核心源码解析（三）  ObservableObjectAdministration/index.html","hash":"1ec93c1b39f75558cdec0b8a5d8daf93640e08fc","modified":1712247399188},{"_id":"public/2021/12/03/Mobx6核心源码解析（二）  observable/index.html","hash":"7ebec3126d906f4ee5c5d3fff1ee4c6dfa7f3e66","modified":1712247399188},{"_id":"public/2021/11/30/Mobx6核心源码解析（一）  实现一个简易的observable和autorun/index.html","hash":"7472d46159fb71142b83e8cca5dd35995f579c24","modified":1712247399188},{"_id":"public/2021/11/28/React library快速入门——Mobx/index.html","hash":"a919ec37fd79208295fc8762a84c78c667b86916","modified":1712247399188},{"_id":"public/2021/11/27/CSS函数大全（四）：杂项和未来/index.html","hash":"9e68845cabac82dccb05053c704b8451fb09537f","modified":1712247399188},{"_id":"public/2021/11/26/CSS函数大全（三）：颜色、渐变和滤镜/index.html","hash":"3c793760e129de59b1f86ebe5b1b303c22b4cb6f","modified":1712247399188},{"_id":"public/2021/11/25/CSS函数大全（二）：转换、动画和形状 path/index.html","hash":"a2e9da0f721a0a514ce825f65eff90696cd3b7b6","modified":1712247399188},{"_id":"public/2021/11/24/CSS函数大全（一）：运算、网格和伪类/index.html","hash":"964b44a8878a70cba94b449c4ea3b1f66cc3ee67","modified":1712247399188},{"_id":"public/2021/11/23/React 关于ref，你想知道的都在这里/index.html","hash":"d52b1daf4ff57a5b920fae596e7935d013b4e9c7","modified":1712247399188},{"_id":"public/2021/11/22/Vue2源码解析：从nextTick与异步更新说起/index.html","hash":"b03c5029bde7f4d9b61e2810ecb0b826e6a4148f","modified":1712247399188},{"_id":"public/2021/11/21/抛开State和Context谈前端组件通信(二)——CustomEvent与 HotEvent/index.html","hash":"a4ebe0f9fd49ecb59f714f19833da18a6fa38dc4","modified":1712247399188},{"_id":"public/2021/11/20/React library快速入门——Redux Toolkit/index.html","hash":"10e58bab2ff95f1968c9efdab5fcd5285d1749e1","modified":1712247399188},{"_id":"public/2021/11/19/在React中优雅地使用弹窗——useModal的优化/index.html","hash":"0edb37f08e447f7267543c5892c82cafac17b09d","modified":1712247399188},{"_id":"public/2021/11/18/在React中优雅地使用弹窗——useModal/index.html","hash":"b898f98982cfbafeeb24a6f45d658ef844e984e6","modified":1712247399188},{"_id":"public/2021/11/17/在React中优雅地使用弹窗——withModal/index.html","hash":"39ca849f81ff68520ecd51a95ccaa23d5e4f65ed","modified":1712247399188},{"_id":"public/2021/11/16/抛开State和Context谈前端组件通信(一)——实例劫持+中介者通信/index.html","hash":"48112c3bff3c57f84da17941f9ded8b253382dc7","modified":1712247399188},{"_id":"public/2021/11/15/前端脚手架：从入门到进阶——Create React App源码解析（四）/index.html","hash":"fedaf3b47e0a32272e48dc2abfe8e2069424a961","modified":1712247399188},{"_id":"public/2021/11/14/React library 快速入门——Recoil/index.html","hash":"83bfd6c9b69d249d0d8feb792b8a29af3c418380","modified":1712247399188},{"_id":"public/2021/11/13/使用AVA测试你的Typescript/index.html","hash":"c35146da7edc8b919f8f4fe880c9af07bd3da2ea","modified":1712247399188},{"_id":"public/2021/11/12/前端脚手架：从入门到进阶——CLI常用的npm包(三)/index.html","hash":"c96efed6d1383db208e41552aee27d44fd352ace","modified":1712247399188},{"_id":"public/2021/11/11/前端脚手架：从入门到进阶——CLI常用的npm包(二)/index.html","hash":"f0a1c275f0f323f4c3647964442ad2a1b171c202","modified":1712247399188},{"_id":"public/2021/11/09/如何使TypeScript根据函数的实参推导其返回值类型/index.html","hash":"5b074d73bb69b40b24f038240fb6c81635c30289","modified":1712247399188},{"_id":"public/2021/11/08/React library 快速入门——React Query/index.html","hash":"f43888ec654a16ce6f91d08e2ab422e1f117fbc8","modified":1712247399188},{"_id":"public/2021/11/07/响应式网页设计之响应式图片(一)/index.html","hash":"112ad2898af0c23e0ddf8d9a9a26d019a5dfdffa","modified":1712247399188},{"_id":"public/2021/11/06/前端脚手架：从入门到进阶——Create React App源码解析（三）/index.html","hash":"ff913798623193065406473585d313bde9e67ca8","modified":1712247399188},{"_id":"public/2021/11/05/前端脚手架：从入门到进阶——Create React App源码解析（二）/index.html","hash":"2d00eb46e12ac31ce7139550304041af05ed41e7","modified":1712247399188},{"_id":"public/2021/11/04/前端脚手架：从入门到进阶——Create React App源码解析（一）/index.html","hash":"b95da740e629882d3fb9314219811b3bbf31d5fb","modified":1712247399188},{"_id":"public/2021/11/03/前端脚手架：从入门到进阶——Yeoman 自定义Generator/index.html","hash":"362a30a8b22523a37c9f9930c97f2cc70f71de2a","modified":1712247399188},{"_id":"public/2021/11/02/前端脚手架：从入门到进阶——Yeoman Generator Api/index.html","hash":"9a0292c1c8d3b6785318b6c5ff5c9526cdada2d2","modified":1712247399188},{"_id":"public/2021/11/01/前端脚手架：从入门到进阶——Yeoman/index.html","hash":"36a982aec79e6319d9f8ee1b34f647c38d947b75","modified":1712247399188},{"_id":"public/2021/10/14/【翻译】`at`将加入ECMAScript/index.html","hash":"d655e7d64cb1e7c37c824612ac738cc18023f391","modified":1712247399188},{"_id":"public/2021/10/14/为什么慢两拍：关于promise规范thenable的白话解释/index.html","hash":"7651426f51c64bc178cd1ea96bbd187998483845","modified":1712247399188},{"_id":"public/2021/10/09/【翻译】对某些元素抵消样式不如活用选择器/index.html","hash":"56bea16829d64f584f6b18c6f41f751ab5f15329","modified":1712247399188},{"_id":"public/2021/10/08/【翻译】css中的“gap”/index.html","hash":"ded894cdf0569d4c95a4fdb27cb1d928be825acc","modified":1712247399188},{"_id":"public/2021/09/18/实操使用原子级样式快速精准还原设计稿/index.html","hash":"46ac7bb54869d89ebd2aa53a30d500f6569e62fc","modified":1712247399188},{"_id":"public/2021/08/19/tailwind使用指南——老项目迁移/index.html","hash":"fd7353f5ae8469fd813045b84f6f48ec40acbb9b","modified":1712247399188},{"_id":"public/2021/08/18/tailwind使用指南——常见问题和实践建议/index.html","hash":"2143fc32f066544dc3a922b32f1f08f458a4d69b","modified":1712247399188},{"_id":"public/2021/08/16/tailwind使用指南——起步/index.html","hash":"fac6fbd5c31afe02678197e2cc9f260a6b2d4f4e","modified":1712247399188},{"_id":"public/2021/08/16/tailwind使用指南——配置/index.html","hash":"2df31b641ecfc0431d91afba1a39cf2939e2d7cf","modified":1712247399188},{"_id":"public/2021/07/29/基于swagger和AST的轻量级mock方案/index.html","hash":"599fb0de81997ba37a95d51a7cd89d64069a9549","modified":1712247399188},{"_id":"public/2021/05/26/封装一个Request库需要考虑哪些/index.html","hash":"b34fd4cfa126946552aa69fe2506b06246dfb30b","modified":1712247399188},{"_id":"public/2021/05/12/React hooks的闭包陷阱：function props/index.html","hash":"6c2eedc7e97160416cb0ebbc29683c6a960b345d","modified":1712247399188},{"_id":"public/2021/05/08/webpack5 升级踩坑/index.html","hash":"be66ac67e2711eda2d015cd9d4eae502025424f4","modified":1712247399188},{"_id":"public/2021/04/18/eslint + typescript 配置参考/index.html","hash":"9e872e2c76ba2900ac1f3afe87db736edce4c59b","modified":1712247399188},{"_id":"public/2021/01/10/TypeScript4中的短路运算符/index.html","hash":"89b72d922499fdf59667e4316614eec952650ba2","modified":1712247399188},{"_id":"public/2020/01/16/过年啦，用canvas画个烟花吧/index.html","hash":"feb51e58c7ddf1116460302558dafd780161d230","modified":1712247399188},{"_id":"public/2019/12/31/React中使用UMEditor/index.html","hash":"e7631243e7f8435ff15e30b88c5210778609cff0","modified":1712247399188},{"_id":"public/2019/12/31/nodejs对项目下所有空文件夹创建gitkeep/index.html","hash":"5ecd27b56dadc705ce42d0305eced3df040e4084","modified":1712247399188},{"_id":"public/2019/12/31/ueditor自定义控件和图片请求/index.html","hash":"c78f4a4372b52c1565b0bce3fdda84ddb45e25ce","modified":1712247399188},{"_id":"public/2019/12/31/三分钟搞懂js属性描述符之基础知识/index.html","hash":"f0355e76999bc6a53a8215433d8b4d5acfc9bc92","modified":1712247399188},{"_id":"public/2019/12/31/三分钟搞懂正则之反向引用和零宽断言/index.html","hash":"3f28f92b3bec1fc42b60087e655b933a247100a9","modified":1712247399188},{"_id":"public/2019/12/31/使用less生成公共样式/index.html","hash":"1e777f77744d6c7b7d392145117988254c811ad7","modified":1712247399188},{"_id":"public/2019/12/31/使用postman创建collection测试接口/index.html","hash":"22960c3a29507e2f9f7a06db725fb00ca8d61596","modified":1712247399188},{"_id":"public/2019/12/31/解决antd icon打包过大的问题/index.html","hash":"1e8dad63873c802e4ede3847e5a989a39ab23fbe","modified":1712247399188},{"_id":"public/2019/09/03/三分钟搞懂正则之捕获/index.html","hash":"80644b92bc69ab446025f67c6580989a8de4f86a","modified":1712247399188},{"_id":"public/2019/01/24/asnyc await的并行/index.html","hash":"cf2bba7718e232e078d5797a7784ed653cf6f563","modified":1712247399188},{"_id":"public/archives/index.html","hash":"fa6074758614904b29ad6f4ec4f2f225b608d86e","modified":1712247399188},{"_id":"public/archives/page/2/index.html","hash":"e196c0d2c72be71f1eb44c119839a5f2e898beb2","modified":1712247399188},{"_id":"public/archives/page/3/index.html","hash":"f777e5e58004ff426f2e6cca5e2bcf61ea30b9a1","modified":1712247399188},{"_id":"public/archives/page/4/index.html","hash":"06bce1b4901a15703bf3e7436e9885228ff196b3","modified":1712247399188},{"_id":"public/archives/page/6/index.html","hash":"90d0c66fac99248ec9aad06feeef2f9b4b69d339","modified":1712247399188},{"_id":"public/archives/page/5/index.html","hash":"b74c1ebea2917e42401631864f3f6cdcb874087e","modified":1712247399188},{"_id":"public/archives/2019/index.html","hash":"5dd6de360f939323f526c91b9b6936579d781dca","modified":1712247399188},{"_id":"public/archives/2019/12/index.html","hash":"e0293d5ad28c19f1699adc8fb72559a378a4b58d","modified":1712247399188},{"_id":"public/archives/2021/index.html","hash":"3fcb4d20f320f8a89d76e3aa5e8244281cbb8a90","modified":1712247399188},{"_id":"public/archives/2021/page/2/index.html","hash":"9f38a584fbaa5a3c8ecd7b7a97f1aeae9a93e7d5","modified":1712247399188},{"_id":"public/archives/2021/page/3/index.html","hash":"9fbc0e66e19adbcf4c8c481996f45a1ef674fb72","modified":1712247399188},{"_id":"public/archives/2021/11/index.html","hash":"6b1ddfb26e6292f46abe4bf17d344de1d56cb269","modified":1712247399188},{"_id":"public/archives/2021/11/page/2/index.html","hash":"3bdc9415667f4d2c3af2bf5b8494fdb16c049af9","modified":1712247399188},{"_id":"public/archives/2021/12/index.html","hash":"b0d81251849c9aaf76b4a6c8c4e6a0ab871d421f","modified":1712247399188},{"_id":"public/archives/2022/page/2/index.html","hash":"334222bd6ca5750a23d9eb132c9f1d5d75662a64","modified":1712247399188},{"_id":"public/archives/2022/index.html","hash":"bb0cd92b67df574376580ae8901467cd2245d6bd","modified":1712247399188},{"_id":"public/archives/2022/01/index.html","hash":"d76f797c02a59db6fb967e884b5123a1182c49b5","modified":1712247399188},{"_id":"public/archives/2022/02/index.html","hash":"a651b42f298be6dad86a0e34b90d67658d9a1d29","modified":1712247399188},{"_id":"public/tags/Node-js/index.html","hash":"c43778b8490489b1daf53bc4527eb27fcc3bdf8d","modified":1712247399188},{"_id":"public/tags/前端/index.html","hash":"223fac693e1a6f93b41903574b6f5d9a3c82b23d","modified":1712247399188},{"_id":"public/tags/前端/page/2/index.html","hash":"904db81932a085fb45938664039fd27e2022afa4","modified":1712247399188},{"_id":"public/tags/前端/page/3/index.html","hash":"7b16c4f2579288a958c8f6bbd27819dc02c9c548","modified":1712247399188},{"_id":"public/tags/前端/page/4/index.html","hash":"e54811e1512bade17fed25de2338060675b28ec6","modified":1712247399188},{"_id":"public/tags/前端/page/5/index.html","hash":"96e1b2a41373f242b27dc60d8667edf6f0ab8a08","modified":1712247399188},{"_id":"public/tags/CSS/index.html","hash":"ad180aa09e9396eeff84c46a010f1612963fc56d","modified":1712247399188},{"_id":"public/tags/React-js/index.html","hash":"796db9ca7291d26eb0362537208079c72aa17ddd","modified":1712247399188},{"_id":"public/tags/算法/index.html","hash":"caa25148af3748574a55e8c0d2cee3fc5fead49e","modified":1712247399188},{"_id":"public/index.html","hash":"8e676d9039fd2911e17e366d506ef9c23eb3dd41","modified":1712247399188},{"_id":"public/page/2/index.html","hash":"4c71bb84c71615e8261453be3632d9f65428a46e","modified":1712247399188},{"_id":"public/page/3/index.html","hash":"f65eab13a002bf4c213642b1d360c2fe0c6a07a0","modified":1712247399188},{"_id":"public/page/4/index.html","hash":"ade6d3afe29004d51c90f5295f856b7f21ba701b","modified":1712247399188},{"_id":"public/page/5/index.html","hash":"9447c1ed4ff9c55352b94d68e014815f9b2d5403","modified":1712247399188},{"_id":"public/page/6/index.html","hash":"0822e9b6e7692c9c54d73a24faf3719f2668d0f8","modified":1712247399188},{"_id":"public/page/7/index.html","hash":"940c29ae56ccc08d2c3a58d69693fa91aadf819a","modified":1712247399188},{"_id":"public/page/8/index.html","hash":"25eb17fff6bd5712aafe2073d08b58855d5d1c28","modified":1712247399188},{"_id":"public/page/10/index.html","hash":"e8c8b6142d96c8389a7f8a6b3d96fe14fe58e11b","modified":1712247399188},{"_id":"public/page/9/index.html","hash":"6200e8e13a7f6480eb2cfd0517e19e745e7ff4ce","modified":1712247399188},{"_id":"public/categories/前端笔记/index.html","hash":"eef13f5b738dbd1f727ebe05d7c73eb9a412c04c","modified":1712247399188},{"_id":"public/categories/前端笔记/page/2/index.html","hash":"b3f129e4cb11993566308a690ef2cd7a1351e38d","modified":1712247399188},{"_id":"public/categories/前端笔记/page/3/index.html","hash":"8d1cd947c833746285560723f59da0a2782e25a5","modified":1712247399188},{"_id":"public/categories/前端笔记/page/4/index.html","hash":"7abe3cfe2571a12377d52980528e7cae2aefd1bd","modified":1712247399188},{"_id":"public/categories/前端笔记/page/5/index.html","hash":"f8148f468a994308e67f9722c7dd9ac4a4c9d10f","modified":1712247399188},{"_id":"public/categories/前端笔记/page/7/index.html","hash":"ebeefd4db7ce0dd6cce9791b1cad1c99ade8264c","modified":1712247399188},{"_id":"public/categories/前端笔记/page/6/index.html","hash":"6477ba9b20511d19a7ee1995e710a00a735932c9","modified":1712247399188},{"_id":"public/categories/前端笔记/page/8/index.html","hash":"724f69f04359809663ea0e17d71d89666ccb70f3","modified":1712247399188},{"_id":"public/categories/算法手册/index.html","hash":"2614467cbd9e2841f80d07de30eee1949d2bc9f5","modified":1712247399188},{"_id":"public/imgs/006adce2e90d46b6bf6680421b8597fe.png","hash":"19791c65ed372c367482b2d1d23acc382d31784e","modified":1712247399188},{"_id":"public/imgs/0255ec42a61443f582afd734d41915cb.png","hash":"869edf9833cd55fd36090f8e2b56528510008159","modified":1712247399188},{"_id":"public/imgs/00bfff7f7dd748058ca38a1a7b0a754d.png","hash":"8b4ac7e1abc9f51f9f8cdd32a12372957dae22a5","modified":1712247399188},{"_id":"public/imgs/01a207b620f34eaea21cfea282c3f4ba.png","hash":"0e32fe66fbc377105a94673ebcee639be267abe9","modified":1712247399188},{"_id":"public/imgs/026bf9f862e8483f86ecaaf73ec4cb44.png","hash":"e5c561c40e325c7c62d3529a9efe75cfae38b2ce","modified":1712247399188},{"_id":"public/imgs/03a48de8e5e14bfa86aace25630fe9f0.png","hash":"0dfdf746cc1a820aa02e35863d9f7c5164d55eea","modified":1712247399188},{"_id":"public/imgs/050011baf7694e6f8e029d617274b4c5.png","hash":"c325b80b585768522e62d7b150ea2c98db4fd672","modified":1712247399188},{"_id":"public/imgs/064dd050a8f644c0bcc6a3ff23565f97.png","hash":"8923985c6de4f2ae4129bd448cf9137481b9531c","modified":1712247399188},{"_id":"public/imgs/04acdded1bcb4dc6818e55be7838dc36.png","hash":"440f5ee7bec3a7f2ed09a21c01a472651ae9dab3","modified":1712247399188},{"_id":"public/imgs/06bb1763a47148cc8c74ca46ec66fcbe.png","hash":"7adf5817fc0cd75f19c1fe5cc2a32224ad2f0cb9","modified":1712247399188},{"_id":"public/imgs/075a6d0cbd2a4be1bf15ddaa2f0b5bf2.png","hash":"c2d7abc6b764e21e754ff79a2f5cb2dc50b94c54","modified":1712247399188},{"_id":"public/imgs/0731bc95d135415e9b5ad45fae7a0e6d.png","hash":"58c85b2e0f70a0565e1872b7af086af686962bf9","modified":1712247399188},{"_id":"public/imgs/07830b476af641af90b3934713ad04c1.png","hash":"3f159a813bee71c57710872d966130f20981a541","modified":1712247399188},{"_id":"public/imgs/079325dede394c41b4a5bc39e1ece8a7.png","hash":"40fbada5c2cfcdd914fa40ab1fbcb6514d6b26ad","modified":1712247399188},{"_id":"public/imgs/07c0a274944f470ba6d20b5df8a62c3f.png","hash":"b47d8ac429ab47fa18433be5841ebb42d7918c56","modified":1712247399188},{"_id":"public/imgs/081f77e8e6d6428f80387f303c750866.png","hash":"cfe31f3603d3f7a9609610d68515c06ce6553249","modified":1712247399188},{"_id":"public/imgs/0a93bdaa9fe94dc5a1ea5ca1a7b6560c.png","hash":"e5097f011ed093a1b11dd15689358e1ac6f9c098","modified":1712247399188},{"_id":"public/imgs/0903e080715f42c49aa2e3dc4be85594.png","hash":"a37549ce6b9479a1a8c901747be6fa2814197530","modified":1712247399188},{"_id":"public/imgs/09ff6519ba1340db8b9a61ea480f57b0.png","hash":"c012ffd5ff1992c33e575e823c3b0433c5600611","modified":1712247399188},{"_id":"public/imgs/0b528985f9c84a71a7c80cbc171fc351.png","hash":"758068fc89110538bd2998bb80fefbe07c5d80a6","modified":1712247399188},{"_id":"public/imgs/09ade9d3689c4b748e2312b2030cf390.png","hash":"15627cb3262246870a7d4d34be282cb743fa8a17","modified":1712247399188},{"_id":"public/imgs/0bd071595c974b6eb36ed0b4ba7c22b3.png","hash":"ada01b5111769f8178a0fe3805bdce993a8a53f3","modified":1712247399188},{"_id":"public/imgs/0be2614c9e344dae9bfddf91d293525b.png","hash":"8edd090b2c38be1c0e8c28c08c9df730514b9dd5","modified":1712247399188},{"_id":"public/imgs/0d3e7a37ccb24c51bcfdc875f442774b.png","hash":"750182a258c92dce89d3568c135c80eb836f9de3","modified":1712247399188},{"_id":"public/imgs/0d87ab8a99ff4cfba6d30dfbe2a4cc6b.png","hash":"b75286b2494aeafcfa4229f1b5ec86b18106d657","modified":1712247399188},{"_id":"public/imgs/0cf569ef6ff246ac8494992e2768b814.png","hash":"b5a86222b18af31ca84654314feca6088d2c3861","modified":1712247399188},{"_id":"public/imgs/0c276dd1937c4e649bcbbc5a034a2b34.png","hash":"59f1ab1eae2ce9ff4a3efa5a36f22d6e46f7f70c","modified":1712247399188},{"_id":"public/imgs/0ed8b2854ce743ab80151ebbb15385ec.png","hash":"b8fb396c03721ed4b67ad2184b2bb132d33c2536","modified":1712247399188},{"_id":"public/imgs/0e8108de34d14efdb7b72d13e37121ac.png","hash":"22286564fcd9dbaa1eb8f5b10c430b6b3a988655","modified":1712247399188},{"_id":"public/imgs/0f677483d57d40f69267e8e4ef2d3b0e.png","hash":"0e0f280995f8d7d5e3316777b5dd1e855deb1379","modified":1712247399188},{"_id":"public/imgs/124a2ee904c54b6fb2e7f064b8d05946.png","hash":"c42b66f75d3bb409dec1e1071885a6cb97a3bb58","modified":1712247399188},{"_id":"public/imgs/0ee7c29a050f4ff7b580e73d1d1932f7.png","hash":"70c5d43a1129a138b5d3e349145f985688939b61","modified":1712247399188},{"_id":"public/imgs/1324acbb236147538ee6038c283548cf.png","hash":"f85e618f69dd051c8788201fe285407e22147ce5","modified":1712247399188},{"_id":"public/imgs/14bc0f5d968347b3adbeeba4dab57aed.png","hash":"cc8ab90f48d3b07d257616ae4b9514cd0828e519","modified":1712247399188},{"_id":"public/imgs/14c0aaf10ecf4fa8948b749f56399177.png","hash":"3292fbeac37c6307c6f68939a4d921007f39e911","modified":1712247399188},{"_id":"public/imgs/10c5f00eda3c48d29258f27106bdd07d.png","hash":"51bd6626e30333bc742e24d8df5f4bd46453bb14","modified":1712247399188},{"_id":"public/imgs/130d8810ed5248ecb34cbe8c2082c4c2.png","hash":"25b3c10ab976442aede317829d417caec06a5578","modified":1712247399188},{"_id":"public/imgs/15e5c3208d1d4b9db3332d27f3c5490d.png","hash":"897e94bff1e9939dd977c1069c86848fe560f11a","modified":1712247399188},{"_id":"public/imgs/14ea14ac2d4d4295adf4cde4a6a07c50.png","hash":"ac744dbddd162572f9e8f9e28467eb0bf689e9d8","modified":1712247399188},{"_id":"public/imgs/174737fba5f442d6977bcd22bb2805b1.png","hash":"f75164a872a30e98309355ab9349113c0d4038e9","modified":1712247399188},{"_id":"public/imgs/18409a0a70274ab69df4664311f0aa93.png","hash":"83b0c6c99c36b5ccf917a8ad07c2540b558ae3fa","modified":1712247399188},{"_id":"public/imgs/1854cdecb8204130ae6ede9bf856cd64.png","hash":"2e739abc72f9f0c1608275ff7bda33c26810b77f","modified":1712247399188},{"_id":"public/imgs/1902c6bb31c6405ca1c5c77e9f35fe1a.png","hash":"400bd61dcfbf9418d13bbc2711ffbab031abcf86","modified":1712247399188},{"_id":"public/imgs/2115d5d726604ad6b04a09a05833413d.png","hash":"551bde998cfdd2e9bd9278711164ebb1c260b975","modified":1712247399188},{"_id":"public/imgs/207986b2db8a442c8f8fdb2435a0ad2a.png","hash":"359dfc8aa74bd97aab90fc874607bdd66b34c14a","modified":1712247399188},{"_id":"public/imgs/1b26737844194fc09f923cdd6b3b8a92.png","hash":"4f542790f9219aac2af94268b8a8ea0bacd214c5","modified":1712247399188},{"_id":"public/imgs/1db5249a8fc94922ae2a429731b36262.png","hash":"fbaa14b3ea3bcdfe637b0e4a8cb18eca1ae4de31","modified":1712247399188},{"_id":"public/imgs/21e20e18c0224cfeaebd4a03966d320a.png","hash":"aba12fc3fca24b13c8ad707b69fc76d202c50ee7","modified":1712247399188},{"_id":"public/imgs/22c8527da1d441afa6df86d050d08c09.png","hash":"4c695835e2af40f454cf46be5447ae7b9987d559","modified":1712247399188},{"_id":"public/imgs/2427be496cb94155af84d9370af28118.png","hash":"16c7a6e22fdf97482aa8743ae8d8f23d38910f1f","modified":1712247399188},{"_id":"public/imgs/270ab36fdc864158b7d47e8f5ebc4759.png","hash":"63bfdaa2e7e5a00aef77b1e917260178855e6c4c","modified":1712247399188},{"_id":"public/imgs/2435791a1fdd44a4ad5778657f7ebb08.png","hash":"17d459e9d96ba5eead84fee44d326981df3bf850","modified":1712247399188},{"_id":"public/imgs/286bc40bf9dc4c60b5f38b9bf17ca7f7.png","hash":"5c7467fba97e48be2474812f46037be503266536","modified":1712247399188},{"_id":"public/imgs/279f927c1695458eb47fc01391cf08c2.png","hash":"b24683037b04832e04b4f65d403f0889b26284c0","modified":1712247399188},{"_id":"public/imgs/296a67578b674e6bbbc08b04d8714646.png","hash":"3226cbc3196856c8c15455d65d39384683929eb4","modified":1712247399188},{"_id":"public/imgs/2ae47ba735a443b39c114dd962dd39d0.png","hash":"a0ae7b88ae6e2f5a487042edbd922789e8f4857b","modified":1712247399188},{"_id":"public/imgs/2aec0f4ee07846c0b7eabf3672691b57.png","hash":"f22f744ddc157894cd58943b6b82fc13a20009a7","modified":1712247399188},{"_id":"public/imgs/2bd6fecf240e4212a15e1aba62e459a7.png","hash":"e88b5c6c4ed979cb71dea4323912187df76b2bdf","modified":1712247399188},{"_id":"public/imgs/2a9e90766352487e9445f0db4706ff0c.png","hash":"7d3725a3ac8b10b88d7273d75cb849647fc8b90e","modified":1712247399188},{"_id":"public/imgs/2bb45eb7f59d40f381a2ad904fa739ea.png","hash":"12cb4868c2eff172dfe1acca57e8bdd644355279","modified":1712247399188},{"_id":"public/imgs/2cac1920e79d41f692a0a3690999cdbb.png","hash":"f48113180610c7b2354ba672dcc143fd43820535","modified":1712247399188},{"_id":"public/imgs/2b9ca4a010e54d8ca142e68c9eb2f26b.png","hash":"bf513c27995f964ce599431cdd15a28b09ed4fb7","modified":1712247399188},{"_id":"public/imgs/2e037560cee54fb099ac6ef1a7ab1817.png","hash":"aecff3ad2749169429f5ddaa2eb9d497239c9faf","modified":1712247399188},{"_id":"public/imgs/30f4747ae988400594cdf1b5388d6ff5.png","hash":"0424a38ac5e8d0ceee54abfbc5eaf8103b8dec11","modified":1712247399188},{"_id":"public/imgs/2eb00def85fa432d97392428410ab592.png","hash":"cc9bf230c39b6aee98827b2fabc2e583d0b48402","modified":1712247399188},{"_id":"public/imgs/324fd58b217e4370a03fdb879e935aa6.png","hash":"df9c37d1bc1a5dae10cbb4319a2680e13c7d01f2","modified":1712247399188},{"_id":"public/imgs/3209f6a93a2248ca9199a589e075ee45.png","hash":"455fef613f1a585051a6681dc259fd55f2cb4313","modified":1712247399188},{"_id":"public/imgs/32d120de176346f1829c177e1c43fd3e.png","hash":"3bf4998eeae6de64206a172ad19152f8e2139ceb","modified":1712247399188},{"_id":"public/imgs/32f696318ea74823ae25ef6f8c51453b.png","hash":"d9ac9dcb43f8849720916604eacd2328766d1b4d","modified":1712247399188},{"_id":"public/imgs/3301aafe08f84015a75606a2239dc394.png","hash":"8374c6c49b4e97ee16ed98c7ad9442f7402861e6","modified":1712247399188},{"_id":"public/imgs/336a595311e841fd880a6c0ef46682e1.png","hash":"f6c9667a3a792c0c3d7fa3f19b948710c6295137","modified":1712247399188},{"_id":"public/imgs/35379bb1ef624db4868454ba2df4a31a.png","hash":"1ae73ebb9154d985806dbc5c5c12905ee70b4d3e","modified":1712247399188},{"_id":"public/imgs/370adb6836494a0a99a708e5c8ecbe3a.png","hash":"7a0f51fae35f8dda8d12b5ae7c20bf9e0c01f882","modified":1712247399188},{"_id":"public/imgs/37ecaffba91e468f88930691a18d37e1.png","hash":"1f4a9cc7074d4f11434daa9cf44b650deccea207","modified":1712247399188},{"_id":"public/imgs/3ad8a4dec3364ba582900fe5428c8518.png","hash":"c8e2f307e0a1be1aa68c358ccfe63fe4429826a2","modified":1712247399188},{"_id":"public/imgs/3b9187f6322240598ef5bb8d761c8509.png","hash":"1581f23b7e86ef325aacf3f6c24f84c75287a6ba","modified":1712247399188},{"_id":"public/imgs/3c5cb59c512245b8bf051524553a8083.png","hash":"a1711ab4c06a7b050695d8c42f0592530c40b48e","modified":1712247399188},{"_id":"public/imgs/3dd4d8486dbf41c5bb421fec5a1a3b39.png","hash":"59782a937f22f1c04d6ddba01bbbaaea38e7885e","modified":1712247399188},{"_id":"public/imgs/3d01e29ce7914c27ad5e62d5fce649d6.png","hash":"b6e55eb510468bac53260c2fd333ed8fe4e10e5f","modified":1712247399188},{"_id":"public/imgs/3e77c54098c845749ec0c60ee14eeb74.png","hash":"23fe15bfd9bfce21b31d8390eefd4e7175abeeb0","modified":1712247399188},{"_id":"public/imgs/3de7200406054b6d9db56db980e0035a.png","hash":"7bca8de32525251b7a71668f619539a89072d303","modified":1712247399188},{"_id":"public/imgs/3f6abef66117405f98542802150a8ce5.png","hash":"2d5a2e21960be6a38f111ee36e5dd6bc757ea6f1","modified":1712247399188},{"_id":"public/imgs/40637a4f03594f4fb273c6a39ca04b62.png","hash":"2b0243a420f64b0154d0d083841500bd5ee6533d","modified":1712247399188},{"_id":"public/imgs/439caa4a49de4742903a0761fb049db4.png","hash":"7eaf78fcc0b11cb9babaec2de52167d9ef87f718","modified":1712247399188},{"_id":"public/imgs/471dff87c016460396407577efc1435c.png","hash":"4a84fee30ac46f6beef314e82e7d8d488b499a0d","modified":1712247399188},{"_id":"public/imgs/476fc30fc2fc4d75b5ae6477ceeeba44.png","hash":"0453f0f6acd952ac4c98cb18125bc1ec20dc6423","modified":1712247399188},{"_id":"public/imgs/441d5fe819d241e0ae5c27a8dc5d05bb.png","hash":"658ab04e0a3b502c4734531ce2581f1d70f28631","modified":1712247399188},{"_id":"public/imgs/47858ec75dee4b88b03b6329ce438d72.png","hash":"4b1b45112be7020d61c78cc77e5e9c62d6d938bd","modified":1712247399188},{"_id":"public/imgs/421da5155239416399fc34bc31930d0a.png","hash":"1df912cb34ce53c6676593a74402bc0c5502352c","modified":1712247399188},{"_id":"public/imgs/4a38234af23e42f1bd98c2c2397c3dc1.png","hash":"fce1958971b7e6f34d5be87c00d15b5465ab9b5c","modified":1712247399188},{"_id":"public/imgs/47adc712f1a34ef79eaf2b5eb691bcdc.png","hash":"44c696f25cded65f4c63b9e70ce75403177803f3","modified":1712247399188},{"_id":"public/imgs/4a95dd017a6a4efa8f4abb4382afda1c.png","hash":"fe4ced22ad9bd76474bef00955e770b78f1a7f79","modified":1712247399188},{"_id":"public/imgs/4ad9b45c288243cc871d388a9e4ee02c.png","hash":"4a3f2c9a080baeaef454b6579fc4914c1e80aa1c","modified":1712247399188},{"_id":"public/imgs/4b2e4540dcc440fc95a8bb27c35ece17.png","hash":"cd87c16f96475f0065204441347242c195361a43","modified":1712247399188},{"_id":"public/imgs/4f4655e4f3064e6ca0929d75fbdf93ab.png","hash":"675b9aeee4b369ce1c67fc32b2ae823e1160d939","modified":1712247399188},{"_id":"public/imgs/4f79340e5802405c8528233799680046.png","hash":"e200fb1cdb75714031119a67338dcf5aa69be031","modified":1712247399188},{"_id":"public/imgs/566bb1081f7a4747a00139f8e144116e.png","hash":"225a56c4a71ff5baade4b6eecd54b579d35d8ade","modified":1712247399188},{"_id":"public/imgs/4fcd03d8db8d4007845f8aa23a9bcb93.png","hash":"1ab2864f647946b61f6cb2aab8821f4187d0be79","modified":1712247399188},{"_id":"public/imgs/54d69cada2784fccb0e1e17a443a57d2.png","hash":"ae2ecf469d5ff0fbf50fe084c146246c48e1a7f4","modified":1712247399188},{"_id":"public/imgs/52350b7339754e268c6d51be4abbbd53.png","hash":"10d61873d8095c880c0b664da4a496a9b42412fa","modified":1712247399188},{"_id":"public/imgs/503f78a59ccd4cb58576e9fc02767ecd.png","hash":"3b7566fabbd4b9d5fcec77e531cf7d6636481786","modified":1712247399188},{"_id":"public/imgs/5684e00d041c465abf5555c420de8e70.png","hash":"a9470633d33091e46f2862931452e4c31c790f34","modified":1712247399188},{"_id":"public/imgs/578e5e1e1c6a4f34a9d30ab36f34dcce.png","hash":"3c6b06fbf0a09c1f33979edd5e63a7581e8b687b","modified":1712247399188},{"_id":"public/imgs/584137cb90ef45a98d2887a4fe5579e8.png","hash":"57182819be6bc3f94123fd09311e068c325c8def","modified":1712247399188},{"_id":"public/imgs/5a4ba5ff4494443f8dd7ec51077522b7.png","hash":"2afdd53a2c51243ef96ebc1befaa59863d5dbb96","modified":1712247399188},{"_id":"public/imgs/5ab6d4336eae4c378909d6f4fc8e9560.png","hash":"ec51d61f1993a2d304dddf0126c615040c4437a1","modified":1712247399188},{"_id":"public/imgs/5b0a81f603a74a308024c7f56ffb4ba5.png","hash":"85e3c2c7dc42e8c85f4c7959b51d01f99862bbac","modified":1712247399188},{"_id":"public/imgs/5b1a7835440741e788b41f42c44210ca.png","hash":"c9f47ffc3887bea4ca161799b2fc9f068d1d82e6","modified":1712247399188},{"_id":"public/imgs/5c1163271f3d47b4a911d8b08e248644.png","hash":"b509d1726643afac9f2a71fd876497dff9b575a2","modified":1712247399188},{"_id":"public/imgs/5cd0b10a948842ae91a979859ff8ac1e.png","hash":"772ad8f4c768d948c48bfc9da8fce42f624e980c","modified":1712247399188},{"_id":"public/imgs/5eed898b39224137bea299ec92cf5a8a.png","hash":"3968e8fe00fe96b78dad9607a8e504e8dc6dbbea","modified":1712247399188},{"_id":"public/imgs/5d28b35a63a94d68a8962c1baa5a6418.png","hash":"d13a4a0683517be077e266c9a85cf382a9877336","modified":1712247399188},{"_id":"public/imgs/5eefdcf6ba2440b1b0669f673f8c95b6.png","hash":"4745cac6946528055234c59dd46986b305797f7f","modified":1712247399188},{"_id":"public/imgs/607c8312c8c041f98238c8207f7d6486.png","hash":"ba28a7760b48ebe357604b5f7136e2419c6bc5bf","modified":1712247399188},{"_id":"public/imgs/60e2c179cd9d4caa9cfd576459bd8a08.png","hash":"9c5c91d3dfc19b61ea75d5426ab1db23421d9d56","modified":1712247399188},{"_id":"public/imgs/62e213d1a84048648ebc55b40cef1913.png","hash":"ef2801bb310f24d1510335b41619a9a6854a5c34","modified":1712247399188},{"_id":"public/imgs/627e6d35689843cda4b8f515bc81edd6.png","hash":"a663ee7c2b5ca70dd53e13db852e6373cb9e9d32","modified":1712247399188},{"_id":"public/imgs/661fa47033d847afb2b799732ff39033.png","hash":"66e0283c1b19aedd42cb861b0acc3d8ccaf710c3","modified":1712247399188},{"_id":"public/imgs/658415d364934e01a794eb8c1642a252.png","hash":"34c7c57c8e8c56a6e1b6178990b2d0882ce9c027","modified":1712247399188},{"_id":"public/imgs/6966a88766614ea5a249363a6f129797.png","hash":"b784bb387acd4797a89a02e3fdb69d561b9c4930","modified":1712247399188},{"_id":"public/imgs/68b2855217d14296af6aa3e10dfa18d7.png","hash":"466c12ef40b2c5422ef8317d3e4264346f4bd411","modified":1712247399188},{"_id":"public/imgs/69bd0195c4084280966f95ae944744c2.png","hash":"805a7c8e445bdf971f48bd4e148d52e64b7fa2ca","modified":1712247399188},{"_id":"public/imgs/6b6c08c2c5fa427b8fb4097dae06489e.png","hash":"97a1cdd02527883090de7348ae5c4236aea26c7e","modified":1712247399188},{"_id":"public/imgs/6d3566e0ddcd4bbdab3d5a39d04c918c.png","hash":"272034380fbcca44629495b9ea88e35b5b1a4a8f","modified":1712247399188},{"_id":"public/imgs/6c32109e9dc845c1843613ffd8095fe1.png","hash":"0f07df673e4afb21f7b752ed3dc613fed7e454ca","modified":1712247399188},{"_id":"public/imgs/6de6c2ae614f4716af6c0ba282fb0e8f.png","hash":"792dfcd8d896246726d0f3b03003ac5fb9129303","modified":1712247399188},{"_id":"public/imgs/6d8aa40eee8a404c894642e4c613d7ff.png","hash":"4ed50311e9934aa292c217a88da45df492d95a58","modified":1712247399188},{"_id":"public/imgs/6e3bfe5b9ff64cea9530258638e7adc9.png","hash":"24013ed82905a4c84b4cc4dd266dd8f7ee22ef7c","modified":1712247399188},{"_id":"public/imgs/6df0bf2c4e544049831f180910faabcd.png","hash":"e906185c172ae99a995bbb1717bb42a8c2e63e99","modified":1712247399188},{"_id":"public/imgs/6e0b1b1548574754a0e3b59abe3996b7.png","hash":"d30d927baa5e70cee6c596960c4d26b9f4504772","modified":1712247399188},{"_id":"public/imgs/6fd8a8300c434df5968d87088c4d41b3.png","hash":"730513a6d8f664cb1655671708d46f6e9cf23273","modified":1712247399188},{"_id":"public/imgs/6ec7d114aa1248869f6a08e87ee57878.png","hash":"d427967c4edaee27660c7218084ec713a872508d","modified":1712247399188},{"_id":"public/imgs/702ab02646dc49fb893867edb9fd0142.png","hash":"cb0ef31ecb051eeed3ca653140379845e4b527d6","modified":1712247399188},{"_id":"public/imgs/74906f4b22a24b28800bbbb6c7bcfd40.png","hash":"3bdb7525be63d466280666085d36dd732d7e5aae","modified":1712247399188},{"_id":"public/imgs/744095f84fc54d0faa6a002ecd90045f.png","hash":"084c749fda8e431b45f6b3d45028eab5b5e83f43","modified":1712247399188},{"_id":"public/imgs/751b1d25cf79455ba6d7e3edcffeda52.png","hash":"af53393d87c1ea453b80e210ea06662ce09bc52c","modified":1712247399188},{"_id":"public/imgs/71ba173548ce4f9eb5e1e84cea9501eb.png","hash":"70f68b86aba5e2df502d8ed08c077c699bc473df","modified":1712247399188},{"_id":"public/imgs/75fabe11d8b948718b89fc10e8b82e17.png","hash":"cd626ab9df0fccab2aea8e201a5fa57a7ad00a84","modified":1712247399188},{"_id":"public/imgs/754b8961911e4a0e8aae1b9b7a77b4bd.png","hash":"cf968699bab54e699f582d2b61d094eb131be186","modified":1712247399188},{"_id":"public/imgs/76bd8f8d77934079b3d1921ee8c65baa.png","hash":"275d94cc742e7837565e64fa5febd78fbe17dd1c","modified":1712247399188},{"_id":"public/imgs/76f87b5543964d0f95c43cb948a0aaa9.png","hash":"f2c8c6751c90ba21a697611d684133850ff62de9","modified":1712247399188},{"_id":"public/imgs/77a53feae9054e88b68b47f8291f899d.png","hash":"3677dcc68b51688bb88d5909ce22b32d17d9ecdc","modified":1712247399188},{"_id":"public/imgs/77e251176fed4a97a7ca946262916095.png","hash":"51ad0516052ccb1d79f327770a53ad2d18c782a5","modified":1712247399188},{"_id":"public/imgs/7711dd594c064fc48111b158c2c110b9.png","hash":"fc37a889f0b7fae0e0ec0e29a29a16a05498b37d","modified":1712247399188},{"_id":"public/imgs/79fe9b3629fa4bda83dcb76fa774fa3a.png","hash":"0e2284f246c023a300a3a54e5b4f1a77f9c121fa","modified":1712247399188},{"_id":"public/imgs/790c475ec884462bbe2151edd7b0fe43.png","hash":"86b9ffa1ed73db2f048fe6c51e7e8aa730128ce2","modified":1712247399188},{"_id":"public/imgs/79d57ee723c0414fa58067db9964da81.png","hash":"aab762e87087229ee829ba5c0e61f6e1b6990038","modified":1712247399188},{"_id":"public/imgs/7ebeb02d90d54c5c88501bab914a2dcd.png","hash":"81feace5036a124ee146af5b850d8b6cd2a7c375","modified":1712247399188},{"_id":"public/imgs/7ed844989c4640a9be7cc2922107c3d3.png","hash":"55bb77d5b43e230b2c3ecd1110d662417f13cad6","modified":1712247399188},{"_id":"public/imgs/7fdde6d3d1044fed90b9d23aba1e6765.png","hash":"10db8aa0035961d78e13146b199179cd5b5de076","modified":1712247399188},{"_id":"public/imgs/80f00eaaeaad4fe582d2b84708c8cccd.png","hash":"acc304e77daa4a6abb3ca69173d1be1d9388b392","modified":1712247399188},{"_id":"public/imgs/81a67e5d708a4e75af8b9a9fc7c2d317.png","hash":"8e7581667d5004215b557ef13e4732b43367d8a3","modified":1712247399188},{"_id":"public/imgs/82392bd016a74c298191ef55fff8d75c.png","hash":"2053094c62443377986cd85452cf880f3ac3e234","modified":1712247399188},{"_id":"public/imgs/8616c565ebff4ce8a4b478c7937e8698.png","hash":"ae0bc9174421eb1aebed5700c73d014fb30f232f","modified":1712247399188},{"_id":"public/imgs/89bd18d28389452c962cd3384ac18434.png","hash":"212ddf4e85764532a688b818a31eb9d921cf740e","modified":1712247399188},{"_id":"public/imgs/864e1f106d2d4687978cfcf98ec59a4d.png","hash":"93ec14c46db6d3fe362c862416cda9e4ca0152e3","modified":1712247399188},{"_id":"public/imgs/83cd1beeb0ba4350b6216de5022b1217.png","hash":"6313856eb4b4a25320aad0ff6e5b095ea4c6866a","modified":1712247399188},{"_id":"public/imgs/89ff069b244a4e5d8073f425cab0a975.png","hash":"889be8abcacb32851194ae33bfd4c21185fb8ae9","modified":1712247399188},{"_id":"public/imgs/8c6de6a98ca945b18885737a76a0bc37.png","hash":"fec94945fb2129b60313448542fc7486c092906b","modified":1712247399188},{"_id":"public/imgs/8f3f8dbd4a4e4a80802e449f0caaca28.png","hash":"35d4d7a8eaa76e97e5d57a7b0744ff0a14a60a91","modified":1712247399188},{"_id":"public/imgs/8f0428ba4af94e59b6081a6b83759acd.png","hash":"e5231a78e57b1b46b0eaf273e6c461c270233dbf","modified":1712247399188},{"_id":"public/imgs/8f8b19af5c424949a663d44f3d02bff2.png","hash":"6dbfefadcb34ca7eb668c51837e3112f347585ad","modified":1712247399188},{"_id":"public/imgs/8fc2530298d944708d0ab28d9deca363.png","hash":"af54bff28b80414e43068560ab3f7ded6b325a85","modified":1712247399188},{"_id":"public/imgs/902d670f367a43bd9847e3e14eae3c0b.png","hash":"a044246aebf84c9d16d14d8b75bbf6bda0ddec47","modified":1712247399188},{"_id":"public/imgs/90f63a48a6cc42b7aedab51da67cf398.png","hash":"545ec3115528dddf7280653e67201883b56375e8","modified":1712247399188},{"_id":"public/imgs/914e69f427bc412a90384306391d10bf.png","hash":"a6b9657a6acf54973cc7a195c3c22bad1f5d7e35","modified":1712247399188},{"_id":"public/imgs/987a8555af9c415083f9507ef7553f0b.png","hash":"c34776f4307d50352370dc8ab3f71247c8313e01","modified":1712247399188},{"_id":"public/imgs/993504fc4765448fbba439d0f2af30aa.png","hash":"194fb2c5b3c6a453a3c7ac607659cda316ff96fd","modified":1712247399188},{"_id":"public/imgs/999db97b32c64a63b4411bda28308618.png","hash":"cae4ea0478d55c3dae3a63a731693ed8b4e6eb3f","modified":1712247399188},{"_id":"public/imgs/93c65034030940bca0c2f06a6cb5a3d2.png","hash":"28da8199dd2101900e478e937b8a559cd8532662","modified":1712247399188},{"_id":"public/imgs/9a1f879dc0884635838d29764d08a6de.png","hash":"0b9d4515849a96b91df0628a8364f8cdcb15551f","modified":1712247399188},{"_id":"public/imgs/9a9e3fecab1a430099f67a25ecf96322.png","hash":"9c2c4ad7f682e71731b842599eb754f25845dce3","modified":1712247399188},{"_id":"public/imgs/9bdccc09f7be445cb0edef1627f5c567.png","hash":"ae12f8ca096d41bb85ebe23e411dfa5ad5bea61d","modified":1712247399188},{"_id":"public/imgs/a0a1f189ea544841a6de2146387bc0a4.png","hash":"c2ba5d94650fd8c52a86ad262d3581013dd68f1b","modified":1712247399188},{"_id":"public/imgs/a03b864b3bed427592c6c363019b0943.png","hash":"3fbf7d790dfef0e204bafde778bf801c4d18829e","modified":1712247399188},{"_id":"public/imgs/a2876bf6aa8c48179ab7bf61cc768452.png","hash":"c12404a161bd9c509ded02e773c9dc1c883f87ef","modified":1712247399188},{"_id":"public/imgs/9f72aa0dd7eb47db9af5f3d0d6a29c87.png","hash":"6f8915344bcd4e7b1a46f64ef13461005078b585","modified":1712247399188},{"_id":"public/imgs/a30fe3ee74af45c1adf9ca78fac1f150.png","hash":"965493ee525febee1b1a5f47222e47a76084d3a4","modified":1712247399188},{"_id":"public/imgs/a3745c91af4948b8828204411aba625f.png","hash":"fcd9aea314ba5d58af764df7e5dc5c80128e2399","modified":1712247399188},{"_id":"public/imgs/a42f3e72cd64454e94cd03b2bce634fe.png","hash":"714f8b7a88e31402aa365dd96fbb0a5c9702ff30","modified":1712247399188},{"_id":"public/imgs/a5a182f1f49b425b8a240459655c066b.png","hash":"0dd9e0c9a611095c075192107d60ea7e69b706ac","modified":1712247399188},{"_id":"public/imgs/a6d3f98c7b4548f09e762d86df162d37.png","hash":"20ed7e61c64d876ba487370050c9c789e7a04858","modified":1712247399188},{"_id":"public/imgs/a71e28d5fa794601a6dd09a9f3832958.png","hash":"4d5f0ca32eaaad203518d2b680cea0d41321921f","modified":1712247399188},{"_id":"public/imgs/a7739d7ba24a40dda484ee0823b99f4e.png","hash":"dcc6ed2eafcaf8d5b76e4b7ec91a6d426159be4a","modified":1712247399188},{"_id":"public/imgs/a88f793d5035421bae5bf09dc91d0444.png","hash":"7bee4d43f556829a733cb48ab491e3fde896f3f0","modified":1712247399188},{"_id":"public/imgs/a777431b0212407d999884280b44aaa1.png","hash":"76349dfcde4435cc5e7c901622b05a154b57494b","modified":1712247399188},{"_id":"public/imgs/a7c6fea42810464aa34b8a331ac925af.png","hash":"01b0043ed0eb9428e349616ee951690a1feb8050","modified":1712247399188},{"_id":"public/imgs/aae076ba4570447aa47c7242c4be29f5.png","hash":"b7c831e909edfec29b1898bf3a95ee76b5a7edb3","modified":1712247399188},{"_id":"public/imgs/ab523cf7253e43bfb13334615183db2c.png","hash":"c06f70db2d8a70f8c892e3bde1841d2ad501747d","modified":1712247399188},{"_id":"public/imgs/aba1b3919d7f434c8c4c41eb65dde1d7.png","hash":"2393d88ec068c26447bb03f993c7a948b9abfcbb","modified":1712247399188},{"_id":"public/imgs/ad653329549a4673a85f0bff18ac4bfd.png","hash":"a95d532b4f8030f3828951b13ca9f7ef9ab6b6ca","modified":1712247399188},{"_id":"public/imgs/ac8f8d2c1c02487e9ae9489cefac018a.png","hash":"a85434e4971cce303388a7b46c585a72f20464bc","modified":1712247399188},{"_id":"public/imgs/aeddca64831a45309a3e99a9d6ac3aa0.png","hash":"d23c14081dc405dc3e360f481a31f7cf9a6c934a","modified":1712247399188},{"_id":"public/imgs/af4554dd19ce4a6aa911769fc36a839f.png","hash":"5eefd4f0b2468ef135ffc125e5573e2a3d146b40","modified":1712247399188},{"_id":"public/imgs/b14906e8bf9d42adabf68728b85f47cc.png","hash":"7a266c1b186537bf6342752672c633a2503ebf76","modified":1712247399188},{"_id":"public/imgs/afa38d71d32e47339603f1a510606961.png","hash":"b5eb0c3feb6ec92a0ac18823e40b94ceb8d38f75","modified":1712247399188},{"_id":"public/imgs/b1b144ee16394b449e0d9cb9952ebcce.png","hash":"7b6f0038167bb1228f03920082017536cef8ee3c","modified":1712247399188},{"_id":"public/imgs/b2cffc1c128c453aa87bcc8c436b5edb.png","hash":"3292479608681f467562731ba2a1a2ef5448ce52","modified":1712247399188},{"_id":"public/imgs/b2f374a4c4bc4e7c8220819ea727b931.png","hash":"a8336915c6194bc4da32961f165634be77756f4c","modified":1712247399188},{"_id":"public/imgs/b3ad6b12445348d59a136143f3d19b24.png","hash":"f34f6d11a56fdb3e7bd2dfc9f891e13328e46de9","modified":1712247399188},{"_id":"public/imgs/b30c992919e44b42b5837344a3ee85f5.png","hash":"129f28413d4a0f72c922d9e4e5d5c440ef3cc1f4","modified":1712247399188},{"_id":"public/imgs/bb5d2fc3c7394c6fb05687546f49047b.png","hash":"c68546dc31492485b679f89c3b0e4023c4f60772","modified":1712247399188},{"_id":"public/imgs/b4009d0f599c4ac39009eef3265d140e.png","hash":"44057bce09d1f15de087c17a872473f49afa2967","modified":1712247399188},{"_id":"public/imgs/bb7773a4f2124134b153436c3d9083a8.png","hash":"c8166d049aebbf8993bb0f095da74141bdac3aac","modified":1712247399188},{"_id":"public/imgs/b6ea9aea43b94d7a931c4180550f1f14.png","hash":"59c057310fbdcbae01ce3ffd643b7ec7cfd9d934","modified":1712247399188},{"_id":"public/imgs/bc2df772897746ab890b3fe9890677fb.png","hash":"ae8e013e41bb493c5ba3615ae1940a98359a8be0","modified":1712247399188},{"_id":"public/imgs/bf9e9b12206f47aaa241a0ab36fdce35.png","hash":"97cc61aaa8f7d27bf89b78ca6858fa78a928c22b","modified":1712247399188},{"_id":"public/imgs/bbc47e5ba90344129027b9cf69933a11.png","hash":"3c400a1bc8647ea5d2947487265f697d425290d6","modified":1712247399188},{"_id":"public/imgs/bfb8a4db30f74136811c79d6a2063b74.png","hash":"946e98805091fdf5fc80583fede112a3960cc94b","modified":1712247399188},{"_id":"public/imgs/c70711d142154a3f8681fe8339ac5f22.png","hash":"00381de855c279bb429b3e02afcf86e15ea6793e","modified":1712247399188},{"_id":"public/imgs/c723562b8e9c44e1bec04f299dc10034.png","hash":"e93056395339af4048fd79d24a0635374e5c9eb9","modified":1712247399188},{"_id":"public/imgs/c3e1ac10e91f4a249046400414dd795c.png","hash":"0dc1fc22636dced8e4868a773c6fc2757279be03","modified":1712247399188},{"_id":"public/imgs/c9dba75186da46c384c5783cca062791.png","hash":"27634ca665407a4aa864e1196307436bfa7faa9d","modified":1712247399188},{"_id":"public/imgs/c83d1f4b443f480f8c579f6ad5651e88.png","hash":"50c5f11f1211e87a721e7d0a37f2928a4e86e1e5","modified":1712247399188},{"_id":"public/imgs/ca28f113fdbf4f3a8803fcff7e67687e.png","hash":"cb512a1fd94ebc0e0083cce84d6561988b62f1ce","modified":1712247399188},{"_id":"public/imgs/ca7ca0ea83704218b251c1d867dfc2fd.png","hash":"a7527345e75df92157b2b8f835945a70978bf6e1","modified":1712247399188},{"_id":"public/imgs/cd9fd718405249d7b843d4d30271f96a.png","hash":"0af5858d4f9488e52d0143b0ec712bbc21a3327b","modified":1712247399188},{"_id":"public/imgs/cddfa26a428743cc8389ba3ccf05f2c5.png","hash":"98c52a9dfb3a9de1974098ff0da66c69dafabbe3","modified":1712247399188},{"_id":"public/imgs/ce724a5dffb94210bc95e6efedaef78d.png","hash":"880bec30b1c16decfdf114f4c46e8002d19dc73c","modified":1712247399188},{"_id":"public/imgs/cedbde566e724fbc9aeb58746042da1b.png","hash":"ea970929a8c2be846010c0269b778cd657a1186a","modified":1712247399188},{"_id":"public/imgs/cf06032c734549a09510f6424aaa5b81.png","hash":"d04f32de05e6e68805d65d6566d71e2b7b38b915","modified":1712247399188},{"_id":"public/imgs/d02225b4919f4ea2adf6be3a0d35f97e.png","hash":"ec4d5947b5db6a30b8ece085145e736d7ab909a4","modified":1712247399188},{"_id":"public/imgs/d0e700cafcb646fca5460f7d268aa1b9.png","hash":"c7d6b5b5c874850dad166095f852efd9cbcbcf45","modified":1712247399188},{"_id":"public/imgs/d1336902565d488a9abb3e3621db5c1d.png","hash":"dcd8c2095b432ef714922a0958964ee9e4da0944","modified":1712247399188},{"_id":"public/imgs/d29604aaea8d405183b8273b0578eab3.png","hash":"8d3fae28a2a11ef7ebdb54ab53205cc92a3578f4","modified":1712247399188},{"_id":"public/imgs/d0497dc61b2a4607abca4bef7bcc1291.png","hash":"7a952c07bf208e47167091768f2c802d7a6076b9","modified":1712247399188},{"_id":"public/imgs/d2c1ca8234704e8cb918d7b53a008d00.png","hash":"dab33eb5ce98289be231094f85f267df4b5a119a","modified":1712247399188},{"_id":"public/imgs/d4a7b5a1fd644cbb8a63acc576a6708b.png","hash":"9b524eaacb3ecb16a1165b6613a094b71b295097","modified":1712247399188},{"_id":"public/imgs/d55d28b03e5345b0a6d0b4e16968694a.png","hash":"b3f0665f9dc776dfc0a8d1c56521dafb0c453d26","modified":1712247399188},{"_id":"public/imgs/d5a73937beb048adb64124aa285ec196.png","hash":"d9b392a8fbf594c23a2c79656ddc38d7eeed029e","modified":1712247399188},{"_id":"public/imgs/d689027c2c594f89b566a1e2c5465887.png","hash":"56ba55a47c5f9971b083bfa0789dcd560a1211e7","modified":1712247399188},{"_id":"public/imgs/d642f69551e74e95b50d02aacc6e3148.png","hash":"830e36acebb37ed7890edfa323722ef49df4c982","modified":1712247399188},{"_id":"public/imgs/d6c862c665f04645b862bdcf3158a82b.png","hash":"b08f29674939d83555ca13bae6529b1a4ff072f5","modified":1712247399188},{"_id":"public/imgs/d886abe69e114dddb8a1c6235046d729.png","hash":"906e72e1dc65ba4fb6679c4fedbfeafea697f900","modified":1712247399188},{"_id":"public/imgs/dece515d4cda456cb685723dc7715a50.png","hash":"01c6496fae5986a5704fa5e82838ff57fb843a4d","modified":1712247399188},{"_id":"public/imgs/d9f5150d7a604f33874fe565cd684888.png","hash":"cabc34b47da81decb5e8c4e1f348b7a657b96500","modified":1712247399188},{"_id":"public/imgs/e01b6f56c7ee4723811457dc17ac563c.png","hash":"62c391e4b84197d836511238b5d724c88b4e88e5","modified":1712247399188},{"_id":"public/imgs/dd6b2573899b44ba945a1763a0cfa88e.png","hash":"6138b065a147730b40c0a5118d3620fafe179839","modified":1712247399188},{"_id":"public/imgs/e00ad4c11d534af69efa593d6876fabf.png","hash":"a151c8acae7b6910ed4ead230f2eb60480dcff9f","modified":1712247399188},{"_id":"public/imgs/e03c00247a8d44febb9a8f79bade6c66.png","hash":"3826b33d6177c9f2e602fef0ce66e6a0170a4153","modified":1712247399188},{"_id":"public/imgs/e0c516bdfadb4be5b800d09bfce3e6b8.png","hash":"d79513de5fe444c24fa99171baabed3b263cd986","modified":1712247399188},{"_id":"public/imgs/e0e722be9ff347c79397261498aa2a3d.png","hash":"518f4be20c2c8a598a178cfc3034ed8f5e599c62","modified":1712247399188},{"_id":"public/imgs/e27249efe15b4c27b00bb6e5096c23d9.png","hash":"3021ebcf6af7fcddc7a2ec5e638b6b4a5b1079cc","modified":1712247399188},{"_id":"public/imgs/e390b931693b43798877d4879c10b445.png","hash":"a045ab027b93dbf39625abe45af29edc888cc07a","modified":1712247399188},{"_id":"public/imgs/e3d7b03357a54239877eb4a9e93b8aaf.png","hash":"ca5eaceb466025244922ab2c9de680102413da2d","modified":1712247399188},{"_id":"public/imgs/e5730d7a315d4863b7ac568223aeefdc.png","hash":"a88c3d93e9a20555c0db0e546c36169223adc9a7","modified":1712247399188},{"_id":"public/imgs/e8e040971352443faa8d18bd39eb37fa.png","hash":"c375f0368115a897e85fce994d2a456762c67a40","modified":1712247399188},{"_id":"public/imgs/e98140601dec461ca4b95b58c730f66f.png","hash":"2ecd260426cc5ee208f42e73942c3c6241cd4bfb","modified":1712247399188},{"_id":"public/imgs/ee25feb848e4433c94b1ccce931b26b5.png","hash":"f86069557a42ddd3a6169ae3afa4edf5b231fd64","modified":1712247399188},{"_id":"public/imgs/ee559a33603348b7ab100b67c07cc172.png","hash":"0a68f84919003a85996b254545c8d5566cc7e9be","modified":1712247399188},{"_id":"public/imgs/f08580f2d68a41f89945c559ebb019b3.png","hash":"9aa03a177303310d55a9bbc9c286373cdd04efdb","modified":1712247399188},{"_id":"public/imgs/f0768686252f4a8589a36b0f587ee340.png","hash":"df89faebafff4f79d7bae6101fbc553d0d87d6ee","modified":1712247399188},{"_id":"public/imgs/f13bc82ca99e439ba1faa9a552676d10.png","hash":"448445e43e4642a33e299e3fc1fad0ef4e5834b9","modified":1712247399188},{"_id":"public/imgs/f1f6b49c0a334c908a0b12e0c1066146.png","hash":"9f66e302921eb478b4d056becdb2901a2dcc4f25","modified":1712247399188},{"_id":"public/imgs/f199300488514aa3847075b4b8541c02.png","hash":"e5de5f02b425b6e7c0168c8d57d20e02c3afd535","modified":1712247399188},{"_id":"public/imgs/f210a5129458480ebaeec2e859a5937a.png","hash":"301447573bed8136e8fd25500f2f13769db42960","modified":1712247399188},{"_id":"public/imgs/f3e0b8a534b7484eb21fba6411ff6353.png","hash":"284307798f689734dfce5a1e260a5959152a84ba","modified":1712247399188},{"_id":"public/imgs/f5ea49d308974526bb0f7708ed122536.png","hash":"f6b1fc34362e9cc3de5e3790091dbb0729f3e885","modified":1712247399188},{"_id":"public/imgs/f2b797abc9154267b021031cc121ca9b.png","hash":"79ba50eb8d6d7396625e149cce4e5d7e5e4c4d66","modified":1712247399188},{"_id":"public/imgs/f575ae6f1be64e1cbde17d134299d262.png","hash":"57907ee17b15ae952c0a6a58ac4e4f35aefbba39","modified":1712247399188},{"_id":"public/imgs/f75403f63adc4770be663b727db0dc72.png","hash":"40f96b28ed4ff6da1509ef214949c048dbabeea7","modified":1712247399188},{"_id":"public/imgs/f7aeab1411a1476cab6094fa7d7c3038.png","hash":"c185c958362b7ea4bb08ffffb6fd650fde2b009f","modified":1712247399188},{"_id":"public/imgs/f5ebeffe23104624bd7cea053bad1fa2.png","hash":"8db78bb6bb2ffc77c46717bc9e171f909d88a647","modified":1712247399188},{"_id":"public/imgs/f783efff2b084fc5b4a1f578d40f0cff.png","hash":"18f4eb4a0b07417469b4507c2de56f9a2fcae51f","modified":1712247399188},{"_id":"public/imgs/f877c9447b8447c2a70b2de3d7e87316.png","hash":"9980fa22623e942332c9efa7cd06c6a36b6658af","modified":1712247399188},{"_id":"public/imgs/f7ba852d33624024aa23082379214dbd.png","hash":"4b2cb4abcf25233622af1aaf38e3dd6e3d630d0b","modified":1712247399188},{"_id":"public/imgs/f849f6db6f584dc6b27307ae1f738aa5.png","hash":"1c852038099ba3ce52a40e2506a4fe82439ec49a","modified":1712247399188},{"_id":"public/imgs/f904fc883f7942fd809e7e09c84ac5ef.png","hash":"e769ab0c7ba182faf32e8db5a58a071f52c79015","modified":1712247399188},{"_id":"public/imgs/fab6f6cc9c23439fa4783422b7bd1784.png","hash":"dd5671a99feb18d1e8b387e64b7ecd663565a31f","modified":1712247399188},{"_id":"public/imgs/fa66a173ce194fedbdd97c27d3715544.png","hash":"8b0403bd0f4bcdb74b1da76f87ffa8fa6de619ab","modified":1712247399188},{"_id":"public/imgs/fb1bc2b58f4c4fc2a1af5cdec46e6e97.png","hash":"e0a921dbdae1b4c88f7c1612a67181445f0a1c64","modified":1712247399188},{"_id":"public/imgs/fb244a2e456a42569d5f8887d5c3ca77.png","hash":"bb5335651ffaf6ce8fbaf32d4b77d1adf3a53b2d","modified":1712247399188},{"_id":"public/imgs/fc8e8a6100d64734be18b899a8d23dc2.png","hash":"a5fdf7c5732776eea942879cafcd8f2a64fe4884","modified":1712247399188},{"_id":"public/imgs/fe6f3b7830174af792016fe55c80246d.png","hash":"3190e1cec4b9c11c38adadd25b2d810ddac62712","modified":1712247399188},{"_id":"public/imgs/fb8618145de9463981c94d9afcd58dab.png","hash":"dc4e7822c4789f898fe7b0f09b5eaccfa191a496","modified":1712247399188},{"_id":"public/imgs/ff45d2fffea849128e2423b23572f2c4.png","hash":"ca39f14413f278be0be20b9adf3a126bcc05ee65","modified":1712247399188},{"_id":"public/imgs/fea1fc3b1a6e456d95dc097e7636e292.png","hash":"ffc9e91d1a6bf9dd5d4c062245aa771e6ee74c4b","modified":1712247399188},{"_id":"public/imgs/ffaffd3f6eb24adbb8e63baf1a852f93.png","hash":"609d8a35b6c3471ce98eb6ac5210f1033822c3f8","modified":1712247399188},{"_id":"public/imgs/fe65e292fc9e40da8d37030a0f290c18.png","hash":"5c7efa907d533cc8b236fcab1fba276e83073224","modified":1712247399188},{"_id":"public/imgs/lowcode-artitect.drawio","hash":"428439e5110593fc711bcc5392b6c095d4765e2d","modified":1712247399188},{"_id":"public/images/favicon-dark-128.png","hash":"44cceeef5fddc81a613faf6caa53bac139a6b564","modified":1712247399188},{"_id":"public/imgs/f89dd471a85f4238949f7c0850cf121f.png","hash":"dd34b15ba361438a73ef0d9426ffae65bdd4e24b","modified":1712247399188},{"_id":"public/images/favicon-dark-180.png","hash":"4771a6bd0386924ad31719f8999c036b36ad5688","modified":1712247399188},{"_id":"public/images/favicon-light-180.png","hash":"6b26caab1d036726beaf47510bada4cddf253b24","modified":1712247399188},{"_id":"public/images/favicon-dark-192.png","hash":"929acfdd6e69ceacdecf40a03ed520f826750c06","modified":1712247399188},{"_id":"public/images/favicon-light-192.png","hash":"0d5f76f309b6a0661d695d6bf4db8ef8a56e4ae5","modified":1712247399188},{"_id":"public/images/favicon-light-128.png","hash":"9c93c4ac222da14ca4f43b2d54573ce4099a161b","modified":1712247399188},{"_id":"public/images/favicon-light-32.png","hash":"604915a91ddede7874d5dcfa4de0bc4b04ae5da6","modified":1712247399188},{"_id":"public/images/tile.png","hash":"fbc016bfb004a5ca4a8c6f0b078ae320ec98ba20","modified":1712247399188},{"_id":"public/images/favicon-dark-32.png","hash":"8ef87b664e5c6250e5badd7312fe192e30fe2e83","modified":1712247399188},{"_id":"public/imgs/071f7b1d75294faa9789f01815f25fa0.png","hash":"df1cf73f1fd5a255244240508f538512e1e771a1","modified":1712247399188},{"_id":"public/imgs/2bcde11c433a42f1892bfd71b6f856c4.png","hash":"e044146123a83ecbf74fa4d44b94fe8a7b8e79d1","modified":1712247399188},{"_id":"public/imgs/378d8fac26cd462790f75e6ae448bf23.png","hash":"51d56458d0e147d5ed41593c9d65f8cac877edad","modified":1712247399188},{"_id":"public/imgs/3c1031d4444443d0b24ef31233934c57.png","hash":"52a0889515778aa0df89ede1fd1b7257be0fd286","modified":1712247399188},{"_id":"public/imgs/6cea5abb144a400aa90e04c5d2477863.png","hash":"46fb15dcadb2f8adc0f08dccd749ec932343a89e","modified":1712247399188},{"_id":"public/imgs/83ac44a2a5984f138e3b756c1675d8be.png","hash":"51371995cdb8a13fa2cde74d5b856853d3989439","modified":1712247399188},{"_id":"public/js/light-dark-switch.js","hash":"371eacee9af459d04de60190c549fe7f8374be36","modified":1712247399188},{"_id":"public/js/load-settings.js","hash":"f420677aad3d200b4f92fca60ab5cb47c7db9a21","modified":1712247399188},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1712247399188},{"_id":"public/css/style.css","hash":"aaed3a761f9db6eb15a5ebea9255842413f548a4","modified":1712247399188},{"_id":"public/js/color.global.min.js","hash":"8140005be5afebb828b2890ce6e686ece34e78df","modified":1712247399188},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1712247399188},{"_id":"public/imgs/ac27b01d800e49c6ab28d7b360be367b.png","hash":"1649a13c4cd2f187a7883edcdca1a1eb3d212708","modified":1712247399188},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1712247399188},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1712247399188},{"_id":"public/imgs/9cae13a7088c416281438340e15e85ba.png","hash":"2819ab979a090ef8f2dddd0c3f67390c1788536f","modified":1712247399188},{"_id":"public/imgs/e50340b5c1cb474d9601715ee83b358f.png","hash":"6044b5a6d3b6885d4a33959096b7b9b718f090cd","modified":1712247399188},{"_id":"public/css/fonts/Roboto-Bold.ttf","hash":"62442a18a9fe9457c1afeabf683d263a691b7798","modified":1712247399188},{"_id":"public/css/fonts/Roboto-Medium.ttf","hash":"3c6a09fcc6a454924c81af7dff94fc6d399ed79b","modified":1712247399188},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1712247399188},{"_id":"public/css/fonts/Roboto-Regular.ttf","hash":"56c5c0d38bde4c1f1549dda43db37b09c608aad3","modified":1712247399188},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1712247399188},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1712247399188},{"_id":"public/imgs/f7c1eace740044619142888b35fcb580.png","hash":"a44ca4a9a0ef170c3c901bedc5041c33358a6adc","modified":1712247399188},{"_id":"public/imgs/29b6b15893e049a78bcfd9dababd7be7.png","hash":"18facb7b743aeac27410284de9fa8c2a104ba3c6","modified":1712247399188},{"_id":"public/imgs/3709d5cc20cd4f3b925887c5a9c72d51.png","hash":"88941efeac58bedc1ffad234df2f74f0967e1bab","modified":1712247399188},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1712247399188}],"Category":[{"name":"前端笔记","_id":"clulf0lhg0005hajf0gnf58jd"},{"name":"算法手册","_id":"clulf0li3007rhajf1v04hyuh"}],"Data":[],"Page":[],"Post":[{"title":"不同低代码平台的分类和特点","_content":"\n所有的低代码平台开发者都会遇到这个问题：“这么常见的需求，你们的低代码都配不了！”\n\n为了解决这个问题，往往只能增加配置项，堆的多了，于是又带来了另一个问题：“你们的低代码配置太多了，上手难度太大！”\n\n为了解决这个问题，低代码开发者引入了“模板”,理想情况下可以开箱即用。\n\n于是用户又来抱怨了：“我想加个xx，根本不知道在哪里配，也不知道能不能配出来。”\n\n似乎不管开发者么怎么努力，用户始终在抱怨。\n\n## 认识你的低代码平台\n\n我将低代码平台底层分为三种：流程引擎驱动、元数据驱动和视图驱动，这三种也都很好理解：\n\n- 流程引擎驱动：创建视图的时候，需要配置数据流程，比如提交、审批等节点，视图展示的是流程对象，因此视图自带业务功能按钮。典型的产品如轻流、简道云。\n- 元数据驱动：创建视图的过程，就是创建对象的过程，对象本身并无业务功能，只有增删改查，因此视图一般不具备业务功能按钮，但可以配置工作流以实现业务逻辑。典型的产品有明道云。\n- 视图驱动：基于一个复杂的网页编辑器（并非表单编辑器）拖拉拽丰富的组件+数据设置而搭建的视图。典型的产品如微搭、宜搭\n\n当然成熟的商业化产品可能包含多种特性，比如微搭也有元数据对象管理，简道云的非流程表单也可以配置工作流，明道云也有自定义视图的能力，但不同产品的投入重点不一样。\n\n### 流程引擎驱动型低代码平台特点\n\n流程的核心是流程表单，流程的发起、提交、审核、结束/终止都离开不了表单。\n\n这类低代码产品，页面创建一定是从流程表单创建开始的。创建表单的时候，添加编辑控件的过程，其实就是在给这个流程赋予业务字段。创建完表单自然而然需要配置表单提交的流程，比如指定审批阶段和审批人。\n\n完成表单和流程的创建，列表视图也就出来了，列表字段即表单中的字段，列表页签就是流程的状态，列表上的按钮，就是流程操作按钮。\n\n流程表单样式、布局、字段基本固定，流程动作固定，列表字段基本固定，权限内置，因此这种低代码平台可视化配置交互流畅，配置量少，上手成本极低。对某些特定场景，比如考勤、人员等级等，可以做成模板直接提供给业务人员，理想情况下业务人员能够开箱即用，因此对没有开发能力的使用者非常友好。\n\n但缺点也很明显：\n\n1. 每个页面都是一个流程，这个前提就是业务需求可以抽象为一个流程，但事实上并非如此。比如说失效/生效、启用/暂停等状态类、A品类/B品类等分类，多个tab一起展示。\n2. 即使是业务需求可以抽象为流程，但业务数据可能处在多流程中，比如银行卡的挂失场景，可以划分为申请——受理——交付——完结，但受理环节又可以分为发起——审批——制卡——运输——入库——出库，这其中还可能有更多的细支流程，要将多个流程中的数据挑选出不同的字段展示给不同的操作人，一般的流程引擎很难实现。\n3. 当业务对象存在对一、对多关系时，流程实例无法体现这种关系，它总是一个单对象。\n4. 几乎没有自定义按钮的能力：既然已经设定了流程，自然所有的操作都属于流程操作，基于这个前提，自然也不会有自定义按钮的场景 （然而实践中有大量的场景需求自定义按钮逻辑。）\n\n总之，基于流程引擎的平台，使用难度低，配置少，无法处理复杂场景。\n\n### 元数据驱动型低代码平台特点\n\n这类产品的视图，有些从表单创建开始，有些从元数据对象的可视化建模开始。我们看到的产品，大多数是从表单创建开始，但表单创建的本质，其实也是元数据创建。\n\n字段的类型和编辑控件往往存在固定关系，因此元数据和列表和表单视图会同步创建。对象自带的增删改查功能就对应了视图的按钮；对象间的关系，比如对一，对多，也可以通过视图字段控件的对象下拉框、子表格等形式表示。\n\n普通的业务人员能通过表单配置出一些元数据对象，得到基础的列表和表单视图，实现最简单的增删改查功能，当然这些功能绝大多数情况下都是无法满足业务需求的。\n\n这类产品的第一大问题是：元数据本身无法体现提交/审批这种业务类型操作属性，因此自定义按钮+自定义表单+流程设计器是必须的。\n\n自定义按钮/自定义业务需求，可以抽象为基于不同元数据对象的增删改查操作+各种上下文变量操作，拼接成一个流程，实现能力的上限就是流程设计器配置能力的上限，只要舍得投入，就能够完全实现各种数据操作需求。\n\n流程设计器的出现，必定会引入变量、逻辑网关、表达式等概念，这意味着，在没有培训的情况下，几乎只有IT（不管是开发还是运维）这些稍微有一点开发经验的人才能用好。\n\n这类产品的第二大问题是，对象不能完全描述视图。\n\n虽然一切数据操作需求都可以通过元数据和元数据之间的关系、行为来描述，但视图需求真不是元数据能够完全描述的了。比如说要自定义新增、修改、详情的表单布局和内容，要控制列/表单控件顺序、名称、样式、悬浮提示、条件展示、编辑联动，各种无法的导入导出需求等等，这些复杂需求意味着需要强大灵活的视图编辑能力。\n\n视图定制能力和流程配置能力，就是木桶效应中的两块板子。大多数公司更倾向于提供默认的不甚灵活的视图配置，而往流程配置上加注资源，通常来说流程更容易穷举，而视图需求必须要有丰富的业务积累才能判断其价值。\n\n这类产品的第三大问题是，使用者心智负担较大。\n\n除了流程设计器中的变量等概念外，对象和关系的理解也是有门槛的。\n\n我们看到的这类产品，通常都是从表单开始创建视图，而很少有从对象建模开始。因为绝大多数人都无法将对象、字段、关系这些概念映射到视图上，因此如果从建模开始，往往会遗漏关系，对视图配置也摸不着头脑。\n\n而从视图配置开始，比如用户在表单中拖一个客户单选下拉框，那就是建立对客户的对一关系，用户拖一个客户表格，那就是建立对客户的对多关系。在后续的配置中，也将对象的概念引导到列表上，将实例的概念引导到表单上。\n看起来似乎能避免用户卡在关系概念的理解上，但实践中，并不能完全通过控件属性获知对一/对多关系，比如普通套餐只能选择一个汉堡，但特殊套餐可以选择多个汉堡，那么套餐和汉堡之间的关系就不能通过控件确定了。\n\n### 视图驱动型的低代码平台特点\n\n这类平台一定有拖拉拽实现一个页面的网页编辑器，不同于表单编辑器，网页编辑器有极其丰富的组件，每个组件都有丰富的配置项，组件之间的交互也可以通过设置流程+变量操作组装，几乎可以满足所有的视图需求。\n\n但视图和数据往往是独立的。视图数据源，既可以通过平台上可视化建模生成的对象，也可以通过api接口接外部的数据源，至于怎么在视图上展示，就完全看配置人怎么处理了。\n\n对于平台上创建的对象，倒是可以提供一些模板组件快速地搭建出页面效果，但外部数据源，即使定义了对象结构，往往还需要拦截器对它进行适配。\n\n且不论数据源的接入，光视图控件各种专业的配置项，就让绝大多数人，甚至一大部分开发人员望而生畏了。能驾驭视图编辑器的人，往往都是有一定前端开发能力的人。\n\n\n这类产品除了配置难度大，配置效率也很低。 每一个视图都是从零搭建，每一处数据都要配置接口、变量，每一处按钮都要配置各种交互，需要操心页面各种细节。一个简单的页面，流程引擎驱动的低代码平台，只要用户建一个表单，设置好流程即可完成；元数据驱动型低代码平台，则需要用户建表单+配置工作流即可完成；而视图驱动型，需要建对象+配置列表/表单/各种按钮控件+组织数据流转，配置项非常多。因此这类产品想要做好，就必须要提供元数据驱动型的控件。\n\n## 认识低代码平台的客户\n\n客户为什么用低代码？我认为主要有以下四种场景：\n\n1.  传统企业数字化转型，比如无纸办公类型需求。这类公司一般没有web开发技术，或技术薄弱，而他们数字化的需求往往都是简单的行政类工作，比如考勤、签到、面试、人员统计、任务管理等等，企业预算有限，可能并不值得买一些商业化产品，更不值得养一个开发团队来做这些事情。 \n2.  传统企业的IT部门，提供企业内部的办公系统，比如带有复杂规则的内部审批系统。即使办公系统可以采购，也常常无法满足企业定制需求，IT部门开发能力有限，就只能借助低代码。 \n3.  互联网公司解决长尾需求。 互联网公司一般都有自己的技术团队，但技术团队总是优先服务业务部门，而有技术需求的总不只是业务部门，行政、人事、财务都会有需求，若投入技术资源去开发，投入产出不一定能平衡，因此可以借助低代码，节省开发、维护成本。\n4.  使用低代码实现产品的定制能力。 尤其是ToB类SAAS产品，每个客户都可能有定制需求，如果都通过配置来实现定制需求，客户发展多了，要么无力维护配置，要么最后也会变成一个低代码平台。因此不如直接基于低代码平台做标准产品，并通过租户管理机制，由不同的客户实施团队负责定制功能，灵活度高，而且运维成本低。 \n\n## 重新认识低代码平台的使用者\n\n我将低代码平台的使用人员分为三类：无开发能力的业务人员、无开发能力的IT运维人员、有一定开发能力的开发者。\n\n无开发能力的业务人员，很难理解变量、接口、对象这种开发层面的概念，因此低代码平台必须简单易用，以尽量少的配置，提供丰富的模板，最好能够零配置开箱即用。显然流程引擎驱动的低代码产品更适合这部分用户。\n\n无开发能力的IT运维人员，这部分人大多是计算机相关专业毕业，入职传统企业，对web开发接触很少，但还是有一定的程序开发能力，\n他们面对的往往是企业内部管理系统，需求并无标准，因此低代码平台必须支持灵活的配置能力，平台应开放足够的口子容配置人员通过变量及表达式实现定制/动态需求，所以一般后两种产品更适合。但解除部分用户后发现，虽然元数据驱动型平台使用更友好，但并不能满足各种非标需求。\n\n有一定能力的开发者，自然是能够完全理解平台里的各种概念，比如流程、对象、关系、变量、接口等等，能了解组件、布局，甚至能写一些代码。\n\n以上不同用户的使用方式，都是我坐在办公室里想象出来的。在实践中，完全不是这么一回事。在低代码平台的开发者看来，所有的用户，都像无头苍蝇一样，不知道能不能配，不知道怎么配，所以这一章节的题目才是，重新认识使用者。\n\n**低代码平台的开发者们，总低估了平台的使用难度。**\n\n用户们遇到的第一重难关就是：将**需求解构**，并重塑为低代码平台提供的视图。\n\n举个简单的场景，车间需要统计每日工人的工时和产出件数。那么工人需要通过表单提交上班时间、下班时间、产出件数，车间主任需要核对每个工人的提交数据，最后财务也要进行汇总，形成每日报表。\n\n这里大致涉及到三种角色，一个审批流，两个列表（工人工时/产出明细和车间每日投入/成果），当然还需要考虑统计、审批、数据补录等细节。对业务人员来说，要想清楚这些可并不轻松。\n\n虽然这个并不是低代码平台造成的问题，但平台可以提供模板更功能，给用户业务上的提示和参考。\n\n第二重难关是：**怎么配**。\n\n比如销售人员管理系统，每个销售人员下原本只对应一个客户，那么编辑表单只要配一个下拉框就可以了，可后来一个销售人员可能对应多个客户，客户还可能同名，那编辑表单就需要一个列表展示客户更多信息，然后对列表做多选。\n\n如果是元数据驱动，可能直接拖一个表格控件就好了，可如果是视图驱动，就需要考虑弹窗、表格、数据、点击等一系列配置了，配置点一多，用户就不知道怎么配了。\n\n大多数用户，对平台提供的功能都不会加以思考，就好像拼乐高，看到一块相似的零件就往上凑，对功能块不知道怎么拆成子零件，也不知道子零件能组装成什么功能块。\n\n所以平台提供的功能越少越好，越模块化越好。\n\n第三重难关是：**为什么不生效**。\n\n比如表格有20列，配置的人希望在运行时使用者可以自己拖动列的顺序，并且页面能记住使用者自定义的顺序。后来需求有变更，配置的人希望某几列放在最前面，结果发现怎么配都不生效。配置的人很难想到，他对列顺序有两个冲突的需求。\n\n再比如，对某按钮控制了权限，管理员才能看到，结果运行时发现某个不是管理员的人也难看到，这时候正常的排查手段是，看看这个人是不是管理员，再看这个按钮是不是绑对了权限，是否有其他权限规则，以及，是否有相似的页面或按钮，配错了对象等。配置越灵活，意味着排查链路越长，排查难度越大。\n\n从这两个场景中可以看到，平台提供的功能越多，对用户越不友好，因此，平台除了对各种配置项增加详细的文档，最好还能够针对不同的场景提供不同的默认配置项，并尽可能隐藏不必要的配置。\n\n第四重难关是：**能不能配置**\n这可以说是一个终极问题了，要回答能不能配置的问题，首先得经过需求拆解，并将需求落入不同的视图控件/配置能力上，只有对平台非常了解的人才能回答这个问题，实践中，几乎只有低代码平台本身的开发和实施。\n因此低代码平台，除了在功能上积累丰富的模板和场景案例，还需要采取一些运营手段，比如可以建立社群、进行开发者认证/入驻等。\n","source":"_drafts/不同低代码平台的分类和特点.md","raw":"---\ntitle: 不同低代码平台的分类和特点\ntags:\n---\n\n所有的低代码平台开发者都会遇到这个问题：“这么常见的需求，你们的低代码都配不了！”\n\n为了解决这个问题，往往只能增加配置项，堆的多了，于是又带来了另一个问题：“你们的低代码配置太多了，上手难度太大！”\n\n为了解决这个问题，低代码开发者引入了“模板”,理想情况下可以开箱即用。\n\n于是用户又来抱怨了：“我想加个xx，根本不知道在哪里配，也不知道能不能配出来。”\n\n似乎不管开发者么怎么努力，用户始终在抱怨。\n\n## 认识你的低代码平台\n\n我将低代码平台底层分为三种：流程引擎驱动、元数据驱动和视图驱动，这三种也都很好理解：\n\n- 流程引擎驱动：创建视图的时候，需要配置数据流程，比如提交、审批等节点，视图展示的是流程对象，因此视图自带业务功能按钮。典型的产品如轻流、简道云。\n- 元数据驱动：创建视图的过程，就是创建对象的过程，对象本身并无业务功能，只有增删改查，因此视图一般不具备业务功能按钮，但可以配置工作流以实现业务逻辑。典型的产品有明道云。\n- 视图驱动：基于一个复杂的网页编辑器（并非表单编辑器）拖拉拽丰富的组件+数据设置而搭建的视图。典型的产品如微搭、宜搭\n\n当然成熟的商业化产品可能包含多种特性，比如微搭也有元数据对象管理，简道云的非流程表单也可以配置工作流，明道云也有自定义视图的能力，但不同产品的投入重点不一样。\n\n### 流程引擎驱动型低代码平台特点\n\n流程的核心是流程表单，流程的发起、提交、审核、结束/终止都离开不了表单。\n\n这类低代码产品，页面创建一定是从流程表单创建开始的。创建表单的时候，添加编辑控件的过程，其实就是在给这个流程赋予业务字段。创建完表单自然而然需要配置表单提交的流程，比如指定审批阶段和审批人。\n\n完成表单和流程的创建，列表视图也就出来了，列表字段即表单中的字段，列表页签就是流程的状态，列表上的按钮，就是流程操作按钮。\n\n流程表单样式、布局、字段基本固定，流程动作固定，列表字段基本固定，权限内置，因此这种低代码平台可视化配置交互流畅，配置量少，上手成本极低。对某些特定场景，比如考勤、人员等级等，可以做成模板直接提供给业务人员，理想情况下业务人员能够开箱即用，因此对没有开发能力的使用者非常友好。\n\n但缺点也很明显：\n\n1. 每个页面都是一个流程，这个前提就是业务需求可以抽象为一个流程，但事实上并非如此。比如说失效/生效、启用/暂停等状态类、A品类/B品类等分类，多个tab一起展示。\n2. 即使是业务需求可以抽象为流程，但业务数据可能处在多流程中，比如银行卡的挂失场景，可以划分为申请——受理——交付——完结，但受理环节又可以分为发起——审批——制卡——运输——入库——出库，这其中还可能有更多的细支流程，要将多个流程中的数据挑选出不同的字段展示给不同的操作人，一般的流程引擎很难实现。\n3. 当业务对象存在对一、对多关系时，流程实例无法体现这种关系，它总是一个单对象。\n4. 几乎没有自定义按钮的能力：既然已经设定了流程，自然所有的操作都属于流程操作，基于这个前提，自然也不会有自定义按钮的场景 （然而实践中有大量的场景需求自定义按钮逻辑。）\n\n总之，基于流程引擎的平台，使用难度低，配置少，无法处理复杂场景。\n\n### 元数据驱动型低代码平台特点\n\n这类产品的视图，有些从表单创建开始，有些从元数据对象的可视化建模开始。我们看到的产品，大多数是从表单创建开始，但表单创建的本质，其实也是元数据创建。\n\n字段的类型和编辑控件往往存在固定关系，因此元数据和列表和表单视图会同步创建。对象自带的增删改查功能就对应了视图的按钮；对象间的关系，比如对一，对多，也可以通过视图字段控件的对象下拉框、子表格等形式表示。\n\n普通的业务人员能通过表单配置出一些元数据对象，得到基础的列表和表单视图，实现最简单的增删改查功能，当然这些功能绝大多数情况下都是无法满足业务需求的。\n\n这类产品的第一大问题是：元数据本身无法体现提交/审批这种业务类型操作属性，因此自定义按钮+自定义表单+流程设计器是必须的。\n\n自定义按钮/自定义业务需求，可以抽象为基于不同元数据对象的增删改查操作+各种上下文变量操作，拼接成一个流程，实现能力的上限就是流程设计器配置能力的上限，只要舍得投入，就能够完全实现各种数据操作需求。\n\n流程设计器的出现，必定会引入变量、逻辑网关、表达式等概念，这意味着，在没有培训的情况下，几乎只有IT（不管是开发还是运维）这些稍微有一点开发经验的人才能用好。\n\n这类产品的第二大问题是，对象不能完全描述视图。\n\n虽然一切数据操作需求都可以通过元数据和元数据之间的关系、行为来描述，但视图需求真不是元数据能够完全描述的了。比如说要自定义新增、修改、详情的表单布局和内容，要控制列/表单控件顺序、名称、样式、悬浮提示、条件展示、编辑联动，各种无法的导入导出需求等等，这些复杂需求意味着需要强大灵活的视图编辑能力。\n\n视图定制能力和流程配置能力，就是木桶效应中的两块板子。大多数公司更倾向于提供默认的不甚灵活的视图配置，而往流程配置上加注资源，通常来说流程更容易穷举，而视图需求必须要有丰富的业务积累才能判断其价值。\n\n这类产品的第三大问题是，使用者心智负担较大。\n\n除了流程设计器中的变量等概念外，对象和关系的理解也是有门槛的。\n\n我们看到的这类产品，通常都是从表单开始创建视图，而很少有从对象建模开始。因为绝大多数人都无法将对象、字段、关系这些概念映射到视图上，因此如果从建模开始，往往会遗漏关系，对视图配置也摸不着头脑。\n\n而从视图配置开始，比如用户在表单中拖一个客户单选下拉框，那就是建立对客户的对一关系，用户拖一个客户表格，那就是建立对客户的对多关系。在后续的配置中，也将对象的概念引导到列表上，将实例的概念引导到表单上。\n看起来似乎能避免用户卡在关系概念的理解上，但实践中，并不能完全通过控件属性获知对一/对多关系，比如普通套餐只能选择一个汉堡，但特殊套餐可以选择多个汉堡，那么套餐和汉堡之间的关系就不能通过控件确定了。\n\n### 视图驱动型的低代码平台特点\n\n这类平台一定有拖拉拽实现一个页面的网页编辑器，不同于表单编辑器，网页编辑器有极其丰富的组件，每个组件都有丰富的配置项，组件之间的交互也可以通过设置流程+变量操作组装，几乎可以满足所有的视图需求。\n\n但视图和数据往往是独立的。视图数据源，既可以通过平台上可视化建模生成的对象，也可以通过api接口接外部的数据源，至于怎么在视图上展示，就完全看配置人怎么处理了。\n\n对于平台上创建的对象，倒是可以提供一些模板组件快速地搭建出页面效果，但外部数据源，即使定义了对象结构，往往还需要拦截器对它进行适配。\n\n且不论数据源的接入，光视图控件各种专业的配置项，就让绝大多数人，甚至一大部分开发人员望而生畏了。能驾驭视图编辑器的人，往往都是有一定前端开发能力的人。\n\n\n这类产品除了配置难度大，配置效率也很低。 每一个视图都是从零搭建，每一处数据都要配置接口、变量，每一处按钮都要配置各种交互，需要操心页面各种细节。一个简单的页面，流程引擎驱动的低代码平台，只要用户建一个表单，设置好流程即可完成；元数据驱动型低代码平台，则需要用户建表单+配置工作流即可完成；而视图驱动型，需要建对象+配置列表/表单/各种按钮控件+组织数据流转，配置项非常多。因此这类产品想要做好，就必须要提供元数据驱动型的控件。\n\n## 认识低代码平台的客户\n\n客户为什么用低代码？我认为主要有以下四种场景：\n\n1.  传统企业数字化转型，比如无纸办公类型需求。这类公司一般没有web开发技术，或技术薄弱，而他们数字化的需求往往都是简单的行政类工作，比如考勤、签到、面试、人员统计、任务管理等等，企业预算有限，可能并不值得买一些商业化产品，更不值得养一个开发团队来做这些事情。 \n2.  传统企业的IT部门，提供企业内部的办公系统，比如带有复杂规则的内部审批系统。即使办公系统可以采购，也常常无法满足企业定制需求，IT部门开发能力有限，就只能借助低代码。 \n3.  互联网公司解决长尾需求。 互联网公司一般都有自己的技术团队，但技术团队总是优先服务业务部门，而有技术需求的总不只是业务部门，行政、人事、财务都会有需求，若投入技术资源去开发，投入产出不一定能平衡，因此可以借助低代码，节省开发、维护成本。\n4.  使用低代码实现产品的定制能力。 尤其是ToB类SAAS产品，每个客户都可能有定制需求，如果都通过配置来实现定制需求，客户发展多了，要么无力维护配置，要么最后也会变成一个低代码平台。因此不如直接基于低代码平台做标准产品，并通过租户管理机制，由不同的客户实施团队负责定制功能，灵活度高，而且运维成本低。 \n\n## 重新认识低代码平台的使用者\n\n我将低代码平台的使用人员分为三类：无开发能力的业务人员、无开发能力的IT运维人员、有一定开发能力的开发者。\n\n无开发能力的业务人员，很难理解变量、接口、对象这种开发层面的概念，因此低代码平台必须简单易用，以尽量少的配置，提供丰富的模板，最好能够零配置开箱即用。显然流程引擎驱动的低代码产品更适合这部分用户。\n\n无开发能力的IT运维人员，这部分人大多是计算机相关专业毕业，入职传统企业，对web开发接触很少，但还是有一定的程序开发能力，\n他们面对的往往是企业内部管理系统，需求并无标准，因此低代码平台必须支持灵活的配置能力，平台应开放足够的口子容配置人员通过变量及表达式实现定制/动态需求，所以一般后两种产品更适合。但解除部分用户后发现，虽然元数据驱动型平台使用更友好，但并不能满足各种非标需求。\n\n有一定能力的开发者，自然是能够完全理解平台里的各种概念，比如流程、对象、关系、变量、接口等等，能了解组件、布局，甚至能写一些代码。\n\n以上不同用户的使用方式，都是我坐在办公室里想象出来的。在实践中，完全不是这么一回事。在低代码平台的开发者看来，所有的用户，都像无头苍蝇一样，不知道能不能配，不知道怎么配，所以这一章节的题目才是，重新认识使用者。\n\n**低代码平台的开发者们，总低估了平台的使用难度。**\n\n用户们遇到的第一重难关就是：将**需求解构**，并重塑为低代码平台提供的视图。\n\n举个简单的场景，车间需要统计每日工人的工时和产出件数。那么工人需要通过表单提交上班时间、下班时间、产出件数，车间主任需要核对每个工人的提交数据，最后财务也要进行汇总，形成每日报表。\n\n这里大致涉及到三种角色，一个审批流，两个列表（工人工时/产出明细和车间每日投入/成果），当然还需要考虑统计、审批、数据补录等细节。对业务人员来说，要想清楚这些可并不轻松。\n\n虽然这个并不是低代码平台造成的问题，但平台可以提供模板更功能，给用户业务上的提示和参考。\n\n第二重难关是：**怎么配**。\n\n比如销售人员管理系统，每个销售人员下原本只对应一个客户，那么编辑表单只要配一个下拉框就可以了，可后来一个销售人员可能对应多个客户，客户还可能同名，那编辑表单就需要一个列表展示客户更多信息，然后对列表做多选。\n\n如果是元数据驱动，可能直接拖一个表格控件就好了，可如果是视图驱动，就需要考虑弹窗、表格、数据、点击等一系列配置了，配置点一多，用户就不知道怎么配了。\n\n大多数用户，对平台提供的功能都不会加以思考，就好像拼乐高，看到一块相似的零件就往上凑，对功能块不知道怎么拆成子零件，也不知道子零件能组装成什么功能块。\n\n所以平台提供的功能越少越好，越模块化越好。\n\n第三重难关是：**为什么不生效**。\n\n比如表格有20列，配置的人希望在运行时使用者可以自己拖动列的顺序，并且页面能记住使用者自定义的顺序。后来需求有变更，配置的人希望某几列放在最前面，结果发现怎么配都不生效。配置的人很难想到，他对列顺序有两个冲突的需求。\n\n再比如，对某按钮控制了权限，管理员才能看到，结果运行时发现某个不是管理员的人也难看到，这时候正常的排查手段是，看看这个人是不是管理员，再看这个按钮是不是绑对了权限，是否有其他权限规则，以及，是否有相似的页面或按钮，配错了对象等。配置越灵活，意味着排查链路越长，排查难度越大。\n\n从这两个场景中可以看到，平台提供的功能越多，对用户越不友好，因此，平台除了对各种配置项增加详细的文档，最好还能够针对不同的场景提供不同的默认配置项，并尽可能隐藏不必要的配置。\n\n第四重难关是：**能不能配置**\n这可以说是一个终极问题了，要回答能不能配置的问题，首先得经过需求拆解，并将需求落入不同的视图控件/配置能力上，只有对平台非常了解的人才能回答这个问题，实践中，几乎只有低代码平台本身的开发和实施。\n因此低代码平台，除了在功能上积累丰富的模板和场景案例，还需要采取一些运营手段，比如可以建立社群、进行开发者认证/入驻等。\n","slug":"不同低代码平台的分类和特点","published":0,"date":"2024-04-04T12:30:14.353Z","updated":"2024-04-04T12:30:14.353Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhd0000hajfh7kaha1j","content":"<p>所有的低代码平台开发者都会遇到这个问题：“这么常见的需求，你们的低代码都配不了！”</p>\n<p>为了解决这个问题，往往只能增加配置项，堆的多了，于是又带来了另一个问题：“你们的低代码配置太多了，上手难度太大！”</p>\n<p>为了解决这个问题，低代码开发者引入了“模板”,理想情况下可以开箱即用。</p>\n<p>于是用户又来抱怨了：“我想加个xx，根本不知道在哪里配，也不知道能不能配出来。”</p>\n<p>似乎不管开发者么怎么努力，用户始终在抱怨。</p>\n<h2 id=\"认识你的低代码平台\"><a href=\"#认识你的低代码平台\" class=\"headerlink\" title=\"认识你的低代码平台\"></a>认识你的低代码平台</h2><p>我将低代码平台底层分为三种：流程引擎驱动、元数据驱动和视图驱动，这三种也都很好理解：</p>\n<ul>\n<li>流程引擎驱动：创建视图的时候，需要配置数据流程，比如提交、审批等节点，视图展示的是流程对象，因此视图自带业务功能按钮。典型的产品如轻流、简道云。</li>\n<li>元数据驱动：创建视图的过程，就是创建对象的过程，对象本身并无业务功能，只有增删改查，因此视图一般不具备业务功能按钮，但可以配置工作流以实现业务逻辑。典型的产品有明道云。</li>\n<li>视图驱动：基于一个复杂的网页编辑器（并非表单编辑器）拖拉拽丰富的组件+数据设置而搭建的视图。典型的产品如微搭、宜搭</li>\n</ul>\n<p>当然成熟的商业化产品可能包含多种特性，比如微搭也有元数据对象管理，简道云的非流程表单也可以配置工作流，明道云也有自定义视图的能力，但不同产品的投入重点不一样。</p>\n<h3 id=\"流程引擎驱动型低代码平台特点\"><a href=\"#流程引擎驱动型低代码平台特点\" class=\"headerlink\" title=\"流程引擎驱动型低代码平台特点\"></a>流程引擎驱动型低代码平台特点</h3><p>流程的核心是流程表单，流程的发起、提交、审核、结束&#x2F;终止都离开不了表单。</p>\n<p>这类低代码产品，页面创建一定是从流程表单创建开始的。创建表单的时候，添加编辑控件的过程，其实就是在给这个流程赋予业务字段。创建完表单自然而然需要配置表单提交的流程，比如指定审批阶段和审批人。</p>\n<p>完成表单和流程的创建，列表视图也就出来了，列表字段即表单中的字段，列表页签就是流程的状态，列表上的按钮，就是流程操作按钮。</p>\n<p>流程表单样式、布局、字段基本固定，流程动作固定，列表字段基本固定，权限内置，因此这种低代码平台可视化配置交互流畅，配置量少，上手成本极低。对某些特定场景，比如考勤、人员等级等，可以做成模板直接提供给业务人员，理想情况下业务人员能够开箱即用，因此对没有开发能力的使用者非常友好。</p>\n<p>但缺点也很明显：</p>\n<ol>\n<li>每个页面都是一个流程，这个前提就是业务需求可以抽象为一个流程，但事实上并非如此。比如说失效&#x2F;生效、启用&#x2F;暂停等状态类、A品类&#x2F;B品类等分类，多个tab一起展示。</li>\n<li>即使是业务需求可以抽象为流程，但业务数据可能处在多流程中，比如银行卡的挂失场景，可以划分为申请——受理——交付——完结，但受理环节又可以分为发起——审批——制卡——运输——入库——出库，这其中还可能有更多的细支流程，要将多个流程中的数据挑选出不同的字段展示给不同的操作人，一般的流程引擎很难实现。</li>\n<li>当业务对象存在对一、对多关系时，流程实例无法体现这种关系，它总是一个单对象。</li>\n<li>几乎没有自定义按钮的能力：既然已经设定了流程，自然所有的操作都属于流程操作，基于这个前提，自然也不会有自定义按钮的场景 （然而实践中有大量的场景需求自定义按钮逻辑。）</li>\n</ol>\n<p>总之，基于流程引擎的平台，使用难度低，配置少，无法处理复杂场景。</p>\n<h3 id=\"元数据驱动型低代码平台特点\"><a href=\"#元数据驱动型低代码平台特点\" class=\"headerlink\" title=\"元数据驱动型低代码平台特点\"></a>元数据驱动型低代码平台特点</h3><p>这类产品的视图，有些从表单创建开始，有些从元数据对象的可视化建模开始。我们看到的产品，大多数是从表单创建开始，但表单创建的本质，其实也是元数据创建。</p>\n<p>字段的类型和编辑控件往往存在固定关系，因此元数据和列表和表单视图会同步创建。对象自带的增删改查功能就对应了视图的按钮；对象间的关系，比如对一，对多，也可以通过视图字段控件的对象下拉框、子表格等形式表示。</p>\n<p>普通的业务人员能通过表单配置出一些元数据对象，得到基础的列表和表单视图，实现最简单的增删改查功能，当然这些功能绝大多数情况下都是无法满足业务需求的。</p>\n<p>这类产品的第一大问题是：元数据本身无法体现提交&#x2F;审批这种业务类型操作属性，因此自定义按钮+自定义表单+流程设计器是必须的。</p>\n<p>自定义按钮&#x2F;自定义业务需求，可以抽象为基于不同元数据对象的增删改查操作+各种上下文变量操作，拼接成一个流程，实现能力的上限就是流程设计器配置能力的上限，只要舍得投入，就能够完全实现各种数据操作需求。</p>\n<p>流程设计器的出现，必定会引入变量、逻辑网关、表达式等概念，这意味着，在没有培训的情况下，几乎只有IT（不管是开发还是运维）这些稍微有一点开发经验的人才能用好。</p>\n<p>这类产品的第二大问题是，对象不能完全描述视图。</p>\n<p>虽然一切数据操作需求都可以通过元数据和元数据之间的关系、行为来描述，但视图需求真不是元数据能够完全描述的了。比如说要自定义新增、修改、详情的表单布局和内容，要控制列&#x2F;表单控件顺序、名称、样式、悬浮提示、条件展示、编辑联动，各种无法的导入导出需求等等，这些复杂需求意味着需要强大灵活的视图编辑能力。</p>\n<p>视图定制能力和流程配置能力，就是木桶效应中的两块板子。大多数公司更倾向于提供默认的不甚灵活的视图配置，而往流程配置上加注资源，通常来说流程更容易穷举，而视图需求必须要有丰富的业务积累才能判断其价值。</p>\n<p>这类产品的第三大问题是，使用者心智负担较大。</p>\n<p>除了流程设计器中的变量等概念外，对象和关系的理解也是有门槛的。</p>\n<p>我们看到的这类产品，通常都是从表单开始创建视图，而很少有从对象建模开始。因为绝大多数人都无法将对象、字段、关系这些概念映射到视图上，因此如果从建模开始，往往会遗漏关系，对视图配置也摸不着头脑。</p>\n<p>而从视图配置开始，比如用户在表单中拖一个客户单选下拉框，那就是建立对客户的对一关系，用户拖一个客户表格，那就是建立对客户的对多关系。在后续的配置中，也将对象的概念引导到列表上，将实例的概念引导到表单上。<br>看起来似乎能避免用户卡在关系概念的理解上，但实践中，并不能完全通过控件属性获知对一&#x2F;对多关系，比如普通套餐只能选择一个汉堡，但特殊套餐可以选择多个汉堡，那么套餐和汉堡之间的关系就不能通过控件确定了。</p>\n<h3 id=\"视图驱动型的低代码平台特点\"><a href=\"#视图驱动型的低代码平台特点\" class=\"headerlink\" title=\"视图驱动型的低代码平台特点\"></a>视图驱动型的低代码平台特点</h3><p>这类平台一定有拖拉拽实现一个页面的网页编辑器，不同于表单编辑器，网页编辑器有极其丰富的组件，每个组件都有丰富的配置项，组件之间的交互也可以通过设置流程+变量操作组装，几乎可以满足所有的视图需求。</p>\n<p>但视图和数据往往是独立的。视图数据源，既可以通过平台上可视化建模生成的对象，也可以通过api接口接外部的数据源，至于怎么在视图上展示，就完全看配置人怎么处理了。</p>\n<p>对于平台上创建的对象，倒是可以提供一些模板组件快速地搭建出页面效果，但外部数据源，即使定义了对象结构，往往还需要拦截器对它进行适配。</p>\n<p>且不论数据源的接入，光视图控件各种专业的配置项，就让绝大多数人，甚至一大部分开发人员望而生畏了。能驾驭视图编辑器的人，往往都是有一定前端开发能力的人。</p>\n<p>这类产品除了配置难度大，配置效率也很低。 每一个视图都是从零搭建，每一处数据都要配置接口、变量，每一处按钮都要配置各种交互，需要操心页面各种细节。一个简单的页面，流程引擎驱动的低代码平台，只要用户建一个表单，设置好流程即可完成；元数据驱动型低代码平台，则需要用户建表单+配置工作流即可完成；而视图驱动型，需要建对象+配置列表&#x2F;表单&#x2F;各种按钮控件+组织数据流转，配置项非常多。因此这类产品想要做好，就必须要提供元数据驱动型的控件。</p>\n<h2 id=\"认识低代码平台的客户\"><a href=\"#认识低代码平台的客户\" class=\"headerlink\" title=\"认识低代码平台的客户\"></a>认识低代码平台的客户</h2><p>客户为什么用低代码？我认为主要有以下四种场景：</p>\n<ol>\n<li>传统企业数字化转型，比如无纸办公类型需求。这类公司一般没有web开发技术，或技术薄弱，而他们数字化的需求往往都是简单的行政类工作，比如考勤、签到、面试、人员统计、任务管理等等，企业预算有限，可能并不值得买一些商业化产品，更不值得养一个开发团队来做这些事情。 </li>\n<li>传统企业的IT部门，提供企业内部的办公系统，比如带有复杂规则的内部审批系统。即使办公系统可以采购，也常常无法满足企业定制需求，IT部门开发能力有限，就只能借助低代码。 </li>\n<li>互联网公司解决长尾需求。 互联网公司一般都有自己的技术团队，但技术团队总是优先服务业务部门，而有技术需求的总不只是业务部门，行政、人事、财务都会有需求，若投入技术资源去开发，投入产出不一定能平衡，因此可以借助低代码，节省开发、维护成本。</li>\n<li>使用低代码实现产品的定制能力。 尤其是ToB类SAAS产品，每个客户都可能有定制需求，如果都通过配置来实现定制需求，客户发展多了，要么无力维护配置，要么最后也会变成一个低代码平台。因此不如直接基于低代码平台做标准产品，并通过租户管理机制，由不同的客户实施团队负责定制功能，灵活度高，而且运维成本低。</li>\n</ol>\n<h2 id=\"重新认识低代码平台的使用者\"><a href=\"#重新认识低代码平台的使用者\" class=\"headerlink\" title=\"重新认识低代码平台的使用者\"></a>重新认识低代码平台的使用者</h2><p>我将低代码平台的使用人员分为三类：无开发能力的业务人员、无开发能力的IT运维人员、有一定开发能力的开发者。</p>\n<p>无开发能力的业务人员，很难理解变量、接口、对象这种开发层面的概念，因此低代码平台必须简单易用，以尽量少的配置，提供丰富的模板，最好能够零配置开箱即用。显然流程引擎驱动的低代码产品更适合这部分用户。</p>\n<p>无开发能力的IT运维人员，这部分人大多是计算机相关专业毕业，入职传统企业，对web开发接触很少，但还是有一定的程序开发能力，<br>他们面对的往往是企业内部管理系统，需求并无标准，因此低代码平台必须支持灵活的配置能力，平台应开放足够的口子容配置人员通过变量及表达式实现定制&#x2F;动态需求，所以一般后两种产品更适合。但解除部分用户后发现，虽然元数据驱动型平台使用更友好，但并不能满足各种非标需求。</p>\n<p>有一定能力的开发者，自然是能够完全理解平台里的各种概念，比如流程、对象、关系、变量、接口等等，能了解组件、布局，甚至能写一些代码。</p>\n<p>以上不同用户的使用方式，都是我坐在办公室里想象出来的。在实践中，完全不是这么一回事。在低代码平台的开发者看来，所有的用户，都像无头苍蝇一样，不知道能不能配，不知道怎么配，所以这一章节的题目才是，重新认识使用者。</p>\n<p><strong>低代码平台的开发者们，总低估了平台的使用难度。</strong></p>\n<p>用户们遇到的第一重难关就是：将<strong>需求解构</strong>，并重塑为低代码平台提供的视图。</p>\n<p>举个简单的场景，车间需要统计每日工人的工时和产出件数。那么工人需要通过表单提交上班时间、下班时间、产出件数，车间主任需要核对每个工人的提交数据，最后财务也要进行汇总，形成每日报表。</p>\n<p>这里大致涉及到三种角色，一个审批流，两个列表（工人工时&#x2F;产出明细和车间每日投入&#x2F;成果），当然还需要考虑统计、审批、数据补录等细节。对业务人员来说，要想清楚这些可并不轻松。</p>\n<p>虽然这个并不是低代码平台造成的问题，但平台可以提供模板更功能，给用户业务上的提示和参考。</p>\n<p>第二重难关是：<strong>怎么配</strong>。</p>\n<p>比如销售人员管理系统，每个销售人员下原本只对应一个客户，那么编辑表单只要配一个下拉框就可以了，可后来一个销售人员可能对应多个客户，客户还可能同名，那编辑表单就需要一个列表展示客户更多信息，然后对列表做多选。</p>\n<p>如果是元数据驱动，可能直接拖一个表格控件就好了，可如果是视图驱动，就需要考虑弹窗、表格、数据、点击等一系列配置了，配置点一多，用户就不知道怎么配了。</p>\n<p>大多数用户，对平台提供的功能都不会加以思考，就好像拼乐高，看到一块相似的零件就往上凑，对功能块不知道怎么拆成子零件，也不知道子零件能组装成什么功能块。</p>\n<p>所以平台提供的功能越少越好，越模块化越好。</p>\n<p>第三重难关是：<strong>为什么不生效</strong>。</p>\n<p>比如表格有20列，配置的人希望在运行时使用者可以自己拖动列的顺序，并且页面能记住使用者自定义的顺序。后来需求有变更，配置的人希望某几列放在最前面，结果发现怎么配都不生效。配置的人很难想到，他对列顺序有两个冲突的需求。</p>\n<p>再比如，对某按钮控制了权限，管理员才能看到，结果运行时发现某个不是管理员的人也难看到，这时候正常的排查手段是，看看这个人是不是管理员，再看这个按钮是不是绑对了权限，是否有其他权限规则，以及，是否有相似的页面或按钮，配错了对象等。配置越灵活，意味着排查链路越长，排查难度越大。</p>\n<p>从这两个场景中可以看到，平台提供的功能越多，对用户越不友好，因此，平台除了对各种配置项增加详细的文档，最好还能够针对不同的场景提供不同的默认配置项，并尽可能隐藏不必要的配置。</p>\n<p>第四重难关是：<strong>能不能配置</strong><br>这可以说是一个终极问题了，要回答能不能配置的问题，首先得经过需求拆解，并将需求落入不同的视图控件&#x2F;配置能力上，只有对平台非常了解的人才能回答这个问题，实践中，几乎只有低代码平台本身的开发和实施。<br>因此低代码平台，除了在功能上积累丰富的模板和场景案例，还需要采取一些运营手段，比如可以建立社群、进行开发者认证&#x2F;入驻等。</p>\n","length":5118,"excerpt":"","more":"<p>所有的低代码平台开发者都会遇到这个问题：“这么常见的需求，你们的低代码都配不了！”</p>\n<p>为了解决这个问题，往往只能增加配置项，堆的多了，于是又带来了另一个问题：“你们的低代码配置太多了，上手难度太大！”</p>\n<p>为了解决这个问题，低代码开发者引入了“模板”,理想情况下可以开箱即用。</p>\n<p>于是用户又来抱怨了：“我想加个xx，根本不知道在哪里配，也不知道能不能配出来。”</p>\n<p>似乎不管开发者么怎么努力，用户始终在抱怨。</p>\n<h2 id=\"认识你的低代码平台\"><a href=\"#认识你的低代码平台\" class=\"headerlink\" title=\"认识你的低代码平台\"></a>认识你的低代码平台</h2><p>我将低代码平台底层分为三种：流程引擎驱动、元数据驱动和视图驱动，这三种也都很好理解：</p>\n<ul>\n<li>流程引擎驱动：创建视图的时候，需要配置数据流程，比如提交、审批等节点，视图展示的是流程对象，因此视图自带业务功能按钮。典型的产品如轻流、简道云。</li>\n<li>元数据驱动：创建视图的过程，就是创建对象的过程，对象本身并无业务功能，只有增删改查，因此视图一般不具备业务功能按钮，但可以配置工作流以实现业务逻辑。典型的产品有明道云。</li>\n<li>视图驱动：基于一个复杂的网页编辑器（并非表单编辑器）拖拉拽丰富的组件+数据设置而搭建的视图。典型的产品如微搭、宜搭</li>\n</ul>\n<p>当然成熟的商业化产品可能包含多种特性，比如微搭也有元数据对象管理，简道云的非流程表单也可以配置工作流，明道云也有自定义视图的能力，但不同产品的投入重点不一样。</p>\n<h3 id=\"流程引擎驱动型低代码平台特点\"><a href=\"#流程引擎驱动型低代码平台特点\" class=\"headerlink\" title=\"流程引擎驱动型低代码平台特点\"></a>流程引擎驱动型低代码平台特点</h3><p>流程的核心是流程表单，流程的发起、提交、审核、结束&#x2F;终止都离开不了表单。</p>\n<p>这类低代码产品，页面创建一定是从流程表单创建开始的。创建表单的时候，添加编辑控件的过程，其实就是在给这个流程赋予业务字段。创建完表单自然而然需要配置表单提交的流程，比如指定审批阶段和审批人。</p>\n<p>完成表单和流程的创建，列表视图也就出来了，列表字段即表单中的字段，列表页签就是流程的状态，列表上的按钮，就是流程操作按钮。</p>\n<p>流程表单样式、布局、字段基本固定，流程动作固定，列表字段基本固定，权限内置，因此这种低代码平台可视化配置交互流畅，配置量少，上手成本极低。对某些特定场景，比如考勤、人员等级等，可以做成模板直接提供给业务人员，理想情况下业务人员能够开箱即用，因此对没有开发能力的使用者非常友好。</p>\n<p>但缺点也很明显：</p>\n<ol>\n<li>每个页面都是一个流程，这个前提就是业务需求可以抽象为一个流程，但事实上并非如此。比如说失效&#x2F;生效、启用&#x2F;暂停等状态类、A品类&#x2F;B品类等分类，多个tab一起展示。</li>\n<li>即使是业务需求可以抽象为流程，但业务数据可能处在多流程中，比如银行卡的挂失场景，可以划分为申请——受理——交付——完结，但受理环节又可以分为发起——审批——制卡——运输——入库——出库，这其中还可能有更多的细支流程，要将多个流程中的数据挑选出不同的字段展示给不同的操作人，一般的流程引擎很难实现。</li>\n<li>当业务对象存在对一、对多关系时，流程实例无法体现这种关系，它总是一个单对象。</li>\n<li>几乎没有自定义按钮的能力：既然已经设定了流程，自然所有的操作都属于流程操作，基于这个前提，自然也不会有自定义按钮的场景 （然而实践中有大量的场景需求自定义按钮逻辑。）</li>\n</ol>\n<p>总之，基于流程引擎的平台，使用难度低，配置少，无法处理复杂场景。</p>\n<h3 id=\"元数据驱动型低代码平台特点\"><a href=\"#元数据驱动型低代码平台特点\" class=\"headerlink\" title=\"元数据驱动型低代码平台特点\"></a>元数据驱动型低代码平台特点</h3><p>这类产品的视图，有些从表单创建开始，有些从元数据对象的可视化建模开始。我们看到的产品，大多数是从表单创建开始，但表单创建的本质，其实也是元数据创建。</p>\n<p>字段的类型和编辑控件往往存在固定关系，因此元数据和列表和表单视图会同步创建。对象自带的增删改查功能就对应了视图的按钮；对象间的关系，比如对一，对多，也可以通过视图字段控件的对象下拉框、子表格等形式表示。</p>\n<p>普通的业务人员能通过表单配置出一些元数据对象，得到基础的列表和表单视图，实现最简单的增删改查功能，当然这些功能绝大多数情况下都是无法满足业务需求的。</p>\n<p>这类产品的第一大问题是：元数据本身无法体现提交&#x2F;审批这种业务类型操作属性，因此自定义按钮+自定义表单+流程设计器是必须的。</p>\n<p>自定义按钮&#x2F;自定义业务需求，可以抽象为基于不同元数据对象的增删改查操作+各种上下文变量操作，拼接成一个流程，实现能力的上限就是流程设计器配置能力的上限，只要舍得投入，就能够完全实现各种数据操作需求。</p>\n<p>流程设计器的出现，必定会引入变量、逻辑网关、表达式等概念，这意味着，在没有培训的情况下，几乎只有IT（不管是开发还是运维）这些稍微有一点开发经验的人才能用好。</p>\n<p>这类产品的第二大问题是，对象不能完全描述视图。</p>\n<p>虽然一切数据操作需求都可以通过元数据和元数据之间的关系、行为来描述，但视图需求真不是元数据能够完全描述的了。比如说要自定义新增、修改、详情的表单布局和内容，要控制列&#x2F;表单控件顺序、名称、样式、悬浮提示、条件展示、编辑联动，各种无法的导入导出需求等等，这些复杂需求意味着需要强大灵活的视图编辑能力。</p>\n<p>视图定制能力和流程配置能力，就是木桶效应中的两块板子。大多数公司更倾向于提供默认的不甚灵活的视图配置，而往流程配置上加注资源，通常来说流程更容易穷举，而视图需求必须要有丰富的业务积累才能判断其价值。</p>\n<p>这类产品的第三大问题是，使用者心智负担较大。</p>\n<p>除了流程设计器中的变量等概念外，对象和关系的理解也是有门槛的。</p>\n<p>我们看到的这类产品，通常都是从表单开始创建视图，而很少有从对象建模开始。因为绝大多数人都无法将对象、字段、关系这些概念映射到视图上，因此如果从建模开始，往往会遗漏关系，对视图配置也摸不着头脑。</p>\n<p>而从视图配置开始，比如用户在表单中拖一个客户单选下拉框，那就是建立对客户的对一关系，用户拖一个客户表格，那就是建立对客户的对多关系。在后续的配置中，也将对象的概念引导到列表上，将实例的概念引导到表单上。<br>看起来似乎能避免用户卡在关系概念的理解上，但实践中，并不能完全通过控件属性获知对一&#x2F;对多关系，比如普通套餐只能选择一个汉堡，但特殊套餐可以选择多个汉堡，那么套餐和汉堡之间的关系就不能通过控件确定了。</p>\n<h3 id=\"视图驱动型的低代码平台特点\"><a href=\"#视图驱动型的低代码平台特点\" class=\"headerlink\" title=\"视图驱动型的低代码平台特点\"></a>视图驱动型的低代码平台特点</h3><p>这类平台一定有拖拉拽实现一个页面的网页编辑器，不同于表单编辑器，网页编辑器有极其丰富的组件，每个组件都有丰富的配置项，组件之间的交互也可以通过设置流程+变量操作组装，几乎可以满足所有的视图需求。</p>\n<p>但视图和数据往往是独立的。视图数据源，既可以通过平台上可视化建模生成的对象，也可以通过api接口接外部的数据源，至于怎么在视图上展示，就完全看配置人怎么处理了。</p>\n<p>对于平台上创建的对象，倒是可以提供一些模板组件快速地搭建出页面效果，但外部数据源，即使定义了对象结构，往往还需要拦截器对它进行适配。</p>\n<p>且不论数据源的接入，光视图控件各种专业的配置项，就让绝大多数人，甚至一大部分开发人员望而生畏了。能驾驭视图编辑器的人，往往都是有一定前端开发能力的人。</p>\n<p>这类产品除了配置难度大，配置效率也很低。 每一个视图都是从零搭建，每一处数据都要配置接口、变量，每一处按钮都要配置各种交互，需要操心页面各种细节。一个简单的页面，流程引擎驱动的低代码平台，只要用户建一个表单，设置好流程即可完成；元数据驱动型低代码平台，则需要用户建表单+配置工作流即可完成；而视图驱动型，需要建对象+配置列表&#x2F;表单&#x2F;各种按钮控件+组织数据流转，配置项非常多。因此这类产品想要做好，就必须要提供元数据驱动型的控件。</p>\n<h2 id=\"认识低代码平台的客户\"><a href=\"#认识低代码平台的客户\" class=\"headerlink\" title=\"认识低代码平台的客户\"></a>认识低代码平台的客户</h2><p>客户为什么用低代码？我认为主要有以下四种场景：</p>\n<ol>\n<li>传统企业数字化转型，比如无纸办公类型需求。这类公司一般没有web开发技术，或技术薄弱，而他们数字化的需求往往都是简单的行政类工作，比如考勤、签到、面试、人员统计、任务管理等等，企业预算有限，可能并不值得买一些商业化产品，更不值得养一个开发团队来做这些事情。 </li>\n<li>传统企业的IT部门，提供企业内部的办公系统，比如带有复杂规则的内部审批系统。即使办公系统可以采购，也常常无法满足企业定制需求，IT部门开发能力有限，就只能借助低代码。 </li>\n<li>互联网公司解决长尾需求。 互联网公司一般都有自己的技术团队，但技术团队总是优先服务业务部门，而有技术需求的总不只是业务部门，行政、人事、财务都会有需求，若投入技术资源去开发，投入产出不一定能平衡，因此可以借助低代码，节省开发、维护成本。</li>\n<li>使用低代码实现产品的定制能力。 尤其是ToB类SAAS产品，每个客户都可能有定制需求，如果都通过配置来实现定制需求，客户发展多了，要么无力维护配置，要么最后也会变成一个低代码平台。因此不如直接基于低代码平台做标准产品，并通过租户管理机制，由不同的客户实施团队负责定制功能，灵活度高，而且运维成本低。</li>\n</ol>\n<h2 id=\"重新认识低代码平台的使用者\"><a href=\"#重新认识低代码平台的使用者\" class=\"headerlink\" title=\"重新认识低代码平台的使用者\"></a>重新认识低代码平台的使用者</h2><p>我将低代码平台的使用人员分为三类：无开发能力的业务人员、无开发能力的IT运维人员、有一定开发能力的开发者。</p>\n<p>无开发能力的业务人员，很难理解变量、接口、对象这种开发层面的概念，因此低代码平台必须简单易用，以尽量少的配置，提供丰富的模板，最好能够零配置开箱即用。显然流程引擎驱动的低代码产品更适合这部分用户。</p>\n<p>无开发能力的IT运维人员，这部分人大多是计算机相关专业毕业，入职传统企业，对web开发接触很少，但还是有一定的程序开发能力，<br>他们面对的往往是企业内部管理系统，需求并无标准，因此低代码平台必须支持灵活的配置能力，平台应开放足够的口子容配置人员通过变量及表达式实现定制&#x2F;动态需求，所以一般后两种产品更适合。但解除部分用户后发现，虽然元数据驱动型平台使用更友好，但并不能满足各种非标需求。</p>\n<p>有一定能力的开发者，自然是能够完全理解平台里的各种概念，比如流程、对象、关系、变量、接口等等，能了解组件、布局，甚至能写一些代码。</p>\n<p>以上不同用户的使用方式，都是我坐在办公室里想象出来的。在实践中，完全不是这么一回事。在低代码平台的开发者看来，所有的用户，都像无头苍蝇一样，不知道能不能配，不知道怎么配，所以这一章节的题目才是，重新认识使用者。</p>\n<p><strong>低代码平台的开发者们，总低估了平台的使用难度。</strong></p>\n<p>用户们遇到的第一重难关就是：将<strong>需求解构</strong>，并重塑为低代码平台提供的视图。</p>\n<p>举个简单的场景，车间需要统计每日工人的工时和产出件数。那么工人需要通过表单提交上班时间、下班时间、产出件数，车间主任需要核对每个工人的提交数据，最后财务也要进行汇总，形成每日报表。</p>\n<p>这里大致涉及到三种角色，一个审批流，两个列表（工人工时&#x2F;产出明细和车间每日投入&#x2F;成果），当然还需要考虑统计、审批、数据补录等细节。对业务人员来说，要想清楚这些可并不轻松。</p>\n<p>虽然这个并不是低代码平台造成的问题，但平台可以提供模板更功能，给用户业务上的提示和参考。</p>\n<p>第二重难关是：<strong>怎么配</strong>。</p>\n<p>比如销售人员管理系统，每个销售人员下原本只对应一个客户，那么编辑表单只要配一个下拉框就可以了，可后来一个销售人员可能对应多个客户，客户还可能同名，那编辑表单就需要一个列表展示客户更多信息，然后对列表做多选。</p>\n<p>如果是元数据驱动，可能直接拖一个表格控件就好了，可如果是视图驱动，就需要考虑弹窗、表格、数据、点击等一系列配置了，配置点一多，用户就不知道怎么配了。</p>\n<p>大多数用户，对平台提供的功能都不会加以思考，就好像拼乐高，看到一块相似的零件就往上凑，对功能块不知道怎么拆成子零件，也不知道子零件能组装成什么功能块。</p>\n<p>所以平台提供的功能越少越好，越模块化越好。</p>\n<p>第三重难关是：<strong>为什么不生效</strong>。</p>\n<p>比如表格有20列，配置的人希望在运行时使用者可以自己拖动列的顺序，并且页面能记住使用者自定义的顺序。后来需求有变更，配置的人希望某几列放在最前面，结果发现怎么配都不生效。配置的人很难想到，他对列顺序有两个冲突的需求。</p>\n<p>再比如，对某按钮控制了权限，管理员才能看到，结果运行时发现某个不是管理员的人也难看到，这时候正常的排查手段是，看看这个人是不是管理员，再看这个按钮是不是绑对了权限，是否有其他权限规则，以及，是否有相似的页面或按钮，配错了对象等。配置越灵活，意味着排查链路越长，排查难度越大。</p>\n<p>从这两个场景中可以看到，平台提供的功能越多，对用户越不友好，因此，平台除了对各种配置项增加详细的文档，最好还能够针对不同的场景提供不同的默认配置项，并尽可能隐藏不必要的配置。</p>\n<p>第四重难关是：<strong>能不能配置</strong><br>这可以说是一个终极问题了，要回答能不能配置的问题，首先得经过需求拆解，并将需求落入不同的视图控件&#x2F;配置能力上，只有对平台非常了解的人才能回答这个问题，实践中，几乎只有低代码平台本身的开发和实施。<br>因此低代码平台，除了在功能上积累丰富的模板和场景案例，还需要采取一些运营手段，比如可以建立社群、进行开发者认证&#x2F;入驻等。</p>\n"},{"_content":"\n2022年初，我加入公司低代码团队，负责视图部分。\n彼时，低代码平台已初具雏形，整体框架明晰，基础也做的不错，功能规划有序推进。但低代码平台的功能并不完善，21年的使用率约为20%。\n\n## 平台配置的快速膨胀\n\n加入团队将近两年时间里，在平台推广的过程中，随着各种业务压力与某些政治因素，低代码平台的配置迅速膨胀。列表和表单新增配置项和二开点100多项，这还不包括工作流内的各种action和视图控件。\n\n到2023年底，低代码视图部分的功能基本完备，当年低代码平台搭建的页面占公司整体页面将近60%。24年开始，已经很少听到业务线反馈需要新增xx功能了。\n\n## 强大而难用的低代码平台\n\n配置规模迅速膨胀带来的副作用是，常有人来问，xx功能支不支持，xx需求如何实现。即使这些功能文档都有，甚至我还做了功能地图，但很多人仍然不知xx配置在哪里，xx功能如何开关。\n\n整个列表视图，包含列表和各种自带的表单、按钮，就已经有160多项配置，而1个配置项，又可能有多个配置点;有些功能需要多个配置项实现，也有部分功能，有多个配置项均能实现；如果有自定义按钮，还需要配置工作流，而流的action和弹窗/抽屉内支持的控件，分别又有约20个。\n\n别说是产线的使用方，即使是我自己，在出考题的时候，也需要重新check配置项的逻辑。\n\n如果以前觉得这个平台不好用，可能是配置不满足，那么现在如果有人觉得这个平台不好用，大概率是因为配置太多了。\n\n\n就比如说导出功能，默认是导出列表中所有字段，格式为excel，文件名为对项目，接口是同步的，因此会有一些配置需求：\n- 部分系统数据量大，需要配置成异步导出\n- 部分系统要求支持导出csv，因此也增加了一个格式配置；\n- 有部分系统的使用者需要自行决定导出哪些字段和顺序（比如不同的财务人员关注的字段不一样），于是运行时增加了导出模板的配置，还支持记忆功能\n- 运行时的导入模板，希望加一些提示，于是又增加了一个自定义说明的配置\n- 有些系统字段比较多，运维希望直接配置一个默认的模板，于是配置时也增加了模板控制\n- 配置时的模板上，有些运维希望未勾选的字段，用户也不可见，但有些运维希望用户那边还可以自己勾选，于是又增加了一个配置项\n- 有些用户对导出的文件名也有要求，希望增加时间/当前的状态页签\n\n这些配置项看上去都很合理，毕竟都是项目中直接提出来的需求，并不存在伪需求，但导出格式和模板说明的配置项，使用频率很低。\n\n因此，从2023年下半年开始，我就试图控制配置项新增的速度，并重新反思一些配置项的使用效率和设立初衷。\n\n\n## 如何限制配置项数量\n\n### 鼓励二开\n作为低代码平台，二开率一直是我们关注的一个重点指标，然而为了降低二开率而将一些不够典型的需求纳入到标准功能，是得不偿失的。\n\n比如我们的表单，表单项支持分组，有个项目需要对分组再增加一个备注。对这个项目来说，仅仅是增加几个文字，但这个需求如果是作为标准功能，那么就需要考虑，这个备注是否需要支持变量表达式、是否支持图标、备注的样式等等。\n\n这种及其低频的需求，如果是按照标准功能的方式来实现，实质上相当于用平台的人力去开发一个项目需求。那既然如此不如直接将它作为一个项目需求，按照项目的方式来实现：平台提供二开项，项目放出人实现这个二开。这里可能的一个问题是，项目方没有人来接这个开发点，这个也很好解决：平台提供一个人来完成这个二开。\n\n这种解决方式，无论是项目方还是平台，都能得到最优效率。\n\n\n### 提供兜底机制\n上面这个方案在实践中经常会遇到阻力：项目方不允许二开。\n对项目方来说，增加一个二开项目，会提高运维成本：非二开的云端项目，功能bug修复、优化等，都由云端负责，而二开项目则需要自己关注和升级。\n\n那么还有一种方式可以解决：提供兜底机制。\n\n比如说查询条件的默认值，可能是一个固定值，可能是来自于微前端基座传入的payload，可能是用户信息中的值，也可能计算自url上的参数，对关系控件（比如select），可能设置为下拉框中的第一个选项。\n将这些都作为默认值的配置项，\n\n","source":"_drafts/低代码平台功能性和易用性悖论（一）.md","raw":"\n2022年初，我加入公司低代码团队，负责视图部分。\n彼时，低代码平台已初具雏形，整体框架明晰，基础也做的不错，功能规划有序推进。但低代码平台的功能并不完善，21年的使用率约为20%。\n\n## 平台配置的快速膨胀\n\n加入团队将近两年时间里，在平台推广的过程中，随着各种业务压力与某些政治因素，低代码平台的配置迅速膨胀。列表和表单新增配置项和二开点100多项，这还不包括工作流内的各种action和视图控件。\n\n到2023年底，低代码视图部分的功能基本完备，当年低代码平台搭建的页面占公司整体页面将近60%。24年开始，已经很少听到业务线反馈需要新增xx功能了。\n\n## 强大而难用的低代码平台\n\n配置规模迅速膨胀带来的副作用是，常有人来问，xx功能支不支持，xx需求如何实现。即使这些功能文档都有，甚至我还做了功能地图，但很多人仍然不知xx配置在哪里，xx功能如何开关。\n\n整个列表视图，包含列表和各种自带的表单、按钮，就已经有160多项配置，而1个配置项，又可能有多个配置点;有些功能需要多个配置项实现，也有部分功能，有多个配置项均能实现；如果有自定义按钮，还需要配置工作流，而流的action和弹窗/抽屉内支持的控件，分别又有约20个。\n\n别说是产线的使用方，即使是我自己，在出考题的时候，也需要重新check配置项的逻辑。\n\n如果以前觉得这个平台不好用，可能是配置不满足，那么现在如果有人觉得这个平台不好用，大概率是因为配置太多了。\n\n\n就比如说导出功能，默认是导出列表中所有字段，格式为excel，文件名为对项目，接口是同步的，因此会有一些配置需求：\n- 部分系统数据量大，需要配置成异步导出\n- 部分系统要求支持导出csv，因此也增加了一个格式配置；\n- 有部分系统的使用者需要自行决定导出哪些字段和顺序（比如不同的财务人员关注的字段不一样），于是运行时增加了导出模板的配置，还支持记忆功能\n- 运行时的导入模板，希望加一些提示，于是又增加了一个自定义说明的配置\n- 有些系统字段比较多，运维希望直接配置一个默认的模板，于是配置时也增加了模板控制\n- 配置时的模板上，有些运维希望未勾选的字段，用户也不可见，但有些运维希望用户那边还可以自己勾选，于是又增加了一个配置项\n- 有些用户对导出的文件名也有要求，希望增加时间/当前的状态页签\n\n这些配置项看上去都很合理，毕竟都是项目中直接提出来的需求，并不存在伪需求，但导出格式和模板说明的配置项，使用频率很低。\n\n因此，从2023年下半年开始，我就试图控制配置项新增的速度，并重新反思一些配置项的使用效率和设立初衷。\n\n\n## 如何限制配置项数量\n\n### 鼓励二开\n作为低代码平台，二开率一直是我们关注的一个重点指标，然而为了降低二开率而将一些不够典型的需求纳入到标准功能，是得不偿失的。\n\n比如我们的表单，表单项支持分组，有个项目需要对分组再增加一个备注。对这个项目来说，仅仅是增加几个文字，但这个需求如果是作为标准功能，那么就需要考虑，这个备注是否需要支持变量表达式、是否支持图标、备注的样式等等。\n\n这种及其低频的需求，如果是按照标准功能的方式来实现，实质上相当于用平台的人力去开发一个项目需求。那既然如此不如直接将它作为一个项目需求，按照项目的方式来实现：平台提供二开项，项目放出人实现这个二开。这里可能的一个问题是，项目方没有人来接这个开发点，这个也很好解决：平台提供一个人来完成这个二开。\n\n这种解决方式，无论是项目方还是平台，都能得到最优效率。\n\n\n### 提供兜底机制\n上面这个方案在实践中经常会遇到阻力：项目方不允许二开。\n对项目方来说，增加一个二开项目，会提高运维成本：非二开的云端项目，功能bug修复、优化等，都由云端负责，而二开项目则需要自己关注和升级。\n\n那么还有一种方式可以解决：提供兜底机制。\n\n比如说查询条件的默认值，可能是一个固定值，可能是来自于微前端基座传入的payload，可能是用户信息中的值，也可能计算自url上的参数，对关系控件（比如select），可能设置为下拉框中的第一个选项。\n将这些都作为默认值的配置项，\n\n","slug":"低代码平台功能性和易用性悖论（一）","published":0,"date":"2024-04-04T12:30:14.353Z","updated":"2024-04-04T12:30:14.354Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clulf0lhf0001hajf4gpn1lbo","content":"<p>2022年初，我加入公司低代码团队，负责视图部分。<br>彼时，低代码平台已初具雏形，整体框架明晰，基础也做的不错，功能规划有序推进。但低代码平台的功能并不完善，21年的使用率约为20%。</p>\n<h2 id=\"平台配置的快速膨胀\"><a href=\"#平台配置的快速膨胀\" class=\"headerlink\" title=\"平台配置的快速膨胀\"></a>平台配置的快速膨胀</h2><p>加入团队将近两年时间里，在平台推广的过程中，随着各种业务压力与某些政治因素，低代码平台的配置迅速膨胀。列表和表单新增配置项和二开点100多项，这还不包括工作流内的各种action和视图控件。</p>\n<p>到2023年底，低代码视图部分的功能基本完备，当年低代码平台搭建的页面占公司整体页面将近60%。24年开始，已经很少听到业务线反馈需要新增xx功能了。</p>\n<h2 id=\"强大而难用的低代码平台\"><a href=\"#强大而难用的低代码平台\" class=\"headerlink\" title=\"强大而难用的低代码平台\"></a>强大而难用的低代码平台</h2><p>配置规模迅速膨胀带来的副作用是，常有人来问，xx功能支不支持，xx需求如何实现。即使这些功能文档都有，甚至我还做了功能地图，但很多人仍然不知xx配置在哪里，xx功能如何开关。</p>\n<p>整个列表视图，包含列表和各种自带的表单、按钮，就已经有160多项配置，而1个配置项，又可能有多个配置点;有些功能需要多个配置项实现，也有部分功能，有多个配置项均能实现；如果有自定义按钮，还需要配置工作流，而流的action和弹窗&#x2F;抽屉内支持的控件，分别又有约20个。</p>\n<p>别说是产线的使用方，即使是我自己，在出考题的时候，也需要重新check配置项的逻辑。</p>\n<p>如果以前觉得这个平台不好用，可能是配置不满足，那么现在如果有人觉得这个平台不好用，大概率是因为配置太多了。</p>\n<p>就比如说导出功能，默认是导出列表中所有字段，格式为excel，文件名为对项目，接口是同步的，因此会有一些配置需求：</p>\n<ul>\n<li>部分系统数据量大，需要配置成异步导出</li>\n<li>部分系统要求支持导出csv，因此也增加了一个格式配置；</li>\n<li>有部分系统的使用者需要自行决定导出哪些字段和顺序（比如不同的财务人员关注的字段不一样），于是运行时增加了导出模板的配置，还支持记忆功能</li>\n<li>运行时的导入模板，希望加一些提示，于是又增加了一个自定义说明的配置</li>\n<li>有些系统字段比较多，运维希望直接配置一个默认的模板，于是配置时也增加了模板控制</li>\n<li>配置时的模板上，有些运维希望未勾选的字段，用户也不可见，但有些运维希望用户那边还可以自己勾选，于是又增加了一个配置项</li>\n<li>有些用户对导出的文件名也有要求，希望增加时间&#x2F;当前的状态页签</li>\n</ul>\n<p>这些配置项看上去都很合理，毕竟都是项目中直接提出来的需求，并不存在伪需求，但导出格式和模板说明的配置项，使用频率很低。</p>\n<p>因此，从2023年下半年开始，我就试图控制配置项新增的速度，并重新反思一些配置项的使用效率和设立初衷。</p>\n<h2 id=\"如何限制配置项数量\"><a href=\"#如何限制配置项数量\" class=\"headerlink\" title=\"如何限制配置项数量\"></a>如何限制配置项数量</h2><h3 id=\"鼓励二开\"><a href=\"#鼓励二开\" class=\"headerlink\" title=\"鼓励二开\"></a>鼓励二开</h3><p>作为低代码平台，二开率一直是我们关注的一个重点指标，然而为了降低二开率而将一些不够典型的需求纳入到标准功能，是得不偿失的。</p>\n<p>比如我们的表单，表单项支持分组，有个项目需要对分组再增加一个备注。对这个项目来说，仅仅是增加几个文字，但这个需求如果是作为标准功能，那么就需要考虑，这个备注是否需要支持变量表达式、是否支持图标、备注的样式等等。</p>\n<p>这种及其低频的需求，如果是按照标准功能的方式来实现，实质上相当于用平台的人力去开发一个项目需求。那既然如此不如直接将它作为一个项目需求，按照项目的方式来实现：平台提供二开项，项目放出人实现这个二开。这里可能的一个问题是，项目方没有人来接这个开发点，这个也很好解决：平台提供一个人来完成这个二开。</p>\n<p>这种解决方式，无论是项目方还是平台，都能得到最优效率。</p>\n<h3 id=\"提供兜底机制\"><a href=\"#提供兜底机制\" class=\"headerlink\" title=\"提供兜底机制\"></a>提供兜底机制</h3><p>上面这个方案在实践中经常会遇到阻力：项目方不允许二开。<br>对项目方来说，增加一个二开项目，会提高运维成本：非二开的云端项目，功能bug修复、优化等，都由云端负责，而二开项目则需要自己关注和升级。</p>\n<p>那么还有一种方式可以解决：提供兜底机制。</p>\n<p>比如说查询条件的默认值，可能是一个固定值，可能是来自于微前端基座传入的payload，可能是用户信息中的值，也可能计算自url上的参数，对关系控件（比如select），可能设置为下拉框中的第一个选项。<br>将这些都作为默认值的配置项，</p>\n","length":1632,"excerpt":"","more":"<p>2022年初，我加入公司低代码团队，负责视图部分。<br>彼时，低代码平台已初具雏形，整体框架明晰，基础也做的不错，功能规划有序推进。但低代码平台的功能并不完善，21年的使用率约为20%。</p>\n<h2 id=\"平台配置的快速膨胀\"><a href=\"#平台配置的快速膨胀\" class=\"headerlink\" title=\"平台配置的快速膨胀\"></a>平台配置的快速膨胀</h2><p>加入团队将近两年时间里，在平台推广的过程中，随着各种业务压力与某些政治因素，低代码平台的配置迅速膨胀。列表和表单新增配置项和二开点100多项，这还不包括工作流内的各种action和视图控件。</p>\n<p>到2023年底，低代码视图部分的功能基本完备，当年低代码平台搭建的页面占公司整体页面将近60%。24年开始，已经很少听到业务线反馈需要新增xx功能了。</p>\n<h2 id=\"强大而难用的低代码平台\"><a href=\"#强大而难用的低代码平台\" class=\"headerlink\" title=\"强大而难用的低代码平台\"></a>强大而难用的低代码平台</h2><p>配置规模迅速膨胀带来的副作用是，常有人来问，xx功能支不支持，xx需求如何实现。即使这些功能文档都有，甚至我还做了功能地图，但很多人仍然不知xx配置在哪里，xx功能如何开关。</p>\n<p>整个列表视图，包含列表和各种自带的表单、按钮，就已经有160多项配置，而1个配置项，又可能有多个配置点;有些功能需要多个配置项实现，也有部分功能，有多个配置项均能实现；如果有自定义按钮，还需要配置工作流，而流的action和弹窗&#x2F;抽屉内支持的控件，分别又有约20个。</p>\n<p>别说是产线的使用方，即使是我自己，在出考题的时候，也需要重新check配置项的逻辑。</p>\n<p>如果以前觉得这个平台不好用，可能是配置不满足，那么现在如果有人觉得这个平台不好用，大概率是因为配置太多了。</p>\n<p>就比如说导出功能，默认是导出列表中所有字段，格式为excel，文件名为对项目，接口是同步的，因此会有一些配置需求：</p>\n<ul>\n<li>部分系统数据量大，需要配置成异步导出</li>\n<li>部分系统要求支持导出csv，因此也增加了一个格式配置；</li>\n<li>有部分系统的使用者需要自行决定导出哪些字段和顺序（比如不同的财务人员关注的字段不一样），于是运行时增加了导出模板的配置，还支持记忆功能</li>\n<li>运行时的导入模板，希望加一些提示，于是又增加了一个自定义说明的配置</li>\n<li>有些系统字段比较多，运维希望直接配置一个默认的模板，于是配置时也增加了模板控制</li>\n<li>配置时的模板上，有些运维希望未勾选的字段，用户也不可见，但有些运维希望用户那边还可以自己勾选，于是又增加了一个配置项</li>\n<li>有些用户对导出的文件名也有要求，希望增加时间&#x2F;当前的状态页签</li>\n</ul>\n<p>这些配置项看上去都很合理，毕竟都是项目中直接提出来的需求，并不存在伪需求，但导出格式和模板说明的配置项，使用频率很低。</p>\n<p>因此，从2023年下半年开始，我就试图控制配置项新增的速度，并重新反思一些配置项的使用效率和设立初衷。</p>\n<h2 id=\"如何限制配置项数量\"><a href=\"#如何限制配置项数量\" class=\"headerlink\" title=\"如何限制配置项数量\"></a>如何限制配置项数量</h2><h3 id=\"鼓励二开\"><a href=\"#鼓励二开\" class=\"headerlink\" title=\"鼓励二开\"></a>鼓励二开</h3><p>作为低代码平台，二开率一直是我们关注的一个重点指标，然而为了降低二开率而将一些不够典型的需求纳入到标准功能，是得不偿失的。</p>\n<p>比如我们的表单，表单项支持分组，有个项目需要对分组再增加一个备注。对这个项目来说，仅仅是增加几个文字，但这个需求如果是作为标准功能，那么就需要考虑，这个备注是否需要支持变量表达式、是否支持图标、备注的样式等等。</p>\n<p>这种及其低频的需求，如果是按照标准功能的方式来实现，实质上相当于用平台的人力去开发一个项目需求。那既然如此不如直接将它作为一个项目需求，按照项目的方式来实现：平台提供二开项，项目放出人实现这个二开。这里可能的一个问题是，项目方没有人来接这个开发点，这个也很好解决：平台提供一个人来完成这个二开。</p>\n<p>这种解决方式，无论是项目方还是平台，都能得到最优效率。</p>\n<h3 id=\"提供兜底机制\"><a href=\"#提供兜底机制\" class=\"headerlink\" title=\"提供兜底机制\"></a>提供兜底机制</h3><p>上面这个方案在实践中经常会遇到阻力：项目方不允许二开。<br>对项目方来说，增加一个二开项目，会提高运维成本：非二开的云端项目，功能bug修复、优化等，都由云端负责，而二开项目则需要自己关注和升级。</p>\n<p>那么还有一种方式可以解决：提供兜底机制。</p>\n<p>比如说查询条件的默认值，可能是一个固定值，可能是来自于微前端基座传入的payload，可能是用户信息中的值，也可能计算自url上的参数，对关系控件（比如select），可能设置为下拉框中的第一个选项。<br>将这些都作为默认值的配置项，</p>\n"},{"title":"低代码平台的功能性和易用性悖论","subtitle":"重新认识低代码平台的用户","_content":"","source":"_drafts/低代码平台的功能性和易用性悖论.md","raw":"---\ntitle: 低代码平台的功能性和易用性悖论\nsubtitle: '重新认识低代码平台的用户'\ntags:\n---\n","slug":"低代码平台的功能性和易用性悖论","published":0,"date":"2024-04-04T12:30:14.354Z","updated":"2024-04-04T12:30:14.354Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhg0002hajfd9pc4l2l","content":"","length":0,"excerpt":"","more":""},{"title":"@nestjsx/crud快速入门","date":"2022-02-17T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第22天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n@nestjsx/crud 是为NestJs服务的个“微框架”，能大大简化CRUD代码的编写。虽然官方自称为“微框架”，但个人觉得理解为“工具集”可能更合适。\n\n项目初始化\n-----\n\n首先使用nest脚手架生成一个项目\n\n```css\nnpm i -g @nestjs/cli\nnest new curd-demo\n```\n\n然后安装@nestjsx/crud的依赖：\n\n```kotlin\nnpm i @nestjsx/crud class-transformer class-validator\nnpm i @nestjsx/crud-typeorm @nestjs/typeorm typeorm\n```\n\n@nestjsx/crud和@nestjsx/crud-typeorm分别提供了一个`@Crud()`装饰器和`TypeOrmCrudService`类，分别作用域controller和service。\n\n### 配置数据库连接\n\n### 配置TypeORM配置文件\n\n在src目录下创建orm.js,这里需要注意配置`synchronize: false`,数据库同步等操作用TypeORM的命令。\n\n```js\n/* eslint-disable */\nconst path = require('path');\nmodule.exports = {\n  type: 'mysql',\n  host: '127.0.0.1',\n  port: 3306,\n  username: 'fund',\n  password: 'good_luck123',\n  database: 'fund',\n  synchronize: false,\n  entities: [path.join(__dirname, './**/*.entity{.ts,.js}')],\n  migrationsTableName: 'orm_migrations',\n  migrations: ['./ seeds.ts'],\n};\n\n```\n\n### nest集成TypeORM\n\nTypeOrmModule.forRoot可以不传参，它默认会从根路径下的TypeORM配置文件获取参数，但这里有个坑，这个api支持的参数要比TypeORM的参数更多，如果全都配置在TypeORM的配置文件中，forRoot会把那些TypeORM不支持的参数全部忽略。\n\n因此这里有些实践是配置两个文件，一个是给TypeORM，用于TypeORM命令，一个是给nest的，用于连接数据库，@nestjsx/crud的官方example就是这么做的。\n\n不过可以变通一下，这里在src目录下再创建一个orm.config.ts文件,从orm.js中读取文件，然后进行合并，用作nest的数据库配置。\n\n```ts\nimport { TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { isNil } from '@nestjsx/util';\nimport * as config from './orm';\nexport const withCache: TypeOrmModuleOptions = {\n  ...(config as TypeOrmModuleOptions),\n  logging: !isNil(process.env.TYPEORM_LOGGING)\n    ? !!parseInt(process.env.TYPEORM_LOGGING, 10)\n    : true,\n};\n\n```\n\n然后在app.module.ts中配置如下\n\n```ts\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { withCache } from './orm.config';\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(withCache),\n    FundModule,\n    AnnualProfitModule,\n    RecentProfitModule,\n  ],\n})\nexport class AppModule {}\n```\n\n并设置tsconfig.json\n\n```json\n{\n    ...\n    \"allowJs\": true,\n}\n```\n\n定义实体类\n-----\n\n之后是根据项目创建实体类,这里需要用到TypeORM的`@Entity和@Column`,比如\n\n```scala\nimport { Entity, Column } from 'typeorm';\nexport class BaseFund extends BaseEntity {\n\n  @Column({ type: 'varchar', length: 6, nullable: false })\n  code?: string;\n\n \n  @Column({ type: 'varchar', length: 50, nullable: false })\n  name?: string;\n}\n\n@Entity('funds')\nexport class Fund extends BaseFund {\n \n  @Column({ nullable: true, type: 'varchar', length: 10 })\n  fundType?: string; //基金类型：股票型\n\n  @Column({ nullable: true, type: 'float', scale: 4, precision: 9 })\n  price: number;\n \n  @Column({ nullable: true })\n  grade?: number; //基金评级：\n}\n\n```\n\n`@Entity('funds')`表示这个实体类关联表funds，这里可以改为其他表名。`@Column()`表示这个字段对应数据库中的一个列。定义实体类的时候需要注意设置好数据类型，比如number类型的字段，默认生成的数据库字段是int类型，如果是float，需要设置它的精度。\n\n同步数据库\n-----\n\npackage.json中增加两个脚本：\n\n```json\n{\n\"scripts\": {\n    \"typeorm\": \"cd src && ts-node -r tsconfig-paths/register ../node_modules/typeorm/cli.js\",\n    \"db:sync\": \"yarn typeorm schema:sync -f=orm\",\n  },\n}\n```\n\n需要注意这里TypeORM的配置文件位置不在根路径，名字也不是它默认的，因此先`cd src`，然后再`typeorm schema:sync -f=orm`,`-f`表示文件名是orm。\n\n然后运行命令`yarn db:sync`，可以看到数据库表创建成功：\n\n![image.png](../imgs/441d5fe819d241e0ae5c27a8dc5d05bb.png)\n\n![image.png](../imgs/6d3566e0ddcd4bbdab3d5a39d04c918c.png)\n\n创建controller、service和module\n---------------------------\n\nservice:\n\n```ts\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { TypeOrmCrudService } from '@nestjsx/crud-typeorm';\n\nimport { AnnualProfit } from './annualProfit.entity';\n\n@Injectable()\nexport class AnnualProfitService extends TypeOrmCrudService<AnnualProfit> {\n  constructor(@InjectRepository(AnnualProfit) repo) {\n    super(repo);\n  }\n  async updateScaleByCode(code, info: Array<[number, number]>) {\n    return await Promise.all(\n      info.map(([year, scale]) => {\n        return this.repo.update({ code, year }, { scale });\n      }),\n    ).then(res =>\n      res.reduce((pre, cur) => {\n        return pre + cur.affected;\n      }, 0),\n    );\n  }\n}\n\n```\n\nservice需要继承`TypeOrmCrudService`，这个类有很多基本的CRUD操作api,可以直接用。service中需要自定义处理逻辑时可以使用TypeORM的responsitory对象。\n\n![image.png](../imgs/071f7b1d75294faa9789f01815f25fa0.png) controller:\n\n```ts\nimport { Crud, CrudController } from '@nestjsx/crud';\nimport { BaseRes } from 'src/base-entity';\n\nimport { AnnualProfit } from './annualProfit.entity';\nimport { AnnualProfitService } from './annualProfit.service';\n\n@Crud({\n  model: {\n    type: AnnualProfit,\n  },\n})\n@Controller('/annualProfit')\nexport class AnnualProfitController implements CrudController<AnnualProfit> {\n  constructor(public service: AnnualProfitService) {}\n  @Post('updateScale')\n  async updateScale(\n    @Body() body: { code: string; scale: Array<[number, number]> },\n  ) {\n    return this.service\n      .updateScaleByCode(body.code, body.scale)\n      .then(result => {\n        return new BaseRes(0, { data: result, message: `affected ${result}` });\n      });\n  }\n}\n\n```\n\ncontroller需要用`@Crud`装饰，这会直接生成基本的CRUD resultful 请求。当然controller中也可以自定义其他请求。\n\nmodule\n\n```ts\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AnnualProfit } from './annualProfit.entity';\nimport { AnnualProfitService } from './annualProfit.service';\nimport { AnnualProfitController } from './annualProfit.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([AnnualProfit])],\n  providers: [AnnualProfitService],\n  exports: [AnnualProfitService],\n  controllers: [AnnualProfitController],\n})\nexport class AnnualProfitModule {}\n\n```\n\n生成swagger\n---------\n\n加上swagger后可以看到一共生成了哪些接口。\n\n对controller增加`@ApiTags()`,并对自定义请求的dto设置`@ApiProperty()`和`@ApiResponse()`\n\n```ts\n@ApiTags('annualProfit')\n@Controller('/annualProfit')\nexport class AnnualProfitController implements CrudController<AnnualProfit> {\n ...\n @ApiResponse({ type: BaseRes })\n  @Post('updateScale')\n  async updateScale(@Body() body: UpdateScaleDto) {\n    return this.service\n      .updateScaleByCode(body.code, body.scale)\n      .then(result => {\n        return new BaseRes(0, { data: result, message: `affected ${result}` });\n      });\n  }\n}\n```\n\n对entity增加`@ApiProperty()`\n\n```less\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Entity('annual_profit')\nexport class AnnualProfit extends BaseFund {\n  @ApiProperty({ type: 'number', name: 'year', description: '年份' })\n  @Column({ nullable: true })\n  year: number; // 年份\n ...\n}\n\n```\n\n修改main.ts\n\n```ts\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const options = new DocumentBuilder()\n    .setTitle('fund-curd')\n    .setDescription('fund-curd')\n    .setVersion('1.0')\n    .build();\n  const document = SwaggerModule.createDocument(app, options);\n  SwaggerModule.setup('docs', app, document);\n  await app.listen(process.env.PORT || 3000);\n}\nbootstrap();\n```\n\n访问页面`http://localhost:3000/docs`,图中框住的部分就是@nestjsx/crud给我们生成的restful接口，另一个是我们自己设置的接口。\n\n![image.png](../imgs/e8e040971352443faa8d18bd39eb37fa.png)\n\n@nestjsx/crud-request\n---------------------\n\n截图中可以看到基本的增删改查、批量创建、分页查询它都已经有了，其中查询支持搜索条件、指定返回字段、排序等等。\n\n![image.png](../imgs/0731bc95d135415e9b5ad45fae7a0e6d.png) 但是参数也比较复杂，此时可以用到@nestjsx/crud-request。这是一个给前端使用的，快速创建查询条件的lib：\n\n```php\nimport { RequestQueryBuilder } from '@nestjsx/crud-request';\n\nconst queryString = RequestQueryBuilder.create({\n  fields: ['name', 'email'],\n  search: { isActive: true },\n  join: [{ field: 'company' }],\n  sort: [{ field: 'id', order: 'DESC' }],\n  page: 1,\n  limit: 25,\n  resetCache: true,\n}).query();\n\nconsole.log(queryString); \n//fields=name%2Cemail&s=%7B%22isActive%22%3Atrue%7D&join%5B0%5D=company&limit=25&page=1&sort%5B0%5D=id%2CDESC&cache=0\n```","source":"_posts/@nestjsx crud快速入门.md","raw":"---\n title: \"@nestjsx/crud快速入门\"\n date: 2022-02-18\n tags: [Node.js,NestJS]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第22天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n@nestjsx/crud 是为NestJs服务的个“微框架”，能大大简化CRUD代码的编写。虽然官方自称为“微框架”，但个人觉得理解为“工具集”可能更合适。\n\n项目初始化\n-----\n\n首先使用nest脚手架生成一个项目\n\n```css\nnpm i -g @nestjs/cli\nnest new curd-demo\n```\n\n然后安装@nestjsx/crud的依赖：\n\n```kotlin\nnpm i @nestjsx/crud class-transformer class-validator\nnpm i @nestjsx/crud-typeorm @nestjs/typeorm typeorm\n```\n\n@nestjsx/crud和@nestjsx/crud-typeorm分别提供了一个`@Crud()`装饰器和`TypeOrmCrudService`类，分别作用域controller和service。\n\n### 配置数据库连接\n\n### 配置TypeORM配置文件\n\n在src目录下创建orm.js,这里需要注意配置`synchronize: false`,数据库同步等操作用TypeORM的命令。\n\n```js\n/* eslint-disable */\nconst path = require('path');\nmodule.exports = {\n  type: 'mysql',\n  host: '127.0.0.1',\n  port: 3306,\n  username: 'fund',\n  password: 'good_luck123',\n  database: 'fund',\n  synchronize: false,\n  entities: [path.join(__dirname, './**/*.entity{.ts,.js}')],\n  migrationsTableName: 'orm_migrations',\n  migrations: ['./ seeds.ts'],\n};\n\n```\n\n### nest集成TypeORM\n\nTypeOrmModule.forRoot可以不传参，它默认会从根路径下的TypeORM配置文件获取参数，但这里有个坑，这个api支持的参数要比TypeORM的参数更多，如果全都配置在TypeORM的配置文件中，forRoot会把那些TypeORM不支持的参数全部忽略。\n\n因此这里有些实践是配置两个文件，一个是给TypeORM，用于TypeORM命令，一个是给nest的，用于连接数据库，@nestjsx/crud的官方example就是这么做的。\n\n不过可以变通一下，这里在src目录下再创建一个orm.config.ts文件,从orm.js中读取文件，然后进行合并，用作nest的数据库配置。\n\n```ts\nimport { TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { isNil } from '@nestjsx/util';\nimport * as config from './orm';\nexport const withCache: TypeOrmModuleOptions = {\n  ...(config as TypeOrmModuleOptions),\n  logging: !isNil(process.env.TYPEORM_LOGGING)\n    ? !!parseInt(process.env.TYPEORM_LOGGING, 10)\n    : true,\n};\n\n```\n\n然后在app.module.ts中配置如下\n\n```ts\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { withCache } from './orm.config';\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(withCache),\n    FundModule,\n    AnnualProfitModule,\n    RecentProfitModule,\n  ],\n})\nexport class AppModule {}\n```\n\n并设置tsconfig.json\n\n```json\n{\n    ...\n    \"allowJs\": true,\n}\n```\n\n定义实体类\n-----\n\n之后是根据项目创建实体类,这里需要用到TypeORM的`@Entity和@Column`,比如\n\n```scala\nimport { Entity, Column } from 'typeorm';\nexport class BaseFund extends BaseEntity {\n\n  @Column({ type: 'varchar', length: 6, nullable: false })\n  code?: string;\n\n \n  @Column({ type: 'varchar', length: 50, nullable: false })\n  name?: string;\n}\n\n@Entity('funds')\nexport class Fund extends BaseFund {\n \n  @Column({ nullable: true, type: 'varchar', length: 10 })\n  fundType?: string; //基金类型：股票型\n\n  @Column({ nullable: true, type: 'float', scale: 4, precision: 9 })\n  price: number;\n \n  @Column({ nullable: true })\n  grade?: number; //基金评级：\n}\n\n```\n\n`@Entity('funds')`表示这个实体类关联表funds，这里可以改为其他表名。`@Column()`表示这个字段对应数据库中的一个列。定义实体类的时候需要注意设置好数据类型，比如number类型的字段，默认生成的数据库字段是int类型，如果是float，需要设置它的精度。\n\n同步数据库\n-----\n\npackage.json中增加两个脚本：\n\n```json\n{\n\"scripts\": {\n    \"typeorm\": \"cd src && ts-node -r tsconfig-paths/register ../node_modules/typeorm/cli.js\",\n    \"db:sync\": \"yarn typeorm schema:sync -f=orm\",\n  },\n}\n```\n\n需要注意这里TypeORM的配置文件位置不在根路径，名字也不是它默认的，因此先`cd src`，然后再`typeorm schema:sync -f=orm`,`-f`表示文件名是orm。\n\n然后运行命令`yarn db:sync`，可以看到数据库表创建成功：\n\n![image.png](../imgs/441d5fe819d241e0ae5c27a8dc5d05bb.png)\n\n![image.png](../imgs/6d3566e0ddcd4bbdab3d5a39d04c918c.png)\n\n创建controller、service和module\n---------------------------\n\nservice:\n\n```ts\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { TypeOrmCrudService } from '@nestjsx/crud-typeorm';\n\nimport { AnnualProfit } from './annualProfit.entity';\n\n@Injectable()\nexport class AnnualProfitService extends TypeOrmCrudService<AnnualProfit> {\n  constructor(@InjectRepository(AnnualProfit) repo) {\n    super(repo);\n  }\n  async updateScaleByCode(code, info: Array<[number, number]>) {\n    return await Promise.all(\n      info.map(([year, scale]) => {\n        return this.repo.update({ code, year }, { scale });\n      }),\n    ).then(res =>\n      res.reduce((pre, cur) => {\n        return pre + cur.affected;\n      }, 0),\n    );\n  }\n}\n\n```\n\nservice需要继承`TypeOrmCrudService`，这个类有很多基本的CRUD操作api,可以直接用。service中需要自定义处理逻辑时可以使用TypeORM的responsitory对象。\n\n![image.png](../imgs/071f7b1d75294faa9789f01815f25fa0.png) controller:\n\n```ts\nimport { Crud, CrudController } from '@nestjsx/crud';\nimport { BaseRes } from 'src/base-entity';\n\nimport { AnnualProfit } from './annualProfit.entity';\nimport { AnnualProfitService } from './annualProfit.service';\n\n@Crud({\n  model: {\n    type: AnnualProfit,\n  },\n})\n@Controller('/annualProfit')\nexport class AnnualProfitController implements CrudController<AnnualProfit> {\n  constructor(public service: AnnualProfitService) {}\n  @Post('updateScale')\n  async updateScale(\n    @Body() body: { code: string; scale: Array<[number, number]> },\n  ) {\n    return this.service\n      .updateScaleByCode(body.code, body.scale)\n      .then(result => {\n        return new BaseRes(0, { data: result, message: `affected ${result}` });\n      });\n  }\n}\n\n```\n\ncontroller需要用`@Crud`装饰，这会直接生成基本的CRUD resultful 请求。当然controller中也可以自定义其他请求。\n\nmodule\n\n```ts\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AnnualProfit } from './annualProfit.entity';\nimport { AnnualProfitService } from './annualProfit.service';\nimport { AnnualProfitController } from './annualProfit.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([AnnualProfit])],\n  providers: [AnnualProfitService],\n  exports: [AnnualProfitService],\n  controllers: [AnnualProfitController],\n})\nexport class AnnualProfitModule {}\n\n```\n\n生成swagger\n---------\n\n加上swagger后可以看到一共生成了哪些接口。\n\n对controller增加`@ApiTags()`,并对自定义请求的dto设置`@ApiProperty()`和`@ApiResponse()`\n\n```ts\n@ApiTags('annualProfit')\n@Controller('/annualProfit')\nexport class AnnualProfitController implements CrudController<AnnualProfit> {\n ...\n @ApiResponse({ type: BaseRes })\n  @Post('updateScale')\n  async updateScale(@Body() body: UpdateScaleDto) {\n    return this.service\n      .updateScaleByCode(body.code, body.scale)\n      .then(result => {\n        return new BaseRes(0, { data: result, message: `affected ${result}` });\n      });\n  }\n}\n```\n\n对entity增加`@ApiProperty()`\n\n```less\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Entity('annual_profit')\nexport class AnnualProfit extends BaseFund {\n  @ApiProperty({ type: 'number', name: 'year', description: '年份' })\n  @Column({ nullable: true })\n  year: number; // 年份\n ...\n}\n\n```\n\n修改main.ts\n\n```ts\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const options = new DocumentBuilder()\n    .setTitle('fund-curd')\n    .setDescription('fund-curd')\n    .setVersion('1.0')\n    .build();\n  const document = SwaggerModule.createDocument(app, options);\n  SwaggerModule.setup('docs', app, document);\n  await app.listen(process.env.PORT || 3000);\n}\nbootstrap();\n```\n\n访问页面`http://localhost:3000/docs`,图中框住的部分就是@nestjsx/crud给我们生成的restful接口，另一个是我们自己设置的接口。\n\n![image.png](../imgs/e8e040971352443faa8d18bd39eb37fa.png)\n\n@nestjsx/crud-request\n---------------------\n\n截图中可以看到基本的增删改查、批量创建、分页查询它都已经有了，其中查询支持搜索条件、指定返回字段、排序等等。\n\n![image.png](../imgs/0731bc95d135415e9b5ad45fae7a0e6d.png) 但是参数也比较复杂，此时可以用到@nestjsx/crud-request。这是一个给前端使用的，快速创建查询条件的lib：\n\n```php\nimport { RequestQueryBuilder } from '@nestjsx/crud-request';\n\nconst queryString = RequestQueryBuilder.create({\n  fields: ['name', 'email'],\n  search: { isActive: true },\n  join: [{ field: 'company' }],\n  sort: [{ field: 'id', order: 'DESC' }],\n  page: 1,\n  limit: 25,\n  resetCache: true,\n}).query();\n\nconsole.log(queryString); \n//fields=name%2Cemail&s=%7B%22isActive%22%3Atrue%7D&join%5B0%5D=company&limit=25&page=1&sort%5B0%5D=id%2CDESC&cache=0\n```","slug":"@nestjsx crud快速入门","published":1,"updated":"2024-04-04T15:27:03.212Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhg0003hajfdsvaeu4g","content":"<p>「这是我参与2022首次更文挑战的第22天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>@nestjsx&#x2F;crud 是为NestJs服务的个“微框架”，能大大简化CRUD代码的编写。虽然官方自称为“微框架”，但个人觉得理解为“工具集”可能更合适。</p>\n<h2 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h2><p>首先使用nest脚手架生成一个项目</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> -g <span class=\"keyword\">@nestjs</span>/cli</span><br><span class=\"line\">nest new curd-demo</span><br></pre></td></tr></table></figure>\n\n<p>然后安装@nestjsx&#x2F;crud的依赖：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i <span class=\"meta\">@nestjsx</span>/crud <span class=\"keyword\">class</span>-transformer <span class=\"keyword\">class</span>-validator</span><br><span class=\"line\">npm i <span class=\"meta\">@nestjsx</span>/crud-typeorm <span class=\"meta\">@nestjs</span>/typeorm typeorm</span><br></pre></td></tr></table></figure>\n\n<p>@nestjsx&#x2F;crud和@nestjsx&#x2F;crud-typeorm分别提供了一个<code>@Crud()</code>装饰器和<code>TypeOrmCrudService</code>类，分别作用域controller和service。</p>\n<h3 id=\"配置数据库连接\"><a href=\"#配置数据库连接\" class=\"headerlink\" title=\"配置数据库连接\"></a>配置数据库连接</h3><h3 id=\"配置TypeORM配置文件\"><a href=\"#配置TypeORM配置文件\" class=\"headerlink\" title=\"配置TypeORM配置文件\"></a>配置TypeORM配置文件</h3><p>在src目录下创建orm.js,这里需要注意配置<code>synchronize: false</code>,数据库同步等操作用TypeORM的命令。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* eslint-disable */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;mysql&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">host</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">port</span>: <span class=\"number\">3306</span>,</span><br><span class=\"line\">  <span class=\"attr\">username</span>: <span class=\"string\">&#x27;fund&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"string\">&#x27;good_luck123&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">database</span>: <span class=\"string\">&#x27;fund&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">synchronize</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">entities</span>: [path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;./**/*.entity&#123;.ts,.js&#125;&#x27;</span>)],</span><br><span class=\"line\">  <span class=\"attr\">migrationsTableName</span>: <span class=\"string\">&#x27;orm_migrations&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">migrations</span>: [<span class=\"string\">&#x27;./ seeds.ts&#x27;</span>],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nest集成TypeORM\"><a href=\"#nest集成TypeORM\" class=\"headerlink\" title=\"nest集成TypeORM\"></a>nest集成TypeORM</h3><p>TypeOrmModule.forRoot可以不传参，它默认会从根路径下的TypeORM配置文件获取参数，但这里有个坑，这个api支持的参数要比TypeORM的参数更多，如果全都配置在TypeORM的配置文件中，forRoot会把那些TypeORM不支持的参数全部忽略。</p>\n<p>因此这里有些实践是配置两个文件，一个是给TypeORM，用于TypeORM命令，一个是给nest的，用于连接数据库，@nestjsx&#x2F;crud的官方example就是这么做的。</p>\n<p>不过可以变通一下，这里在src目录下再创建一个orm.config.ts文件,从orm.js中读取文件，然后进行合并，用作nest的数据库配置。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">TypeOrmModuleOptions</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isNil &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjsx/util&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> config <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./orm&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">withCache</span>: <span class=\"title class_\">TypeOrmModuleOptions</span> = &#123;</span><br><span class=\"line\">  ...(config <span class=\"keyword\">as</span> <span class=\"title class_\">TypeOrmModuleOptions</span>),</span><br><span class=\"line\">  <span class=\"attr\">logging</span>: !<span class=\"title function_\">isNil</span>(process.<span class=\"property\">env</span>.<span class=\"property\">TYPEORM_LOGGING</span>)</span><br><span class=\"line\">    ? !!<span class=\"built_in\">parseInt</span>(process.<span class=\"property\">env</span>.<span class=\"property\">TYPEORM_LOGGING</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    : <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后在app.module.ts中配置如下</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">TypeOrmModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; withCache &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./orm.config&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">TypeOrmModule</span>.<span class=\"title function_\">forRoot</span>(withCache),</span><br><span class=\"line\">    <span class=\"title class_\">FundModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AnnualProfitModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">RecentProfitModule</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>并设置tsconfig.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">&quot;allowJs&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定义实体类\"><a href=\"#定义实体类\" class=\"headerlink\" title=\"定义实体类\"></a>定义实体类</h2><p>之后是根据项目创建实体类,这里需要用到TypeORM的<code>@Entity和@Column</code>,比如</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"type\">Entity</span>, <span class=\"type\">Column</span> &#125; from &#x27;typeorm&#x27;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseFund</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseEntity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: &#x27;varchar&#x27;, length: <span class=\"number\">6</span>, nullable: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\">  code?: string;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: &#x27;varchar&#x27;, length: <span class=\"number\">50</span>, nullable: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\">  name?: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>(&#x27;funds&#x27;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fund</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseFund</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; nullable: <span class=\"literal\">true</span>, <span class=\"class\"><span class=\"keyword\">type</span></span>: &#x27;varchar&#x27;, length: <span class=\"number\">10</span> &#125;)</span><br><span class=\"line\">  fundType?: string; <span class=\"comment\">//基金类型：股票型</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; nullable: <span class=\"literal\">true</span>, <span class=\"class\"><span class=\"keyword\">type</span></span>: &#x27;float&#x27;, scale: <span class=\"number\">4</span>, precision: <span class=\"number\">9</span> &#125;)</span><br><span class=\"line\">  price: number;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; nullable: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">  grade?: number; <span class=\"comment\">//基金评级：</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>@Entity(&#39;funds&#39;)</code>表示这个实体类关联表funds，这里可以改为其他表名。<code>@Column()</code>表示这个字段对应数据库中的一个列。定义实体类的时候需要注意设置好数据类型，比如number类型的字段，默认生成的数据库字段是int类型，如果是float，需要设置它的精度。</p>\n<h2 id=\"同步数据库\"><a href=\"#同步数据库\" class=\"headerlink\" title=\"同步数据库\"></a>同步数据库</h2><p>package.json中增加两个脚本：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;typeorm&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cd src &amp;&amp; ts-node -r tsconfig-paths/register ../node_modules/typeorm/cli.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;db:sync&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;yarn typeorm schema:sync -f=orm&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意这里TypeORM的配置文件位置不在根路径，名字也不是它默认的，因此先<code>cd src</code>，然后再<code>typeorm schema:sync -f=orm</code>,<code>-f</code>表示文件名是orm。</p>\n<p>然后运行命令<code>yarn db:sync</code>，可以看到数据库表创建成功：</p>\n<p><img src=\"/../imgs/441d5fe819d241e0ae5c27a8dc5d05bb.png\" alt=\"image.png\"></p>\n<p><img src=\"/../imgs/6d3566e0ddcd4bbdab3d5a39d04c918c.png\" alt=\"image.png\"></p>\n<h2 id=\"创建controller、service和module\"><a href=\"#创建controller、service和module\" class=\"headerlink\" title=\"创建controller、service和module\"></a>创建controller、service和module</h2><p>service:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">InjectRepository</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">TypeOrmCrudService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjsx/crud-typeorm&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AnnualProfit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./annualProfit.entity&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnualProfitService</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">TypeOrmCrudService</span>&lt;<span class=\"title class_\">AnnualProfit</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"meta\">@InjectRepository</span>(AnnualProfit) repo</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(repo);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">updateScaleByCode</span>(<span class=\"params\">code, info: <span class=\"built_in\">Array</span>&lt;[<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>]&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(</span><br><span class=\"line\">      info.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">[year, scale]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">repo</span>.<span class=\"title function_\">update</span>(&#123; code, year &#125;, &#123; scale &#125;);</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span></span><br><span class=\"line\">      res.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre + cur.<span class=\"property\">affected</span>;</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>service需要继承<code>TypeOrmCrudService</code>，这个类有很多基本的CRUD操作api,可以直接用。service中需要自定义处理逻辑时可以使用TypeORM的responsitory对象。</p>\n<p><img src=\"/../imgs/071f7b1d75294faa9789f01815f25fa0.png\" alt=\"image.png\"> controller:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Crud</span>, <span class=\"title class_\">CrudController</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjsx/crud&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BaseRes</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;src/base-entity&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AnnualProfit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./annualProfit.entity&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AnnualProfitService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./annualProfit.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Crud</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">model</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"title class_\">AnnualProfit</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">&#x27;/annualProfit&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnualProfitController</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CrudController</span>&lt;<span class=\"title class_\">AnnualProfit</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> service: AnnualProfitService</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"meta\">@Post</span>(<span class=\"string\">&#x27;updateScale&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">updateScale</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"meta\">@Body</span>() body: &#123; code: <span class=\"built_in\">string</span>; scale: <span class=\"built_in\">Array</span>&lt;[<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>]&gt; &#125;,</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">service</span></span><br><span class=\"line\">      .<span class=\"title function_\">updateScaleByCode</span>(body.<span class=\"property\">code</span>, body.<span class=\"property\">scale</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BaseRes</span>(<span class=\"number\">0</span>, &#123; <span class=\"attr\">data</span>: result, <span class=\"attr\">message</span>: <span class=\"string\">`affected <span class=\"subst\">$&#123;result&#125;</span>`</span> &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>controller需要用<code>@Crud</code>装饰，这会直接生成基本的CRUD resultful 请求。当然controller中也可以自定义其他请求。</p>\n<p>module</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">TypeOrmModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AnnualProfit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./annualProfit.entity&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AnnualProfitService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./annualProfit.service&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AnnualProfitController</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./annualProfit.controller&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">TypeOrmModule</span>.<span class=\"title function_\">forFeature</span>([<span class=\"title class_\">AnnualProfit</span>])],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [<span class=\"title class_\">AnnualProfitService</span>],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">AnnualProfitService</span>],</span><br><span class=\"line\">  <span class=\"attr\">controllers</span>: [<span class=\"title class_\">AnnualProfitController</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnualProfitModule</span> &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成swagger\"><a href=\"#生成swagger\" class=\"headerlink\" title=\"生成swagger\"></a>生成swagger</h2><p>加上swagger后可以看到一共生成了哪些接口。</p>\n<p>对controller增加<code>@ApiTags()</code>,并对自定义请求的dto设置<code>@ApiProperty()</code>和<code>@ApiResponse()</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiTags</span>(<span class=\"string\">&#x27;annualProfit&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">&#x27;/annualProfit&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnualProfitController</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CrudController</span>&lt;<span class=\"title class_\">AnnualProfit</span>&gt; &#123;</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> <span class=\"meta\">@ApiResponse</span>(&#123; <span class=\"attr\">type</span>: <span class=\"title class_\">BaseRes</span> &#125;)</span><br><span class=\"line\">  <span class=\"meta\">@Post</span>(<span class=\"string\">&#x27;updateScale&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">updateScale</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() body: UpdateScaleDto</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">service</span></span><br><span class=\"line\">      .<span class=\"title function_\">updateScaleByCode</span>(body.<span class=\"property\">code</span>, body.<span class=\"property\">scale</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BaseRes</span>(<span class=\"number\">0</span>, &#123; <span class=\"attr\">data</span>: result, <span class=\"attr\">message</span>: <span class=\"string\">`affected <span class=\"subst\">$&#123;result&#125;</span>`</span> &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对entity增加<code>@ApiProperty()</code></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">import</span> &#123; <span class=\"selector-tag\">ApiProperty</span> &#125; <span class=\"selector-tag\">from</span> &#x27;@<span class=\"selector-tag\">nestjs</span>/<span class=\"selector-tag\">swagger</span>&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"selector-tag\">Entity</span>(<span class=\"string\">&#x27;annual_profit&#x27;</span>)</span><br><span class=\"line\"><span class=\"selector-tag\">export</span> <span class=\"selector-tag\">class</span> <span class=\"selector-tag\">AnnualProfit</span> <span class=\"selector-tag\">extends</span> <span class=\"selector-tag\">BaseFund</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">@ApiProperty</span>(&#123; <span class=\"attribute\">type</span>: <span class=\"string\">&#x27;number&#x27;</span>, <span class=\"attribute\">name</span>: <span class=\"string\">&#x27;year&#x27;</span>, <span class=\"attribute\">description</span>: <span class=\"string\">&#x27;年份&#x27;</span> &#125;)</span><br><span class=\"line\">  <span class=\"variable\">@Column</span>(&#123; <span class=\"attribute\">nullable</span>: true &#125;)</span><br><span class=\"line\">  <span class=\"attribute\">year</span>: number; <span class=\"comment\">// 年份</span></span><br><span class=\"line\"> ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>修改main.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> app = <span class=\"keyword\">await</span> <span class=\"title class_\">NestFactory</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">AppModule</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = <span class=\"keyword\">new</span> <span class=\"title class_\">DocumentBuilder</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">setTitle</span>(<span class=\"string\">&#x27;fund-curd&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">setDescription</span>(<span class=\"string\">&#x27;fund-curd&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">setVersion</span>(<span class=\"string\">&#x27;1.0&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">build</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"variable language_\">document</span> = <span class=\"title class_\">SwaggerModule</span>.<span class=\"title function_\">createDocument</span>(app, options);</span><br><span class=\"line\">  <span class=\"title class_\">SwaggerModule</span>.<span class=\"title function_\">setup</span>(<span class=\"string\">&#x27;docs&#x27;</span>, app, <span class=\"variable language_\">document</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> app.<span class=\"title function_\">listen</span>(process.<span class=\"property\">env</span>.<span class=\"property\">PORT</span> || <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">bootstrap</span>();</span><br></pre></td></tr></table></figure>\n\n<p>访问页面<code>http://localhost:3000/docs</code>,图中框住的部分就是@nestjsx&#x2F;crud给我们生成的restful接口，另一个是我们自己设置的接口。</p>\n<p><img src=\"/../imgs/e8e040971352443faa8d18bd39eb37fa.png\" alt=\"image.png\"></p>\n<h2 id=\"nestjsx-crud-request\"><a href=\"#nestjsx-crud-request\" class=\"headerlink\" title=\"@nestjsx&#x2F;crud-request\"></a>@nestjsx&#x2F;crud-request</h2><p>截图中可以看到基本的增删改查、批量创建、分页查询它都已经有了，其中查询支持搜索条件、指定返回字段、排序等等。</p>\n<p><img src=\"/../imgs/0731bc95d135415e9b5ad45fae7a0e6d.png\" alt=\"image.png\"> 但是参数也比较复杂，此时可以用到@nestjsx&#x2F;crud-request。这是一个给前端使用的，快速创建查询条件的lib：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; RequestQueryBuilder &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjsx/crud-request&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">queryString</span> = RequestQueryBuilder.<span class=\"title function_ invoke__\">create</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">fields</span>: [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;email&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">search</span>: &#123; <span class=\"attr\">isActive</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">join</span>: [&#123; <span class=\"attr\">field</span>: <span class=\"string\">&#x27;company&#x27;</span> &#125;],</span><br><span class=\"line\">  <span class=\"attr\">sort</span>: [&#123; <span class=\"attr\">field</span>: <span class=\"string\">&#x27;id&#x27;</span>, <span class=\"attr\">order</span>: <span class=\"string\">&#x27;DESC&#x27;</span> &#125;],</span><br><span class=\"line\">  <span class=\"attr\">page</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">limit</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">  <span class=\"attr\">resetCache</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;).<span class=\"title function_ invoke__\">query</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">console.<span class=\"title function_ invoke__\">log</span>(queryString); </span><br><span class=\"line\"><span class=\"comment\">//fields=name%2Cemail&amp;s=%7B%22isActive%22%3Atrue%7D&amp;join%5B0%5D=company&amp;limit=25&amp;page=1&amp;sort%5B0%5D=id%2CDESC&amp;cache=0</span></span><br></pre></td></tr></table></figure>","length":7624,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第22天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>@nestjsx&#x2F;crud 是为NestJs服务的个“微框架”，能大大简化CRUD代码的编写。虽然官方自称为“微框架”，但个人觉得理解为“工具集”可能更合适。</p>\n<h2 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h2><p>首先使用nest脚手架生成一个项目</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> -g <span class=\"keyword\">@nestjs</span>/cli</span><br><span class=\"line\">nest new curd-demo</span><br></pre></td></tr></table></figure>\n\n<p>然后安装@nestjsx&#x2F;crud的依赖：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i <span class=\"meta\">@nestjsx</span>/crud <span class=\"keyword\">class</span>-transformer <span class=\"keyword\">class</span>-validator</span><br><span class=\"line\">npm i <span class=\"meta\">@nestjsx</span>/crud-typeorm <span class=\"meta\">@nestjs</span>/typeorm typeorm</span><br></pre></td></tr></table></figure>\n\n<p>@nestjsx&#x2F;crud和@nestjsx&#x2F;crud-typeorm分别提供了一个<code>@Crud()</code>装饰器和<code>TypeOrmCrudService</code>类，分别作用域controller和service。</p>\n<h3 id=\"配置数据库连接\"><a href=\"#配置数据库连接\" class=\"headerlink\" title=\"配置数据库连接\"></a>配置数据库连接</h3><h3 id=\"配置TypeORM配置文件\"><a href=\"#配置TypeORM配置文件\" class=\"headerlink\" title=\"配置TypeORM配置文件\"></a>配置TypeORM配置文件</h3><p>在src目录下创建orm.js,这里需要注意配置<code>synchronize: false</code>,数据库同步等操作用TypeORM的命令。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* eslint-disable */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;mysql&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">host</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">port</span>: <span class=\"number\">3306</span>,</span><br><span class=\"line\">  <span class=\"attr\">username</span>: <span class=\"string\">&#x27;fund&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"string\">&#x27;good_luck123&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">database</span>: <span class=\"string\">&#x27;fund&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">synchronize</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">entities</span>: [path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;./**/*.entity&#123;.ts,.js&#125;&#x27;</span>)],</span><br><span class=\"line\">  <span class=\"attr\">migrationsTableName</span>: <span class=\"string\">&#x27;orm_migrations&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">migrations</span>: [<span class=\"string\">&#x27;./ seeds.ts&#x27;</span>],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nest集成TypeORM\"><a href=\"#nest集成TypeORM\" class=\"headerlink\" title=\"nest集成TypeORM\"></a>nest集成TypeORM</h3><p>TypeOrmModule.forRoot可以不传参，它默认会从根路径下的TypeORM配置文件获取参数，但这里有个坑，这个api支持的参数要比TypeORM的参数更多，如果全都配置在TypeORM的配置文件中，forRoot会把那些TypeORM不支持的参数全部忽略。</p>\n<p>因此这里有些实践是配置两个文件，一个是给TypeORM，用于TypeORM命令，一个是给nest的，用于连接数据库，@nestjsx&#x2F;crud的官方example就是这么做的。</p>\n<p>不过可以变通一下，这里在src目录下再创建一个orm.config.ts文件,从orm.js中读取文件，然后进行合并，用作nest的数据库配置。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">TypeOrmModuleOptions</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isNil &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjsx/util&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> config <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./orm&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">withCache</span>: <span class=\"title class_\">TypeOrmModuleOptions</span> = &#123;</span><br><span class=\"line\">  ...(config <span class=\"keyword\">as</span> <span class=\"title class_\">TypeOrmModuleOptions</span>),</span><br><span class=\"line\">  <span class=\"attr\">logging</span>: !<span class=\"title function_\">isNil</span>(process.<span class=\"property\">env</span>.<span class=\"property\">TYPEORM_LOGGING</span>)</span><br><span class=\"line\">    ? !!<span class=\"built_in\">parseInt</span>(process.<span class=\"property\">env</span>.<span class=\"property\">TYPEORM_LOGGING</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    : <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后在app.module.ts中配置如下</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">TypeOrmModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; withCache &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./orm.config&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">TypeOrmModule</span>.<span class=\"title function_\">forRoot</span>(withCache),</span><br><span class=\"line\">    <span class=\"title class_\">FundModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AnnualProfitModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">RecentProfitModule</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>并设置tsconfig.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">&quot;allowJs&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定义实体类\"><a href=\"#定义实体类\" class=\"headerlink\" title=\"定义实体类\"></a>定义实体类</h2><p>之后是根据项目创建实体类,这里需要用到TypeORM的<code>@Entity和@Column</code>,比如</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"type\">Entity</span>, <span class=\"type\">Column</span> &#125; from &#x27;typeorm&#x27;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseFund</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseEntity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: &#x27;varchar&#x27;, length: <span class=\"number\">6</span>, nullable: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\">  code?: string;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: &#x27;varchar&#x27;, length: <span class=\"number\">50</span>, nullable: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\">  name?: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>(&#x27;funds&#x27;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fund</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseFund</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; nullable: <span class=\"literal\">true</span>, <span class=\"class\"><span class=\"keyword\">type</span></span>: &#x27;varchar&#x27;, length: <span class=\"number\">10</span> &#125;)</span><br><span class=\"line\">  fundType?: string; <span class=\"comment\">//基金类型：股票型</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; nullable: <span class=\"literal\">true</span>, <span class=\"class\"><span class=\"keyword\">type</span></span>: &#x27;float&#x27;, scale: <span class=\"number\">4</span>, precision: <span class=\"number\">9</span> &#125;)</span><br><span class=\"line\">  price: number;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; nullable: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">  grade?: number; <span class=\"comment\">//基金评级：</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>@Entity(&#39;funds&#39;)</code>表示这个实体类关联表funds，这里可以改为其他表名。<code>@Column()</code>表示这个字段对应数据库中的一个列。定义实体类的时候需要注意设置好数据类型，比如number类型的字段，默认生成的数据库字段是int类型，如果是float，需要设置它的精度。</p>\n<h2 id=\"同步数据库\"><a href=\"#同步数据库\" class=\"headerlink\" title=\"同步数据库\"></a>同步数据库</h2><p>package.json中增加两个脚本：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;typeorm&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cd src &amp;&amp; ts-node -r tsconfig-paths/register ../node_modules/typeorm/cli.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;db:sync&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;yarn typeorm schema:sync -f=orm&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意这里TypeORM的配置文件位置不在根路径，名字也不是它默认的，因此先<code>cd src</code>，然后再<code>typeorm schema:sync -f=orm</code>,<code>-f</code>表示文件名是orm。</p>\n<p>然后运行命令<code>yarn db:sync</code>，可以看到数据库表创建成功：</p>\n<p><img src=\"/../imgs/441d5fe819d241e0ae5c27a8dc5d05bb.png\" alt=\"image.png\"></p>\n<p><img src=\"/../imgs/6d3566e0ddcd4bbdab3d5a39d04c918c.png\" alt=\"image.png\"></p>\n<h2 id=\"创建controller、service和module\"><a href=\"#创建controller、service和module\" class=\"headerlink\" title=\"创建controller、service和module\"></a>创建controller、service和module</h2><p>service:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">InjectRepository</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">TypeOrmCrudService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjsx/crud-typeorm&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AnnualProfit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./annualProfit.entity&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnualProfitService</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">TypeOrmCrudService</span>&lt;<span class=\"title class_\">AnnualProfit</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"meta\">@InjectRepository</span>(AnnualProfit) repo</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(repo);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">updateScaleByCode</span>(<span class=\"params\">code, info: <span class=\"built_in\">Array</span>&lt;[<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>]&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(</span><br><span class=\"line\">      info.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">[year, scale]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">repo</span>.<span class=\"title function_\">update</span>(&#123; code, year &#125;, &#123; scale &#125;);</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span></span><br><span class=\"line\">      res.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre + cur.<span class=\"property\">affected</span>;</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>service需要继承<code>TypeOrmCrudService</code>，这个类有很多基本的CRUD操作api,可以直接用。service中需要自定义处理逻辑时可以使用TypeORM的responsitory对象。</p>\n<p><img src=\"/../imgs/071f7b1d75294faa9789f01815f25fa0.png\" alt=\"image.png\"> controller:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Crud</span>, <span class=\"title class_\">CrudController</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjsx/crud&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BaseRes</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;src/base-entity&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AnnualProfit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./annualProfit.entity&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AnnualProfitService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./annualProfit.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Crud</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">model</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"title class_\">AnnualProfit</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">&#x27;/annualProfit&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnualProfitController</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CrudController</span>&lt;<span class=\"title class_\">AnnualProfit</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> service: AnnualProfitService</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"meta\">@Post</span>(<span class=\"string\">&#x27;updateScale&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">updateScale</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"meta\">@Body</span>() body: &#123; code: <span class=\"built_in\">string</span>; scale: <span class=\"built_in\">Array</span>&lt;[<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>]&gt; &#125;,</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">service</span></span><br><span class=\"line\">      .<span class=\"title function_\">updateScaleByCode</span>(body.<span class=\"property\">code</span>, body.<span class=\"property\">scale</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BaseRes</span>(<span class=\"number\">0</span>, &#123; <span class=\"attr\">data</span>: result, <span class=\"attr\">message</span>: <span class=\"string\">`affected <span class=\"subst\">$&#123;result&#125;</span>`</span> &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>controller需要用<code>@Crud</code>装饰，这会直接生成基本的CRUD resultful 请求。当然controller中也可以自定义其他请求。</p>\n<p>module</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">TypeOrmModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AnnualProfit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./annualProfit.entity&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AnnualProfitService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./annualProfit.service&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AnnualProfitController</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./annualProfit.controller&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">TypeOrmModule</span>.<span class=\"title function_\">forFeature</span>([<span class=\"title class_\">AnnualProfit</span>])],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [<span class=\"title class_\">AnnualProfitService</span>],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">AnnualProfitService</span>],</span><br><span class=\"line\">  <span class=\"attr\">controllers</span>: [<span class=\"title class_\">AnnualProfitController</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnualProfitModule</span> &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成swagger\"><a href=\"#生成swagger\" class=\"headerlink\" title=\"生成swagger\"></a>生成swagger</h2><p>加上swagger后可以看到一共生成了哪些接口。</p>\n<p>对controller增加<code>@ApiTags()</code>,并对自定义请求的dto设置<code>@ApiProperty()</code>和<code>@ApiResponse()</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiTags</span>(<span class=\"string\">&#x27;annualProfit&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">&#x27;/annualProfit&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnualProfitController</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CrudController</span>&lt;<span class=\"title class_\">AnnualProfit</span>&gt; &#123;</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> <span class=\"meta\">@ApiResponse</span>(&#123; <span class=\"attr\">type</span>: <span class=\"title class_\">BaseRes</span> &#125;)</span><br><span class=\"line\">  <span class=\"meta\">@Post</span>(<span class=\"string\">&#x27;updateScale&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">updateScale</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() body: UpdateScaleDto</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">service</span></span><br><span class=\"line\">      .<span class=\"title function_\">updateScaleByCode</span>(body.<span class=\"property\">code</span>, body.<span class=\"property\">scale</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BaseRes</span>(<span class=\"number\">0</span>, &#123; <span class=\"attr\">data</span>: result, <span class=\"attr\">message</span>: <span class=\"string\">`affected <span class=\"subst\">$&#123;result&#125;</span>`</span> &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对entity增加<code>@ApiProperty()</code></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">import</span> &#123; <span class=\"selector-tag\">ApiProperty</span> &#125; <span class=\"selector-tag\">from</span> &#x27;@<span class=\"selector-tag\">nestjs</span>/<span class=\"selector-tag\">swagger</span>&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"selector-tag\">Entity</span>(<span class=\"string\">&#x27;annual_profit&#x27;</span>)</span><br><span class=\"line\"><span class=\"selector-tag\">export</span> <span class=\"selector-tag\">class</span> <span class=\"selector-tag\">AnnualProfit</span> <span class=\"selector-tag\">extends</span> <span class=\"selector-tag\">BaseFund</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">@ApiProperty</span>(&#123; <span class=\"attribute\">type</span>: <span class=\"string\">&#x27;number&#x27;</span>, <span class=\"attribute\">name</span>: <span class=\"string\">&#x27;year&#x27;</span>, <span class=\"attribute\">description</span>: <span class=\"string\">&#x27;年份&#x27;</span> &#125;)</span><br><span class=\"line\">  <span class=\"variable\">@Column</span>(&#123; <span class=\"attribute\">nullable</span>: true &#125;)</span><br><span class=\"line\">  <span class=\"attribute\">year</span>: number; <span class=\"comment\">// 年份</span></span><br><span class=\"line\"> ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>修改main.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> app = <span class=\"keyword\">await</span> <span class=\"title class_\">NestFactory</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">AppModule</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = <span class=\"keyword\">new</span> <span class=\"title class_\">DocumentBuilder</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">setTitle</span>(<span class=\"string\">&#x27;fund-curd&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">setDescription</span>(<span class=\"string\">&#x27;fund-curd&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">setVersion</span>(<span class=\"string\">&#x27;1.0&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">build</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"variable language_\">document</span> = <span class=\"title class_\">SwaggerModule</span>.<span class=\"title function_\">createDocument</span>(app, options);</span><br><span class=\"line\">  <span class=\"title class_\">SwaggerModule</span>.<span class=\"title function_\">setup</span>(<span class=\"string\">&#x27;docs&#x27;</span>, app, <span class=\"variable language_\">document</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> app.<span class=\"title function_\">listen</span>(process.<span class=\"property\">env</span>.<span class=\"property\">PORT</span> || <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">bootstrap</span>();</span><br></pre></td></tr></table></figure>\n\n<p>访问页面<code>http://localhost:3000/docs</code>,图中框住的部分就是@nestjsx&#x2F;crud给我们生成的restful接口，另一个是我们自己设置的接口。</p>\n<p><img src=\"/../imgs/e8e040971352443faa8d18bd39eb37fa.png\" alt=\"image.png\"></p>\n<h2 id=\"nestjsx-crud-request\"><a href=\"#nestjsx-crud-request\" class=\"headerlink\" title=\"@nestjsx&#x2F;crud-request\"></a>@nestjsx&#x2F;crud-request</h2><p>截图中可以看到基本的增删改查、批量创建、分页查询它都已经有了，其中查询支持搜索条件、指定返回字段、排序等等。</p>\n<p><img src=\"/../imgs/0731bc95d135415e9b5ad45fae7a0e6d.png\" alt=\"image.png\"> 但是参数也比较复杂，此时可以用到@nestjsx&#x2F;crud-request。这是一个给前端使用的，快速创建查询条件的lib：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; RequestQueryBuilder &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjsx/crud-request&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">queryString</span> = RequestQueryBuilder.<span class=\"title function_ invoke__\">create</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">fields</span>: [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;email&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">search</span>: &#123; <span class=\"attr\">isActive</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">join</span>: [&#123; <span class=\"attr\">field</span>: <span class=\"string\">&#x27;company&#x27;</span> &#125;],</span><br><span class=\"line\">  <span class=\"attr\">sort</span>: [&#123; <span class=\"attr\">field</span>: <span class=\"string\">&#x27;id&#x27;</span>, <span class=\"attr\">order</span>: <span class=\"string\">&#x27;DESC&#x27;</span> &#125;],</span><br><span class=\"line\">  <span class=\"attr\">page</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">limit</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">  <span class=\"attr\">resetCache</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;).<span class=\"title function_ invoke__\">query</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">console.<span class=\"title function_ invoke__\">log</span>(queryString); </span><br><span class=\"line\"><span class=\"comment\">//fields=name%2Cemail&amp;s=%7B%22isActive%22%3Atrue%7D&amp;join%5B0%5D=company&amp;limit=25&amp;page=1&amp;sort%5B0%5D=id%2CDESC&amp;cache=0</span></span><br></pre></td></tr></table></figure>"},{"title":"CSS函数大全（一）：运算、网格和伪类","date":"2021-11-23T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第24天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。\n\n数学运算\n----\n\n### calc\n\n最常用的函数之一，可以执行一些计算\n\n```css\n.el { width: calc(100vw - 80px); }\n```\n\n但是很多人都不知道的是，这里不仅可以传长度，还可以计算角度、时间，它支持的值可以是\n\n*   [`<length>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Flength \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/length\")、\n*   [`<frequency>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ffrequency \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/frequency\")(这个单位目前还没有被任何css属性用到), \n*   [`<angle>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fangle \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/angle\")、\n*   [`<time>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ftime \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/time\")、\n*   [`<percentage>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fpercentage \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage\")、\n*   [`<number>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fnumber \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/number\")、\n*   [`<integer>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Finteger \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/integer\")\n\n另外还有一点：**`+` 和 `-` 运算符的两边必须要有空白字符。**，而`*` 和 `/` 这两个运算符前后不需要空白字符。\n\n### max和min\n\n取最大值或最小值\n\n```css\nwidth: max(10vw, 4em, 80px);\n```\n\n### clamp\n\n当默认值小于最小值时取最小值，大于最大值时取最大值，否则取默认值。它接收三个参数：最小值、默认值、最大值。\n\n`clamp()` 支持的值有 [`<length>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Flength \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/length\")、[`<frequency>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ffrequency \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/frequency\")、[`<angle>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fangle \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/angle\")、[`<time>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ftime \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/time\")、[`<percentage>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fpercentage \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage\")、[`<number>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fnumber \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/number\")、[`<integer>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Finteger \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/integer\") \n\n`clamp(MIN, VAL, MAX)` 其实就是表示 `max(MIN, min(VAL, MAX))`\n\n```css\nfont-size: clamp(1rem, 10vw, 2rem);\n```\n\n网格\n--\n\n除了上面两个涉及到计算的方法，在网格布局中还有两个`minmax`和`fit-content`\n\n### minmax\n\n设置网格item宽的最大最小值\n\n```scss\nminmax(max-content, 300px)\nminmax(200px, 1fr)\n```\n\n在网格布局中，max-content代表最小值由内容决定（内容不被拥挤到换行），1fr指最大值占用剩余空间\n\n```css\n  #container1 {\n        display: grid;\n        grid-template-columns: minmax(max-content, 300px) minmax(200px, 1fr) 150px;\n        grid-gap: 5px;\n        box-sizing: border-box;\n        height: 200px;\n        width: 100%;\n        background-color: #8cffa0;\n        padding: 10px;\n    }\n\n    #container1>div {\n        background-color: #8ca0ff;\n        padding: 5px;\n    }\n     <div id=\"container1\">\n        <div>\n            内容决定宽度\n            但是不超过300px\n        </div>\n        <div>\n            弹性宽度，但是最少200px\n        </div>\n        <div>\n            固定150px宽\n        </div>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n```\n\n![image.png](../imgs/f575ae6f1be64e1cbde17d134299d262.png)\n\n### fit-content\n\n```scss\nfit-content(300px)\n```\n\n限制设置网格item宽度，当内容不超过这个值时，宽度为内容的宽度，如果内容过多，则宽度最大到这个限制的值\n\n```css\n #container2 {\n        display: grid;\n        grid-template-columns: fit-content(300px) fit-content(300px) 1fr;\n        grid-gap: 5px;\n        box-sizing: border-box;\n        height: 200px;\n        width: 100%;\n        background-color: #8cffa0;\n        padding: 10px;\n    }\n\n    #container2>div {\n        background-color: #8ca0ff;\n        padding: 5px;\n    }\n      <div id=\"container2\">\n    <div>内容决定宽度</div>\n    <div>\n       即便内容再多，再多，再多,宽度也会被限制在300px\n    </div>\n    <div>弹性</div>\n</div>\n```\n\n![image.png](../imgs/ee25feb848e4433c94b1ccce931b26b5.png)\n\n### repeat\n\n网格布局中还有一个函数`repeat`,允许以更紧凑的形式写入大量显示重复模式的列或行。\n\n```scss\nrepeat(2, 50px 1fr)\n```\n\n可以用在grid-template-columns 和 grid-template-rows中。\n\n```html\n  #container3 {\n    display: grid;\n    grid-template-columns: repeat(2, 50px 1fr) 100px;\n    grid-gap: 5px;\n    box-sizing: border-box;\n    height: 200px;\n    width: 100%;\n    background-color: #8cffa0;\n    padding: 10px;\n  }\n\n  #container3 > div {\n    background-color: #8ca0ff;\n    padding: 5px;\n  }\n   <div id=\"container3\">\n      <div>50px宽</div>\n      <div>弹性</div>\n      <div>50px宽</div>\n      <div>弹性</div>\n      <div>固定100px</div>\n    </div>\n```\n\n![image.png](../imgs/f13bc82ca99e439ba1faa9a552676d10.png)\n\n伪类选择器函数\n-------\n\n### :nth-child\n\n![image.png](../imgs/439caa4a49de4742903a0761fb049db4.png)\n\n### :nth-last-child\n\n从兄弟节点中从后往前匹配处于某些位置的元素\n\n```css\n/* 在所有兄弟节点中，从后往前\n   选择所有4的倍数的节点 */\n:nth-last-child(4n) {\n  color: lime;\n}\n```\n\n### :nth-of-type\n\n针对具有一组兄弟节点的标签, 用 n 来筛选出在一组兄弟节点的位置。\n\n```css\n/* 在每组兄弟元素中选择第四个 <p> 元素 */\np:nth-of-type(4n) {\n  color: lime;\n}\n```\n\n### :nth-last-of-type\n\n**`:nth-last-of-type(an+b)`**  这个 CSS [伪类](https://developer.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2FPseudo-classes \"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\") 匹配那些在它之后有 `an+b-1` 个相同类型兄弟节点的元素，其中 `n` 为正值或零值。它基本上和 [`:nth-of-type`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2F%3Anth-of-type \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-of-type\") 一样，只是它从**结尾**处反序计数，而不是从开头处。\n\n这个系列的选择器应该都很熟了，可以参考下面的例子\n\n```html\n    <style>\n      li:nth-child(3n) {\n        color :grey;\n      }\n      li:nth-last-child(3) {\n        background-color: #ddd;\n      }\n      li:last-child {\n        background-color: #aaa;\n      }\n      li:nth-of-type(odd) {\n        font-size: 1.5rem;\n      }\n    </style>\n    <ol>\n      <li>xxx li:nth-of-type(odd) </li>\n      <li>xxx</li>\n      <li>xxx li:nth-of-type(odd) li:nth-child(3n)</li>\n      <li>xxx </li>\n      <li>xxx li:nth-of-type(odd)</li>\n      <li>xxx li:nth-child(3n)</li>\n      <li>xxx li:nth-of-type(odd) li:nth-last-child(3)</li>\n      <li>xxx</li>\n      <li>xxx li:nth-of-type(odd) li:last-child li:nth-child(3n)</li>\n    </ol>\n```\n\n![image.png](../imgs/471dff87c016460396407577efc1435c.png)\n\n### :lang\n\n基于元素语言来匹配页面元素。国际化可能用到。\n\n```css\n<style>\n      :lang(en) > q {\n        quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n        background-color: beige;\n      }\n      :lang(fr) > q {\n        quotes: \"« \" \" »\";\n        background-color: aliceblue;\n      }\n      :lang(de) > q {\n        quotes: \"»\" \"«\" \"\\2039\"\"\\203A\";\n        background: antiquewhite;\n      }\n    </style>\n<div lang=\"en\">\n      <q>This English quote has a <q>nested</q> quote inside.</q>\n    </div>\n    <div lang=\"fr\">\n      <q>This French quote has a <q>nested</q> quote inside.</q>\n    </div>\n    <div lang=\"de\">\n      <q>This German quote has a <q>nested</q> quote inside.</q>\n    </div>\n```\n\n![image.png](../imgs/f2b797abc9154267b021031cc121ca9b.png)\n\n### :not\n\n用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为_反选伪类_（_negation pseudo-class_）。\n\n```css\nh3:not(:first-child) { margin-top: 0; }\n```\n\n这个api有两个地方需要注意:\n\n*   这个选择器只会应用在一个元素上，无法用它来排除所有父元素。比如， `body :not(table) a` 依旧会应用到表格元素 [`<table>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTML%2FElement%2Ftable \"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table\") 内部的 [`<a>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTML%2FElement%2Fa \"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a\") 上, 因为 [`<tr>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTML%2FElement%2Ftr \"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/tr\")将会被 `:not(table)` 这部分选择器匹配。\n*   由于伪元素不是简单的选择器，他们不能被当作 `:not()` 中的参数，形如 `:not(p::before)` 这样的选择器将不会工作。\n\n### :is和:where\n\n:matches()和:any()都被重命名为了:is() `is`函数以一个选择器列表作为其参数，并选择能够被在该列表中的任意一个选择器匹配的元素。\n\n```css\n:is(header, main, footer) p:hover {\n  color: red;\n  cursor: pointer;\n}\n\n/* 相当于 */\nheader p:hover,\nmain p:hover,\nfooter p:hover {\n  color: red;\n  cursor: pointer;\n}\n```\n\n需要注意的是，选择器列表并不支持伪类。 `:where()`的优先级总是为0，但是`:is()`的优先级是由它的选择器列表中的优先级决定的。","source":"_posts/CSS函数大全（一）：运算、网格和伪类.md","raw":"---\n title: \"CSS函数大全（一）：运算、网格和伪类\"\n date: 2021-11-24\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第24天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。\n\n数学运算\n----\n\n### calc\n\n最常用的函数之一，可以执行一些计算\n\n```css\n.el { width: calc(100vw - 80px); }\n```\n\n但是很多人都不知道的是，这里不仅可以传长度，还可以计算角度、时间，它支持的值可以是\n\n*   [`<length>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Flength \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/length\")、\n*   [`<frequency>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ffrequency \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/frequency\")(这个单位目前还没有被任何css属性用到), \n*   [`<angle>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fangle \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/angle\")、\n*   [`<time>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ftime \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/time\")、\n*   [`<percentage>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fpercentage \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage\")、\n*   [`<number>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fnumber \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/number\")、\n*   [`<integer>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Finteger \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/integer\")\n\n另外还有一点：**`+` 和 `-` 运算符的两边必须要有空白字符。**，而`*` 和 `/` 这两个运算符前后不需要空白字符。\n\n### max和min\n\n取最大值或最小值\n\n```css\nwidth: max(10vw, 4em, 80px);\n```\n\n### clamp\n\n当默认值小于最小值时取最小值，大于最大值时取最大值，否则取默认值。它接收三个参数：最小值、默认值、最大值。\n\n`clamp()` 支持的值有 [`<length>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Flength \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/length\")、[`<frequency>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ffrequency \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/frequency\")、[`<angle>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fangle \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/angle\")、[`<time>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ftime \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/time\")、[`<percentage>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fpercentage \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage\")、[`<number>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fnumber \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/number\")、[`<integer>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Finteger \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/integer\") \n\n`clamp(MIN, VAL, MAX)` 其实就是表示 `max(MIN, min(VAL, MAX))`\n\n```css\nfont-size: clamp(1rem, 10vw, 2rem);\n```\n\n网格\n--\n\n除了上面两个涉及到计算的方法，在网格布局中还有两个`minmax`和`fit-content`\n\n### minmax\n\n设置网格item宽的最大最小值\n\n```scss\nminmax(max-content, 300px)\nminmax(200px, 1fr)\n```\n\n在网格布局中，max-content代表最小值由内容决定（内容不被拥挤到换行），1fr指最大值占用剩余空间\n\n```css\n  #container1 {\n        display: grid;\n        grid-template-columns: minmax(max-content, 300px) minmax(200px, 1fr) 150px;\n        grid-gap: 5px;\n        box-sizing: border-box;\n        height: 200px;\n        width: 100%;\n        background-color: #8cffa0;\n        padding: 10px;\n    }\n\n    #container1>div {\n        background-color: #8ca0ff;\n        padding: 5px;\n    }\n     <div id=\"container1\">\n        <div>\n            内容决定宽度\n            但是不超过300px\n        </div>\n        <div>\n            弹性宽度，但是最少200px\n        </div>\n        <div>\n            固定150px宽\n        </div>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n```\n\n![image.png](../imgs/f575ae6f1be64e1cbde17d134299d262.png)\n\n### fit-content\n\n```scss\nfit-content(300px)\n```\n\n限制设置网格item宽度，当内容不超过这个值时，宽度为内容的宽度，如果内容过多，则宽度最大到这个限制的值\n\n```css\n #container2 {\n        display: grid;\n        grid-template-columns: fit-content(300px) fit-content(300px) 1fr;\n        grid-gap: 5px;\n        box-sizing: border-box;\n        height: 200px;\n        width: 100%;\n        background-color: #8cffa0;\n        padding: 10px;\n    }\n\n    #container2>div {\n        background-color: #8ca0ff;\n        padding: 5px;\n    }\n      <div id=\"container2\">\n    <div>内容决定宽度</div>\n    <div>\n       即便内容再多，再多，再多,宽度也会被限制在300px\n    </div>\n    <div>弹性</div>\n</div>\n```\n\n![image.png](../imgs/ee25feb848e4433c94b1ccce931b26b5.png)\n\n### repeat\n\n网格布局中还有一个函数`repeat`,允许以更紧凑的形式写入大量显示重复模式的列或行。\n\n```scss\nrepeat(2, 50px 1fr)\n```\n\n可以用在grid-template-columns 和 grid-template-rows中。\n\n```html\n  #container3 {\n    display: grid;\n    grid-template-columns: repeat(2, 50px 1fr) 100px;\n    grid-gap: 5px;\n    box-sizing: border-box;\n    height: 200px;\n    width: 100%;\n    background-color: #8cffa0;\n    padding: 10px;\n  }\n\n  #container3 > div {\n    background-color: #8ca0ff;\n    padding: 5px;\n  }\n   <div id=\"container3\">\n      <div>50px宽</div>\n      <div>弹性</div>\n      <div>50px宽</div>\n      <div>弹性</div>\n      <div>固定100px</div>\n    </div>\n```\n\n![image.png](../imgs/f13bc82ca99e439ba1faa9a552676d10.png)\n\n伪类选择器函数\n-------\n\n### :nth-child\n\n![image.png](../imgs/439caa4a49de4742903a0761fb049db4.png)\n\n### :nth-last-child\n\n从兄弟节点中从后往前匹配处于某些位置的元素\n\n```css\n/* 在所有兄弟节点中，从后往前\n   选择所有4的倍数的节点 */\n:nth-last-child(4n) {\n  color: lime;\n}\n```\n\n### :nth-of-type\n\n针对具有一组兄弟节点的标签, 用 n 来筛选出在一组兄弟节点的位置。\n\n```css\n/* 在每组兄弟元素中选择第四个 <p> 元素 */\np:nth-of-type(4n) {\n  color: lime;\n}\n```\n\n### :nth-last-of-type\n\n**`:nth-last-of-type(an+b)`**  这个 CSS [伪类](https://developer.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2FPseudo-classes \"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\") 匹配那些在它之后有 `an+b-1` 个相同类型兄弟节点的元素，其中 `n` 为正值或零值。它基本上和 [`:nth-of-type`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2F%3Anth-of-type \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-of-type\") 一样，只是它从**结尾**处反序计数，而不是从开头处。\n\n这个系列的选择器应该都很熟了，可以参考下面的例子\n\n```html\n    <style>\n      li:nth-child(3n) {\n        color :grey;\n      }\n      li:nth-last-child(3) {\n        background-color: #ddd;\n      }\n      li:last-child {\n        background-color: #aaa;\n      }\n      li:nth-of-type(odd) {\n        font-size: 1.5rem;\n      }\n    </style>\n    <ol>\n      <li>xxx li:nth-of-type(odd) </li>\n      <li>xxx</li>\n      <li>xxx li:nth-of-type(odd) li:nth-child(3n)</li>\n      <li>xxx </li>\n      <li>xxx li:nth-of-type(odd)</li>\n      <li>xxx li:nth-child(3n)</li>\n      <li>xxx li:nth-of-type(odd) li:nth-last-child(3)</li>\n      <li>xxx</li>\n      <li>xxx li:nth-of-type(odd) li:last-child li:nth-child(3n)</li>\n    </ol>\n```\n\n![image.png](../imgs/471dff87c016460396407577efc1435c.png)\n\n### :lang\n\n基于元素语言来匹配页面元素。国际化可能用到。\n\n```css\n<style>\n      :lang(en) > q {\n        quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n        background-color: beige;\n      }\n      :lang(fr) > q {\n        quotes: \"« \" \" »\";\n        background-color: aliceblue;\n      }\n      :lang(de) > q {\n        quotes: \"»\" \"«\" \"\\2039\"\"\\203A\";\n        background: antiquewhite;\n      }\n    </style>\n<div lang=\"en\">\n      <q>This English quote has a <q>nested</q> quote inside.</q>\n    </div>\n    <div lang=\"fr\">\n      <q>This French quote has a <q>nested</q> quote inside.</q>\n    </div>\n    <div lang=\"de\">\n      <q>This German quote has a <q>nested</q> quote inside.</q>\n    </div>\n```\n\n![image.png](../imgs/f2b797abc9154267b021031cc121ca9b.png)\n\n### :not\n\n用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为_反选伪类_（_negation pseudo-class_）。\n\n```css\nh3:not(:first-child) { margin-top: 0; }\n```\n\n这个api有两个地方需要注意:\n\n*   这个选择器只会应用在一个元素上，无法用它来排除所有父元素。比如， `body :not(table) a` 依旧会应用到表格元素 [`<table>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTML%2FElement%2Ftable \"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table\") 内部的 [`<a>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTML%2FElement%2Fa \"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a\") 上, 因为 [`<tr>`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTML%2FElement%2Ftr \"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/tr\")将会被 `:not(table)` 这部分选择器匹配。\n*   由于伪元素不是简单的选择器，他们不能被当作 `:not()` 中的参数，形如 `:not(p::before)` 这样的选择器将不会工作。\n\n### :is和:where\n\n:matches()和:any()都被重命名为了:is() `is`函数以一个选择器列表作为其参数，并选择能够被在该列表中的任意一个选择器匹配的元素。\n\n```css\n:is(header, main, footer) p:hover {\n  color: red;\n  cursor: pointer;\n}\n\n/* 相当于 */\nheader p:hover,\nmain p:hover,\nfooter p:hover {\n  color: red;\n  cursor: pointer;\n}\n```\n\n需要注意的是，选择器列表并不支持伪类。 `:where()`的优先级总是为0，但是`:is()`的优先级是由它的选择器列表中的优先级决定的。","slug":"CSS函数大全（一）：运算、网格和伪类","published":1,"updated":"2024-04-04T15:27:03.531Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhg0004hajf7lvpatqj","content":"<p>这是我参与11月更文挑战的第24天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<p>本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。</p>\n<h2 id=\"数学运算\"><a href=\"#数学运算\" class=\"headerlink\" title=\"数学运算\"></a>数学运算</h2><h3 id=\"calc\"><a href=\"#calc\" class=\"headerlink\" title=\"calc\"></a>calc</h3><p>最常用的函数之一，可以执行一些计算</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.el</span> &#123; <span class=\"attribute\">width</span>: <span class=\"built_in\">calc</span>(<span class=\"number\">100vw</span> - <span class=\"number\">80px</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是很多人都不知道的是，这里不仅可以传长度，还可以计算角度、时间，它支持的值可以是</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Flength\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/length\"><code>&lt;length&gt;</code></a>、</li>\n<li><a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ffrequency\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/frequency\"><code>&lt;frequency&gt;</code></a>(这个单位目前还没有被任何css属性用到), </li>\n<li><a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fangle\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/angle\"><code>&lt;angle&gt;</code></a>、</li>\n<li><a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ftime\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/time\"><code>&lt;time&gt;</code></a>、</li>\n<li><a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fpercentage\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage\"><code>&lt;percentage&gt;</code></a>、</li>\n<li><a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fnumber\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/number\"><code>&lt;number&gt;</code></a>、</li>\n<li><a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Finteger\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/integer\"><code>&lt;integer&gt;</code></a></li>\n</ul>\n<p>另外还有一点：**<code>+</code> 和 <code>-</code> 运算符的两边必须要有空白字符。**，而<code>*</code> 和 <code>/</code> 这两个运算符前后不需要空白字符。</p>\n<h3 id=\"max和min\"><a href=\"#max和min\" class=\"headerlink\" title=\"max和min\"></a>max和min</h3><p>取最大值或最小值</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"built_in\">max</span>(<span class=\"number\">10vw</span>, <span class=\"number\">4em</span>, <span class=\"number\">80px</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"clamp\"><a href=\"#clamp\" class=\"headerlink\" title=\"clamp\"></a>clamp</h3><p>当默认值小于最小值时取最小值，大于最大值时取最大值，否则取默认值。它接收三个参数：最小值、默认值、最大值。</p>\n<p><code>clamp()</code> 支持的值有 <a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Flength\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/length\"><code>&lt;length&gt;</code></a>、<a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ffrequency\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/frequency\"><code>&lt;frequency&gt;</code></a>、<a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fangle\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/angle\"><code>&lt;angle&gt;</code></a>、<a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ftime\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/time\"><code>&lt;time&gt;</code></a>、<a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fpercentage\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage\"><code>&lt;percentage&gt;</code></a>、<a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fnumber\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/number\"><code>&lt;number&gt;</code></a>、<a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Finteger\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/integer\"><code>&lt;integer&gt;</code></a> </p>\n<p><code>clamp(MIN, VAL, MAX)</code> 其实就是表示 <code>max(MIN, min(VAL, MAX))</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">font-size</span>: <span class=\"built_in\">clamp</span>(<span class=\"number\">1rem</span>, <span class=\"number\">10vw</span>, <span class=\"number\">2rem</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"网格\"><a href=\"#网格\" class=\"headerlink\" title=\"网格\"></a>网格</h2><p>除了上面两个涉及到计算的方法，在网格布局中还有两个<code>minmax</code>和<code>fit-content</code></p>\n<h3 id=\"minmax\"><a href=\"#minmax\" class=\"headerlink\" title=\"minmax\"></a>minmax</h3><p>设置网格item宽的最大最小值</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">minmax</span>(max-content, <span class=\"number\">300px</span>)</span><br><span class=\"line\"><span class=\"built_in\">minmax</span>(<span class=\"number\">200px</span>, <span class=\"number\">1</span>fr)</span><br></pre></td></tr></table></figure>\n\n<p>在网格布局中，max-content代表最小值由内容决定（内容不被拥挤到换行），1fr指最大值占用剩余空间</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container1</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">      <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">minmax</span>(max-content, <span class=\"number\">300px</span>) <span class=\"built_in\">minmax</span>(<span class=\"number\">200px</span>, <span class=\"number\">1</span>fr) <span class=\"number\">150px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">grid-gap</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#8cffa0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-id\">#container1</span>&gt;<span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#8ca0ff</span>;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   &lt;<span class=\"selector-tag\">div</span> id=&quot;container1&quot;&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">          内容决定宽度</span><br><span class=\"line\">          但是不超过<span class=\"number\">300px</span></span><br><span class=\"line\">      &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">          弹性宽度，但是最少<span class=\"number\">200px</span></span><br><span class=\"line\">      &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">          固定<span class=\"number\">150px</span>宽</span><br><span class=\"line\">      &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">div</span>&gt;&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">div</span>&gt;&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">div</span>&gt;&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/f575ae6f1be64e1cbde17d134299d262.png\" alt=\"image.png\"></p>\n<h3 id=\"fit-content\"><a href=\"#fit-content\" class=\"headerlink\" title=\"fit-content\"></a>fit-content</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">fit-content</span>(<span class=\"number\">300px</span>)</span><br></pre></td></tr></table></figure>\n\n<p>限制设置网格item宽度，当内容不超过这个值时，宽度为内容的宽度，如果内容过多，则宽度最大到这个限制的值</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-id\">#container2</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">        <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">fit-content</span>(<span class=\"number\">300px</span>) <span class=\"built_in\">fit-content</span>(<span class=\"number\">300px</span>) <span class=\"number\">1</span>fr;</span><br><span class=\"line\">        <span class=\"attribute\">grid-gap</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: <span class=\"number\">#8cffa0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-id\">#container2</span>&gt;<span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: <span class=\"number\">#8ca0ff</span>;</span><br><span class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">div</span> id=&quot;container2&quot;&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span>&gt;内容决定宽度&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">       即便内容再多，再多，再多,宽度也会被限制在<span class=\"number\">300px</span></span><br><span class=\"line\">    &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span>&gt;弹性&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/ee25feb848e4433c94b1ccce931b26b5.png\" alt=\"image.png\"></p>\n<h3 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat\"></a>repeat</h3><p>网格布局中还有一个函数<code>repeat</code>,允许以更紧凑的形式写入大量显示重复模式的列或行。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repeat(<span class=\"number\">2</span>, <span class=\"number\">50px</span> <span class=\"number\">1</span>fr)</span><br></pre></td></tr></table></figure>\n\n<p>可以用在grid-template-columns 和 grid-template-rows中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#container3 &#123;</span><br><span class=\"line\">  display: grid;</span><br><span class=\"line\">  grid-template-columns: repeat(2, 50px 1fr) 100px;</span><br><span class=\"line\">  grid-gap: 5px;</span><br><span class=\"line\">  box-sizing: border-box;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  background-color: #8cffa0;</span><br><span class=\"line\">  padding: 10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#container3 &gt; div &#123;</span><br><span class=\"line\">  background-color: #8ca0ff;</span><br><span class=\"line\">  padding: 5px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container3&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>50px宽<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>弹性<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>50px宽<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>弹性<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>固定100px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/f13bc82ca99e439ba1faa9a552676d10.png\" alt=\"image.png\"></p>\n<h2 id=\"伪类选择器函数\"><a href=\"#伪类选择器函数\" class=\"headerlink\" title=\"伪类选择器函数\"></a>伪类选择器函数</h2><h3 id=\"nth-child\"><a href=\"#nth-child\" class=\"headerlink\" title=\":nth-child\"></a>:nth-child</h3><p><img src=\"/../imgs/439caa4a49de4742903a0761fb049db4.png\" alt=\"image.png\"></p>\n<h3 id=\"nth-last-child\"><a href=\"#nth-last-child\" class=\"headerlink\" title=\":nth-last-child\"></a>:nth-last-child</h3><p>从兄弟节点中从后往前匹配处于某些位置的元素</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 在所有兄弟节点中，从后往前</span></span><br><span class=\"line\"><span class=\"comment\">   选择所有4的倍数的节点 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:nth-last-child</span>(<span class=\"number\">4</span>n) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: lime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nth-of-type\"><a href=\"#nth-of-type\" class=\"headerlink\" title=\":nth-of-type\"></a>:nth-of-type</h3><p>针对具有一组兄弟节点的标签, 用 n 来筛选出在一组兄弟节点的位置。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 在每组兄弟元素中选择第四个 &lt;p&gt; 元素 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-of-type</span>(<span class=\"number\">4</span>n) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: lime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nth-last-of-type\"><a href=\"#nth-last-of-type\" class=\"headerlink\" title=\":nth-last-of-type\"></a>:nth-last-of-type</h3><p><strong><code>:nth-last-of-type(an+b)</code></strong>  这个 CSS <a href=\"https://developer.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2FPseudo-classes\" title=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\">伪类</a> 匹配那些在它之后有 <code>an+b-1</code> 个相同类型兄弟节点的元素，其中 <code>n</code> 为正值或零值。它基本上和 <a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2F%3Anth-of-type\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-of-type\"><code>:nth-of-type</code></a> 一样，只是它从<strong>结尾</strong>处反序计数，而不是从开头处。</p>\n<p>这个系列的选择器应该都很熟了，可以参考下面的例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">3</span>n) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">color</span> :grey;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-last-child</span>(<span class=\"number\">3</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ddd</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#aaa</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-of-type</span>(odd) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5rem</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx li:nth-of-type(odd) <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx li:nth-of-type(odd) li:nth-child(3n)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx li:nth-of-type(odd)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx li:nth-child(3n)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx li:nth-of-type(odd) li:nth-last-child(3)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx li:nth-of-type(odd) li:last-child li:nth-child(3n)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/471dff87c016460396407577efc1435c.png\" alt=\"image.png\"></p>\n<h3 id=\"lang\"><a href=\"#lang\" class=\"headerlink\" title=\":lang\"></a>:lang</h3><p>基于元素语言来匹配页面元素。国际化可能用到。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">      <span class=\"selector-pseudo\">:lang</span>(en) &gt; <span class=\"selector-tag\">q</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">quotes</span>: <span class=\"string\">&quot;\\201C&quot;</span><span class=\"string\">&quot;\\201D&quot;</span><span class=\"string\">&quot;\\2018&quot;</span><span class=\"string\">&quot;\\2019&quot;</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: beige;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"selector-pseudo\">:lang</span>(fr) &gt; <span class=\"selector-tag\">q</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">quotes</span>: <span class=\"string\">&quot;« &quot;</span> <span class=\"string\">&quot; »&quot;</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: aliceblue;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"selector-pseudo\">:lang</span>(de) &gt; <span class=\"selector-tag\">q</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">quotes</span>: <span class=\"string\">&quot;»&quot;</span> <span class=\"string\">&quot;«&quot;</span> <span class=\"string\">&quot;\\2039&quot;</span><span class=\"string\">&quot;\\203A&quot;</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: antiquewhite;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> lang=&quot;en&quot;&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">q</span>&gt;This English <span class=\"selector-tag\">quote</span> has <span class=\"selector-tag\">a</span> &lt;<span class=\"selector-tag\">q</span>&gt;nested&lt;/<span class=\"selector-tag\">q</span>&gt; <span class=\"selector-tag\">quote</span> inside.&lt;/<span class=\"selector-tag\">q</span>&gt;</span><br><span class=\"line\">    &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span> lang=&quot;fr&quot;&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">q</span>&gt;This French <span class=\"selector-tag\">quote</span> has <span class=\"selector-tag\">a</span> &lt;<span class=\"selector-tag\">q</span>&gt;nested&lt;/<span class=\"selector-tag\">q</span>&gt; <span class=\"selector-tag\">quote</span> inside.&lt;/<span class=\"selector-tag\">q</span>&gt;</span><br><span class=\"line\">    &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span> lang=&quot;de&quot;&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">q</span>&gt;This German <span class=\"selector-tag\">quote</span> has <span class=\"selector-tag\">a</span> &lt;<span class=\"selector-tag\">q</span>&gt;nested&lt;/<span class=\"selector-tag\">q</span>&gt; <span class=\"selector-tag\">quote</span> inside.&lt;/<span class=\"selector-tag\">q</span>&gt;</span><br><span class=\"line\">    &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/f2b797abc9154267b021031cc121ca9b.png\" alt=\"image.png\"></p>\n<h3 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\":not\"></a>:not</h3><p>用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为_反选伪类_（_negation pseudo-class_）。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h3</span><span class=\"selector-pseudo\">:not</span>(<span class=\"selector-pseudo\">:first</span>-child) &#123; <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个api有两个地方需要注意:</p>\n<ul>\n<li>这个选择器只会应用在一个元素上，无法用它来排除所有父元素。比如， <code>body :not(table) a</code> 依旧会应用到表格元素 <a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTML%2FElement%2Ftable\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table\"><code>&lt;table&gt;</code></a> 内部的 <a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTML%2FElement%2Fa\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a> 上, 因为 <a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTML%2FElement%2Ftr\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/tr\"><code>&lt;tr&gt;</code></a>将会被 <code>:not(table)</code> 这部分选择器匹配。</li>\n<li>由于伪元素不是简单的选择器，他们不能被当作 <code>:not()</code> 中的参数，形如 <code>:not(p::before)</code> 这样的选择器将不会工作。</li>\n</ul>\n<h3 id=\"is和-where\"><a href=\"#is和-where\" class=\"headerlink\" title=\":is和:where\"></a>:is和:where</h3><p>:matches()和:any()都被重命名为了:is() <code>is</code>函数以一个选择器列表作为其参数，并选择能够被在该列表中的任意一个选择器匹配的元素。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:is</span>(<span class=\"selector-tag\">header</span>, <span class=\"selector-tag\">main</span>, <span class=\"selector-tag\">footer</span>) <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 相当于 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:hover</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">main</span> <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:hover</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">footer</span> <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，选择器列表并不支持伪类。 <code>:where()</code>的优先级总是为0，但是<code>:is()</code>的优先级是由它的选择器列表中的优先级决定的。</p>\n","length":4967,"excerpt":"","more":"<p>这是我参与11月更文挑战的第24天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<p>本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。</p>\n<h2 id=\"数学运算\"><a href=\"#数学运算\" class=\"headerlink\" title=\"数学运算\"></a>数学运算</h2><h3 id=\"calc\"><a href=\"#calc\" class=\"headerlink\" title=\"calc\"></a>calc</h3><p>最常用的函数之一，可以执行一些计算</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.el</span> &#123; <span class=\"attribute\">width</span>: <span class=\"built_in\">calc</span>(<span class=\"number\">100vw</span> - <span class=\"number\">80px</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是很多人都不知道的是，这里不仅可以传长度，还可以计算角度、时间，它支持的值可以是</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Flength\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/length\"><code>&lt;length&gt;</code></a>、</li>\n<li><a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ffrequency\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/frequency\"><code>&lt;frequency&gt;</code></a>(这个单位目前还没有被任何css属性用到), </li>\n<li><a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fangle\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/angle\"><code>&lt;angle&gt;</code></a>、</li>\n<li><a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ftime\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/time\"><code>&lt;time&gt;</code></a>、</li>\n<li><a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fpercentage\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage\"><code>&lt;percentage&gt;</code></a>、</li>\n<li><a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fnumber\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/number\"><code>&lt;number&gt;</code></a>、</li>\n<li><a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Finteger\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/integer\"><code>&lt;integer&gt;</code></a></li>\n</ul>\n<p>另外还有一点：**<code>+</code> 和 <code>-</code> 运算符的两边必须要有空白字符。**，而<code>*</code> 和 <code>/</code> 这两个运算符前后不需要空白字符。</p>\n<h3 id=\"max和min\"><a href=\"#max和min\" class=\"headerlink\" title=\"max和min\"></a>max和min</h3><p>取最大值或最小值</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"built_in\">max</span>(<span class=\"number\">10vw</span>, <span class=\"number\">4em</span>, <span class=\"number\">80px</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"clamp\"><a href=\"#clamp\" class=\"headerlink\" title=\"clamp\"></a>clamp</h3><p>当默认值小于最小值时取最小值，大于最大值时取最大值，否则取默认值。它接收三个参数：最小值、默认值、最大值。</p>\n<p><code>clamp()</code> 支持的值有 <a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Flength\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/length\"><code>&lt;length&gt;</code></a>、<a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ffrequency\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/frequency\"><code>&lt;frequency&gt;</code></a>、<a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fangle\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/angle\"><code>&lt;angle&gt;</code></a>、<a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Ftime\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/time\"><code>&lt;time&gt;</code></a>、<a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fpercentage\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage\"><code>&lt;percentage&gt;</code></a>、<a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fnumber\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/number\"><code>&lt;number&gt;</code></a>、<a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Finteger\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/integer\"><code>&lt;integer&gt;</code></a> </p>\n<p><code>clamp(MIN, VAL, MAX)</code> 其实就是表示 <code>max(MIN, min(VAL, MAX))</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">font-size</span>: <span class=\"built_in\">clamp</span>(<span class=\"number\">1rem</span>, <span class=\"number\">10vw</span>, <span class=\"number\">2rem</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"网格\"><a href=\"#网格\" class=\"headerlink\" title=\"网格\"></a>网格</h2><p>除了上面两个涉及到计算的方法，在网格布局中还有两个<code>minmax</code>和<code>fit-content</code></p>\n<h3 id=\"minmax\"><a href=\"#minmax\" class=\"headerlink\" title=\"minmax\"></a>minmax</h3><p>设置网格item宽的最大最小值</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">minmax</span>(max-content, <span class=\"number\">300px</span>)</span><br><span class=\"line\"><span class=\"built_in\">minmax</span>(<span class=\"number\">200px</span>, <span class=\"number\">1</span>fr)</span><br></pre></td></tr></table></figure>\n\n<p>在网格布局中，max-content代表最小值由内容决定（内容不被拥挤到换行），1fr指最大值占用剩余空间</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container1</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">      <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">minmax</span>(max-content, <span class=\"number\">300px</span>) <span class=\"built_in\">minmax</span>(<span class=\"number\">200px</span>, <span class=\"number\">1</span>fr) <span class=\"number\">150px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">grid-gap</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#8cffa0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-id\">#container1</span>&gt;<span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#8ca0ff</span>;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   &lt;<span class=\"selector-tag\">div</span> id=&quot;container1&quot;&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">          内容决定宽度</span><br><span class=\"line\">          但是不超过<span class=\"number\">300px</span></span><br><span class=\"line\">      &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">          弹性宽度，但是最少<span class=\"number\">200px</span></span><br><span class=\"line\">      &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">          固定<span class=\"number\">150px</span>宽</span><br><span class=\"line\">      &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">div</span>&gt;&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">div</span>&gt;&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">div</span>&gt;&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/f575ae6f1be64e1cbde17d134299d262.png\" alt=\"image.png\"></p>\n<h3 id=\"fit-content\"><a href=\"#fit-content\" class=\"headerlink\" title=\"fit-content\"></a>fit-content</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">fit-content</span>(<span class=\"number\">300px</span>)</span><br></pre></td></tr></table></figure>\n\n<p>限制设置网格item宽度，当内容不超过这个值时，宽度为内容的宽度，如果内容过多，则宽度最大到这个限制的值</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-id\">#container2</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">        <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">fit-content</span>(<span class=\"number\">300px</span>) <span class=\"built_in\">fit-content</span>(<span class=\"number\">300px</span>) <span class=\"number\">1</span>fr;</span><br><span class=\"line\">        <span class=\"attribute\">grid-gap</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: <span class=\"number\">#8cffa0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-id\">#container2</span>&gt;<span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: <span class=\"number\">#8ca0ff</span>;</span><br><span class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">div</span> id=&quot;container2&quot;&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span>&gt;内容决定宽度&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">       即便内容再多，再多，再多,宽度也会被限制在<span class=\"number\">300px</span></span><br><span class=\"line\">    &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span>&gt;弹性&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/ee25feb848e4433c94b1ccce931b26b5.png\" alt=\"image.png\"></p>\n<h3 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat\"></a>repeat</h3><p>网格布局中还有一个函数<code>repeat</code>,允许以更紧凑的形式写入大量显示重复模式的列或行。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repeat(<span class=\"number\">2</span>, <span class=\"number\">50px</span> <span class=\"number\">1</span>fr)</span><br></pre></td></tr></table></figure>\n\n<p>可以用在grid-template-columns 和 grid-template-rows中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#container3 &#123;</span><br><span class=\"line\">  display: grid;</span><br><span class=\"line\">  grid-template-columns: repeat(2, 50px 1fr) 100px;</span><br><span class=\"line\">  grid-gap: 5px;</span><br><span class=\"line\">  box-sizing: border-box;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  background-color: #8cffa0;</span><br><span class=\"line\">  padding: 10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#container3 &gt; div &#123;</span><br><span class=\"line\">  background-color: #8ca0ff;</span><br><span class=\"line\">  padding: 5px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container3&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>50px宽<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>弹性<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>50px宽<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>弹性<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>固定100px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/f13bc82ca99e439ba1faa9a552676d10.png\" alt=\"image.png\"></p>\n<h2 id=\"伪类选择器函数\"><a href=\"#伪类选择器函数\" class=\"headerlink\" title=\"伪类选择器函数\"></a>伪类选择器函数</h2><h3 id=\"nth-child\"><a href=\"#nth-child\" class=\"headerlink\" title=\":nth-child\"></a>:nth-child</h3><p><img src=\"/../imgs/439caa4a49de4742903a0761fb049db4.png\" alt=\"image.png\"></p>\n<h3 id=\"nth-last-child\"><a href=\"#nth-last-child\" class=\"headerlink\" title=\":nth-last-child\"></a>:nth-last-child</h3><p>从兄弟节点中从后往前匹配处于某些位置的元素</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 在所有兄弟节点中，从后往前</span></span><br><span class=\"line\"><span class=\"comment\">   选择所有4的倍数的节点 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:nth-last-child</span>(<span class=\"number\">4</span>n) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: lime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nth-of-type\"><a href=\"#nth-of-type\" class=\"headerlink\" title=\":nth-of-type\"></a>:nth-of-type</h3><p>针对具有一组兄弟节点的标签, 用 n 来筛选出在一组兄弟节点的位置。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 在每组兄弟元素中选择第四个 &lt;p&gt; 元素 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-of-type</span>(<span class=\"number\">4</span>n) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: lime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nth-last-of-type\"><a href=\"#nth-last-of-type\" class=\"headerlink\" title=\":nth-last-of-type\"></a>:nth-last-of-type</h3><p><strong><code>:nth-last-of-type(an+b)</code></strong>  这个 CSS <a href=\"https://developer.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2FPseudo-classes\" title=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\">伪类</a> 匹配那些在它之后有 <code>an+b-1</code> 个相同类型兄弟节点的元素，其中 <code>n</code> 为正值或零值。它基本上和 <a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2F%3Anth-of-type\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-of-type\"><code>:nth-of-type</code></a> 一样，只是它从<strong>结尾</strong>处反序计数，而不是从开头处。</p>\n<p>这个系列的选择器应该都很熟了，可以参考下面的例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">3</span>n) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">color</span> :grey;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-last-child</span>(<span class=\"number\">3</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ddd</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#aaa</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-of-type</span>(odd) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5rem</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx li:nth-of-type(odd) <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx li:nth-of-type(odd) li:nth-child(3n)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx li:nth-of-type(odd)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx li:nth-child(3n)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx li:nth-of-type(odd) li:nth-last-child(3)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>xxx li:nth-of-type(odd) li:last-child li:nth-child(3n)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/471dff87c016460396407577efc1435c.png\" alt=\"image.png\"></p>\n<h3 id=\"lang\"><a href=\"#lang\" class=\"headerlink\" title=\":lang\"></a>:lang</h3><p>基于元素语言来匹配页面元素。国际化可能用到。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">      <span class=\"selector-pseudo\">:lang</span>(en) &gt; <span class=\"selector-tag\">q</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">quotes</span>: <span class=\"string\">&quot;\\201C&quot;</span><span class=\"string\">&quot;\\201D&quot;</span><span class=\"string\">&quot;\\2018&quot;</span><span class=\"string\">&quot;\\2019&quot;</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: beige;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"selector-pseudo\">:lang</span>(fr) &gt; <span class=\"selector-tag\">q</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">quotes</span>: <span class=\"string\">&quot;« &quot;</span> <span class=\"string\">&quot; »&quot;</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: aliceblue;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"selector-pseudo\">:lang</span>(de) &gt; <span class=\"selector-tag\">q</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">quotes</span>: <span class=\"string\">&quot;»&quot;</span> <span class=\"string\">&quot;«&quot;</span> <span class=\"string\">&quot;\\2039&quot;</span><span class=\"string\">&quot;\\203A&quot;</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: antiquewhite;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> lang=&quot;en&quot;&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">q</span>&gt;This English <span class=\"selector-tag\">quote</span> has <span class=\"selector-tag\">a</span> &lt;<span class=\"selector-tag\">q</span>&gt;nested&lt;/<span class=\"selector-tag\">q</span>&gt; <span class=\"selector-tag\">quote</span> inside.&lt;/<span class=\"selector-tag\">q</span>&gt;</span><br><span class=\"line\">    &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span> lang=&quot;fr&quot;&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">q</span>&gt;This French <span class=\"selector-tag\">quote</span> has <span class=\"selector-tag\">a</span> &lt;<span class=\"selector-tag\">q</span>&gt;nested&lt;/<span class=\"selector-tag\">q</span>&gt; <span class=\"selector-tag\">quote</span> inside.&lt;/<span class=\"selector-tag\">q</span>&gt;</span><br><span class=\"line\">    &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span> lang=&quot;de&quot;&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">q</span>&gt;This German <span class=\"selector-tag\">quote</span> has <span class=\"selector-tag\">a</span> &lt;<span class=\"selector-tag\">q</span>&gt;nested&lt;/<span class=\"selector-tag\">q</span>&gt; <span class=\"selector-tag\">quote</span> inside.&lt;/<span class=\"selector-tag\">q</span>&gt;</span><br><span class=\"line\">    &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/f2b797abc9154267b021031cc121ca9b.png\" alt=\"image.png\"></p>\n<h3 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\":not\"></a>:not</h3><p>用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为_反选伪类_（_negation pseudo-class_）。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h3</span><span class=\"selector-pseudo\">:not</span>(<span class=\"selector-pseudo\">:first</span>-child) &#123; <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个api有两个地方需要注意:</p>\n<ul>\n<li>这个选择器只会应用在一个元素上，无法用它来排除所有父元素。比如， <code>body :not(table) a</code> 依旧会应用到表格元素 <a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTML%2FElement%2Ftable\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table\"><code>&lt;table&gt;</code></a> 内部的 <a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTML%2FElement%2Fa\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a> 上, 因为 <a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTML%2FElement%2Ftr\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/tr\"><code>&lt;tr&gt;</code></a>将会被 <code>:not(table)</code> 这部分选择器匹配。</li>\n<li>由于伪元素不是简单的选择器，他们不能被当作 <code>:not()</code> 中的参数，形如 <code>:not(p::before)</code> 这样的选择器将不会工作。</li>\n</ul>\n<h3 id=\"is和-where\"><a href=\"#is和-where\" class=\"headerlink\" title=\":is和:where\"></a>:is和:where</h3><p>:matches()和:any()都被重命名为了:is() <code>is</code>函数以一个选择器列表作为其参数，并选择能够被在该列表中的任意一个选择器匹配的元素。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:is</span>(<span class=\"selector-tag\">header</span>, <span class=\"selector-tag\">main</span>, <span class=\"selector-tag\">footer</span>) <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 相当于 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:hover</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">main</span> <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:hover</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">footer</span> <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，选择器列表并不支持伪类。 <code>:where()</code>的优先级总是为0，但是<code>:is()</code>的优先级是由它的选择器列表中的优先级决定的。</p>\n"},{"title":"CSS函数大全（三）：颜色、渐变和滤镜","date":"2021-11-25T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第26天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。\n\n颜色\n--\n\n### rgb和rgba\n\n前三个参数分别是红、绿、蓝色值。\n\n```css\n.el { \n    color: rgb(255, 0, 0); \n    color: rgba(255, 0, 0, 0.5); \n    color: rgb(255 0 0 / 0.5); \n}\n```\n\n### hsl和hsla\n\n前三个参数分别是色调 ( `h`)、饱和度 ( `s`) 和亮度 ( `l`)\n\n```css\n.el {\n    background: hsl(100, 100%, 50%);\n    background: hsla(100, 100%, 50%, 0.5);\n    background: hsl(100 100% 50% / 0.5);\n  }\n```\n\n按照[css color level 4](https://www.w3.org%2FTR%2Fcss-color-4%2F \"https://www.w3.org/TR/css-color-4/\")，我们可以省略逗号，并用`/`隔开alpha。\n\n渐变\n--\n\n#### `linear-gradient()` and `repeating-linear-gradient()`\n\n在一条直线上创建多种颜色的渐变。\n\n参数为\n\n```css\ndirection, color-stop1, color-stop2, ...\n```\n\ndirection：用角度值指定渐变的方向（或角度）。\n\ncolor-stop1, color-stop2, ...： 用于指定渐变的起止颜色。\n\n```css\nbackground: linear-gradient(#e66465, #9198e5);\nbackground: linear-gradient(0.25turn, #3f87a6, #ebf8e1, #f69d3c);\nbackground: linear-gradient(to left, #333, #333 50%, #eee 75%, #333 75%);\nbackground: linear-gradient(217deg, rgba(255,0,0,.8), rgba(255,0,0,0) 70.71%), linear-gradient(127deg, rgba(0,255,0,.8), rgba(0,255,0,0) 70.71%), linear-gradient(336deg, rgba(0,0,255,.8), rgba(0,0,255,0) 70.71%);\n```\n\n![image.png](../imgs/d2c1ca8234704e8cb918d7b53a008d00.png)\n\n一个color-stop由一个color和两个可选的长度或百分比组成，代表这个颜色开始和结束的位置，如\n\n```erlang\norange 20% 40%\n```\n\n如果空间比渐变设置的更多，那么使用`repeating-linear-gradient`会创建重复渐变。比如下面的，从20%的位置开始将重复前面的渐变。\n\n```css\nbackground: repeating-linear-gradient(45deg, #3f87a6, #ebf8e1 15%, #f69d3c 20%);\n```\n\n#### `radial-gradient()` and `repeating-radial-gradient()`\n\n创建径向渐变，它与线性渐变的不同点在于它是从中心点向外辐射。\n\n```css\nbackground: radial-gradient(#e66465, #9198e5);\nbackground: radial-gradient(circle at 100%, #333, #333 50%, #eee 75%, #333 75%);\nbackground: radial-gradient(ellipse at top, #e66465, transparent), radial-gradient(ellipse at bottom, #4d9f0c, transparent);\n```\n\n![image.png](../imgs/79d57ee723c0414fa58067db9964da81.png)\n\n参数为：\n\n```css\nshape size at position, start-color, ..., last-color\n```\n\nshape确定圆的类型，`circle`或`ellipse`,默认是`ellipse`。\n\nsize定义渐变的大小，可能的值为\n\n*   `closest-side`:指定径向渐变的半径长度为从圆心到离圆心最近的边\n*   `closest-corner`:指定径向渐变的半径长度为从圆心到离圆心最近的角\n*   `farthest-side` : 指定径向渐变的半径长度为从圆心到离圆心最远的边\n*   `farthest-corner`:默认，指定径向渐变的半径长度为从圆心到离圆心最远的角 `repeating-radial-gradient`用于创建重复的径向渐变\n\n```css\nbackground: repeating-radial-gradient(#e66465, #9198e5 20%);\n```\n\n#### `conic-gradient()` and `repeating-conical-gradient`\n\n圆锥渐变与径向渐变的不同之处在于颜色围绕一个圆分布\n\n```scss\nconic-gradient(red, orange, yellow, green, teal, blue, purple, red)\n```\n\n![image.png](../imgs/999db97b32c64a63b4411bda28308618.png)\n\n滤镜filter\n--------\n\n`brightness()`\n--------------\n\n使内容看起来更亮或更暗\n\n```scss\nbrightness(amount)\n```\n\n参数amount：\\[`<number>`\\]或\\[`<percentage>`\\]，低于1更暗，高于1更亮\n\n```scss\nbrightness(0%)   /* 全黑 */\nbrightness(0.4)  /* 40% 亮度 */\n```\n\n![image.png](../imgs/0d87ab8a99ff4cfba6d30dfbe2a4cc6b.png) ![image.png](../imgs/77a53feae9054e88b68b47f8291f899d.png)\n\n### `blur()`\n\n模糊图像\n\n```css\nfilter: blur(0);\nfilter: blur(4px);\n```\n\n![image.png](../imgs/e0c516bdfadb4be5b800d09bfce3e6b8.png) ![image.png](../imgs/064dd050a8f644c0bcc6a3ff23565f97.png)\n\n### `contrast()`\n\n增加或减少图像的对比度\n\n```css\nfilter: contrast(50%);\nfilter: contrast(1.75);\n```\n\n![image.png](../imgs/279f927c1695458eb47fc01391cf08c2.png) ![image.png](../imgs/54d69cada2784fccb0e1e17a443a57d2.png)\n\n### `grayscale()`\n\n将图像转为灰度图\n\n```css\nfilter: grayscale(1);\nfilter: grayscale(0);\n```\n\n![image.png](../imgs/006adce2e90d46b6bf6680421b8597fe.png) ![image.png](../imgs/1b26737844194fc09f923cdd6b3b8a92.png)\n\n### `invert()`\n\n反转图像颜色\n\n```css\nfilter: invert(0.30);\nfilter: invert(1);\n```\n\n![image.png](../imgs/0f677483d57d40f69267e8e4ef2d3b0e.png) ![image.png](../imgs/fab6f6cc9c23439fa4783422b7bd1784.png)\n\n### `opacity()`\n\n改变图像透明度\n\n```css\nfilter: opacity(0.20);\n```\n\n![image.png](../imgs/bfb8a4db30f74136811c79d6a2063b74.png)\n\n### `saturate()`\n\n改变饱和度\n\n```css\nfilter: saturate(1);\nfilter: saturate(4);\nfilter: saturate(50%);\n```\n\n![](../imgs/8f0428ba4af94e59b6081a6b83759acd.png) ![](../imgs/d689027c2c594f89b566a1e2c5465887.png) ![](../imgs/f199300488514aa3847075b4b8541c02.png)\n\n### `sepia()`\n\n棕褐色滤镜\n\n```css\nfilter: sepia(0.20);\nfilter: sepia(1);\n```\n\n![image.png](../imgs/14bc0f5d968347b3adbeeba4dab57aed.png) ![image.png](../imgs/6966a88766614ea5a249363a6f129797.png)\n\n### `drop-shadow()`\n\n在图像后方应用投影,和`box-shadow`的不同之处在于，这个函数创建的投影是符合图像本身形状的，而`box-shadow`创建的是矩形阴影\n\n```css\nfilter: drop-shadow(30px 10px 4px #4444dd);\nfilter: drop-shadow(0 -6mm 4mm rgb(160, 0, 210));\n```\n\n![image.png](../imgs/a3745c91af4948b8828204411aba625f.png) ![image.png](../imgs/06bb1763a47148cc8c74ca46ec66fcbe.png)\n\n### `hue-rotate()`\n\n增加或降低色调\n\n```css\nfilter: hue-rotate(90deg);\nfilter: hue-rotate(-0.25turn);\n```\n\n![image.png](../imgs/09ff6519ba1340db8b9a61ea480f57b0.png) ![image.png](../imgs/7ed844989c4640a9be7cc2922107c3d3.png)","source":"_posts/CSS函数大全（三）：颜色、渐变和滤镜.md","raw":"---\n title: \"CSS函数大全（三）：颜色、渐变和滤镜\"\n date: 2021-11-26\n tags: [前端,CSS]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第26天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。\n\n颜色\n--\n\n### rgb和rgba\n\n前三个参数分别是红、绿、蓝色值。\n\n```css\n.el { \n    color: rgb(255, 0, 0); \n    color: rgba(255, 0, 0, 0.5); \n    color: rgb(255 0 0 / 0.5); \n}\n```\n\n### hsl和hsla\n\n前三个参数分别是色调 ( `h`)、饱和度 ( `s`) 和亮度 ( `l`)\n\n```css\n.el {\n    background: hsl(100, 100%, 50%);\n    background: hsla(100, 100%, 50%, 0.5);\n    background: hsl(100 100% 50% / 0.5);\n  }\n```\n\n按照[css color level 4](https://www.w3.org%2FTR%2Fcss-color-4%2F \"https://www.w3.org/TR/css-color-4/\")，我们可以省略逗号，并用`/`隔开alpha。\n\n渐变\n--\n\n#### `linear-gradient()` and `repeating-linear-gradient()`\n\n在一条直线上创建多种颜色的渐变。\n\n参数为\n\n```css\ndirection, color-stop1, color-stop2, ...\n```\n\ndirection：用角度值指定渐变的方向（或角度）。\n\ncolor-stop1, color-stop2, ...： 用于指定渐变的起止颜色。\n\n```css\nbackground: linear-gradient(#e66465, #9198e5);\nbackground: linear-gradient(0.25turn, #3f87a6, #ebf8e1, #f69d3c);\nbackground: linear-gradient(to left, #333, #333 50%, #eee 75%, #333 75%);\nbackground: linear-gradient(217deg, rgba(255,0,0,.8), rgba(255,0,0,0) 70.71%), linear-gradient(127deg, rgba(0,255,0,.8), rgba(0,255,0,0) 70.71%), linear-gradient(336deg, rgba(0,0,255,.8), rgba(0,0,255,0) 70.71%);\n```\n\n![image.png](../imgs/d2c1ca8234704e8cb918d7b53a008d00.png)\n\n一个color-stop由一个color和两个可选的长度或百分比组成，代表这个颜色开始和结束的位置，如\n\n```erlang\norange 20% 40%\n```\n\n如果空间比渐变设置的更多，那么使用`repeating-linear-gradient`会创建重复渐变。比如下面的，从20%的位置开始将重复前面的渐变。\n\n```css\nbackground: repeating-linear-gradient(45deg, #3f87a6, #ebf8e1 15%, #f69d3c 20%);\n```\n\n#### `radial-gradient()` and `repeating-radial-gradient()`\n\n创建径向渐变，它与线性渐变的不同点在于它是从中心点向外辐射。\n\n```css\nbackground: radial-gradient(#e66465, #9198e5);\nbackground: radial-gradient(circle at 100%, #333, #333 50%, #eee 75%, #333 75%);\nbackground: radial-gradient(ellipse at top, #e66465, transparent), radial-gradient(ellipse at bottom, #4d9f0c, transparent);\n```\n\n![image.png](../imgs/79d57ee723c0414fa58067db9964da81.png)\n\n参数为：\n\n```css\nshape size at position, start-color, ..., last-color\n```\n\nshape确定圆的类型，`circle`或`ellipse`,默认是`ellipse`。\n\nsize定义渐变的大小，可能的值为\n\n*   `closest-side`:指定径向渐变的半径长度为从圆心到离圆心最近的边\n*   `closest-corner`:指定径向渐变的半径长度为从圆心到离圆心最近的角\n*   `farthest-side` : 指定径向渐变的半径长度为从圆心到离圆心最远的边\n*   `farthest-corner`:默认，指定径向渐变的半径长度为从圆心到离圆心最远的角 `repeating-radial-gradient`用于创建重复的径向渐变\n\n```css\nbackground: repeating-radial-gradient(#e66465, #9198e5 20%);\n```\n\n#### `conic-gradient()` and `repeating-conical-gradient`\n\n圆锥渐变与径向渐变的不同之处在于颜色围绕一个圆分布\n\n```scss\nconic-gradient(red, orange, yellow, green, teal, blue, purple, red)\n```\n\n![image.png](../imgs/999db97b32c64a63b4411bda28308618.png)\n\n滤镜filter\n--------\n\n`brightness()`\n--------------\n\n使内容看起来更亮或更暗\n\n```scss\nbrightness(amount)\n```\n\n参数amount：\\[`<number>`\\]或\\[`<percentage>`\\]，低于1更暗，高于1更亮\n\n```scss\nbrightness(0%)   /* 全黑 */\nbrightness(0.4)  /* 40% 亮度 */\n```\n\n![image.png](../imgs/0d87ab8a99ff4cfba6d30dfbe2a4cc6b.png) ![image.png](../imgs/77a53feae9054e88b68b47f8291f899d.png)\n\n### `blur()`\n\n模糊图像\n\n```css\nfilter: blur(0);\nfilter: blur(4px);\n```\n\n![image.png](../imgs/e0c516bdfadb4be5b800d09bfce3e6b8.png) ![image.png](../imgs/064dd050a8f644c0bcc6a3ff23565f97.png)\n\n### `contrast()`\n\n增加或减少图像的对比度\n\n```css\nfilter: contrast(50%);\nfilter: contrast(1.75);\n```\n\n![image.png](../imgs/279f927c1695458eb47fc01391cf08c2.png) ![image.png](../imgs/54d69cada2784fccb0e1e17a443a57d2.png)\n\n### `grayscale()`\n\n将图像转为灰度图\n\n```css\nfilter: grayscale(1);\nfilter: grayscale(0);\n```\n\n![image.png](../imgs/006adce2e90d46b6bf6680421b8597fe.png) ![image.png](../imgs/1b26737844194fc09f923cdd6b3b8a92.png)\n\n### `invert()`\n\n反转图像颜色\n\n```css\nfilter: invert(0.30);\nfilter: invert(1);\n```\n\n![image.png](../imgs/0f677483d57d40f69267e8e4ef2d3b0e.png) ![image.png](../imgs/fab6f6cc9c23439fa4783422b7bd1784.png)\n\n### `opacity()`\n\n改变图像透明度\n\n```css\nfilter: opacity(0.20);\n```\n\n![image.png](../imgs/bfb8a4db30f74136811c79d6a2063b74.png)\n\n### `saturate()`\n\n改变饱和度\n\n```css\nfilter: saturate(1);\nfilter: saturate(4);\nfilter: saturate(50%);\n```\n\n![](../imgs/8f0428ba4af94e59b6081a6b83759acd.png) ![](../imgs/d689027c2c594f89b566a1e2c5465887.png) ![](../imgs/f199300488514aa3847075b4b8541c02.png)\n\n### `sepia()`\n\n棕褐色滤镜\n\n```css\nfilter: sepia(0.20);\nfilter: sepia(1);\n```\n\n![image.png](../imgs/14bc0f5d968347b3adbeeba4dab57aed.png) ![image.png](../imgs/6966a88766614ea5a249363a6f129797.png)\n\n### `drop-shadow()`\n\n在图像后方应用投影,和`box-shadow`的不同之处在于，这个函数创建的投影是符合图像本身形状的，而`box-shadow`创建的是矩形阴影\n\n```css\nfilter: drop-shadow(30px 10px 4px #4444dd);\nfilter: drop-shadow(0 -6mm 4mm rgb(160, 0, 210));\n```\n\n![image.png](../imgs/a3745c91af4948b8828204411aba625f.png) ![image.png](../imgs/06bb1763a47148cc8c74ca46ec66fcbe.png)\n\n### `hue-rotate()`\n\n增加或降低色调\n\n```css\nfilter: hue-rotate(90deg);\nfilter: hue-rotate(-0.25turn);\n```\n\n![image.png](../imgs/09ff6519ba1340db8b9a61ea480f57b0.png) ![image.png](../imgs/7ed844989c4640a9be7cc2922107c3d3.png)","slug":"CSS函数大全（三）：颜色、渐变和滤镜","published":1,"updated":"2024-04-04T15:27:03.515Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhh0007hajfd469aukq","content":"<p>这是我参与11月更文挑战的第26天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<p>本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。</p>\n<h2 id=\"颜色\"><a href=\"#颜色\" class=\"headerlink\" title=\"颜色\"></a>颜色</h2><h3 id=\"rgb和rgba\"><a href=\"#rgb和rgba\" class=\"headerlink\" title=\"rgb和rgba\"></a>rgb和rgba</h3><p>前三个参数分别是红、绿、蓝色值。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.el</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>); </span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.5</span>); </span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">255</span> <span class=\"number\">0</span> <span class=\"number\">0</span> / <span class=\"number\">0.5</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hsl和hsla\"><a href=\"#hsl和hsla\" class=\"headerlink\" title=\"hsl和hsla\"></a>hsl和hsla</h3><p>前三个参数分别是色调 ( <code>h</code>)、饱和度 ( <code>s</code>) 和亮度 ( <code>l</code>)</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.el</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">hsl</span>(<span class=\"number\">100</span>, <span class=\"number\">100%</span>, <span class=\"number\">50%</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">hsla</span>(<span class=\"number\">100</span>, <span class=\"number\">100%</span>, <span class=\"number\">50%</span>, <span class=\"number\">0.5</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">hsl</span>(<span class=\"number\">100</span> <span class=\"number\">100%</span> <span class=\"number\">50%</span> / <span class=\"number\">0.5</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照<a href=\"https://www.w3.org%2FTR%2Fcss-color-4%2F\" title=\"https://www.w3.org/TR/css-color-4/\">css color level 4</a>，我们可以省略逗号，并用<code>/</code>隔开alpha。</p>\n<h2 id=\"渐变\"><a href=\"#渐变\" class=\"headerlink\" title=\"渐变\"></a>渐变</h2><h4 id=\"linear-gradient-and-repeating-linear-gradient\"><a href=\"#linear-gradient-and-repeating-linear-gradient\" class=\"headerlink\" title=\"linear-gradient() and repeating-linear-gradient()\"></a><code>linear-gradient()</code> and <code>repeating-linear-gradient()</code></h4><p>在一条直线上创建多种颜色的渐变。</p>\n<p>参数为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">direction</span>, <span class=\"attribute\">color</span>-stop1, <span class=\"attribute\">color</span>-stop2, ...</span><br></pre></td></tr></table></figure>\n\n<p>direction：用角度值指定渐变的方向（或角度）。</p>\n<p>color-stop1, color-stop2, …： 用于指定渐变的起止颜色。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">#e66465</span>, <span class=\"number\">#9198e5</span>);</span><br><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">0.25turn</span>, <span class=\"number\">#3f87a6</span>, <span class=\"number\">#ebf8e1</span>, <span class=\"number\">#f69d3c</span>);</span><br><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to left, <span class=\"number\">#333</span>, <span class=\"number\">#333</span> <span class=\"number\">50%</span>, <span class=\"number\">#eee</span> <span class=\"number\">75%</span>, <span class=\"number\">#333</span> <span class=\"number\">75%</span>);</span><br><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">217deg</span>, <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">8</span>), <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>) <span class=\"number\">70.71%</span>), <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">127deg</span>, <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>,.<span class=\"number\">8</span>), <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>) <span class=\"number\">70.71%</span>), <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">336deg</span>, <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>,.<span class=\"number\">8</span>), <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>) <span class=\"number\">70.71%</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/d2c1ca8234704e8cb918d7b53a008d00.png\" alt=\"image.png\"></p>\n<p>一个color-stop由一个color和两个可选的长度或百分比组成，代表这个颜色开始和结束的位置，如</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orange <span class=\"number\">20</span><span class=\"comment\">% 40%</span></span><br></pre></td></tr></table></figure>\n\n<p>如果空间比渐变设置的更多，那么使用<code>repeating-linear-gradient</code>会创建重复渐变。比如下面的，从20%的位置开始将重复前面的渐变。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-linear-gradient</span>(<span class=\"number\">45deg</span>, <span class=\"number\">#3f87a6</span>, <span class=\"number\">#ebf8e1</span> <span class=\"number\">15%</span>, <span class=\"number\">#f69d3c</span> <span class=\"number\">20%</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"radial-gradient-and-repeating-radial-gradient\"><a href=\"#radial-gradient-and-repeating-radial-gradient\" class=\"headerlink\" title=\"radial-gradient() and repeating-radial-gradient()\"></a><code>radial-gradient()</code> and <code>repeating-radial-gradient()</code></h4><p>创建径向渐变，它与线性渐变的不同点在于它是从中心点向外辐射。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(<span class=\"number\">#e66465</span>, <span class=\"number\">#9198e5</span>);</span><br><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(circle at <span class=\"number\">100%</span>, <span class=\"number\">#333</span>, <span class=\"number\">#333</span> <span class=\"number\">50%</span>, <span class=\"number\">#eee</span> <span class=\"number\">75%</span>, <span class=\"number\">#333</span> <span class=\"number\">75%</span>);</span><br><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(ellipse at top, <span class=\"number\">#e66465</span>, transparent), <span class=\"built_in\">radial-gradient</span>(ellipse at bottom, <span class=\"number\">#4d9f0c</span>, transparent);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/79d57ee723c0414fa58067db9964da81.png\" alt=\"image.png\"></p>\n<p>参数为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shape size at <span class=\"attribute\">position</span>, start-<span class=\"attribute\">color</span>, ..., last-<span class=\"attribute\">color</span></span><br></pre></td></tr></table></figure>\n\n<p>shape确定圆的类型，<code>circle</code>或<code>ellipse</code>,默认是<code>ellipse</code>。</p>\n<p>size定义渐变的大小，可能的值为</p>\n<ul>\n<li><code>closest-side</code>:指定径向渐变的半径长度为从圆心到离圆心最近的边</li>\n<li><code>closest-corner</code>:指定径向渐变的半径长度为从圆心到离圆心最近的角</li>\n<li><code>farthest-side</code> : 指定径向渐变的半径长度为从圆心到离圆心最远的边</li>\n<li><code>farthest-corner</code>:默认，指定径向渐变的半径长度为从圆心到离圆心最远的角 <code>repeating-radial-gradient</code>用于创建重复的径向渐变</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-radial-gradient</span>(<span class=\"number\">#e66465</span>, <span class=\"number\">#9198e5</span> <span class=\"number\">20%</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"conic-gradient-and-repeating-conical-gradient\"><a href=\"#conic-gradient-and-repeating-conical-gradient\" class=\"headerlink\" title=\"conic-gradient() and repeating-conical-gradient\"></a><code>conic-gradient()</code> and <code>repeating-conical-gradient</code></h4><p>圆锥渐变与径向渐变的不同之处在于颜色围绕一个圆分布</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">conic-gradient</span>(red, orange, yellow, green, teal, blue, purple, red)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/999db97b32c64a63b4411bda28308618.png\" alt=\"image.png\"></p>\n<h2 id=\"滤镜filter\"><a href=\"#滤镜filter\" class=\"headerlink\" title=\"滤镜filter\"></a>滤镜filter</h2><h2 id=\"brightness\"><a href=\"#brightness\" class=\"headerlink\" title=\"brightness()\"></a><code>brightness()</code></h2><p>使内容看起来更亮或更暗</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">brightness</span>(amount)</span><br></pre></td></tr></table></figure>\n\n<p>参数amount：[<code>&lt;number&gt;</code>]或[<code>&lt;percentage&gt;</code>]，低于1更暗，高于1更亮</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">brightness</span>(<span class=\"number\">0%</span>)   <span class=\"comment\">/* 全黑 */</span></span><br><span class=\"line\"><span class=\"built_in\">brightness</span>(<span class=\"number\">0.4</span>)  <span class=\"comment\">/* 40% 亮度 */</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/0d87ab8a99ff4cfba6d30dfbe2a4cc6b.png\" alt=\"image.png\"> <img src=\"/../imgs/77a53feae9054e88b68b47f8291f899d.png\" alt=\"image.png\"></p>\n<h3 id=\"blur\"><a href=\"#blur\" class=\"headerlink\" title=\"blur()\"></a><code>blur()</code></h3><p>模糊图像</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(<span class=\"number\">4px</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/e0c516bdfadb4be5b800d09bfce3e6b8.png\" alt=\"image.png\"> <img src=\"/../imgs/064dd050a8f644c0bcc6a3ff23565f97.png\" alt=\"image.png\"></p>\n<h3 id=\"contrast\"><a href=\"#contrast\" class=\"headerlink\" title=\"contrast()\"></a><code>contrast()</code></h3><p>增加或减少图像的对比度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">contrast</span>(<span class=\"number\">50%</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">contrast</span>(<span class=\"number\">1.75</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/279f927c1695458eb47fc01391cf08c2.png\" alt=\"image.png\"> <img src=\"/../imgs/54d69cada2784fccb0e1e17a443a57d2.png\" alt=\"image.png\"></p>\n<h3 id=\"grayscale\"><a href=\"#grayscale\" class=\"headerlink\" title=\"grayscale()\"></a><code>grayscale()</code></h3><p>将图像转为灰度图</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/006adce2e90d46b6bf6680421b8597fe.png\" alt=\"image.png\"> <img src=\"/../imgs/1b26737844194fc09f923cdd6b3b8a92.png\" alt=\"image.png\"></p>\n<h3 id=\"invert\"><a href=\"#invert\" class=\"headerlink\" title=\"invert()\"></a><code>invert()</code></h3><p>反转图像颜色</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">invert</span>(<span class=\"number\">0.30</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">invert</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/0f677483d57d40f69267e8e4ef2d3b0e.png\" alt=\"image.png\"> <img src=\"/../imgs/fab6f6cc9c23439fa4783422b7bd1784.png\" alt=\"image.png\"></p>\n<h3 id=\"opacity\"><a href=\"#opacity\" class=\"headerlink\" title=\"opacity()\"></a><code>opacity()</code></h3><p>改变图像透明度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">opacity</span>(<span class=\"number\">0.20</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/bfb8a4db30f74136811c79d6a2063b74.png\" alt=\"image.png\"></p>\n<h3 id=\"saturate\"><a href=\"#saturate\" class=\"headerlink\" title=\"saturate()\"></a><code>saturate()</code></h3><p>改变饱和度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">saturate</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">saturate</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">saturate</span>(<span class=\"number\">50%</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/8f0428ba4af94e59b6081a6b83759acd.png\"> <img src=\"/../imgs/d689027c2c594f89b566a1e2c5465887.png\"> <img src=\"/../imgs/f199300488514aa3847075b4b8541c02.png\"></p>\n<h3 id=\"sepia\"><a href=\"#sepia\" class=\"headerlink\" title=\"sepia()\"></a><code>sepia()</code></h3><p>棕褐色滤镜</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">sepia</span>(<span class=\"number\">0.20</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">sepia</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/14bc0f5d968347b3adbeeba4dab57aed.png\" alt=\"image.png\"> <img src=\"/../imgs/6966a88766614ea5a249363a6f129797.png\" alt=\"image.png\"></p>\n<h3 id=\"drop-shadow\"><a href=\"#drop-shadow\" class=\"headerlink\" title=\"drop-shadow()\"></a><code>drop-shadow()</code></h3><p>在图像后方应用投影,和<code>box-shadow</code>的不同之处在于，这个函数创建的投影是符合图像本身形状的，而<code>box-shadow</code>创建的是矩形阴影</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">drop-shadow</span>(<span class=\"number\">30px</span> <span class=\"number\">10px</span> <span class=\"number\">4px</span> <span class=\"number\">#4444dd</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">drop-shadow</span>(<span class=\"number\">0</span> -<span class=\"number\">6mm</span> <span class=\"number\">4mm</span> <span class=\"built_in\">rgb</span>(<span class=\"number\">160</span>, <span class=\"number\">0</span>, <span class=\"number\">210</span>));</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/a3745c91af4948b8828204411aba625f.png\" alt=\"image.png\"> <img src=\"/../imgs/06bb1763a47148cc8c74ca46ec66fcbe.png\" alt=\"image.png\"></p>\n<h3 id=\"hue-rotate\"><a href=\"#hue-rotate\" class=\"headerlink\" title=\"hue-rotate()\"></a><code>hue-rotate()</code></h3><p>增加或降低色调</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">hue-rotate</span>(<span class=\"number\">90deg</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">hue-rotate</span>(-<span class=\"number\">0.25turn</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/09ff6519ba1340db8b9a61ea480f57b0.png\" alt=\"image.png\"> <img src=\"/../imgs/7ed844989c4640a9be7cc2922107c3d3.png\" alt=\"image.png\"></p>\n","length":2734,"excerpt":"","more":"<p>这是我参与11月更文挑战的第26天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<p>本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。</p>\n<h2 id=\"颜色\"><a href=\"#颜色\" class=\"headerlink\" title=\"颜色\"></a>颜色</h2><h3 id=\"rgb和rgba\"><a href=\"#rgb和rgba\" class=\"headerlink\" title=\"rgb和rgba\"></a>rgb和rgba</h3><p>前三个参数分别是红、绿、蓝色值。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.el</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>); </span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.5</span>); </span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">255</span> <span class=\"number\">0</span> <span class=\"number\">0</span> / <span class=\"number\">0.5</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hsl和hsla\"><a href=\"#hsl和hsla\" class=\"headerlink\" title=\"hsl和hsla\"></a>hsl和hsla</h3><p>前三个参数分别是色调 ( <code>h</code>)、饱和度 ( <code>s</code>) 和亮度 ( <code>l</code>)</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.el</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">hsl</span>(<span class=\"number\">100</span>, <span class=\"number\">100%</span>, <span class=\"number\">50%</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">hsla</span>(<span class=\"number\">100</span>, <span class=\"number\">100%</span>, <span class=\"number\">50%</span>, <span class=\"number\">0.5</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">hsl</span>(<span class=\"number\">100</span> <span class=\"number\">100%</span> <span class=\"number\">50%</span> / <span class=\"number\">0.5</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照<a href=\"https://www.w3.org%2FTR%2Fcss-color-4%2F\" title=\"https://www.w3.org/TR/css-color-4/\">css color level 4</a>，我们可以省略逗号，并用<code>/</code>隔开alpha。</p>\n<h2 id=\"渐变\"><a href=\"#渐变\" class=\"headerlink\" title=\"渐变\"></a>渐变</h2><h4 id=\"linear-gradient-and-repeating-linear-gradient\"><a href=\"#linear-gradient-and-repeating-linear-gradient\" class=\"headerlink\" title=\"linear-gradient() and repeating-linear-gradient()\"></a><code>linear-gradient()</code> and <code>repeating-linear-gradient()</code></h4><p>在一条直线上创建多种颜色的渐变。</p>\n<p>参数为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">direction</span>, <span class=\"attribute\">color</span>-stop1, <span class=\"attribute\">color</span>-stop2, ...</span><br></pre></td></tr></table></figure>\n\n<p>direction：用角度值指定渐变的方向（或角度）。</p>\n<p>color-stop1, color-stop2, …： 用于指定渐变的起止颜色。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">#e66465</span>, <span class=\"number\">#9198e5</span>);</span><br><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">0.25turn</span>, <span class=\"number\">#3f87a6</span>, <span class=\"number\">#ebf8e1</span>, <span class=\"number\">#f69d3c</span>);</span><br><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to left, <span class=\"number\">#333</span>, <span class=\"number\">#333</span> <span class=\"number\">50%</span>, <span class=\"number\">#eee</span> <span class=\"number\">75%</span>, <span class=\"number\">#333</span> <span class=\"number\">75%</span>);</span><br><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">217deg</span>, <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">8</span>), <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>) <span class=\"number\">70.71%</span>), <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">127deg</span>, <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>,.<span class=\"number\">8</span>), <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>) <span class=\"number\">70.71%</span>), <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">336deg</span>, <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>,.<span class=\"number\">8</span>), <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>) <span class=\"number\">70.71%</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/d2c1ca8234704e8cb918d7b53a008d00.png\" alt=\"image.png\"></p>\n<p>一个color-stop由一个color和两个可选的长度或百分比组成，代表这个颜色开始和结束的位置，如</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orange <span class=\"number\">20</span><span class=\"comment\">% 40%</span></span><br></pre></td></tr></table></figure>\n\n<p>如果空间比渐变设置的更多，那么使用<code>repeating-linear-gradient</code>会创建重复渐变。比如下面的，从20%的位置开始将重复前面的渐变。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-linear-gradient</span>(<span class=\"number\">45deg</span>, <span class=\"number\">#3f87a6</span>, <span class=\"number\">#ebf8e1</span> <span class=\"number\">15%</span>, <span class=\"number\">#f69d3c</span> <span class=\"number\">20%</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"radial-gradient-and-repeating-radial-gradient\"><a href=\"#radial-gradient-and-repeating-radial-gradient\" class=\"headerlink\" title=\"radial-gradient() and repeating-radial-gradient()\"></a><code>radial-gradient()</code> and <code>repeating-radial-gradient()</code></h4><p>创建径向渐变，它与线性渐变的不同点在于它是从中心点向外辐射。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(<span class=\"number\">#e66465</span>, <span class=\"number\">#9198e5</span>);</span><br><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(circle at <span class=\"number\">100%</span>, <span class=\"number\">#333</span>, <span class=\"number\">#333</span> <span class=\"number\">50%</span>, <span class=\"number\">#eee</span> <span class=\"number\">75%</span>, <span class=\"number\">#333</span> <span class=\"number\">75%</span>);</span><br><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(ellipse at top, <span class=\"number\">#e66465</span>, transparent), <span class=\"built_in\">radial-gradient</span>(ellipse at bottom, <span class=\"number\">#4d9f0c</span>, transparent);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/79d57ee723c0414fa58067db9964da81.png\" alt=\"image.png\"></p>\n<p>参数为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shape size at <span class=\"attribute\">position</span>, start-<span class=\"attribute\">color</span>, ..., last-<span class=\"attribute\">color</span></span><br></pre></td></tr></table></figure>\n\n<p>shape确定圆的类型，<code>circle</code>或<code>ellipse</code>,默认是<code>ellipse</code>。</p>\n<p>size定义渐变的大小，可能的值为</p>\n<ul>\n<li><code>closest-side</code>:指定径向渐变的半径长度为从圆心到离圆心最近的边</li>\n<li><code>closest-corner</code>:指定径向渐变的半径长度为从圆心到离圆心最近的角</li>\n<li><code>farthest-side</code> : 指定径向渐变的半径长度为从圆心到离圆心最远的边</li>\n<li><code>farthest-corner</code>:默认，指定径向渐变的半径长度为从圆心到离圆心最远的角 <code>repeating-radial-gradient</code>用于创建重复的径向渐变</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-radial-gradient</span>(<span class=\"number\">#e66465</span>, <span class=\"number\">#9198e5</span> <span class=\"number\">20%</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"conic-gradient-and-repeating-conical-gradient\"><a href=\"#conic-gradient-and-repeating-conical-gradient\" class=\"headerlink\" title=\"conic-gradient() and repeating-conical-gradient\"></a><code>conic-gradient()</code> and <code>repeating-conical-gradient</code></h4><p>圆锥渐变与径向渐变的不同之处在于颜色围绕一个圆分布</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">conic-gradient</span>(red, orange, yellow, green, teal, blue, purple, red)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/999db97b32c64a63b4411bda28308618.png\" alt=\"image.png\"></p>\n<h2 id=\"滤镜filter\"><a href=\"#滤镜filter\" class=\"headerlink\" title=\"滤镜filter\"></a>滤镜filter</h2><h2 id=\"brightness\"><a href=\"#brightness\" class=\"headerlink\" title=\"brightness()\"></a><code>brightness()</code></h2><p>使内容看起来更亮或更暗</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">brightness</span>(amount)</span><br></pre></td></tr></table></figure>\n\n<p>参数amount：[<code>&lt;number&gt;</code>]或[<code>&lt;percentage&gt;</code>]，低于1更暗，高于1更亮</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">brightness</span>(<span class=\"number\">0%</span>)   <span class=\"comment\">/* 全黑 */</span></span><br><span class=\"line\"><span class=\"built_in\">brightness</span>(<span class=\"number\">0.4</span>)  <span class=\"comment\">/* 40% 亮度 */</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/0d87ab8a99ff4cfba6d30dfbe2a4cc6b.png\" alt=\"image.png\"> <img src=\"/../imgs/77a53feae9054e88b68b47f8291f899d.png\" alt=\"image.png\"></p>\n<h3 id=\"blur\"><a href=\"#blur\" class=\"headerlink\" title=\"blur()\"></a><code>blur()</code></h3><p>模糊图像</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(<span class=\"number\">4px</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/e0c516bdfadb4be5b800d09bfce3e6b8.png\" alt=\"image.png\"> <img src=\"/../imgs/064dd050a8f644c0bcc6a3ff23565f97.png\" alt=\"image.png\"></p>\n<h3 id=\"contrast\"><a href=\"#contrast\" class=\"headerlink\" title=\"contrast()\"></a><code>contrast()</code></h3><p>增加或减少图像的对比度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">contrast</span>(<span class=\"number\">50%</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">contrast</span>(<span class=\"number\">1.75</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/279f927c1695458eb47fc01391cf08c2.png\" alt=\"image.png\"> <img src=\"/../imgs/54d69cada2784fccb0e1e17a443a57d2.png\" alt=\"image.png\"></p>\n<h3 id=\"grayscale\"><a href=\"#grayscale\" class=\"headerlink\" title=\"grayscale()\"></a><code>grayscale()</code></h3><p>将图像转为灰度图</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/006adce2e90d46b6bf6680421b8597fe.png\" alt=\"image.png\"> <img src=\"/../imgs/1b26737844194fc09f923cdd6b3b8a92.png\" alt=\"image.png\"></p>\n<h3 id=\"invert\"><a href=\"#invert\" class=\"headerlink\" title=\"invert()\"></a><code>invert()</code></h3><p>反转图像颜色</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">invert</span>(<span class=\"number\">0.30</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">invert</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/0f677483d57d40f69267e8e4ef2d3b0e.png\" alt=\"image.png\"> <img src=\"/../imgs/fab6f6cc9c23439fa4783422b7bd1784.png\" alt=\"image.png\"></p>\n<h3 id=\"opacity\"><a href=\"#opacity\" class=\"headerlink\" title=\"opacity()\"></a><code>opacity()</code></h3><p>改变图像透明度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">opacity</span>(<span class=\"number\">0.20</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/bfb8a4db30f74136811c79d6a2063b74.png\" alt=\"image.png\"></p>\n<h3 id=\"saturate\"><a href=\"#saturate\" class=\"headerlink\" title=\"saturate()\"></a><code>saturate()</code></h3><p>改变饱和度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">saturate</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">saturate</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">saturate</span>(<span class=\"number\">50%</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/8f0428ba4af94e59b6081a6b83759acd.png\"> <img src=\"/../imgs/d689027c2c594f89b566a1e2c5465887.png\"> <img src=\"/../imgs/f199300488514aa3847075b4b8541c02.png\"></p>\n<h3 id=\"sepia\"><a href=\"#sepia\" class=\"headerlink\" title=\"sepia()\"></a><code>sepia()</code></h3><p>棕褐色滤镜</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">sepia</span>(<span class=\"number\">0.20</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">sepia</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/14bc0f5d968347b3adbeeba4dab57aed.png\" alt=\"image.png\"> <img src=\"/../imgs/6966a88766614ea5a249363a6f129797.png\" alt=\"image.png\"></p>\n<h3 id=\"drop-shadow\"><a href=\"#drop-shadow\" class=\"headerlink\" title=\"drop-shadow()\"></a><code>drop-shadow()</code></h3><p>在图像后方应用投影,和<code>box-shadow</code>的不同之处在于，这个函数创建的投影是符合图像本身形状的，而<code>box-shadow</code>创建的是矩形阴影</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">drop-shadow</span>(<span class=\"number\">30px</span> <span class=\"number\">10px</span> <span class=\"number\">4px</span> <span class=\"number\">#4444dd</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">drop-shadow</span>(<span class=\"number\">0</span> -<span class=\"number\">6mm</span> <span class=\"number\">4mm</span> <span class=\"built_in\">rgb</span>(<span class=\"number\">160</span>, <span class=\"number\">0</span>, <span class=\"number\">210</span>));</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/a3745c91af4948b8828204411aba625f.png\" alt=\"image.png\"> <img src=\"/../imgs/06bb1763a47148cc8c74ca46ec66fcbe.png\" alt=\"image.png\"></p>\n<h3 id=\"hue-rotate\"><a href=\"#hue-rotate\" class=\"headerlink\" title=\"hue-rotate()\"></a><code>hue-rotate()</code></h3><p>增加或降低色调</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">hue-rotate</span>(<span class=\"number\">90deg</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">hue-rotate</span>(-<span class=\"number\">0.25turn</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/09ff6519ba1340db8b9a61ea480f57b0.png\" alt=\"image.png\"> <img src=\"/../imgs/7ed844989c4640a9be7cc2922107c3d3.png\" alt=\"image.png\"></p>\n"},{"title":"CSS函数大全（二）：转换、动画和形状/path","date":"2021-11-24T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第25天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。\n\ntransform\n---------\n\n### `scaleX()`, `scaleY()`, `scaleZ()`, `scale3d()`, and `scale()`\n\n使元素在一个或多个方向上放大或缩小\n\n```css\n.double { transform: scale(2); }\n```\n\n### `translateX()`, `translateY()`, `translateZ()`, `translate3d()`, and `translate()`\n\n在一个或多个方向上平移元素\n\n居中：\n\n```css\n.center { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }\n```\n\n### `perspective()`\n\n定义了到z=0的坐标轴，使用者能够得到3D定位元素的透视。使其看起来像是从背景中向上和向外突出。数值越小看起来越大。 [注意和css 属性`perspective`不一样](https://css-tricks.com%2Falmanac%2Fproperties%2Fp%2Fperspective%2F \"https://css-tricks.com/almanac/properties/p/perspective/\")\n\n```css\n.cube { transform: perspective(50em) rotateY(50deg) }\n```\n\n### `rotateX()`, `rotateY()`, `rotateZ()`, `rotate3d()`, and `rotate()`\n\n沿一个或多个轴旋转\n\n```css\n.avatar { transform: rotate(25deg); }\n```\n\n### `skewX()`, `skewY()`, and `skew()`\n\n在水平平面上的倾斜度，元素每个点的坐标根据指定的角度以及到原点的距离，进行成比例的值调整；因此，一个点离原点越远，其增加的值就越大。\n\n```css\n.header { transform: skew(25deg, 15deg); }\n```\n\n### `matrix()` 和 `matrix3d()`\n\n变换矩阵，`matrix(a, b, c, d, tx, ty)` 是 `matrix3d(a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1)` 的简写。 matrix的6个参数分别代表某个变换: `matrix( scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY() )`\n\n关于矩阵变换，可以看张鑫旭的文章。（嗯，此处本来有个链接的，然而无法过审。。。）\n\n动画\n--\n\n### `cubic-bezier()`\n\n当`ease`、`ease-in-out`等关键字不满足时，可以使用这个函数[自定义贝塞尔曲线](https://cubic-bezier.com%2F%23.17%2C.67%2C.83%2C.67 \"https://cubic-bezier.com/#.17,.67,.83,.67\")\n\n```css\n.el { transition-timing-function: cubic-bezier(0.17, 0.67, 0.83, 0.67); }\n```\n\n### `steps()`\n\n```css\nanimation-timing-function: steps(4, end);\n```\n\n允许我们将动画或者过渡分割成段，可以参见：[designmodo.com/steps-css-a…](https://designmodo.com%2Fsteps-css-animations%2F \"https://designmodo.com/steps-css-animations/\")\n\n```css\n.el { animation: 2s infinite alternate steps(10); }\n```\n\n形状和path\n-------\n\n这些函数即可用于动画的`offset-path`属性，表示动画的移动路径，也可以用在`clip-path`中，表示剪切路径。\n\n### 形状\n\n#### `circle()`\n\n指定半径和圆心，创建一个圆形\n\n```css\nclip-path: circle(6rem at 12rem 8rem);\n```\n\n![image.png](../imgs/3de7200406054b6d9db56db980e0035a.png)\n\n#### `ellipse()`\n\n指定x轴与y轴半径和中心，创建一个椭圆\n\n```css\nclip-path: ellipse(115px 55px at 50% 40%);\n```\n\n![image.png](../imgs/14ea14ac2d4d4295adf4cde4a6a07c50.png)\n\n#### `inset()`\n\n矩形\n\n```css\nclip-path: inset(22% 12% 15px 35px);\n```\n\n![image.png](../imgs/bb5d2fc3c7394c6fb05687546f49047b.png)\n\n#### `polygon()`\n\n多边形\n\n```css\nclip-path: polygon(50% 2.4%, 34.5% 33.8%, 0% 38.8%, 25% 63.1%, 19.1% 97.6%, 50% 81.3%, 80.9% 97.6%, 75% 63.1%, 100% 38.8%, 65.5% 33.8%);\n```\n\n![image.png](../imgs/d6c862c665f04645b862bdcf3158a82b.png)\n\n### 路径path\n\n当需要不规则形状时，可以使用path定义：\n\n```css\nclip-path: path('M 0 200 L 0,75 A 5,5 0,0,1 150,75 L 200 200 z');\n```\n\n![image.png](../imgs/aba1b3919d7f434c8c4c41eb65dde1d7.png)\n\n它有20个命令，_区分大小写_。大写命令指定绝对坐标，而小写命令指定相对于当前位置的坐标。\n\n*   移动到：`M`,`m`\n*   绘制一条线： 直线 `L`, `l`；水平线 `H`, `h`； 垂直线 `V`,`v`\n*   三次贝塞尔曲线：`C`, `c`, `S`,`s`\n*   二次贝塞尔曲线：`Q`, `q`, `T`,`t`\n*   椭圆弧曲线：`A`,`a`\n*   关闭路径：`Z`，`z`","source":"_posts/CSS函数大全（二）：转换、动画和形状 path.md","raw":"---\n title: \"CSS函数大全（二）：转换、动画和形状/path\"\n date: 2021-11-25\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第25天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。\n\ntransform\n---------\n\n### `scaleX()`, `scaleY()`, `scaleZ()`, `scale3d()`, and `scale()`\n\n使元素在一个或多个方向上放大或缩小\n\n```css\n.double { transform: scale(2); }\n```\n\n### `translateX()`, `translateY()`, `translateZ()`, `translate3d()`, and `translate()`\n\n在一个或多个方向上平移元素\n\n居中：\n\n```css\n.center { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }\n```\n\n### `perspective()`\n\n定义了到z=0的坐标轴，使用者能够得到3D定位元素的透视。使其看起来像是从背景中向上和向外突出。数值越小看起来越大。 [注意和css 属性`perspective`不一样](https://css-tricks.com%2Falmanac%2Fproperties%2Fp%2Fperspective%2F \"https://css-tricks.com/almanac/properties/p/perspective/\")\n\n```css\n.cube { transform: perspective(50em) rotateY(50deg) }\n```\n\n### `rotateX()`, `rotateY()`, `rotateZ()`, `rotate3d()`, and `rotate()`\n\n沿一个或多个轴旋转\n\n```css\n.avatar { transform: rotate(25deg); }\n```\n\n### `skewX()`, `skewY()`, and `skew()`\n\n在水平平面上的倾斜度，元素每个点的坐标根据指定的角度以及到原点的距离，进行成比例的值调整；因此，一个点离原点越远，其增加的值就越大。\n\n```css\n.header { transform: skew(25deg, 15deg); }\n```\n\n### `matrix()` 和 `matrix3d()`\n\n变换矩阵，`matrix(a, b, c, d, tx, ty)` 是 `matrix3d(a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1)` 的简写。 matrix的6个参数分别代表某个变换: `matrix( scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY() )`\n\n关于矩阵变换，可以看张鑫旭的文章。（嗯，此处本来有个链接的，然而无法过审。。。）\n\n动画\n--\n\n### `cubic-bezier()`\n\n当`ease`、`ease-in-out`等关键字不满足时，可以使用这个函数[自定义贝塞尔曲线](https://cubic-bezier.com%2F%23.17%2C.67%2C.83%2C.67 \"https://cubic-bezier.com/#.17,.67,.83,.67\")\n\n```css\n.el { transition-timing-function: cubic-bezier(0.17, 0.67, 0.83, 0.67); }\n```\n\n### `steps()`\n\n```css\nanimation-timing-function: steps(4, end);\n```\n\n允许我们将动画或者过渡分割成段，可以参见：[designmodo.com/steps-css-a…](https://designmodo.com%2Fsteps-css-animations%2F \"https://designmodo.com/steps-css-animations/\")\n\n```css\n.el { animation: 2s infinite alternate steps(10); }\n```\n\n形状和path\n-------\n\n这些函数即可用于动画的`offset-path`属性，表示动画的移动路径，也可以用在`clip-path`中，表示剪切路径。\n\n### 形状\n\n#### `circle()`\n\n指定半径和圆心，创建一个圆形\n\n```css\nclip-path: circle(6rem at 12rem 8rem);\n```\n\n![image.png](../imgs/3de7200406054b6d9db56db980e0035a.png)\n\n#### `ellipse()`\n\n指定x轴与y轴半径和中心，创建一个椭圆\n\n```css\nclip-path: ellipse(115px 55px at 50% 40%);\n```\n\n![image.png](../imgs/14ea14ac2d4d4295adf4cde4a6a07c50.png)\n\n#### `inset()`\n\n矩形\n\n```css\nclip-path: inset(22% 12% 15px 35px);\n```\n\n![image.png](../imgs/bb5d2fc3c7394c6fb05687546f49047b.png)\n\n#### `polygon()`\n\n多边形\n\n```css\nclip-path: polygon(50% 2.4%, 34.5% 33.8%, 0% 38.8%, 25% 63.1%, 19.1% 97.6%, 50% 81.3%, 80.9% 97.6%, 75% 63.1%, 100% 38.8%, 65.5% 33.8%);\n```\n\n![image.png](../imgs/d6c862c665f04645b862bdcf3158a82b.png)\n\n### 路径path\n\n当需要不规则形状时，可以使用path定义：\n\n```css\nclip-path: path('M 0 200 L 0,75 A 5,5 0,0,1 150,75 L 200 200 z');\n```\n\n![image.png](../imgs/aba1b3919d7f434c8c4c41eb65dde1d7.png)\n\n它有20个命令，_区分大小写_。大写命令指定绝对坐标，而小写命令指定相对于当前位置的坐标。\n\n*   移动到：`M`,`m`\n*   绘制一条线： 直线 `L`, `l`；水平线 `H`, `h`； 垂直线 `V`,`v`\n*   三次贝塞尔曲线：`C`, `c`, `S`,`s`\n*   二次贝塞尔曲线：`Q`, `q`, `T`,`t`\n*   椭圆弧曲线：`A`,`a`\n*   关闭路径：`Z`，`z`","slug":"CSS函数大全（二）：转换、动画和形状 path","published":1,"updated":"2024-04-04T15:27:03.507Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhh0008hajfg83hc0fy","content":"<p>这是我参与11月更文挑战的第25天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<p>本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。</p>\n<h2 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h2><h3 id=\"scaleX-scaleY-scaleZ-scale3d-and-scale\"><a href=\"#scaleX-scaleY-scaleZ-scale3d-and-scale\" class=\"headerlink\" title=\"scaleX(), scaleY(), scaleZ(), scale3d(), and scale()\"></a><code>scaleX()</code>, <code>scaleY()</code>, <code>scaleZ()</code>, <code>scale3d()</code>, and <code>scale()</code></h3><p>使元素在一个或多个方向上放大或缩小</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.double</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">2</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"translateX-translateY-translateZ-translate3d-and-translate\"><a href=\"#translateX-translateY-translateZ-translate3d-and-translate\" class=\"headerlink\" title=\"translateX(), translateY(), translateZ(), translate3d(), and translate()\"></a><code>translateX()</code>, <code>translateY()</code>, <code>translateZ()</code>, <code>translate3d()</code>, and <code>translate()</code></h3><p>在一个或多个方向上平移元素</p>\n<p>居中：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span> &#123; <span class=\"attribute\">position</span>: absolute; <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>; <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"perspective\"><a href=\"#perspective\" class=\"headerlink\" title=\"perspective()\"></a><code>perspective()</code></h3><p>定义了到z&#x3D;0的坐标轴，使用者能够得到3D定位元素的透视。使其看起来像是从背景中向上和向外突出。数值越小看起来越大。 <a href=\"https://css-tricks.com%2Falmanac%2Fproperties%2Fp%2Fperspective%2F\" title=\"https://css-tricks.com/almanac/properties/p/perspective/\">注意和css 属性<code>perspective</code>不一样</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.cube</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">perspective</span>(<span class=\"number\">50em</span>) <span class=\"built_in\">rotateY</span>(<span class=\"number\">50deg</span>) &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rotateX-rotateY-rotateZ-rotate3d-and-rotate\"><a href=\"#rotateX-rotateY-rotateZ-rotate3d-and-rotate\" class=\"headerlink\" title=\"rotateX(), rotateY(), rotateZ(), rotate3d(), and rotate()\"></a><code>rotateX()</code>, <code>rotateY()</code>, <code>rotateZ()</code>, <code>rotate3d()</code>, and <code>rotate()</code></h3><p>沿一个或多个轴旋转</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.avatar</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">25deg</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"skewX-skewY-and-skew\"><a href=\"#skewX-skewY-and-skew\" class=\"headerlink\" title=\"skewX(), skewY(), and skew()\"></a><code>skewX()</code>, <code>skewY()</code>, and <code>skew()</code></h3><p>在水平平面上的倾斜度，元素每个点的坐标根据指定的角度以及到原点的距离，进行成比例的值调整；因此，一个点离原点越远，其增加的值就越大。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.header</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">skew</span>(<span class=\"number\">25deg</span>, <span class=\"number\">15deg</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"matrix-和-matrix3d\"><a href=\"#matrix-和-matrix3d\" class=\"headerlink\" title=\"matrix() 和 matrix3d()\"></a><code>matrix()</code> 和 <code>matrix3d()</code></h3><p>变换矩阵，<code>matrix(a, b, c, d, tx, ty)</code> 是 <code>matrix3d(a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1)</code> 的简写。 matrix的6个参数分别代表某个变换: <code>matrix( scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY() )</code></p>\n<p>关于矩阵变换，可以看张鑫旭的文章。（嗯，此处本来有个链接的，然而无法过审。。。）</p>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><h3 id=\"cubic-bezier\"><a href=\"#cubic-bezier\" class=\"headerlink\" title=\"cubic-bezier()\"></a><code>cubic-bezier()</code></h3><p>当<code>ease</code>、<code>ease-in-out</code>等关键字不满足时，可以使用这个函数<a href=\"https://cubic-bezier.com%2F%23.17%2C.67%2C.83%2C.67\" title=\"https://cubic-bezier.com/#.17,.67,.83,.67\">自定义贝塞尔曲线</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.el</span> &#123; <span class=\"attribute\">transition-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.17</span>, <span class=\"number\">0.67</span>, <span class=\"number\">0.83</span>, <span class=\"number\">0.67</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"steps\"><a href=\"#steps\" class=\"headerlink\" title=\"steps()\"></a><code>steps()</code></h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">steps</span>(<span class=\"number\">4</span>, end);</span><br></pre></td></tr></table></figure>\n\n<p>允许我们将动画或者过渡分割成段，可以参见：<a href=\"https://designmodo.com%2Fsteps-css-animations%2F\" title=\"https://designmodo.com/steps-css-animations/\">designmodo.com&#x2F;steps-css-a…</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.el</span> &#123; <span class=\"attribute\">animation</span>: <span class=\"number\">2s</span> infinite alternate <span class=\"built_in\">steps</span>(<span class=\"number\">10</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"形状和path\"><a href=\"#形状和path\" class=\"headerlink\" title=\"形状和path\"></a>形状和path</h2><p>这些函数即可用于动画的<code>offset-path</code>属性，表示动画的移动路径，也可以用在<code>clip-path</code>中，表示剪切路径。</p>\n<h3 id=\"形状\"><a href=\"#形状\" class=\"headerlink\" title=\"形状\"></a>形状</h3><h4 id=\"circle\"><a href=\"#circle\" class=\"headerlink\" title=\"circle()\"></a><code>circle()</code></h4><p>指定半径和圆心，创建一个圆形</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">clip-path</span>: <span class=\"built_in\">circle</span>(<span class=\"number\">6rem</span> at <span class=\"number\">12rem</span> <span class=\"number\">8rem</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/3de7200406054b6d9db56db980e0035a.png\" alt=\"image.png\"></p>\n<h4 id=\"ellipse\"><a href=\"#ellipse\" class=\"headerlink\" title=\"ellipse()\"></a><code>ellipse()</code></h4><p>指定x轴与y轴半径和中心，创建一个椭圆</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">clip-path</span>: <span class=\"built_in\">ellipse</span>(<span class=\"number\">115px</span> <span class=\"number\">55px</span> at <span class=\"number\">50%</span> <span class=\"number\">40%</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/14ea14ac2d4d4295adf4cde4a6a07c50.png\" alt=\"image.png\"></p>\n<h4 id=\"inset\"><a href=\"#inset\" class=\"headerlink\" title=\"inset()\"></a><code>inset()</code></h4><p>矩形</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">clip-path</span>: <span class=\"built_in\">inset</span>(<span class=\"number\">22%</span> <span class=\"number\">12%</span> <span class=\"number\">15px</span> <span class=\"number\">35px</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/bb5d2fc3c7394c6fb05687546f49047b.png\" alt=\"image.png\"></p>\n<h4 id=\"polygon\"><a href=\"#polygon\" class=\"headerlink\" title=\"polygon()\"></a><code>polygon()</code></h4><p>多边形</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">clip-path</span>: <span class=\"built_in\">polygon</span>(<span class=\"number\">50%</span> <span class=\"number\">2.4%</span>, <span class=\"number\">34.5%</span> <span class=\"number\">33.8%</span>, <span class=\"number\">0%</span> <span class=\"number\">38.8%</span>, <span class=\"number\">25%</span> <span class=\"number\">63.1%</span>, <span class=\"number\">19.1%</span> <span class=\"number\">97.6%</span>, <span class=\"number\">50%</span> <span class=\"number\">81.3%</span>, <span class=\"number\">80.9%</span> <span class=\"number\">97.6%</span>, <span class=\"number\">75%</span> <span class=\"number\">63.1%</span>, <span class=\"number\">100%</span> <span class=\"number\">38.8%</span>, <span class=\"number\">65.5%</span> <span class=\"number\">33.8%</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/d6c862c665f04645b862bdcf3158a82b.png\" alt=\"image.png\"></p>\n<h3 id=\"路径path\"><a href=\"#路径path\" class=\"headerlink\" title=\"路径path\"></a>路径path</h3><p>当需要不规则形状时，可以使用path定义：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">clip-path</span>: <span class=\"built_in\">path</span>(<span class=\"string\">&#x27;M 0 200 L 0,75 A 5,5 0,0,1 150,75 L 200 200 z&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/aba1b3919d7f434c8c4c41eb65dde1d7.png\" alt=\"image.png\"></p>\n<p>它有20个命令，_区分大小写_。大写命令指定绝对坐标，而小写命令指定相对于当前位置的坐标。</p>\n<ul>\n<li>移动到：<code>M</code>,<code>m</code></li>\n<li>绘制一条线： 直线 <code>L</code>, <code>l</code>；水平线 <code>H</code>, <code>h</code>； 垂直线 <code>V</code>,<code>v</code></li>\n<li>三次贝塞尔曲线：<code>C</code>, <code>c</code>, <code>S</code>,<code>s</code></li>\n<li>二次贝塞尔曲线：<code>Q</code>, <code>q</code>, <code>T</code>,<code>t</code></li>\n<li>椭圆弧曲线：<code>A</code>,<code>a</code></li>\n<li>关闭路径：<code>Z</code>，<code>z</code></li>\n</ul>\n","length":1875,"excerpt":"","more":"<p>这是我参与11月更文挑战的第25天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<p>本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。</p>\n<h2 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h2><h3 id=\"scaleX-scaleY-scaleZ-scale3d-and-scale\"><a href=\"#scaleX-scaleY-scaleZ-scale3d-and-scale\" class=\"headerlink\" title=\"scaleX(), scaleY(), scaleZ(), scale3d(), and scale()\"></a><code>scaleX()</code>, <code>scaleY()</code>, <code>scaleZ()</code>, <code>scale3d()</code>, and <code>scale()</code></h3><p>使元素在一个或多个方向上放大或缩小</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.double</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">2</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"translateX-translateY-translateZ-translate3d-and-translate\"><a href=\"#translateX-translateY-translateZ-translate3d-and-translate\" class=\"headerlink\" title=\"translateX(), translateY(), translateZ(), translate3d(), and translate()\"></a><code>translateX()</code>, <code>translateY()</code>, <code>translateZ()</code>, <code>translate3d()</code>, and <code>translate()</code></h3><p>在一个或多个方向上平移元素</p>\n<p>居中：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span> &#123; <span class=\"attribute\">position</span>: absolute; <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>; <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"perspective\"><a href=\"#perspective\" class=\"headerlink\" title=\"perspective()\"></a><code>perspective()</code></h3><p>定义了到z&#x3D;0的坐标轴，使用者能够得到3D定位元素的透视。使其看起来像是从背景中向上和向外突出。数值越小看起来越大。 <a href=\"https://css-tricks.com%2Falmanac%2Fproperties%2Fp%2Fperspective%2F\" title=\"https://css-tricks.com/almanac/properties/p/perspective/\">注意和css 属性<code>perspective</code>不一样</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.cube</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">perspective</span>(<span class=\"number\">50em</span>) <span class=\"built_in\">rotateY</span>(<span class=\"number\">50deg</span>) &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rotateX-rotateY-rotateZ-rotate3d-and-rotate\"><a href=\"#rotateX-rotateY-rotateZ-rotate3d-and-rotate\" class=\"headerlink\" title=\"rotateX(), rotateY(), rotateZ(), rotate3d(), and rotate()\"></a><code>rotateX()</code>, <code>rotateY()</code>, <code>rotateZ()</code>, <code>rotate3d()</code>, and <code>rotate()</code></h3><p>沿一个或多个轴旋转</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.avatar</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">25deg</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"skewX-skewY-and-skew\"><a href=\"#skewX-skewY-and-skew\" class=\"headerlink\" title=\"skewX(), skewY(), and skew()\"></a><code>skewX()</code>, <code>skewY()</code>, and <code>skew()</code></h3><p>在水平平面上的倾斜度，元素每个点的坐标根据指定的角度以及到原点的距离，进行成比例的值调整；因此，一个点离原点越远，其增加的值就越大。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.header</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">skew</span>(<span class=\"number\">25deg</span>, <span class=\"number\">15deg</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"matrix-和-matrix3d\"><a href=\"#matrix-和-matrix3d\" class=\"headerlink\" title=\"matrix() 和 matrix3d()\"></a><code>matrix()</code> 和 <code>matrix3d()</code></h3><p>变换矩阵，<code>matrix(a, b, c, d, tx, ty)</code> 是 <code>matrix3d(a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1)</code> 的简写。 matrix的6个参数分别代表某个变换: <code>matrix( scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY() )</code></p>\n<p>关于矩阵变换，可以看张鑫旭的文章。（嗯，此处本来有个链接的，然而无法过审。。。）</p>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><h3 id=\"cubic-bezier\"><a href=\"#cubic-bezier\" class=\"headerlink\" title=\"cubic-bezier()\"></a><code>cubic-bezier()</code></h3><p>当<code>ease</code>、<code>ease-in-out</code>等关键字不满足时，可以使用这个函数<a href=\"https://cubic-bezier.com%2F%23.17%2C.67%2C.83%2C.67\" title=\"https://cubic-bezier.com/#.17,.67,.83,.67\">自定义贝塞尔曲线</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.el</span> &#123; <span class=\"attribute\">transition-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.17</span>, <span class=\"number\">0.67</span>, <span class=\"number\">0.83</span>, <span class=\"number\">0.67</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"steps\"><a href=\"#steps\" class=\"headerlink\" title=\"steps()\"></a><code>steps()</code></h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">steps</span>(<span class=\"number\">4</span>, end);</span><br></pre></td></tr></table></figure>\n\n<p>允许我们将动画或者过渡分割成段，可以参见：<a href=\"https://designmodo.com%2Fsteps-css-animations%2F\" title=\"https://designmodo.com/steps-css-animations/\">designmodo.com&#x2F;steps-css-a…</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.el</span> &#123; <span class=\"attribute\">animation</span>: <span class=\"number\">2s</span> infinite alternate <span class=\"built_in\">steps</span>(<span class=\"number\">10</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"形状和path\"><a href=\"#形状和path\" class=\"headerlink\" title=\"形状和path\"></a>形状和path</h2><p>这些函数即可用于动画的<code>offset-path</code>属性，表示动画的移动路径，也可以用在<code>clip-path</code>中，表示剪切路径。</p>\n<h3 id=\"形状\"><a href=\"#形状\" class=\"headerlink\" title=\"形状\"></a>形状</h3><h4 id=\"circle\"><a href=\"#circle\" class=\"headerlink\" title=\"circle()\"></a><code>circle()</code></h4><p>指定半径和圆心，创建一个圆形</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">clip-path</span>: <span class=\"built_in\">circle</span>(<span class=\"number\">6rem</span> at <span class=\"number\">12rem</span> <span class=\"number\">8rem</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/3de7200406054b6d9db56db980e0035a.png\" alt=\"image.png\"></p>\n<h4 id=\"ellipse\"><a href=\"#ellipse\" class=\"headerlink\" title=\"ellipse()\"></a><code>ellipse()</code></h4><p>指定x轴与y轴半径和中心，创建一个椭圆</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">clip-path</span>: <span class=\"built_in\">ellipse</span>(<span class=\"number\">115px</span> <span class=\"number\">55px</span> at <span class=\"number\">50%</span> <span class=\"number\">40%</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/14ea14ac2d4d4295adf4cde4a6a07c50.png\" alt=\"image.png\"></p>\n<h4 id=\"inset\"><a href=\"#inset\" class=\"headerlink\" title=\"inset()\"></a><code>inset()</code></h4><p>矩形</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">clip-path</span>: <span class=\"built_in\">inset</span>(<span class=\"number\">22%</span> <span class=\"number\">12%</span> <span class=\"number\">15px</span> <span class=\"number\">35px</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/bb5d2fc3c7394c6fb05687546f49047b.png\" alt=\"image.png\"></p>\n<h4 id=\"polygon\"><a href=\"#polygon\" class=\"headerlink\" title=\"polygon()\"></a><code>polygon()</code></h4><p>多边形</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">clip-path</span>: <span class=\"built_in\">polygon</span>(<span class=\"number\">50%</span> <span class=\"number\">2.4%</span>, <span class=\"number\">34.5%</span> <span class=\"number\">33.8%</span>, <span class=\"number\">0%</span> <span class=\"number\">38.8%</span>, <span class=\"number\">25%</span> <span class=\"number\">63.1%</span>, <span class=\"number\">19.1%</span> <span class=\"number\">97.6%</span>, <span class=\"number\">50%</span> <span class=\"number\">81.3%</span>, <span class=\"number\">80.9%</span> <span class=\"number\">97.6%</span>, <span class=\"number\">75%</span> <span class=\"number\">63.1%</span>, <span class=\"number\">100%</span> <span class=\"number\">38.8%</span>, <span class=\"number\">65.5%</span> <span class=\"number\">33.8%</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/d6c862c665f04645b862bdcf3158a82b.png\" alt=\"image.png\"></p>\n<h3 id=\"路径path\"><a href=\"#路径path\" class=\"headerlink\" title=\"路径path\"></a>路径path</h3><p>当需要不规则形状时，可以使用path定义：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">clip-path</span>: <span class=\"built_in\">path</span>(<span class=\"string\">&#x27;M 0 200 L 0,75 A 5,5 0,0,1 150,75 L 200 200 z&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/aba1b3919d7f434c8c4c41eb65dde1d7.png\" alt=\"image.png\"></p>\n<p>它有20个命令，_区分大小写_。大写命令指定绝对坐标，而小写命令指定相对于当前位置的坐标。</p>\n<ul>\n<li>移动到：<code>M</code>,<code>m</code></li>\n<li>绘制一条线： 直线 <code>L</code>, <code>l</code>；水平线 <code>H</code>, <code>h</code>； 垂直线 <code>V</code>,<code>v</code></li>\n<li>三次贝塞尔曲线：<code>C</code>, <code>c</code>, <code>S</code>,<code>s</code></li>\n<li>二次贝塞尔曲线：<code>Q</code>, <code>q</code>, <code>T</code>,<code>t</code></li>\n<li>椭圆弧曲线：<code>A</code>,<code>a</code></li>\n<li>关闭路径：<code>Z</code>，<code>z</code></li>\n</ul>\n"},{"title":"CSS函数大全（四）：杂项和未来","date":"2021-11-26T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第27天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。\n\n杂项\n--\n\n### url\n\n最常用的函数之一，表示一个文件地址。可以是相对路径、绝对路径或base64，或者一个svg的id\n\n这个函数可用于`background`, `background-image`, `border`, `border-image`, `border-image-source`, `content`, `cursor`, `filter`, `list-style`, `list-style-image`, `mask`, `mask-image`, `offset-path`,@counter-style/symbol和@font-face中的`src`\n\n```css\noffset-path: url(#path);\nmask-image: url(\"masks.svg#mask1\");\ncursor: url(pointer.cur), pointer;\n```\n\n### attr\n\n用来获取选择到的元素的某一HTML属性值。\n\n```xml\n<style>\n    div::after {\n        content: \"----\" attr(data-extra)\n    }\n</style>\n<body>\n    <div data-extra=\"lalalla\">test</div>\n</body>\n```\n\n![image.png](../imgs/5a4ba5ff4494443f8dd7ec51077522b7.png)\n\n注意：\n\n*   `attr()` 理论上能用于所有的CSS属性，但目前支持的仅有伪元素的 [`content`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fcontent \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/content\") 属性\n*   它的高级语法`attr( attribute-name <type-or-unit>? [, <fallback> ]? )`,目前也没有浏览器支持。\n\n### var\n\ncss变量变量\n\n```css\n :root {\n    --size:100px;\n    --color: antiquewhite;\n    --bg: tomato;\n}\n#container {\n    width: var(--size);\n    height: var(--size);\n    color: var(--color);\n    background-color:var(--bg) ;\n}\n<div id=\"container\">text</div>\n```\n\n![image.png](../imgs/754b8961911e4a0e8aae1b9b7a77b4bd.png)\n\n### 自适应图片 `image-set()`\n\nimage-set()函数是一种让浏览器从给定集合中选择最合适的CSS图像的方法。\n\n```arduino\nbackground-image: image-set( \"cat.png\" 1x,\"cat-2x.png\" 2x,\"cat-print.png\" 600dpi);\n```\n\n在普通屏幕上会使用cat.png，在**Retina**屏幕上使用cat-2x.png，在更高分辨率的屏幕上使用cat-print.png。 关于响应式图片可以参考[响应式图片](https://juejin.cn/post/7027807945903570957 \"https://juejin.cn/post/7027807945903570957\")\n\n### shadow dom中的`::slotted()`\n\n这也是一个伪类，代表的是自定义元素传过来的slot：\n\n```css\n <span slot=\"person-age\">Immortal</span>\n::slotted(span) {font-weight:bold; color: gray; font-family: sans-serif; } \n```\n\n外部传过来的`span`元素会被应用该样式。\n\n完整demo：\n\n```html\n<person-details>\n    <p slot=\"person-name\">Dr. Shazaam</p>\n    <span slot=\"person-age\">Immortal</span>\n    <span slot=\"person-occupation\">Superhero</span>\n</person-details>\n<template id=\"person-template\">\n    <div>\n        <h2>Personal ID Card</h2>\n        <slot name=\"person-name\">NAME MISSING</slot>\n        <ul>\n            <li>\n                <slot name=\"person-age\">AGE MISSING</slot>\n            </li>\n            <li>\n                <slot name=\"person-occupation\">OCCUPATION MISSING</slot>\n            </li>\n        </ul>\n    </div>\n</template>\n\n\n<script>\n    customElements.define('person-details',\n        class extends HTMLElement {\n            constructor() {\n                super();\n                let template = document.getElementById('person-template');\n                let templateContent = template.content;\n\n                const shadowRoot = this.attachShadow({ mode: 'open' });\n\n                let style = document.createElement('style');\n                style.textContent = 'div { padding: 10px; border: 1px solid gray; width: 200px; margin: 10px; }' +\n                    'h2 { margin: 0 0 10px; }' +\n                    'ul { margin: 0; }' +\n                    'p { margin: 10px 0; }' +\n                    '::slotted(*) {font-weight:bold; color: gray; font-family: sans-serif; } ';\n\n                shadowRoot.appendChild(style);\n                shadowRoot.appendChild(templateContent.cloneNode(true));\n            }\n        })\n</script>\n```\n\n![image.png](../imgs/cf06032c734549a09510f6424aaa5b81.png)\n\n### element\n\n目前只有Firefox实现了。\n\n```css\n<div style=\"width:400px; height:400px; background:-moz-element(#myBackground1) no-repeat;\">\n  <p>This box uses the element with the #myBackground1 ID as its background!</p>\n</div>\n\n<div style=\"overflow:hidden; height:0;\">\n  <div id=\"myBackground1\" style=\"width:1024px; height:1024px; background-image: linear-gradient(to right, red, orange, yellow, white);\">\n  <p style=\"transform-origin:0 0; transform: rotate(45deg); color:white;\">This text is part of the background. Cool, huh?</p>\n  </div>\n</div>\n```\n\n![image.png](../imgs/2bb45eb7f59d40f381a2ad904fa739ea.png)\n\n### env\n\n将用户代理定义的环境变量值插入你的 CSS 中。\n\n最初由iOS浏览器提供，用于允许开发人员将其内容放置在视口的安全区域中，该规范中定义的`safe-area-inset-*` 值可用于确保内容即使在非矩形的视区中也可以完全显示。\n\n```css\nbody { padding: \n    env(safe-area-inset-top) \n    env(safe-area-inset-right) \n    env(safe-area-inset-bottom)\n    env(safe-area-inset-left); \n}\n```\n\n### counter 和 counters\n\ncounter可以获取代表计数器当前值的字符串，counters可以获取嵌套计数器的当前代表值。\n\n```css\nol {\n  counter-reset: listCounter;\n}\nli {\n  counter-increment: listCounter;\n}\nli::after {\n  content: \"[\" counter(listCounter) \"] == [\"\n               counter(listCounter, upper-roman) \"]\";\n}\n```\n\n![image.png](../imgs/6d8aa40eee8a404c894642e4c613d7ff.png)\n\n未来\n--\n\ncss的函数还在发展中，下面的特性有些有部分浏览器已经实现了，有些还在w3c讨论中。\n\n### `cross-fade()`\n\n可将多张图片以一定的透明度混合。这个函数新老语法已经不一致了。\n\n已经实现的老版语法的demo如下：\n\n```css\n.crossfade {\n    width: 300px;\n    height: 300px;\n    background-image: -webkit-cross-fade(\n        url('br.png'),\n        url('tr.png'),\n        75%);\n    background-image: cross-fade(\n        url('br.png'),\n        url('tr.png'),\n        75%);\n}\n```\n\n![image.png](../imgs/62e213d1a84048648ebc55b40cef1913.png)\n\n### `dir()`\n\n设置文字书写方向，只有Firefox实现了。\n\n### `has()`\n\n尚无浏览器实现\n\n```css\n/* 选择任何直接包含 <img> 子元素的 <a>  */\n/* 注意，目前还没有任何浏览器支持此方法 */\n/* 此伪类也未计划投入样式表中使用 */\nvar test = document.querySelector('a:has(> img)');\n```\n\n### 数学函数\n\n*   正弦： `sin()`\n*   余弦： `cos()`\n*   切线： `tan()`\n*   反余弦： `acos()`\n*   反正弦： `asin()`\n*   反正切： `atan()`\n*   反正切： `atan2()`\n*   平方根： `sqrt()`\n*   参数平方和的平方根： `hypot()`\n*   幂函数： `pow()`\n\n### `:host()` 和 `:host-context()`\n\n在shadow dom中使用\n\n```css\n/* \n    选择阴影根元素，仅当它与选择器参数匹配\n    如：<context-span class=\"footer\">Chris Mills</context-span> \n  */\n :host(.footer) {\n   font-weight: bold;\n }\n \n/*\n    选择了一个 shadow root host, 当且仅当这个\n shadow root host 是括号中选择器参数(h1)的后代 \n 如： <h1>Host selectors <a href=\"#\"><context-span>example</context-span></a></h1>\n */\n\n:host-context(h1) {\n  font-weight: bold;\n}\n```\n\n### `:nth-col()` 和 `:nth-last-col()`\n\n在网格布局中使用，定义某一/些列\n\n```css\n:nth-col(odd) {\n  background-color: pink;\n}\n```\n\n### `symbols()`\n\n定义计数器样式,只有Firefox实现了\n\n```css\nol {\n  list-style: symbols(cyclic \"*\" \"†\" \"‡\");\n}\n```","source":"_posts/CSS函数大全（四）：杂项和未来.md","raw":"---\n title: \"CSS函数大全（四）：杂项和未来\"\n date: 2021-11-27\n tags: [前端,CSS]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第27天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。\n\n杂项\n--\n\n### url\n\n最常用的函数之一，表示一个文件地址。可以是相对路径、绝对路径或base64，或者一个svg的id\n\n这个函数可用于`background`, `background-image`, `border`, `border-image`, `border-image-source`, `content`, `cursor`, `filter`, `list-style`, `list-style-image`, `mask`, `mask-image`, `offset-path`,@counter-style/symbol和@font-face中的`src`\n\n```css\noffset-path: url(#path);\nmask-image: url(\"masks.svg#mask1\");\ncursor: url(pointer.cur), pointer;\n```\n\n### attr\n\n用来获取选择到的元素的某一HTML属性值。\n\n```xml\n<style>\n    div::after {\n        content: \"----\" attr(data-extra)\n    }\n</style>\n<body>\n    <div data-extra=\"lalalla\">test</div>\n</body>\n```\n\n![image.png](../imgs/5a4ba5ff4494443f8dd7ec51077522b7.png)\n\n注意：\n\n*   `attr()` 理论上能用于所有的CSS属性，但目前支持的仅有伪元素的 [`content`](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fcontent \"https://developer.mozilla.org/zh-CN/docs/Web/CSS/content\") 属性\n*   它的高级语法`attr( attribute-name <type-or-unit>? [, <fallback> ]? )`,目前也没有浏览器支持。\n\n### var\n\ncss变量变量\n\n```css\n :root {\n    --size:100px;\n    --color: antiquewhite;\n    --bg: tomato;\n}\n#container {\n    width: var(--size);\n    height: var(--size);\n    color: var(--color);\n    background-color:var(--bg) ;\n}\n<div id=\"container\">text</div>\n```\n\n![image.png](../imgs/754b8961911e4a0e8aae1b9b7a77b4bd.png)\n\n### 自适应图片 `image-set()`\n\nimage-set()函数是一种让浏览器从给定集合中选择最合适的CSS图像的方法。\n\n```arduino\nbackground-image: image-set( \"cat.png\" 1x,\"cat-2x.png\" 2x,\"cat-print.png\" 600dpi);\n```\n\n在普通屏幕上会使用cat.png，在**Retina**屏幕上使用cat-2x.png，在更高分辨率的屏幕上使用cat-print.png。 关于响应式图片可以参考[响应式图片](https://juejin.cn/post/7027807945903570957 \"https://juejin.cn/post/7027807945903570957\")\n\n### shadow dom中的`::slotted()`\n\n这也是一个伪类，代表的是自定义元素传过来的slot：\n\n```css\n <span slot=\"person-age\">Immortal</span>\n::slotted(span) {font-weight:bold; color: gray; font-family: sans-serif; } \n```\n\n外部传过来的`span`元素会被应用该样式。\n\n完整demo：\n\n```html\n<person-details>\n    <p slot=\"person-name\">Dr. Shazaam</p>\n    <span slot=\"person-age\">Immortal</span>\n    <span slot=\"person-occupation\">Superhero</span>\n</person-details>\n<template id=\"person-template\">\n    <div>\n        <h2>Personal ID Card</h2>\n        <slot name=\"person-name\">NAME MISSING</slot>\n        <ul>\n            <li>\n                <slot name=\"person-age\">AGE MISSING</slot>\n            </li>\n            <li>\n                <slot name=\"person-occupation\">OCCUPATION MISSING</slot>\n            </li>\n        </ul>\n    </div>\n</template>\n\n\n<script>\n    customElements.define('person-details',\n        class extends HTMLElement {\n            constructor() {\n                super();\n                let template = document.getElementById('person-template');\n                let templateContent = template.content;\n\n                const shadowRoot = this.attachShadow({ mode: 'open' });\n\n                let style = document.createElement('style');\n                style.textContent = 'div { padding: 10px; border: 1px solid gray; width: 200px; margin: 10px; }' +\n                    'h2 { margin: 0 0 10px; }' +\n                    'ul { margin: 0; }' +\n                    'p { margin: 10px 0; }' +\n                    '::slotted(*) {font-weight:bold; color: gray; font-family: sans-serif; } ';\n\n                shadowRoot.appendChild(style);\n                shadowRoot.appendChild(templateContent.cloneNode(true));\n            }\n        })\n</script>\n```\n\n![image.png](../imgs/cf06032c734549a09510f6424aaa5b81.png)\n\n### element\n\n目前只有Firefox实现了。\n\n```css\n<div style=\"width:400px; height:400px; background:-moz-element(#myBackground1) no-repeat;\">\n  <p>This box uses the element with the #myBackground1 ID as its background!</p>\n</div>\n\n<div style=\"overflow:hidden; height:0;\">\n  <div id=\"myBackground1\" style=\"width:1024px; height:1024px; background-image: linear-gradient(to right, red, orange, yellow, white);\">\n  <p style=\"transform-origin:0 0; transform: rotate(45deg); color:white;\">This text is part of the background. Cool, huh?</p>\n  </div>\n</div>\n```\n\n![image.png](../imgs/2bb45eb7f59d40f381a2ad904fa739ea.png)\n\n### env\n\n将用户代理定义的环境变量值插入你的 CSS 中。\n\n最初由iOS浏览器提供，用于允许开发人员将其内容放置在视口的安全区域中，该规范中定义的`safe-area-inset-*` 值可用于确保内容即使在非矩形的视区中也可以完全显示。\n\n```css\nbody { padding: \n    env(safe-area-inset-top) \n    env(safe-area-inset-right) \n    env(safe-area-inset-bottom)\n    env(safe-area-inset-left); \n}\n```\n\n### counter 和 counters\n\ncounter可以获取代表计数器当前值的字符串，counters可以获取嵌套计数器的当前代表值。\n\n```css\nol {\n  counter-reset: listCounter;\n}\nli {\n  counter-increment: listCounter;\n}\nli::after {\n  content: \"[\" counter(listCounter) \"] == [\"\n               counter(listCounter, upper-roman) \"]\";\n}\n```\n\n![image.png](../imgs/6d8aa40eee8a404c894642e4c613d7ff.png)\n\n未来\n--\n\ncss的函数还在发展中，下面的特性有些有部分浏览器已经实现了，有些还在w3c讨论中。\n\n### `cross-fade()`\n\n可将多张图片以一定的透明度混合。这个函数新老语法已经不一致了。\n\n已经实现的老版语法的demo如下：\n\n```css\n.crossfade {\n    width: 300px;\n    height: 300px;\n    background-image: -webkit-cross-fade(\n        url('br.png'),\n        url('tr.png'),\n        75%);\n    background-image: cross-fade(\n        url('br.png'),\n        url('tr.png'),\n        75%);\n}\n```\n\n![image.png](../imgs/62e213d1a84048648ebc55b40cef1913.png)\n\n### `dir()`\n\n设置文字书写方向，只有Firefox实现了。\n\n### `has()`\n\n尚无浏览器实现\n\n```css\n/* 选择任何直接包含 <img> 子元素的 <a>  */\n/* 注意，目前还没有任何浏览器支持此方法 */\n/* 此伪类也未计划投入样式表中使用 */\nvar test = document.querySelector('a:has(> img)');\n```\n\n### 数学函数\n\n*   正弦： `sin()`\n*   余弦： `cos()`\n*   切线： `tan()`\n*   反余弦： `acos()`\n*   反正弦： `asin()`\n*   反正切： `atan()`\n*   反正切： `atan2()`\n*   平方根： `sqrt()`\n*   参数平方和的平方根： `hypot()`\n*   幂函数： `pow()`\n\n### `:host()` 和 `:host-context()`\n\n在shadow dom中使用\n\n```css\n/* \n    选择阴影根元素，仅当它与选择器参数匹配\n    如：<context-span class=\"footer\">Chris Mills</context-span> \n  */\n :host(.footer) {\n   font-weight: bold;\n }\n \n/*\n    选择了一个 shadow root host, 当且仅当这个\n shadow root host 是括号中选择器参数(h1)的后代 \n 如： <h1>Host selectors <a href=\"#\"><context-span>example</context-span></a></h1>\n */\n\n:host-context(h1) {\n  font-weight: bold;\n}\n```\n\n### `:nth-col()` 和 `:nth-last-col()`\n\n在网格布局中使用，定义某一/些列\n\n```css\n:nth-col(odd) {\n  background-color: pink;\n}\n```\n\n### `symbols()`\n\n定义计数器样式,只有Firefox实现了\n\n```css\nol {\n  list-style: symbols(cyclic \"*\" \"†\" \"‡\");\n}\n```","slug":"CSS函数大全（四）：杂项和未来","published":1,"updated":"2024-04-04T15:27:03.523Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhi0009hajfewjr5eq4","content":"<p>这是我参与11月更文挑战的第27天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<p>本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。</p>\n<h2 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h2><h3 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h3><p>最常用的函数之一，表示一个文件地址。可以是相对路径、绝对路径或base64，或者一个svg的id</p>\n<p>这个函数可用于<code>background</code>, <code>background-image</code>, <code>border</code>, <code>border-image</code>, <code>border-image-source</code>, <code>content</code>, <code>cursor</code>, <code>filter</code>, <code>list-style</code>, <code>list-style-image</code>, <code>mask</code>, <code>mask-image</code>, <code>offset-path</code>,@counter-style&#x2F;symbol和@font-face中的<code>src</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">offset-path: <span class=\"built_in\">url</span>(<span class=\"string\">#path</span>);</span><br><span class=\"line\"><span class=\"attribute\">mask-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;masks.svg#mask1&quot;</span>);</span><br><span class=\"line\"><span class=\"attribute\">cursor</span>: <span class=\"built_in\">url</span>(<span class=\"string\">pointer.cur</span>), pointer;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"attr\"><a href=\"#attr\" class=\"headerlink\" title=\"attr\"></a>attr</h3><p>用来获取选择到的元素的某一HTML属性值。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::after</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">content</span>: <span class=\"string\">&quot;----&quot;</span> <span class=\"built_in\">attr</span>(data-extra)</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-extra</span>=<span class=\"string\">&quot;lalalla&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/5a4ba5ff4494443f8dd7ec51077522b7.png\" alt=\"image.png\"></p>\n<p>注意：</p>\n<ul>\n<li><code>attr()</code> 理论上能用于所有的CSS属性，但目前支持的仅有伪元素的 <a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fcontent\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/content\"><code>content</code></a> 属性</li>\n<li>它的高级语法<code>attr( attribute-name &lt;type-or-unit&gt;? [, &lt;fallback&gt; ]? )</code>,目前也没有浏览器支持。</li>\n</ul>\n<h3 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h3><p>css变量变量</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">--size</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attr\">--color</span>: antiquewhite;</span><br><span class=\"line\">    <span class=\"attr\">--bg</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"built_in\">var</span>(--size);</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"built_in\">var</span>(--size);</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color);</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>:<span class=\"built_in\">var</span>(--bg) ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> id=&quot;container&quot;&gt;text&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/754b8961911e4a0e8aae1b9b7a77b4bd.png\" alt=\"image.png\"></p>\n<h3 id=\"自适应图片-image-set\"><a href=\"#自适应图片-image-set\" class=\"headerlink\" title=\"自适应图片 image-set()\"></a>自适应图片 <code>image-set()</code></h3><p>image-set()函数是一种让浏览器从给定集合中选择最合适的CSS图像的方法。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background-image: image-<span class=\"built_in\">set</span>( <span class=\"string\">&quot;cat.png&quot;</span> <span class=\"number\">1</span>x,<span class=\"string\">&quot;cat-2x.png&quot;</span> <span class=\"number\">2</span>x,<span class=\"string\">&quot;cat-print.png&quot;</span> <span class=\"number\">600</span>dpi);</span><br></pre></td></tr></table></figure>\n\n<p>在普通屏幕上会使用cat.png，在<strong>Retina</strong>屏幕上使用cat-2x.png，在更高分辨率的屏幕上使用cat-print.png。 关于响应式图片可以参考<a href=\"https://juejin.cn/post/7027807945903570957\" title=\"https://juejin.cn/post/7027807945903570957\">响应式图片</a></p>\n<h3 id=\"shadow-dom中的-slotted\"><a href=\"#shadow-dom中的-slotted\" class=\"headerlink\" title=\"shadow dom中的::slotted()\"></a>shadow dom中的<code>::slotted()</code></h3><p>这也是一个伪类，代表的是自定义元素传过来的slot：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;<span class=\"selector-tag\">span</span> slot=&quot;person-age&quot;&gt;Immortal&lt;/<span class=\"selector-tag\">span</span>&gt;</span><br><span class=\"line\"><span class=\"selector-pseudo\">::slotted</span>(<span class=\"selector-tag\">span</span>) &#123;<span class=\"attribute\">font-weight</span>:bold; <span class=\"attribute\">color</span>: gray; <span class=\"attribute\">font-family</span>: sans-serif; &#125; </span><br></pre></td></tr></table></figure>\n\n<p>外部传过来的<code>span</code>元素会被应用该样式。</p>\n<p>完整demo：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">person-details</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;person-name&quot;</span>&gt;</span>Dr. Shazaam<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;person-age&quot;</span>&gt;</span>Immortal<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;person-occupation&quot;</span>&gt;</span>Superhero<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">person-details</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;person-template&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Personal ID Card<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;person-name&quot;</span>&gt;</span>NAME MISSING<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;person-age&quot;</span>&gt;</span>AGE MISSING<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;person-occupation&quot;</span>&gt;</span>OCCUPATION MISSING<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;person-details&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">HTMLElement</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">super</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> template = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;person-template&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> templateContent = template.<span class=\"property\">content</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> shadowRoot = <span class=\"variable language_\">this</span>.<span class=\"title function_\">attachShadow</span>(&#123; <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;open&#x27;</span> &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> style = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;style&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                style.<span class=\"property\">textContent</span> = <span class=\"string\">&#x27;div &#123; padding: 10px; border: 1px solid gray; width: 200px; margin: 10px; &#125;&#x27;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;h2 &#123; margin: 0 0 10px; &#125;&#x27;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;ul &#123; margin: 0; &#125;&#x27;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;p &#123; margin: 10px 0; &#125;&#x27;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;::slotted(*) &#123;font-weight:bold; color: gray; font-family: sans-serif; &#125; &#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                shadowRoot.<span class=\"title function_\">appendChild</span>(style);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                shadowRoot.<span class=\"title function_\">appendChild</span>(templateContent.<span class=\"title function_\">cloneNode</span>(<span class=\"literal\">true</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/cf06032c734549a09510f6424aaa5b81.png\" alt=\"image.png\"></p>\n<h3 id=\"element\"><a href=\"#element\" class=\"headerlink\" title=\"element\"></a>element</h3><p>目前只有Firefox实现了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> style=&quot;<span class=\"attribute\">width</span>:<span class=\"number\">400px</span>; <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>; <span class=\"attribute\">background</span>:<span class=\"built_in\">-moz-element</span>(#myBackground1) no-repeat;&quot;&gt;</span><br><span class=\"line\">  &lt;<span class=\"selector-tag\">p</span>&gt;This box uses the element with the <span class=\"selector-id\">#myBackground1</span> ID as its <span class=\"attribute\">background</span>!&lt;/<span class=\"selector-tag\">p</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> style=&quot;<span class=\"attribute\">overflow</span>:hidden; <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;&quot;&gt;</span><br><span class=\"line\">  &lt;<span class=\"selector-tag\">div</span> id=&quot;myBackground1&quot; style=&quot;<span class=\"attribute\">width</span>:<span class=\"number\">1024px</span>; <span class=\"attribute\">height</span>:<span class=\"number\">1024px</span>; <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(to right, red, orange, yellow, white);&quot;&gt;</span><br><span class=\"line\">  &lt;<span class=\"selector-tag\">p</span> style=&quot;<span class=\"attribute\">transform-origin</span>:<span class=\"number\">0</span> <span class=\"number\">0</span>; <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>); <span class=\"attribute\">color</span>:white;&quot;&gt;This text is part of the <span class=\"attribute\">background</span>. Cool, huh?&lt;/<span class=\"selector-tag\">p</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/2bb45eb7f59d40f381a2ad904fa739ea.png\" alt=\"image.png\"></p>\n<h3 id=\"env\"><a href=\"#env\" class=\"headerlink\" title=\"env\"></a>env</h3><p>将用户代理定义的环境变量值插入你的 CSS 中。</p>\n<p>最初由iOS浏览器提供，用于允许开发人员将其内容放置在视口的安全区域中，该规范中定义的<code>safe-area-inset-*</code> 值可用于确保内容即使在非矩形的视区中也可以完全显示。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">padding</span>: </span><br><span class=\"line\">    <span class=\"built_in\">env</span>(safe-area-inset-top) </span><br><span class=\"line\">    <span class=\"built_in\">env</span>(safe-area-inset-right) </span><br><span class=\"line\">    <span class=\"built_in\">env</span>(safe-area-inset-bottom)</span><br><span class=\"line\">    <span class=\"built_in\">env</span>(safe-area-inset-left); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"counter-和-counters\"><a href=\"#counter-和-counters\" class=\"headerlink\" title=\"counter 和 counters\"></a>counter 和 counters</h3><p>counter可以获取代表计数器当前值的字符串，counters可以获取嵌套计数器的当前代表值。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ol</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-reset</span>: listCounter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-increment</span>: listCounter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;[&quot;</span> <span class=\"built_in\">counter</span>(listCounter) <span class=\"string\">&quot;] == [&quot;</span></span><br><span class=\"line\">               <span class=\"built_in\">counter</span>(listCounter, upper-roman) <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/6d8aa40eee8a404c894642e4c613d7ff.png\" alt=\"image.png\"></p>\n<h2 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h2><p>css的函数还在发展中，下面的特性有些有部分浏览器已经实现了，有些还在w3c讨论中。</p>\n<h3 id=\"cross-fade\"><a href=\"#cross-fade\" class=\"headerlink\" title=\"cross-fade()\"></a><code>cross-fade()</code></h3><p>可将多张图片以一定的透明度混合。这个函数新老语法已经不一致了。</p>\n<p>已经实现的老版语法的demo如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.crossfade</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">-webkit-cross-fade</span>(</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;br.png&#x27;</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;tr.png&#x27;</span>),</span><br><span class=\"line\">        <span class=\"number\">75%</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">cross-fade</span>(</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;br.png&#x27;</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;tr.png&#x27;</span>),</span><br><span class=\"line\">        <span class=\"number\">75%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/62e213d1a84048648ebc55b40cef1913.png\" alt=\"image.png\"></p>\n<h3 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"dir()\"></a><code>dir()</code></h3><p>设置文字书写方向，只有Firefox实现了。</p>\n<h3 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"has()\"></a><code>has()</code></h3><p>尚无浏览器实现</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 选择任何直接包含 &lt;img&gt; 子元素的 &lt;a&gt;  */</span></span><br><span class=\"line\"><span class=\"comment\">/* 注意，目前还没有任何浏览器支持此方法 */</span></span><br><span class=\"line\"><span class=\"comment\">/* 此伪类也未计划投入样式表中使用 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> test = document<span class=\"selector-class\">.querySelector</span>(&#x27;<span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:has</span>(&gt; <span class=\"selector-tag\">img</span>)&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数学函数\"><a href=\"#数学函数\" class=\"headerlink\" title=\"数学函数\"></a>数学函数</h3><ul>\n<li>正弦： <code>sin()</code></li>\n<li>余弦： <code>cos()</code></li>\n<li>切线： <code>tan()</code></li>\n<li>反余弦： <code>acos()</code></li>\n<li>反正弦： <code>asin()</code></li>\n<li>反正切： <code>atan()</code></li>\n<li>反正切： <code>atan2()</code></li>\n<li>平方根： <code>sqrt()</code></li>\n<li>参数平方和的平方根： <code>hypot()</code></li>\n<li>幂函数： <code>pow()</code></li>\n</ul>\n<h3 id=\"host-和-host-context\"><a href=\"#host-和-host-context\" class=\"headerlink\" title=\":host() 和 :host-context()\"></a><code>:host()</code> 和 <code>:host-context()</code></h3><p>在shadow dom中使用</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">    选择阴影根元素，仅当它与选择器参数匹配</span></span><br><span class=\"line\"><span class=\"comment\">    如：&lt;context-span class=&quot;footer&quot;&gt;Chris Mills&lt;/context-span&gt; </span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"selector-pseudo\">:host</span>(<span class=\"selector-class\">.footer</span>) &#123;</span><br><span class=\"line\">   <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    选择了一个 shadow root host, 当且仅当这个</span></span><br><span class=\"line\"><span class=\"comment\"> shadow root host 是括号中选择器参数(h1)的后代 </span></span><br><span class=\"line\"><span class=\"comment\"> 如： &lt;h1&gt;Host selectors &lt;a href=&quot;#&quot;&gt;&lt;context-span&gt;example&lt;/context-span&gt;&lt;/a&gt;&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:host</span>-context(<span class=\"selector-tag\">h1</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nth-col-和-nth-last-col\"><a href=\"#nth-col-和-nth-last-col\" class=\"headerlink\" title=\":nth-col() 和 :nth-last-col()\"></a><code>:nth-col()</code> 和 <code>:nth-last-col()</code></h3><p>在网格布局中使用，定义某一&#x2F;些列</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:nth-col</span>(odd) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"symbols\"><a href=\"#symbols\" class=\"headerlink\" title=\"symbols()\"></a><code>symbols()</code></h3><p>定义计数器样式,只有Firefox实现了</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ol</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-style</span>: <span class=\"built_in\">symbols</span>(cyclic <span class=\"string\">&quot;*&quot;</span> <span class=\"string\">&quot;†&quot;</span> <span class=\"string\">&quot;‡&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","length":5318,"excerpt":"","more":"<p>这是我参与11月更文挑战的第27天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<p>本系列目标是做一个css函数完全指南，将尽可能罗列css中所有的函数及其用法，当需要使用或者理解某个css函数的时候，只要来这里寻找就可以了。</p>\n<h2 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h2><h3 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h3><p>最常用的函数之一，表示一个文件地址。可以是相对路径、绝对路径或base64，或者一个svg的id</p>\n<p>这个函数可用于<code>background</code>, <code>background-image</code>, <code>border</code>, <code>border-image</code>, <code>border-image-source</code>, <code>content</code>, <code>cursor</code>, <code>filter</code>, <code>list-style</code>, <code>list-style-image</code>, <code>mask</code>, <code>mask-image</code>, <code>offset-path</code>,@counter-style&#x2F;symbol和@font-face中的<code>src</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">offset-path: <span class=\"built_in\">url</span>(<span class=\"string\">#path</span>);</span><br><span class=\"line\"><span class=\"attribute\">mask-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;masks.svg#mask1&quot;</span>);</span><br><span class=\"line\"><span class=\"attribute\">cursor</span>: <span class=\"built_in\">url</span>(<span class=\"string\">pointer.cur</span>), pointer;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"attr\"><a href=\"#attr\" class=\"headerlink\" title=\"attr\"></a>attr</h3><p>用来获取选择到的元素的某一HTML属性值。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::after</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">content</span>: <span class=\"string\">&quot;----&quot;</span> <span class=\"built_in\">attr</span>(data-extra)</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-extra</span>=<span class=\"string\">&quot;lalalla&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/5a4ba5ff4494443f8dd7ec51077522b7.png\" alt=\"image.png\"></p>\n<p>注意：</p>\n<ul>\n<li><code>attr()</code> 理论上能用于所有的CSS属性，但目前支持的仅有伪元素的 <a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2Fcontent\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/content\"><code>content</code></a> 属性</li>\n<li>它的高级语法<code>attr( attribute-name &lt;type-or-unit&gt;? [, &lt;fallback&gt; ]? )</code>,目前也没有浏览器支持。</li>\n</ul>\n<h3 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h3><p>css变量变量</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">--size</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attr\">--color</span>: antiquewhite;</span><br><span class=\"line\">    <span class=\"attr\">--bg</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"built_in\">var</span>(--size);</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"built_in\">var</span>(--size);</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color);</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>:<span class=\"built_in\">var</span>(--bg) ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> id=&quot;container&quot;&gt;text&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/754b8961911e4a0e8aae1b9b7a77b4bd.png\" alt=\"image.png\"></p>\n<h3 id=\"自适应图片-image-set\"><a href=\"#自适应图片-image-set\" class=\"headerlink\" title=\"自适应图片 image-set()\"></a>自适应图片 <code>image-set()</code></h3><p>image-set()函数是一种让浏览器从给定集合中选择最合适的CSS图像的方法。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background-image: image-<span class=\"built_in\">set</span>( <span class=\"string\">&quot;cat.png&quot;</span> <span class=\"number\">1</span>x,<span class=\"string\">&quot;cat-2x.png&quot;</span> <span class=\"number\">2</span>x,<span class=\"string\">&quot;cat-print.png&quot;</span> <span class=\"number\">600</span>dpi);</span><br></pre></td></tr></table></figure>\n\n<p>在普通屏幕上会使用cat.png，在<strong>Retina</strong>屏幕上使用cat-2x.png，在更高分辨率的屏幕上使用cat-print.png。 关于响应式图片可以参考<a href=\"https://juejin.cn/post/7027807945903570957\" title=\"https://juejin.cn/post/7027807945903570957\">响应式图片</a></p>\n<h3 id=\"shadow-dom中的-slotted\"><a href=\"#shadow-dom中的-slotted\" class=\"headerlink\" title=\"shadow dom中的::slotted()\"></a>shadow dom中的<code>::slotted()</code></h3><p>这也是一个伪类，代表的是自定义元素传过来的slot：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;<span class=\"selector-tag\">span</span> slot=&quot;person-age&quot;&gt;Immortal&lt;/<span class=\"selector-tag\">span</span>&gt;</span><br><span class=\"line\"><span class=\"selector-pseudo\">::slotted</span>(<span class=\"selector-tag\">span</span>) &#123;<span class=\"attribute\">font-weight</span>:bold; <span class=\"attribute\">color</span>: gray; <span class=\"attribute\">font-family</span>: sans-serif; &#125; </span><br></pre></td></tr></table></figure>\n\n<p>外部传过来的<code>span</code>元素会被应用该样式。</p>\n<p>完整demo：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">person-details</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;person-name&quot;</span>&gt;</span>Dr. Shazaam<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;person-age&quot;</span>&gt;</span>Immortal<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;person-occupation&quot;</span>&gt;</span>Superhero<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">person-details</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;person-template&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Personal ID Card<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;person-name&quot;</span>&gt;</span>NAME MISSING<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;person-age&quot;</span>&gt;</span>AGE MISSING<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;person-occupation&quot;</span>&gt;</span>OCCUPATION MISSING<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;person-details&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">HTMLElement</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">super</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> template = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;person-template&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> templateContent = template.<span class=\"property\">content</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> shadowRoot = <span class=\"variable language_\">this</span>.<span class=\"title function_\">attachShadow</span>(&#123; <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;open&#x27;</span> &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> style = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;style&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                style.<span class=\"property\">textContent</span> = <span class=\"string\">&#x27;div &#123; padding: 10px; border: 1px solid gray; width: 200px; margin: 10px; &#125;&#x27;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;h2 &#123; margin: 0 0 10px; &#125;&#x27;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;ul &#123; margin: 0; &#125;&#x27;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;p &#123; margin: 10px 0; &#125;&#x27;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;::slotted(*) &#123;font-weight:bold; color: gray; font-family: sans-serif; &#125; &#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                shadowRoot.<span class=\"title function_\">appendChild</span>(style);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                shadowRoot.<span class=\"title function_\">appendChild</span>(templateContent.<span class=\"title function_\">cloneNode</span>(<span class=\"literal\">true</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/cf06032c734549a09510f6424aaa5b81.png\" alt=\"image.png\"></p>\n<h3 id=\"element\"><a href=\"#element\" class=\"headerlink\" title=\"element\"></a>element</h3><p>目前只有Firefox实现了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> style=&quot;<span class=\"attribute\">width</span>:<span class=\"number\">400px</span>; <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>; <span class=\"attribute\">background</span>:<span class=\"built_in\">-moz-element</span>(#myBackground1) no-repeat;&quot;&gt;</span><br><span class=\"line\">  &lt;<span class=\"selector-tag\">p</span>&gt;This box uses the element with the <span class=\"selector-id\">#myBackground1</span> ID as its <span class=\"attribute\">background</span>!&lt;/<span class=\"selector-tag\">p</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> style=&quot;<span class=\"attribute\">overflow</span>:hidden; <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;&quot;&gt;</span><br><span class=\"line\">  &lt;<span class=\"selector-tag\">div</span> id=&quot;myBackground1&quot; style=&quot;<span class=\"attribute\">width</span>:<span class=\"number\">1024px</span>; <span class=\"attribute\">height</span>:<span class=\"number\">1024px</span>; <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(to right, red, orange, yellow, white);&quot;&gt;</span><br><span class=\"line\">  &lt;<span class=\"selector-tag\">p</span> style=&quot;<span class=\"attribute\">transform-origin</span>:<span class=\"number\">0</span> <span class=\"number\">0</span>; <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>); <span class=\"attribute\">color</span>:white;&quot;&gt;This text is part of the <span class=\"attribute\">background</span>. Cool, huh?&lt;/<span class=\"selector-tag\">p</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/2bb45eb7f59d40f381a2ad904fa739ea.png\" alt=\"image.png\"></p>\n<h3 id=\"env\"><a href=\"#env\" class=\"headerlink\" title=\"env\"></a>env</h3><p>将用户代理定义的环境变量值插入你的 CSS 中。</p>\n<p>最初由iOS浏览器提供，用于允许开发人员将其内容放置在视口的安全区域中，该规范中定义的<code>safe-area-inset-*</code> 值可用于确保内容即使在非矩形的视区中也可以完全显示。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">padding</span>: </span><br><span class=\"line\">    <span class=\"built_in\">env</span>(safe-area-inset-top) </span><br><span class=\"line\">    <span class=\"built_in\">env</span>(safe-area-inset-right) </span><br><span class=\"line\">    <span class=\"built_in\">env</span>(safe-area-inset-bottom)</span><br><span class=\"line\">    <span class=\"built_in\">env</span>(safe-area-inset-left); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"counter-和-counters\"><a href=\"#counter-和-counters\" class=\"headerlink\" title=\"counter 和 counters\"></a>counter 和 counters</h3><p>counter可以获取代表计数器当前值的字符串，counters可以获取嵌套计数器的当前代表值。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ol</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-reset</span>: listCounter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-increment</span>: listCounter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;[&quot;</span> <span class=\"built_in\">counter</span>(listCounter) <span class=\"string\">&quot;] == [&quot;</span></span><br><span class=\"line\">               <span class=\"built_in\">counter</span>(listCounter, upper-roman) <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/6d8aa40eee8a404c894642e4c613d7ff.png\" alt=\"image.png\"></p>\n<h2 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h2><p>css的函数还在发展中，下面的特性有些有部分浏览器已经实现了，有些还在w3c讨论中。</p>\n<h3 id=\"cross-fade\"><a href=\"#cross-fade\" class=\"headerlink\" title=\"cross-fade()\"></a><code>cross-fade()</code></h3><p>可将多张图片以一定的透明度混合。这个函数新老语法已经不一致了。</p>\n<p>已经实现的老版语法的demo如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.crossfade</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">-webkit-cross-fade</span>(</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;br.png&#x27;</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;tr.png&#x27;</span>),</span><br><span class=\"line\">        <span class=\"number\">75%</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">cross-fade</span>(</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;br.png&#x27;</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;tr.png&#x27;</span>),</span><br><span class=\"line\">        <span class=\"number\">75%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/62e213d1a84048648ebc55b40cef1913.png\" alt=\"image.png\"></p>\n<h3 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"dir()\"></a><code>dir()</code></h3><p>设置文字书写方向，只有Firefox实现了。</p>\n<h3 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"has()\"></a><code>has()</code></h3><p>尚无浏览器实现</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 选择任何直接包含 &lt;img&gt; 子元素的 &lt;a&gt;  */</span></span><br><span class=\"line\"><span class=\"comment\">/* 注意，目前还没有任何浏览器支持此方法 */</span></span><br><span class=\"line\"><span class=\"comment\">/* 此伪类也未计划投入样式表中使用 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> test = document<span class=\"selector-class\">.querySelector</span>(&#x27;<span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:has</span>(&gt; <span class=\"selector-tag\">img</span>)&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数学函数\"><a href=\"#数学函数\" class=\"headerlink\" title=\"数学函数\"></a>数学函数</h3><ul>\n<li>正弦： <code>sin()</code></li>\n<li>余弦： <code>cos()</code></li>\n<li>切线： <code>tan()</code></li>\n<li>反余弦： <code>acos()</code></li>\n<li>反正弦： <code>asin()</code></li>\n<li>反正切： <code>atan()</code></li>\n<li>反正切： <code>atan2()</code></li>\n<li>平方根： <code>sqrt()</code></li>\n<li>参数平方和的平方根： <code>hypot()</code></li>\n<li>幂函数： <code>pow()</code></li>\n</ul>\n<h3 id=\"host-和-host-context\"><a href=\"#host-和-host-context\" class=\"headerlink\" title=\":host() 和 :host-context()\"></a><code>:host()</code> 和 <code>:host-context()</code></h3><p>在shadow dom中使用</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">    选择阴影根元素，仅当它与选择器参数匹配</span></span><br><span class=\"line\"><span class=\"comment\">    如：&lt;context-span class=&quot;footer&quot;&gt;Chris Mills&lt;/context-span&gt; </span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"selector-pseudo\">:host</span>(<span class=\"selector-class\">.footer</span>) &#123;</span><br><span class=\"line\">   <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    选择了一个 shadow root host, 当且仅当这个</span></span><br><span class=\"line\"><span class=\"comment\"> shadow root host 是括号中选择器参数(h1)的后代 </span></span><br><span class=\"line\"><span class=\"comment\"> 如： &lt;h1&gt;Host selectors &lt;a href=&quot;#&quot;&gt;&lt;context-span&gt;example&lt;/context-span&gt;&lt;/a&gt;&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:host</span>-context(<span class=\"selector-tag\">h1</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nth-col-和-nth-last-col\"><a href=\"#nth-col-和-nth-last-col\" class=\"headerlink\" title=\":nth-col() 和 :nth-last-col()\"></a><code>:nth-col()</code> 和 <code>:nth-last-col()</code></h3><p>在网格布局中使用，定义某一&#x2F;些列</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:nth-col</span>(odd) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"symbols\"><a href=\"#symbols\" class=\"headerlink\" title=\"symbols()\"></a><code>symbols()</code></h3><p>定义计数器样式,只有Firefox实现了</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ol</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-style</span>: <span class=\"built_in\">symbols</span>(cyclic <span class=\"string\">&quot;*&quot;</span> <span class=\"string\">&quot;†&quot;</span> <span class=\"string\">&quot;‡&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Mobx6核心源码解析（一）: 实现一个简易的observable和autorun","date":"2021-11-29T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第29天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n前言\n--\n\nMobx是一个高效的状态管理库，运用了透明的函数式响应响应编程，使状态管理更加简单且自由。关于Mobx的使用与React的集成可以参考[上篇文章](https://juejin.cn/post/7035543139179823118 \"https://juejin.cn/post/7035543139179823118\")。\n\n本文将开启Mobx v6的源码解读系列，介绍Mobx的原理并解析其核心源码。Mobx的原理并不复杂，但它的源码相当曲折（_不得不吐槽作者使用了太多命名相似的函数_）。\n\n因此作为系列的第一篇，本文将通过实现一个简易的观察-反应模型，阐述Mobx的核心原理，为后续梳理其源码逻辑做先行铺垫。\n\n观察-反应模型\n-------\n\nMobx是一个典型的观察-反应模型。这个模型可以理解为观察者模式，但是这个观察者模式的重点在于订阅，而这个模型的重点在于依赖收集。\n\n要理解Mobx，只要理解如何进行观察，以及如何确定依赖就能窥见其中最本质的原理。\n\n观察：实现observable\n---------------\n\n熟悉Vue或者ES6的同学都知道如何检测到一个普通对象的读取，无非是`Object.defineProperty`或者`Proxy`。借助其中一个api，便可以实现简单的`observable`方法。\n\n```js\nfunction observable(target) {\n    const _target = {...target}\n    let proxy = {};\n\n    Object.keys(target).forEach(key => {\n        Object.defineProperty(proxy, key, {\n            get() {\n                const value = _target[key]\n                console.log(`read ${key} = ${value}`)\n                return value\n            },\n            set(value) {\n                console.log(`set ${key} = ${value}`)\n                _target[key] = value;\n                return value;\n            }\n        })\n    })\n    return proxy;\n}\n```\n\n构造可观察对象,对它的每次读写都能够被log到。\n\n```js\nconst data = observable({ age: 10, name:'Zchary'})\ndata.age;// read age = 10\ndata.name; // read name = Zchary\ndata.age = 11; // set age = 11\ndata.age // read age = 11\n```\n\n那么接下来我们就要实现依赖收集了，目标就是提供一个`autorun`的api，能够将console.log替换为某个额外的函数执行。\n\n依赖收集与反应：从实现autorun开始\n--------------------\n\nautorun接收一个函数做参数，并且有个特性：它会立即执行参数fn。\n\n`autorun:(fn:Function)=>void;`\n\n当fn函数执行的时候，如果依赖到了某个`observable`，则必定会触发它的某个key的getter，而此时也就可以确定，`fn`依赖了`observable`的这个key。\n\n因此我们可以这么实现autorun：\n\n```js\n let watcher = null;\n function autorun(fn) {\n    watcher = fn;\n    fn()\n }       \n```\n\n并改造observable:\n\n```diff\n function observable(target) {\n            const _target = {...target}\n            let proxy = {};\n+            let subs = new Map();\n            \n            Object.keys(target).forEach(key => {\n                Object.defineProperty(proxy, key, {\n                    get() {\n+                         if(watcher) {\n+                            let watchers = subs.get(key);\n+                            if(!watchers) {\n+                                subs.set(key,new Set([watcher]))\n+                            } else {\n+                                watchers.add(watcher)\n+                            }\n+                        }\n                        const value = _target[key]\n-                        console.log(`read ${key} = ${value}`)\n                        return value\n                    },\n                    set(value) {\n-                        console.log(`set ${key} = ${value}`)\n                         _target[key] = value;\n+                        let watchers = subs.get(key);\n+                        if(watcher) {\n+                            watchers.forEach(watcher=>{\n+                                watcher()\n+                            })\n+                        }\n                        return value;\n                    }\n                })\n            })\n            return proxy;\n        }\n```\n\n当`autorun`执行`fn`的时候，设置全局变量`watcher`为该`fn`,之后触发的getter里，则将这个`watcher`作为它的观察者，并在setter中执行它的所有观察者函数。\n\n我们再次执行如下代码：\n\n```js\n    const data = observable({ age: 10, name: 'Zchary' })\n    autorun(() => { console.log(`autorun: ${data.name} is ${data.age} years old`) })\n    for (let i = 0; i < 5; i++) {\n        setTimeout(() => {\n            data.age ++;\n        }, 1000 * (i+1))\n    }\n```\n\n输出如下：\n\n![image.png](../imgs/e390b931693b43798877d4879c10b445.png)\n\n总结\n--\n\n通过上述代码，我们简单模拟了Mobx两个核心api：`observable`和`autorun`，实现了数据观察和依赖收集，理解这一点，便理解了Mobx运行的底层逻辑。下一篇我们将正式进入它的源码。","source":"_posts/Mobx6核心源码解析（一）  实现一个简易的observable和autorun.md","raw":"---\n title: \"Mobx6核心源码解析（一）: 实现一个简易的observable和autorun\"\n date: 2021-11-30\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第29天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n前言\n--\n\nMobx是一个高效的状态管理库，运用了透明的函数式响应响应编程，使状态管理更加简单且自由。关于Mobx的使用与React的集成可以参考[上篇文章](https://juejin.cn/post/7035543139179823118 \"https://juejin.cn/post/7035543139179823118\")。\n\n本文将开启Mobx v6的源码解读系列，介绍Mobx的原理并解析其核心源码。Mobx的原理并不复杂，但它的源码相当曲折（_不得不吐槽作者使用了太多命名相似的函数_）。\n\n因此作为系列的第一篇，本文将通过实现一个简易的观察-反应模型，阐述Mobx的核心原理，为后续梳理其源码逻辑做先行铺垫。\n\n观察-反应模型\n-------\n\nMobx是一个典型的观察-反应模型。这个模型可以理解为观察者模式，但是这个观察者模式的重点在于订阅，而这个模型的重点在于依赖收集。\n\n要理解Mobx，只要理解如何进行观察，以及如何确定依赖就能窥见其中最本质的原理。\n\n观察：实现observable\n---------------\n\n熟悉Vue或者ES6的同学都知道如何检测到一个普通对象的读取，无非是`Object.defineProperty`或者`Proxy`。借助其中一个api，便可以实现简单的`observable`方法。\n\n```js\nfunction observable(target) {\n    const _target = {...target}\n    let proxy = {};\n\n    Object.keys(target).forEach(key => {\n        Object.defineProperty(proxy, key, {\n            get() {\n                const value = _target[key]\n                console.log(`read ${key} = ${value}`)\n                return value\n            },\n            set(value) {\n                console.log(`set ${key} = ${value}`)\n                _target[key] = value;\n                return value;\n            }\n        })\n    })\n    return proxy;\n}\n```\n\n构造可观察对象,对它的每次读写都能够被log到。\n\n```js\nconst data = observable({ age: 10, name:'Zchary'})\ndata.age;// read age = 10\ndata.name; // read name = Zchary\ndata.age = 11; // set age = 11\ndata.age // read age = 11\n```\n\n那么接下来我们就要实现依赖收集了，目标就是提供一个`autorun`的api，能够将console.log替换为某个额外的函数执行。\n\n依赖收集与反应：从实现autorun开始\n--------------------\n\nautorun接收一个函数做参数，并且有个特性：它会立即执行参数fn。\n\n`autorun:(fn:Function)=>void;`\n\n当fn函数执行的时候，如果依赖到了某个`observable`，则必定会触发它的某个key的getter，而此时也就可以确定，`fn`依赖了`observable`的这个key。\n\n因此我们可以这么实现autorun：\n\n```js\n let watcher = null;\n function autorun(fn) {\n    watcher = fn;\n    fn()\n }       \n```\n\n并改造observable:\n\n```diff\n function observable(target) {\n            const _target = {...target}\n            let proxy = {};\n+            let subs = new Map();\n            \n            Object.keys(target).forEach(key => {\n                Object.defineProperty(proxy, key, {\n                    get() {\n+                         if(watcher) {\n+                            let watchers = subs.get(key);\n+                            if(!watchers) {\n+                                subs.set(key,new Set([watcher]))\n+                            } else {\n+                                watchers.add(watcher)\n+                            }\n+                        }\n                        const value = _target[key]\n-                        console.log(`read ${key} = ${value}`)\n                        return value\n                    },\n                    set(value) {\n-                        console.log(`set ${key} = ${value}`)\n                         _target[key] = value;\n+                        let watchers = subs.get(key);\n+                        if(watcher) {\n+                            watchers.forEach(watcher=>{\n+                                watcher()\n+                            })\n+                        }\n                        return value;\n                    }\n                })\n            })\n            return proxy;\n        }\n```\n\n当`autorun`执行`fn`的时候，设置全局变量`watcher`为该`fn`,之后触发的getter里，则将这个`watcher`作为它的观察者，并在setter中执行它的所有观察者函数。\n\n我们再次执行如下代码：\n\n```js\n    const data = observable({ age: 10, name: 'Zchary' })\n    autorun(() => { console.log(`autorun: ${data.name} is ${data.age} years old`) })\n    for (let i = 0; i < 5; i++) {\n        setTimeout(() => {\n            data.age ++;\n        }, 1000 * (i+1))\n    }\n```\n\n输出如下：\n\n![image.png](../imgs/e390b931693b43798877d4879c10b445.png)\n\n总结\n--\n\n通过上述代码，我们简单模拟了Mobx两个核心api：`observable`和`autorun`，实现了数据观察和依赖收集，理解这一点，便理解了Mobx运行的底层逻辑。下一篇我们将正式进入它的源码。","slug":"Mobx6核心源码解析（一）  实现一个简易的observable和autorun","published":1,"updated":"2024-04-04T15:27:03.577Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhi000chajffnc62aay","content":"<p>这是我参与11月更文挑战的第29天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Mobx是一个高效的状态管理库，运用了透明的函数式响应响应编程，使状态管理更加简单且自由。关于Mobx的使用与React的集成可以参考<a href=\"https://juejin.cn/post/7035543139179823118\" title=\"https://juejin.cn/post/7035543139179823118\">上篇文章</a>。</p>\n<p>本文将开启Mobx v6的源码解读系列，介绍Mobx的原理并解析其核心源码。Mobx的原理并不复杂，但它的源码相当曲折（_不得不吐槽作者使用了太多命名相似的函数_）。</p>\n<p>因此作为系列的第一篇，本文将通过实现一个简易的观察-反应模型，阐述Mobx的核心原理，为后续梳理其源码逻辑做先行铺垫。</p>\n<h2 id=\"观察-反应模型\"><a href=\"#观察-反应模型\" class=\"headerlink\" title=\"观察-反应模型\"></a>观察-反应模型</h2><p>Mobx是一个典型的观察-反应模型。这个模型可以理解为观察者模式，但是这个观察者模式的重点在于订阅，而这个模型的重点在于依赖收集。</p>\n<p>要理解Mobx，只要理解如何进行观察，以及如何确定依赖就能窥见其中最本质的原理。</p>\n<h2 id=\"观察：实现observable\"><a href=\"#观察：实现observable\" class=\"headerlink\" title=\"观察：实现observable\"></a>观察：实现observable</h2><p>熟悉Vue或者ES6的同学都知道如何检测到一个普通对象的读取，无非是<code>Object.defineProperty</code>或者<code>Proxy</code>。借助其中一个api，便可以实现简单的<code>observable</code>方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">observable</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _target = &#123;...target&#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> proxy = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(target).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(proxy, key, &#123;</span><br><span class=\"line\">            <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> value = _target[key]</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`read <span class=\"subst\">$&#123;key&#125;</span> = <span class=\"subst\">$&#123;value&#125;</span>`</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`set <span class=\"subst\">$&#123;key&#125;</span> = <span class=\"subst\">$&#123;value&#125;</span>`</span>)</span><br><span class=\"line\">                _target[key] = value;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造可观察对象,对它的每次读写都能够被log到。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"title function_\">observable</span>(&#123; <span class=\"attr\">age</span>: <span class=\"number\">10</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Zchary&#x27;</span>&#125;)</span><br><span class=\"line\">data.<span class=\"property\">age</span>;<span class=\"comment\">// read age = 10</span></span><br><span class=\"line\">data.<span class=\"property\">name</span>; <span class=\"comment\">// read name = Zchary</span></span><br><span class=\"line\">data.<span class=\"property\">age</span> = <span class=\"number\">11</span>; <span class=\"comment\">// set age = 11</span></span><br><span class=\"line\">data.<span class=\"property\">age</span> <span class=\"comment\">// read age = 11</span></span><br></pre></td></tr></table></figure>\n\n<p>那么接下来我们就要实现依赖收集了，目标就是提供一个<code>autorun</code>的api，能够将console.log替换为某个额外的函数执行。</p>\n<h2 id=\"依赖收集与反应：从实现autorun开始\"><a href=\"#依赖收集与反应：从实现autorun开始\" class=\"headerlink\" title=\"依赖收集与反应：从实现autorun开始\"></a>依赖收集与反应：从实现autorun开始</h2><p>autorun接收一个函数做参数，并且有个特性：它会立即执行参数fn。</p>\n<p><code>autorun:(fn:Function)=&gt;void;</code></p>\n<p>当fn函数执行的时候，如果依赖到了某个<code>observable</code>，则必定会触发它的某个key的getter，而此时也就可以确定，<code>fn</code>依赖了<code>observable</code>的这个key。</p>\n<p>因此我们可以这么实现autorun：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> watcher = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">autorun</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">   watcher = fn;</span><br><span class=\"line\">   <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">&#125;       </span><br></pre></td></tr></table></figure>\n\n<p>并改造observable:</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function observable(target) &#123;</span><br><span class=\"line\">            const _target = &#123;...target&#125;</span><br><span class=\"line\">            let proxy = &#123;&#125;;</span><br><span class=\"line\"><span class=\"addition\">+            let subs = new Map();</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            Object.keys(target).forEach(key =&gt; &#123;</span><br><span class=\"line\">                Object.defineProperty(proxy, key, &#123;</span><br><span class=\"line\">                    get() &#123;</span><br><span class=\"line\"><span class=\"addition\">+                         if(watcher) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                            let watchers = subs.get(key);</span></span><br><span class=\"line\"><span class=\"addition\">+                            if(!watchers) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                                subs.set(key,new Set([watcher]))</span></span><br><span class=\"line\"><span class=\"addition\">+                            &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                                watchers.add(watcher)</span></span><br><span class=\"line\"><span class=\"addition\">+                            &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+                        &#125;</span></span><br><span class=\"line\">                        const value = _target[key]</span><br><span class=\"line\"><span class=\"deletion\">-                        console.log(`read $&#123;key&#125; = $&#123;value&#125;`)</span></span><br><span class=\"line\">                        return value</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    set(value) &#123;</span><br><span class=\"line\"><span class=\"deletion\">-                        console.log(`set $&#123;key&#125; = $&#123;value&#125;`)</span></span><br><span class=\"line\">                         _target[key] = value;</span><br><span class=\"line\"><span class=\"addition\">+                        let watchers = subs.get(key);</span></span><br><span class=\"line\"><span class=\"addition\">+                        if(watcher) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                            watchers.forEach(watcher=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                                watcher()</span></span><br><span class=\"line\"><span class=\"addition\">+                            &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+                        &#125;</span></span><br><span class=\"line\">                        return value;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            return proxy;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>当<code>autorun</code>执行<code>fn</code>的时候，设置全局变量<code>watcher</code>为该<code>fn</code>,之后触发的getter里，则将这个<code>watcher</code>作为它的观察者，并在setter中执行它的所有观察者函数。</p>\n<p>我们再次执行如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"title function_\">observable</span>(&#123; <span class=\"attr\">age</span>: <span class=\"number\">10</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Zchary&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"title function_\">autorun</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`autorun: <span class=\"subst\">$&#123;data.name&#125;</span> is <span class=\"subst\">$&#123;data.age&#125;</span> years old`</span>) &#125;)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        data.<span class=\"property\">age</span> ++;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出如下：</p>\n<p><img src=\"/../imgs/e390b931693b43798877d4879c10b445.png\" alt=\"image.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过上述代码，我们简单模拟了Mobx两个核心api：<code>observable</code>和<code>autorun</code>，实现了数据观察和依赖收集，理解这一点，便理解了Mobx运行的底层逻辑。下一篇我们将正式进入它的源码。</p>\n","length":2643,"excerpt":"","more":"<p>这是我参与11月更文挑战的第29天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Mobx是一个高效的状态管理库，运用了透明的函数式响应响应编程，使状态管理更加简单且自由。关于Mobx的使用与React的集成可以参考<a href=\"https://juejin.cn/post/7035543139179823118\" title=\"https://juejin.cn/post/7035543139179823118\">上篇文章</a>。</p>\n<p>本文将开启Mobx v6的源码解读系列，介绍Mobx的原理并解析其核心源码。Mobx的原理并不复杂，但它的源码相当曲折（_不得不吐槽作者使用了太多命名相似的函数_）。</p>\n<p>因此作为系列的第一篇，本文将通过实现一个简易的观察-反应模型，阐述Mobx的核心原理，为后续梳理其源码逻辑做先行铺垫。</p>\n<h2 id=\"观察-反应模型\"><a href=\"#观察-反应模型\" class=\"headerlink\" title=\"观察-反应模型\"></a>观察-反应模型</h2><p>Mobx是一个典型的观察-反应模型。这个模型可以理解为观察者模式，但是这个观察者模式的重点在于订阅，而这个模型的重点在于依赖收集。</p>\n<p>要理解Mobx，只要理解如何进行观察，以及如何确定依赖就能窥见其中最本质的原理。</p>\n<h2 id=\"观察：实现observable\"><a href=\"#观察：实现observable\" class=\"headerlink\" title=\"观察：实现observable\"></a>观察：实现observable</h2><p>熟悉Vue或者ES6的同学都知道如何检测到一个普通对象的读取，无非是<code>Object.defineProperty</code>或者<code>Proxy</code>。借助其中一个api，便可以实现简单的<code>observable</code>方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">observable</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _target = &#123;...target&#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> proxy = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(target).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(proxy, key, &#123;</span><br><span class=\"line\">            <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> value = _target[key]</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`read <span class=\"subst\">$&#123;key&#125;</span> = <span class=\"subst\">$&#123;value&#125;</span>`</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`set <span class=\"subst\">$&#123;key&#125;</span> = <span class=\"subst\">$&#123;value&#125;</span>`</span>)</span><br><span class=\"line\">                _target[key] = value;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造可观察对象,对它的每次读写都能够被log到。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"title function_\">observable</span>(&#123; <span class=\"attr\">age</span>: <span class=\"number\">10</span>, <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Zchary&#x27;</span>&#125;)</span><br><span class=\"line\">data.<span class=\"property\">age</span>;<span class=\"comment\">// read age = 10</span></span><br><span class=\"line\">data.<span class=\"property\">name</span>; <span class=\"comment\">// read name = Zchary</span></span><br><span class=\"line\">data.<span class=\"property\">age</span> = <span class=\"number\">11</span>; <span class=\"comment\">// set age = 11</span></span><br><span class=\"line\">data.<span class=\"property\">age</span> <span class=\"comment\">// read age = 11</span></span><br></pre></td></tr></table></figure>\n\n<p>那么接下来我们就要实现依赖收集了，目标就是提供一个<code>autorun</code>的api，能够将console.log替换为某个额外的函数执行。</p>\n<h2 id=\"依赖收集与反应：从实现autorun开始\"><a href=\"#依赖收集与反应：从实现autorun开始\" class=\"headerlink\" title=\"依赖收集与反应：从实现autorun开始\"></a>依赖收集与反应：从实现autorun开始</h2><p>autorun接收一个函数做参数，并且有个特性：它会立即执行参数fn。</p>\n<p><code>autorun:(fn:Function)=&gt;void;</code></p>\n<p>当fn函数执行的时候，如果依赖到了某个<code>observable</code>，则必定会触发它的某个key的getter，而此时也就可以确定，<code>fn</code>依赖了<code>observable</code>的这个key。</p>\n<p>因此我们可以这么实现autorun：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> watcher = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">autorun</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">   watcher = fn;</span><br><span class=\"line\">   <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">&#125;       </span><br></pre></td></tr></table></figure>\n\n<p>并改造observable:</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function observable(target) &#123;</span><br><span class=\"line\">            const _target = &#123;...target&#125;</span><br><span class=\"line\">            let proxy = &#123;&#125;;</span><br><span class=\"line\"><span class=\"addition\">+            let subs = new Map();</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            Object.keys(target).forEach(key =&gt; &#123;</span><br><span class=\"line\">                Object.defineProperty(proxy, key, &#123;</span><br><span class=\"line\">                    get() &#123;</span><br><span class=\"line\"><span class=\"addition\">+                         if(watcher) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                            let watchers = subs.get(key);</span></span><br><span class=\"line\"><span class=\"addition\">+                            if(!watchers) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                                subs.set(key,new Set([watcher]))</span></span><br><span class=\"line\"><span class=\"addition\">+                            &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                                watchers.add(watcher)</span></span><br><span class=\"line\"><span class=\"addition\">+                            &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+                        &#125;</span></span><br><span class=\"line\">                        const value = _target[key]</span><br><span class=\"line\"><span class=\"deletion\">-                        console.log(`read $&#123;key&#125; = $&#123;value&#125;`)</span></span><br><span class=\"line\">                        return value</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    set(value) &#123;</span><br><span class=\"line\"><span class=\"deletion\">-                        console.log(`set $&#123;key&#125; = $&#123;value&#125;`)</span></span><br><span class=\"line\">                         _target[key] = value;</span><br><span class=\"line\"><span class=\"addition\">+                        let watchers = subs.get(key);</span></span><br><span class=\"line\"><span class=\"addition\">+                        if(watcher) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                            watchers.forEach(watcher=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                                watcher()</span></span><br><span class=\"line\"><span class=\"addition\">+                            &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+                        &#125;</span></span><br><span class=\"line\">                        return value;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            return proxy;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>当<code>autorun</code>执行<code>fn</code>的时候，设置全局变量<code>watcher</code>为该<code>fn</code>,之后触发的getter里，则将这个<code>watcher</code>作为它的观察者，并在setter中执行它的所有观察者函数。</p>\n<p>我们再次执行如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"title function_\">observable</span>(&#123; <span class=\"attr\">age</span>: <span class=\"number\">10</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Zchary&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"title function_\">autorun</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`autorun: <span class=\"subst\">$&#123;data.name&#125;</span> is <span class=\"subst\">$&#123;data.age&#125;</span> years old`</span>) &#125;)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        data.<span class=\"property\">age</span> ++;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出如下：</p>\n<p><img src=\"/../imgs/e390b931693b43798877d4879c10b445.png\" alt=\"image.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过上述代码，我们简单模拟了Mobx两个核心api：<code>observable</code>和<code>autorun</code>，实现了数据观察和依赖收集，理解这一点，便理解了Mobx运行的底层逻辑。下一篇我们将正式进入它的源码。</p>\n"},{"title":"Mobx6核心源码解析（三）: ObservableObjectAdministration","date":"2021-12-02T16:00:00.000Z","_content":"\n![image.png](../imgs/2b9ca4a010e54d8ca142e68c9eb2f26b.png) 上一篇探究了`observable`方法内部的执行机制，讲到`adm.extend_( key, descriptor[key as any],true)`将target与obj对象关联了起来。本文将从这里继续，解析`adm`的class`ObservableObjectAdministration`。\n\n```ini\nlet target = observable(obj)\n```\n\nObservableObjectAdministration\n------------------------------\n\n`ObservableObjectAdministration`作用是管理target的属性的读取。它在Mobx的世界里处于leader地位，这一点从它的`Administration`的命名也可以看出来。\n\n*   \\_extend `ObservableObjectAdministration`实例的\\_extend,经过了相当_fuck_的过程后，调用了实例的`defineObservableProperty_`方法：\n*   defineObservableProperty\\_\n\n```ts\n defineObservableProperty_(\n        key: PropertyKey,\n        value: any,\n        enhancer: IEnhancer<any>,\n        proxyTrap: boolean = false\n    ): boolean | null {\n        try {\n            startBatch()\n\n            // Delete\n            const deleteOutcome = this.delete_(key)\n            if (!deleteOutcome) {\n                // Failure or intercepted\n                return deleteOutcome\n            }\n\n            // ADD interceptor\n            if (hasInterceptors(this)) {\n                const change = interceptChange<IObjectWillChange>(this, {\n                    object: this.proxy_ || this.target_,\n                    name: key,\n                    type: ADD,\n                    newValue: value\n                })\n                if (!change) return null\n                value = (change as any).newValue\n            }\n\n            const cachedDescriptor = getCachedObservablePropDescriptor(key)\n            const descriptor = {\n                configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n                enumerable: true,\n                get: cachedDescriptor.get,\n                set: cachedDescriptor.set\n            }\n\n            // Define\n            if (proxyTrap) {\n                if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n                    return false\n                }\n            } else {\n                defineProperty(this.target_, key, descriptor)\n            }\n\n            const observable = new ObservableValue(\n                value,\n                enhancer,\n                __DEV__ ? `${this.name_}.${key.toString()}` : \"ObservableObject.key\",\n                false\n            )\n\n            this.values_.set(key, observable)\n\n            // Notify (value possibly changed by ObservableValue)\n            this.notifyPropertyAddition_(key, observable.value_)\n        } finally {\n            endBatch()\n        }\n        return true\n    }\n```\n\n这里终于看到了`defineProperty(this.target_, key, descriptor)`的字眼，意味着target对象的key的descriptor在这里被设置完成了。但是这个descriptor是来自于`getCachedObservablePropDescriptor`的，并且和obj对象的descriptor一点关系都没有，getter和setter也都来自于实例\n\n```ts\n{\n    get() {\n        return this[$mobx].getObservablePropValue_(key)\n    },\n    set(value) {\n        return this[$mobx].setObservablePropValue_(key, value)\n    }\n}\n```\n\n在介绍`getObservablePropValue_`和`setObservablePropValue_之前`，需要先介绍另一个嘉宾`values_`\n\n*   values\\_ values\\_是一个Map，key对应的是obj的属性，value是`ObservableValue`实例，这个实例保存了obj对应key的descriptor.\n\n```ts\n  public values_ = new Map<PropertyKey, ObservableValue<any> | ComputedValue<any>>(),\n  defineObservableProperty_(){\n      ...\n      const observable = new ObservableValue(value,enhancer, \"ObservableObject.key\",false)\n      this.values_.set(key, observable)\n      ...\n  }\n```\n\n*   getObservablePropValue\\_ 这是target真正的getter，它是从`ObservableValue`实例中获取值。\n\n```ts\n getObservablePropValue_(key: PropertyKey): any {\n    return this.values_.get(key)!.get()\n}\n```\n\n*   setObservablePropValue\\_ 这是target真正的setter，简化后可以看到这个这里还是通过`ObservableValue`实例进行新值的设置\n\n```ts\nsetObservablePropValue_(key: PropertyKey, newValue): boolean | null {\n    const observable = this.values_.get(key)\n    if (observable instanceof ComputedValue) {\n        observable.set(newValue)\n        return true\n    }\n    ...\n    newValue = (observable as any).prepareNewValue_(newValue)\n\n    // notify spy & observers\n    if (newValue !== globalState.UNCHANGED) {\n        const notify = hasListeners(this)\n        ;(observable as ObservableValue<any>).setNewValue_(newValue)\n        if (notify) notifyListeners(this, change)\n        \n    }\n    return true\n}\n```\n\n未完待续\n----\n\n这里我们又遇到了一个class:`ObservableValue`，似乎target的读与改都离不了它。虽然官网有关`ObservableValue`的文字很少，但它的父类是大名鼎鼎的`Atom`，下一篇将详细分析`ObservableValue`在Mobx世界中究竟扮演着什么样的角色，敬请期待~","source":"_posts/Mobx6核心源码解析（三）  ObservableObjectAdministration.md","raw":"---\n title: \"Mobx6核心源码解析（三）: ObservableObjectAdministration\"\n date: 2021-12-03\n tags: [前端]\n categories: [前端笔记]\n---\n\n![image.png](../imgs/2b9ca4a010e54d8ca142e68c9eb2f26b.png) 上一篇探究了`observable`方法内部的执行机制，讲到`adm.extend_( key, descriptor[key as any],true)`将target与obj对象关联了起来。本文将从这里继续，解析`adm`的class`ObservableObjectAdministration`。\n\n```ini\nlet target = observable(obj)\n```\n\nObservableObjectAdministration\n------------------------------\n\n`ObservableObjectAdministration`作用是管理target的属性的读取。它在Mobx的世界里处于leader地位，这一点从它的`Administration`的命名也可以看出来。\n\n*   \\_extend `ObservableObjectAdministration`实例的\\_extend,经过了相当_fuck_的过程后，调用了实例的`defineObservableProperty_`方法：\n*   defineObservableProperty\\_\n\n```ts\n defineObservableProperty_(\n        key: PropertyKey,\n        value: any,\n        enhancer: IEnhancer<any>,\n        proxyTrap: boolean = false\n    ): boolean | null {\n        try {\n            startBatch()\n\n            // Delete\n            const deleteOutcome = this.delete_(key)\n            if (!deleteOutcome) {\n                // Failure or intercepted\n                return deleteOutcome\n            }\n\n            // ADD interceptor\n            if (hasInterceptors(this)) {\n                const change = interceptChange<IObjectWillChange>(this, {\n                    object: this.proxy_ || this.target_,\n                    name: key,\n                    type: ADD,\n                    newValue: value\n                })\n                if (!change) return null\n                value = (change as any).newValue\n            }\n\n            const cachedDescriptor = getCachedObservablePropDescriptor(key)\n            const descriptor = {\n                configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n                enumerable: true,\n                get: cachedDescriptor.get,\n                set: cachedDescriptor.set\n            }\n\n            // Define\n            if (proxyTrap) {\n                if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n                    return false\n                }\n            } else {\n                defineProperty(this.target_, key, descriptor)\n            }\n\n            const observable = new ObservableValue(\n                value,\n                enhancer,\n                __DEV__ ? `${this.name_}.${key.toString()}` : \"ObservableObject.key\",\n                false\n            )\n\n            this.values_.set(key, observable)\n\n            // Notify (value possibly changed by ObservableValue)\n            this.notifyPropertyAddition_(key, observable.value_)\n        } finally {\n            endBatch()\n        }\n        return true\n    }\n```\n\n这里终于看到了`defineProperty(this.target_, key, descriptor)`的字眼，意味着target对象的key的descriptor在这里被设置完成了。但是这个descriptor是来自于`getCachedObservablePropDescriptor`的，并且和obj对象的descriptor一点关系都没有，getter和setter也都来自于实例\n\n```ts\n{\n    get() {\n        return this[$mobx].getObservablePropValue_(key)\n    },\n    set(value) {\n        return this[$mobx].setObservablePropValue_(key, value)\n    }\n}\n```\n\n在介绍`getObservablePropValue_`和`setObservablePropValue_之前`，需要先介绍另一个嘉宾`values_`\n\n*   values\\_ values\\_是一个Map，key对应的是obj的属性，value是`ObservableValue`实例，这个实例保存了obj对应key的descriptor.\n\n```ts\n  public values_ = new Map<PropertyKey, ObservableValue<any> | ComputedValue<any>>(),\n  defineObservableProperty_(){\n      ...\n      const observable = new ObservableValue(value,enhancer, \"ObservableObject.key\",false)\n      this.values_.set(key, observable)\n      ...\n  }\n```\n\n*   getObservablePropValue\\_ 这是target真正的getter，它是从`ObservableValue`实例中获取值。\n\n```ts\n getObservablePropValue_(key: PropertyKey): any {\n    return this.values_.get(key)!.get()\n}\n```\n\n*   setObservablePropValue\\_ 这是target真正的setter，简化后可以看到这个这里还是通过`ObservableValue`实例进行新值的设置\n\n```ts\nsetObservablePropValue_(key: PropertyKey, newValue): boolean | null {\n    const observable = this.values_.get(key)\n    if (observable instanceof ComputedValue) {\n        observable.set(newValue)\n        return true\n    }\n    ...\n    newValue = (observable as any).prepareNewValue_(newValue)\n\n    // notify spy & observers\n    if (newValue !== globalState.UNCHANGED) {\n        const notify = hasListeners(this)\n        ;(observable as ObservableValue<any>).setNewValue_(newValue)\n        if (notify) notifyListeners(this, change)\n        \n    }\n    return true\n}\n```\n\n未完待续\n----\n\n这里我们又遇到了一个class:`ObservableValue`，似乎target的读与改都离不了它。虽然官网有关`ObservableValue`的文字很少，但它的父类是大名鼎鼎的`Atom`，下一篇将详细分析`ObservableValue`在Mobx世界中究竟扮演着什么样的角色，敬请期待~","slug":"Mobx6核心源码解析（三）  ObservableObjectAdministration","published":1,"updated":"2024-04-04T15:27:03.554Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhj000dhajf6985f7x3","content":"<p><img src=\"/../imgs/2b9ca4a010e54d8ca142e68c9eb2f26b.png\" alt=\"image.png\"> 上一篇探究了<code>observable</code>方法内部的执行机制，讲到<code>adm.extend_( key, descriptor[key as any],true)</code>将target与obj对象关联了起来。本文将从这里继续，解析<code>adm</code>的class<code>ObservableObjectAdministration</code>。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let <span class=\"attr\">target</span> = observable(obj)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ObservableObjectAdministration\"><a href=\"#ObservableObjectAdministration\" class=\"headerlink\" title=\"ObservableObjectAdministration\"></a>ObservableObjectAdministration</h2><p><code>ObservableObjectAdministration</code>作用是管理target的属性的读取。它在Mobx的世界里处于leader地位，这一点从它的<code>Administration</code>的命名也可以看出来。</p>\n<ul>\n<li>_extend <code>ObservableObjectAdministration</code>实例的_extend,经过了相当_fuck_的过程后，调用了实例的<code>defineObservableProperty_</code>方法：</li>\n<li>defineObservableProperty_</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">defineObservableProperty_</span>(</span><br><span class=\"line\">       <span class=\"attr\">key</span>: <span class=\"title class_\">PropertyKey</span>,</span><br><span class=\"line\">       <span class=\"attr\">value</span>: <span class=\"built_in\">any</span>,</span><br><span class=\"line\">       <span class=\"attr\">enhancer</span>: <span class=\"title class_\">IEnhancer</span>&lt;<span class=\"built_in\">any</span>&gt;,</span><br><span class=\"line\">       <span class=\"attr\">proxyTrap</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">   ): <span class=\"built_in\">boolean</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"title function_\">startBatch</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Delete</span></span><br><span class=\"line\">           <span class=\"keyword\">const</span> deleteOutcome = <span class=\"variable language_\">this</span>.<span class=\"title function_\">delete_</span>(key)</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!deleteOutcome) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Failure or intercepted</span></span><br><span class=\"line\">               <span class=\"keyword\">return</span> deleteOutcome</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// ADD interceptor</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"title function_\">hasInterceptors</span>(<span class=\"variable language_\">this</span>)) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">const</span> change = interceptChange&lt;<span class=\"title class_\">IObjectWillChange</span>&gt;(<span class=\"variable language_\">this</span>, &#123;</span><br><span class=\"line\">                   <span class=\"attr\">object</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">proxy_</span> || <span class=\"variable language_\">this</span>.<span class=\"property\">target_</span>,</span><br><span class=\"line\">                   <span class=\"attr\">name</span>: key,</span><br><span class=\"line\">                   <span class=\"attr\">type</span>: <span class=\"variable constant_\">ADD</span>,</span><br><span class=\"line\">                   <span class=\"attr\">newValue</span>: value</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (!change) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">               value = (change <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">newValue</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">const</span> cachedDescriptor = <span class=\"title function_\">getCachedObservablePropDescriptor</span>(key)</span><br><span class=\"line\">           <span class=\"keyword\">const</span> descriptor = &#123;</span><br><span class=\"line\">               <span class=\"attr\">configurable</span>: globalState.<span class=\"property\">safeDescriptors</span> ? <span class=\"variable language_\">this</span>.<span class=\"property\">isPlainObject_</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">               <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">               <span class=\"attr\">get</span>: cachedDescriptor.<span class=\"property\">get</span>,</span><br><span class=\"line\">               <span class=\"attr\">set</span>: cachedDescriptor.<span class=\"property\">set</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Define</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (proxyTrap) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (!<span class=\"title class_\">Reflect</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">target_</span>, key, descriptor)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"title function_\">defineProperty</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">target_</span>, key, descriptor)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> <span class=\"title class_\">ObservableValue</span>(</span><br><span class=\"line\">               value,</span><br><span class=\"line\">               enhancer,</span><br><span class=\"line\">               __DEV__ ? <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name_&#125;</span>.<span class=\"subst\">$&#123;key.toString()&#125;</span>`</span> : <span class=\"string\">&quot;ObservableObject.key&quot;</span>,</span><br><span class=\"line\">               <span class=\"literal\">false</span></span><br><span class=\"line\">           )</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">values_</span>.<span class=\"title function_\">set</span>(key, observable)</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Notify (value possibly changed by ObservableValue)</span></span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"title function_\">notifyPropertyAddition_</span>(key, observable.<span class=\"property\">value_</span>)</span><br><span class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">           <span class=\"title function_\">endBatch</span>()</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里终于看到了<code>defineProperty(this.target_, key, descriptor)</code>的字眼，意味着target对象的key的descriptor在这里被设置完成了。但是这个descriptor是来自于<code>getCachedObservablePropDescriptor</code>的，并且和obj对象的descriptor一点关系都没有，getter和setter也都来自于实例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>[$mobx].<span class=\"title function_\">getObservablePropValue_</span>(key)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>[$mobx].<span class=\"title function_\">setObservablePropValue_</span>(key, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在介绍<code>getObservablePropValue_</code>和<code>setObservablePropValue_之前</code>，需要先介绍另一个嘉宾<code>values_</code></p>\n<ul>\n<li>values_ values_是一个Map，key对应的是obj的属性，value是<code>ObservableValue</code>实例，这个实例保存了obj对应key的descriptor.</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> values_ = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"title class_\">PropertyKey</span>, <span class=\"title class_\">ObservableValue</span>&lt;<span class=\"built_in\">any</span>&gt; | <span class=\"title class_\">ComputedValue</span>&lt;<span class=\"built_in\">any</span>&gt;&gt;(),</span><br><span class=\"line\"><span class=\"title function_\">defineObservableProperty_</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> <span class=\"title class_\">ObservableValue</span>(value,enhancer, <span class=\"string\">&quot;ObservableObject.key&quot;</span>,<span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">values_</span>.<span class=\"title function_\">set</span>(key, observable)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>getObservablePropValue_ 这是target真正的getter，它是从<code>ObservableValue</code>实例中获取值。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"title function_\">getObservablePropValue_</span>(<span class=\"attr\">key</span>: <span class=\"title class_\">PropertyKey</span>): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">values_</span>.<span class=\"title function_\">get</span>(key)!.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>setObservablePropValue_ 这是target真正的setter，简化后可以看到这个这里还是通过<code>ObservableValue</code>实例进行新值的设置</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setObservablePropValue_</span>(<span class=\"attr\">key</span>: <span class=\"title class_\">PropertyKey</span>, newValue): <span class=\"built_in\">boolean</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> observable = <span class=\"variable language_\">this</span>.<span class=\"property\">values_</span>.<span class=\"title function_\">get</span>(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (observable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">ComputedValue</span>) &#123;</span><br><span class=\"line\">        observable.<span class=\"title function_\">set</span>(newValue)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    newValue = (observable <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"title function_\">prepareNewValue_</span>(newValue)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// notify spy &amp; observers</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newValue !== globalState.<span class=\"property\">UNCHANGED</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> notify = <span class=\"title function_\">hasListeners</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">        ;(observable <span class=\"keyword\">as</span> <span class=\"title class_\">ObservableValue</span>&lt;<span class=\"built_in\">any</span>&gt;).<span class=\"title function_\">setNewValue_</span>(newValue)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (notify) <span class=\"title function_\">notifyListeners</span>(<span class=\"variable language_\">this</span>, change)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>这里我们又遇到了一个class:<code>ObservableValue</code>，似乎target的读与改都离不了它。虽然官网有关<code>ObservableValue</code>的文字很少，但它的父类是大名鼎鼎的<code>Atom</code>，下一篇将详细分析<code>ObservableValue</code>在Mobx世界中究竟扮演着什么样的角色，敬请期待~</p>\n","length":3399,"excerpt":"","more":"<p><img src=\"/../imgs/2b9ca4a010e54d8ca142e68c9eb2f26b.png\" alt=\"image.png\"> 上一篇探究了<code>observable</code>方法内部的执行机制，讲到<code>adm.extend_( key, descriptor[key as any],true)</code>将target与obj对象关联了起来。本文将从这里继续，解析<code>adm</code>的class<code>ObservableObjectAdministration</code>。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let <span class=\"attr\">target</span> = observable(obj)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ObservableObjectAdministration\"><a href=\"#ObservableObjectAdministration\" class=\"headerlink\" title=\"ObservableObjectAdministration\"></a>ObservableObjectAdministration</h2><p><code>ObservableObjectAdministration</code>作用是管理target的属性的读取。它在Mobx的世界里处于leader地位，这一点从它的<code>Administration</code>的命名也可以看出来。</p>\n<ul>\n<li>_extend <code>ObservableObjectAdministration</code>实例的_extend,经过了相当_fuck_的过程后，调用了实例的<code>defineObservableProperty_</code>方法：</li>\n<li>defineObservableProperty_</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">defineObservableProperty_</span>(</span><br><span class=\"line\">       <span class=\"attr\">key</span>: <span class=\"title class_\">PropertyKey</span>,</span><br><span class=\"line\">       <span class=\"attr\">value</span>: <span class=\"built_in\">any</span>,</span><br><span class=\"line\">       <span class=\"attr\">enhancer</span>: <span class=\"title class_\">IEnhancer</span>&lt;<span class=\"built_in\">any</span>&gt;,</span><br><span class=\"line\">       <span class=\"attr\">proxyTrap</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">   ): <span class=\"built_in\">boolean</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"title function_\">startBatch</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Delete</span></span><br><span class=\"line\">           <span class=\"keyword\">const</span> deleteOutcome = <span class=\"variable language_\">this</span>.<span class=\"title function_\">delete_</span>(key)</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!deleteOutcome) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Failure or intercepted</span></span><br><span class=\"line\">               <span class=\"keyword\">return</span> deleteOutcome</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// ADD interceptor</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"title function_\">hasInterceptors</span>(<span class=\"variable language_\">this</span>)) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">const</span> change = interceptChange&lt;<span class=\"title class_\">IObjectWillChange</span>&gt;(<span class=\"variable language_\">this</span>, &#123;</span><br><span class=\"line\">                   <span class=\"attr\">object</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">proxy_</span> || <span class=\"variable language_\">this</span>.<span class=\"property\">target_</span>,</span><br><span class=\"line\">                   <span class=\"attr\">name</span>: key,</span><br><span class=\"line\">                   <span class=\"attr\">type</span>: <span class=\"variable constant_\">ADD</span>,</span><br><span class=\"line\">                   <span class=\"attr\">newValue</span>: value</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (!change) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">               value = (change <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">newValue</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">const</span> cachedDescriptor = <span class=\"title function_\">getCachedObservablePropDescriptor</span>(key)</span><br><span class=\"line\">           <span class=\"keyword\">const</span> descriptor = &#123;</span><br><span class=\"line\">               <span class=\"attr\">configurable</span>: globalState.<span class=\"property\">safeDescriptors</span> ? <span class=\"variable language_\">this</span>.<span class=\"property\">isPlainObject_</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">               <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">               <span class=\"attr\">get</span>: cachedDescriptor.<span class=\"property\">get</span>,</span><br><span class=\"line\">               <span class=\"attr\">set</span>: cachedDescriptor.<span class=\"property\">set</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Define</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (proxyTrap) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (!<span class=\"title class_\">Reflect</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">target_</span>, key, descriptor)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"title function_\">defineProperty</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">target_</span>, key, descriptor)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> <span class=\"title class_\">ObservableValue</span>(</span><br><span class=\"line\">               value,</span><br><span class=\"line\">               enhancer,</span><br><span class=\"line\">               __DEV__ ? <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name_&#125;</span>.<span class=\"subst\">$&#123;key.toString()&#125;</span>`</span> : <span class=\"string\">&quot;ObservableObject.key&quot;</span>,</span><br><span class=\"line\">               <span class=\"literal\">false</span></span><br><span class=\"line\">           )</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">values_</span>.<span class=\"title function_\">set</span>(key, observable)</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Notify (value possibly changed by ObservableValue)</span></span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"title function_\">notifyPropertyAddition_</span>(key, observable.<span class=\"property\">value_</span>)</span><br><span class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">           <span class=\"title function_\">endBatch</span>()</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里终于看到了<code>defineProperty(this.target_, key, descriptor)</code>的字眼，意味着target对象的key的descriptor在这里被设置完成了。但是这个descriptor是来自于<code>getCachedObservablePropDescriptor</code>的，并且和obj对象的descriptor一点关系都没有，getter和setter也都来自于实例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>[$mobx].<span class=\"title function_\">getObservablePropValue_</span>(key)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>[$mobx].<span class=\"title function_\">setObservablePropValue_</span>(key, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在介绍<code>getObservablePropValue_</code>和<code>setObservablePropValue_之前</code>，需要先介绍另一个嘉宾<code>values_</code></p>\n<ul>\n<li>values_ values_是一个Map，key对应的是obj的属性，value是<code>ObservableValue</code>实例，这个实例保存了obj对应key的descriptor.</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> values_ = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"title class_\">PropertyKey</span>, <span class=\"title class_\">ObservableValue</span>&lt;<span class=\"built_in\">any</span>&gt; | <span class=\"title class_\">ComputedValue</span>&lt;<span class=\"built_in\">any</span>&gt;&gt;(),</span><br><span class=\"line\"><span class=\"title function_\">defineObservableProperty_</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> <span class=\"title class_\">ObservableValue</span>(value,enhancer, <span class=\"string\">&quot;ObservableObject.key&quot;</span>,<span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">values_</span>.<span class=\"title function_\">set</span>(key, observable)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>getObservablePropValue_ 这是target真正的getter，它是从<code>ObservableValue</code>实例中获取值。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"title function_\">getObservablePropValue_</span>(<span class=\"attr\">key</span>: <span class=\"title class_\">PropertyKey</span>): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">values_</span>.<span class=\"title function_\">get</span>(key)!.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>setObservablePropValue_ 这是target真正的setter，简化后可以看到这个这里还是通过<code>ObservableValue</code>实例进行新值的设置</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setObservablePropValue_</span>(<span class=\"attr\">key</span>: <span class=\"title class_\">PropertyKey</span>, newValue): <span class=\"built_in\">boolean</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> observable = <span class=\"variable language_\">this</span>.<span class=\"property\">values_</span>.<span class=\"title function_\">get</span>(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (observable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">ComputedValue</span>) &#123;</span><br><span class=\"line\">        observable.<span class=\"title function_\">set</span>(newValue)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    newValue = (observable <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"title function_\">prepareNewValue_</span>(newValue)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// notify spy &amp; observers</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newValue !== globalState.<span class=\"property\">UNCHANGED</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> notify = <span class=\"title function_\">hasListeners</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">        ;(observable <span class=\"keyword\">as</span> <span class=\"title class_\">ObservableValue</span>&lt;<span class=\"built_in\">any</span>&gt;).<span class=\"title function_\">setNewValue_</span>(newValue)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (notify) <span class=\"title function_\">notifyListeners</span>(<span class=\"variable language_\">this</span>, change)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>这里我们又遇到了一个class:<code>ObservableValue</code>，似乎target的读与改都离不了它。虽然官网有关<code>ObservableValue</code>的文字很少，但它的父类是大名鼎鼎的<code>Atom</code>，下一篇将详细分析<code>ObservableValue</code>在Mobx世界中究竟扮演着什么样的角色，敬请期待~</p>\n"},{"title":"Mobx6核心源码解析（二）: observable","date":"2021-12-02T16:00:00.000Z","_content":"\n上文我们推测Mobx的基本原理，并模拟实现了Mobx的两个核心api，本文将进入源码，看看observable是如何实现的。\n\n不简单的observable\n--------------\n\n`observable`并不仅仅是一个方法，应该将它看成是一个对象。\n\nMobx对`observable`的定义在packages/mobx/src/api/observable.ts中:\n\n```ts\nfunction createObservable(v: any, arg2?: any, arg3?: any) {}\nObject.assign(createObservable, observableDecoratorAnnotation)\nexport var observable: IObservableFactory = assign(createObservable, observableFactories)\n```\n\n这么一顿操作后，observable除了可以作为一个方法调用，还具有这些能力：\n\n```less\nconst observable = function(){...}\nObject.assign(observable,{\n    box(){},\n    array() {},\n    map() {},\n    set() {},\n    object() {},\n    ref: ...,\n    shallow: ...,\n    deep: ...,\n    struct: ...,\n    annotationType_: ...,\n    options_: ...,\n    make_(){},\n    extend_(){}\n})\n```\n\n这四个属性来自于`createObservableAnnotation`方法创建出的对象\n\n```ts\n    {\n        annotationType_: name,\n        options_: options,\n        make_,\n        extend_\n    }\n```\n\n其他的属性来自于`observableFactories`对象。\n\n`observable`的函数体是这样的：\n\n```ts\nfunction createObservable(v: any, arg2?: any, arg3?: any) {\n    ...\n    if (isObservable(v)) return v\n    // plain object\n    if (isPlainObject(v)) return observable.object(v, arg2, arg3)\n    // Array\n    if (Array.isArray(v)) return observable.array(v, arg2)\n    ...\n    return observable.box(v, arg2)\n}\n```\n\nobservable会根据参数类型，再调用相对应的方法： ![image.png](../imgs/d4a7b5a1fd644cbb8a63acc576a6708b.png)\n\nobservable.object\n-----------------\n\n假设我们调用的形式时`observable(obj)`,obj是一个plain object，它实际调用的是`observableFactories.object`，它的返回值如下：\n\n```ts\n extendObservable(\n    globalState.useProxies === false || options?.proxy === false\n        ? asObservableObject({}, options)\n        : asDynamicObservableObject({}, options),\n    props,\n    decorators\n)\n```\n\n可以看到返回的值是从一个空对象`{}`创建的。\n\n根据是否使用`Proxy`，分别调用`asDynamicObservableObject`和`asObservableObject`来对这个空对象做处理。\n\n![image.png](../imgs/4f4655e4f3064e6ca0929d75fbdf93ab.png)\n\nasObservableObject和extendObservable\n-----------------------------------\n\n`asObservableObject`对这个`{}`对象增加了一个`$mobx`属性，这是一个`ObservableObjectAdministration`实例。后文将称这个对象为`target`\n\n```arduino\nexport function asObservableObject(\n    target: any,\n    options?: CreateObservableOptions\n): IIsObservableObject {\n \n    if (hasProp(target, $mobx)) {\n        return target\n    }\n\n    const adm = new ObservableObjectAdministration(\n        target,\n        new Map(),\n        \"ObservableObject\",\n        getAnnotationFromOptions(options)\n    )\n\n    addHiddenProp(target, $mobx, adm)\n\n    return target\n}\n```\n\n![image.png](../imgs/75fabe11d8b948718b89fc10e8b82e17.png)\n\n`extendObservable`则将这个target与我们传入的obj对象进行了关联。\n\n```typescript\nexport function extendObservable<A extends Object, B extends Object>(\n    target: A,\n    properties: B,\n    annotations?: AnnotationsMap<B, never>,\n    options?: CreateObservableOptions\n): A & B {\n    const descriptors = getOwnPropertyDescriptors(properties)\n    const adm: ObservableObjectAdministration = asObservableObject(target, options)[$mobx]\n    startBatch()\n    try {\n        ownKeys(descriptors).forEach(key => {\n            adm.extend_( key, descriptor[key as any],true)\n        })\n    } finally {\n        endBatch()\n    }\n    return target as any\n}\n```\n\n![image.png](../imgs/8c6de6a98ca945b18885737a76a0bc37.png) `extendObservable`中会将我们传入的`obj`对象的key和对应的descriptor，通过`ObservableObjectAdministration`实例`adm`的`extend_`方法，加到target上。\n\n未完待续\n----\n\n到这里`observable`方法的运行就已经全部梳理完了，但我们并没有窥见Mobx的丝毫底层原理。而且我们还遇到了一个陌生的对象`ObservableObjectAdministration`。“可观察对象管理器”，从命名上就可以看出，这是一个在Mobx中非常关键的class，而正是它将会带我们拨开Mobx神秘的面纱。\n\n且听下回分解。","source":"_posts/Mobx6核心源码解析（二）  observable.md","raw":"---\n title: \"Mobx6核心源码解析（二）: observable\"\n date: 2021-12-03\n tags: [前端]\n categories: [前端笔记]\n---\n\n上文我们推测Mobx的基本原理，并模拟实现了Mobx的两个核心api，本文将进入源码，看看observable是如何实现的。\n\n不简单的observable\n--------------\n\n`observable`并不仅仅是一个方法，应该将它看成是一个对象。\n\nMobx对`observable`的定义在packages/mobx/src/api/observable.ts中:\n\n```ts\nfunction createObservable(v: any, arg2?: any, arg3?: any) {}\nObject.assign(createObservable, observableDecoratorAnnotation)\nexport var observable: IObservableFactory = assign(createObservable, observableFactories)\n```\n\n这么一顿操作后，observable除了可以作为一个方法调用，还具有这些能力：\n\n```less\nconst observable = function(){...}\nObject.assign(observable,{\n    box(){},\n    array() {},\n    map() {},\n    set() {},\n    object() {},\n    ref: ...,\n    shallow: ...,\n    deep: ...,\n    struct: ...,\n    annotationType_: ...,\n    options_: ...,\n    make_(){},\n    extend_(){}\n})\n```\n\n这四个属性来自于`createObservableAnnotation`方法创建出的对象\n\n```ts\n    {\n        annotationType_: name,\n        options_: options,\n        make_,\n        extend_\n    }\n```\n\n其他的属性来自于`observableFactories`对象。\n\n`observable`的函数体是这样的：\n\n```ts\nfunction createObservable(v: any, arg2?: any, arg3?: any) {\n    ...\n    if (isObservable(v)) return v\n    // plain object\n    if (isPlainObject(v)) return observable.object(v, arg2, arg3)\n    // Array\n    if (Array.isArray(v)) return observable.array(v, arg2)\n    ...\n    return observable.box(v, arg2)\n}\n```\n\nobservable会根据参数类型，再调用相对应的方法： ![image.png](../imgs/d4a7b5a1fd644cbb8a63acc576a6708b.png)\n\nobservable.object\n-----------------\n\n假设我们调用的形式时`observable(obj)`,obj是一个plain object，它实际调用的是`observableFactories.object`，它的返回值如下：\n\n```ts\n extendObservable(\n    globalState.useProxies === false || options?.proxy === false\n        ? asObservableObject({}, options)\n        : asDynamicObservableObject({}, options),\n    props,\n    decorators\n)\n```\n\n可以看到返回的值是从一个空对象`{}`创建的。\n\n根据是否使用`Proxy`，分别调用`asDynamicObservableObject`和`asObservableObject`来对这个空对象做处理。\n\n![image.png](../imgs/4f4655e4f3064e6ca0929d75fbdf93ab.png)\n\nasObservableObject和extendObservable\n-----------------------------------\n\n`asObservableObject`对这个`{}`对象增加了一个`$mobx`属性，这是一个`ObservableObjectAdministration`实例。后文将称这个对象为`target`\n\n```arduino\nexport function asObservableObject(\n    target: any,\n    options?: CreateObservableOptions\n): IIsObservableObject {\n \n    if (hasProp(target, $mobx)) {\n        return target\n    }\n\n    const adm = new ObservableObjectAdministration(\n        target,\n        new Map(),\n        \"ObservableObject\",\n        getAnnotationFromOptions(options)\n    )\n\n    addHiddenProp(target, $mobx, adm)\n\n    return target\n}\n```\n\n![image.png](../imgs/75fabe11d8b948718b89fc10e8b82e17.png)\n\n`extendObservable`则将这个target与我们传入的obj对象进行了关联。\n\n```typescript\nexport function extendObservable<A extends Object, B extends Object>(\n    target: A,\n    properties: B,\n    annotations?: AnnotationsMap<B, never>,\n    options?: CreateObservableOptions\n): A & B {\n    const descriptors = getOwnPropertyDescriptors(properties)\n    const adm: ObservableObjectAdministration = asObservableObject(target, options)[$mobx]\n    startBatch()\n    try {\n        ownKeys(descriptors).forEach(key => {\n            adm.extend_( key, descriptor[key as any],true)\n        })\n    } finally {\n        endBatch()\n    }\n    return target as any\n}\n```\n\n![image.png](../imgs/8c6de6a98ca945b18885737a76a0bc37.png) `extendObservable`中会将我们传入的`obj`对象的key和对应的descriptor，通过`ObservableObjectAdministration`实例`adm`的`extend_`方法，加到target上。\n\n未完待续\n----\n\n到这里`observable`方法的运行就已经全部梳理完了，但我们并没有窥见Mobx的丝毫底层原理。而且我们还遇到了一个陌生的对象`ObservableObjectAdministration`。“可观察对象管理器”，从命名上就可以看出，这是一个在Mobx中非常关键的class，而正是它将会带我们拨开Mobx神秘的面纱。\n\n且听下回分解。","slug":"Mobx6核心源码解析（二）  observable","published":1,"updated":"2024-04-04T15:27:03.548Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhj000hhajf0yagbeb2","content":"<p>上文我们推测Mobx的基本原理，并模拟实现了Mobx的两个核心api，本文将进入源码，看看observable是如何实现的。</p>\n<h2 id=\"不简单的observable\"><a href=\"#不简单的observable\" class=\"headerlink\" title=\"不简单的observable\"></a>不简单的observable</h2><p><code>observable</code>并不仅仅是一个方法，应该将它看成是一个对象。</p>\n<p>Mobx对<code>observable</code>的定义在packages&#x2F;mobx&#x2F;src&#x2F;api&#x2F;observable.ts中:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createObservable</span>(<span class=\"params\">v: <span class=\"built_in\">any</span>, arg2?: <span class=\"built_in\">any</span>, arg3?: <span class=\"built_in\">any</span></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(createObservable, observableDecoratorAnnotation)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> <span class=\"attr\">observable</span>: <span class=\"title class_\">IObservableFactory</span> = <span class=\"title function_\">assign</span>(createObservable, observableFactories)</span><br></pre></td></tr></table></figure>\n\n<p>这么一顿操作后，observable除了可以作为一个方法调用，还具有这些能力：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">const</span> <span class=\"selector-tag\">observable</span> = <span class=\"selector-tag\">function</span>()&#123;...&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">Object</span><span class=\"selector-class\">.assign</span>(observable,&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">box</span>()&#123;&#125;,</span><br><span class=\"line\">    <span class=\"built_in\">array</span>() &#123;&#125;,</span><br><span class=\"line\">    <span class=\"built_in\">map</span>() &#123;&#125;,</span><br><span class=\"line\">    <span class=\"built_in\">set</span>() &#123;&#125;,</span><br><span class=\"line\">    <span class=\"built_in\">object</span>() &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attribute\">ref</span>: ...,</span><br><span class=\"line\">    <span class=\"attribute\">shallow</span>: ...,</span><br><span class=\"line\">    <span class=\"attribute\">deep</span>: ...,</span><br><span class=\"line\">    <span class=\"attribute\">struct</span>: ...,</span><br><span class=\"line\">    <span class=\"attribute\">annotationType_</span>: ...,</span><br><span class=\"line\">    <span class=\"attribute\">options_</span>: ...,</span><br><span class=\"line\">    <span class=\"built_in\">make_</span>()&#123;&#125;,</span><br><span class=\"line\">    <span class=\"built_in\">extend_</span>()&#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这四个属性来自于<code>createObservableAnnotation</code>方法创建出的对象</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">annotationType_</span>: name,</span><br><span class=\"line\">    <span class=\"attr\">options_</span>: options,</span><br><span class=\"line\">    make_,</span><br><span class=\"line\">    extend_</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其他的属性来自于<code>observableFactories</code>对象。</p>\n<p><code>observable</code>的函数体是这样的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createObservable</span>(<span class=\"params\">v: <span class=\"built_in\">any</span>, arg2?: <span class=\"built_in\">any</span>, arg3?: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isObservable</span>(v)) <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    <span class=\"comment\">// plain object</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isPlainObject</span>(v)) <span class=\"keyword\">return</span> observable.<span class=\"title function_\">object</span>(v, arg2, arg3)</span><br><span class=\"line\">    <span class=\"comment\">// Array</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(v)) <span class=\"keyword\">return</span> observable.<span class=\"title function_\">array</span>(v, arg2)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> observable.<span class=\"title function_\">box</span>(v, arg2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>observable会根据参数类型，再调用相对应的方法： <img src=\"/../imgs/d4a7b5a1fd644cbb8a63acc576a6708b.png\" alt=\"image.png\"></p>\n<h2 id=\"observable-object\"><a href=\"#observable-object\" class=\"headerlink\" title=\"observable.object\"></a>observable.object</h2><p>假设我们调用的形式时<code>observable(obj)</code>,obj是一个plain object，它实际调用的是<code>observableFactories.object</code>，它的返回值如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"title function_\">extendObservable</span>(</span><br><span class=\"line\">    globalState.<span class=\"property\">useProxies</span> === <span class=\"literal\">false</span> || options?.<span class=\"property\">proxy</span> === <span class=\"literal\">false</span></span><br><span class=\"line\">        ? <span class=\"title function_\">asObservableObject</span>(&#123;&#125;, options)</span><br><span class=\"line\">        : <span class=\"title function_\">asDynamicObservableObject</span>(&#123;&#125;, options),</span><br><span class=\"line\">    props,</span><br><span class=\"line\">    decorators</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到返回的值是从一个空对象<code>&#123;&#125;</code>创建的。</p>\n<p>根据是否使用<code>Proxy</code>，分别调用<code>asDynamicObservableObject</code>和<code>asObservableObject</code>来对这个空对象做处理。</p>\n<p><img src=\"/../imgs/4f4655e4f3064e6ca0929d75fbdf93ab.png\" alt=\"image.png\"></p>\n<h2 id=\"asObservableObject和extendObservable\"><a href=\"#asObservableObject和extendObservable\" class=\"headerlink\" title=\"asObservableObject和extendObservable\"></a>asObservableObject和extendObservable</h2><p><code>asObservableObject</code>对这个<code>&#123;&#125;</code>对象增加了一个<code>$mobx</code>属性，这是一个<code>ObservableObjectAdministration</code>实例。后文将称这个对象为<code>target</code></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">export</span> function <span class=\"title\">asObservableObject</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    target: any,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    options?: CreateObservableOptions</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span>: IIsObservableObject &#123;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">hasProp</span>(target, $mobx)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> adm = <span class=\"keyword\">new</span> <span class=\"built_in\">ObservableObjectAdministration</span>(</span><br><span class=\"line\">        target,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(),</span><br><span class=\"line\">        <span class=\"string\">&quot;ObservableObject&quot;</span>,</span><br><span class=\"line\">        <span class=\"built_in\">getAnnotationFromOptions</span>(options)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">addHiddenProp</span>(target, $mobx, adm)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> target</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/75fabe11d8b948718b89fc10e8b82e17.png\" alt=\"image.png\"></p>\n<p><code>extendObservable</code>则将这个target与我们传入的obj对象进行了关联。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> extendObservable&lt;A <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span>, B <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span>&gt;(</span><br><span class=\"line\">    <span class=\"attr\">target</span>: A,</span><br><span class=\"line\">    <span class=\"attr\">properties</span>: B,</span><br><span class=\"line\">    annotations?: <span class=\"title class_\">AnnotationsMap</span>&lt;B, <span class=\"built_in\">never</span>&gt;,</span><br><span class=\"line\">    options?: <span class=\"title class_\">CreateObservableOptions</span></span><br><span class=\"line\">): A &amp; B &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> descriptors = <span class=\"title function_\">getOwnPropertyDescriptors</span>(properties)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">adm</span>: <span class=\"title class_\">ObservableObjectAdministration</span> = <span class=\"title function_\">asObservableObject</span>(target, options)[$mobx]</span><br><span class=\"line\">    <span class=\"title function_\">startBatch</span>()</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">ownKeys</span>(descriptors).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">            adm.<span class=\"title function_\">extend_</span>( key, descriptor[key <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>],<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">endBatch</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target <span class=\"keyword\">as</span> <span class=\"built_in\">any</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/8c6de6a98ca945b18885737a76a0bc37.png\" alt=\"image.png\"> <code>extendObservable</code>中会将我们传入的<code>obj</code>对象的key和对应的descriptor，通过<code>ObservableObjectAdministration</code>实例<code>adm</code>的<code>extend_</code>方法，加到target上。</p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>到这里<code>observable</code>方法的运行就已经全部梳理完了，但我们并没有窥见Mobx的丝毫底层原理。而且我们还遇到了一个陌生的对象<code>ObservableObjectAdministration</code>。“可观察对象管理器”，从命名上就可以看出，这是一个在Mobx中非常关键的class，而正是它将会带我们拨开Mobx神秘的面纱。</p>\n<p>且听下回分解。</p>\n","length":2901,"excerpt":"","more":"<p>上文我们推测Mobx的基本原理，并模拟实现了Mobx的两个核心api，本文将进入源码，看看observable是如何实现的。</p>\n<h2 id=\"不简单的observable\"><a href=\"#不简单的observable\" class=\"headerlink\" title=\"不简单的observable\"></a>不简单的observable</h2><p><code>observable</code>并不仅仅是一个方法，应该将它看成是一个对象。</p>\n<p>Mobx对<code>observable</code>的定义在packages&#x2F;mobx&#x2F;src&#x2F;api&#x2F;observable.ts中:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createObservable</span>(<span class=\"params\">v: <span class=\"built_in\">any</span>, arg2?: <span class=\"built_in\">any</span>, arg3?: <span class=\"built_in\">any</span></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(createObservable, observableDecoratorAnnotation)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> <span class=\"attr\">observable</span>: <span class=\"title class_\">IObservableFactory</span> = <span class=\"title function_\">assign</span>(createObservable, observableFactories)</span><br></pre></td></tr></table></figure>\n\n<p>这么一顿操作后，observable除了可以作为一个方法调用，还具有这些能力：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">const</span> <span class=\"selector-tag\">observable</span> = <span class=\"selector-tag\">function</span>()&#123;...&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">Object</span><span class=\"selector-class\">.assign</span>(observable,&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">box</span>()&#123;&#125;,</span><br><span class=\"line\">    <span class=\"built_in\">array</span>() &#123;&#125;,</span><br><span class=\"line\">    <span class=\"built_in\">map</span>() &#123;&#125;,</span><br><span class=\"line\">    <span class=\"built_in\">set</span>() &#123;&#125;,</span><br><span class=\"line\">    <span class=\"built_in\">object</span>() &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attribute\">ref</span>: ...,</span><br><span class=\"line\">    <span class=\"attribute\">shallow</span>: ...,</span><br><span class=\"line\">    <span class=\"attribute\">deep</span>: ...,</span><br><span class=\"line\">    <span class=\"attribute\">struct</span>: ...,</span><br><span class=\"line\">    <span class=\"attribute\">annotationType_</span>: ...,</span><br><span class=\"line\">    <span class=\"attribute\">options_</span>: ...,</span><br><span class=\"line\">    <span class=\"built_in\">make_</span>()&#123;&#125;,</span><br><span class=\"line\">    <span class=\"built_in\">extend_</span>()&#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这四个属性来自于<code>createObservableAnnotation</code>方法创建出的对象</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">annotationType_</span>: name,</span><br><span class=\"line\">    <span class=\"attr\">options_</span>: options,</span><br><span class=\"line\">    make_,</span><br><span class=\"line\">    extend_</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其他的属性来自于<code>observableFactories</code>对象。</p>\n<p><code>observable</code>的函数体是这样的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createObservable</span>(<span class=\"params\">v: <span class=\"built_in\">any</span>, arg2?: <span class=\"built_in\">any</span>, arg3?: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isObservable</span>(v)) <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    <span class=\"comment\">// plain object</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isPlainObject</span>(v)) <span class=\"keyword\">return</span> observable.<span class=\"title function_\">object</span>(v, arg2, arg3)</span><br><span class=\"line\">    <span class=\"comment\">// Array</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(v)) <span class=\"keyword\">return</span> observable.<span class=\"title function_\">array</span>(v, arg2)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> observable.<span class=\"title function_\">box</span>(v, arg2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>observable会根据参数类型，再调用相对应的方法： <img src=\"/../imgs/d4a7b5a1fd644cbb8a63acc576a6708b.png\" alt=\"image.png\"></p>\n<h2 id=\"observable-object\"><a href=\"#observable-object\" class=\"headerlink\" title=\"observable.object\"></a>observable.object</h2><p>假设我们调用的形式时<code>observable(obj)</code>,obj是一个plain object，它实际调用的是<code>observableFactories.object</code>，它的返回值如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"title function_\">extendObservable</span>(</span><br><span class=\"line\">    globalState.<span class=\"property\">useProxies</span> === <span class=\"literal\">false</span> || options?.<span class=\"property\">proxy</span> === <span class=\"literal\">false</span></span><br><span class=\"line\">        ? <span class=\"title function_\">asObservableObject</span>(&#123;&#125;, options)</span><br><span class=\"line\">        : <span class=\"title function_\">asDynamicObservableObject</span>(&#123;&#125;, options),</span><br><span class=\"line\">    props,</span><br><span class=\"line\">    decorators</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到返回的值是从一个空对象<code>&#123;&#125;</code>创建的。</p>\n<p>根据是否使用<code>Proxy</code>，分别调用<code>asDynamicObservableObject</code>和<code>asObservableObject</code>来对这个空对象做处理。</p>\n<p><img src=\"/../imgs/4f4655e4f3064e6ca0929d75fbdf93ab.png\" alt=\"image.png\"></p>\n<h2 id=\"asObservableObject和extendObservable\"><a href=\"#asObservableObject和extendObservable\" class=\"headerlink\" title=\"asObservableObject和extendObservable\"></a>asObservableObject和extendObservable</h2><p><code>asObservableObject</code>对这个<code>&#123;&#125;</code>对象增加了一个<code>$mobx</code>属性，这是一个<code>ObservableObjectAdministration</code>实例。后文将称这个对象为<code>target</code></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">export</span> function <span class=\"title\">asObservableObject</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    target: any,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    options?: CreateObservableOptions</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span>: IIsObservableObject &#123;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">hasProp</span>(target, $mobx)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> adm = <span class=\"keyword\">new</span> <span class=\"built_in\">ObservableObjectAdministration</span>(</span><br><span class=\"line\">        target,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(),</span><br><span class=\"line\">        <span class=\"string\">&quot;ObservableObject&quot;</span>,</span><br><span class=\"line\">        <span class=\"built_in\">getAnnotationFromOptions</span>(options)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">addHiddenProp</span>(target, $mobx, adm)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> target</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/75fabe11d8b948718b89fc10e8b82e17.png\" alt=\"image.png\"></p>\n<p><code>extendObservable</code>则将这个target与我们传入的obj对象进行了关联。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> extendObservable&lt;A <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span>, B <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span>&gt;(</span><br><span class=\"line\">    <span class=\"attr\">target</span>: A,</span><br><span class=\"line\">    <span class=\"attr\">properties</span>: B,</span><br><span class=\"line\">    annotations?: <span class=\"title class_\">AnnotationsMap</span>&lt;B, <span class=\"built_in\">never</span>&gt;,</span><br><span class=\"line\">    options?: <span class=\"title class_\">CreateObservableOptions</span></span><br><span class=\"line\">): A &amp; B &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> descriptors = <span class=\"title function_\">getOwnPropertyDescriptors</span>(properties)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">adm</span>: <span class=\"title class_\">ObservableObjectAdministration</span> = <span class=\"title function_\">asObservableObject</span>(target, options)[$mobx]</span><br><span class=\"line\">    <span class=\"title function_\">startBatch</span>()</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">ownKeys</span>(descriptors).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">            adm.<span class=\"title function_\">extend_</span>( key, descriptor[key <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>],<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">endBatch</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target <span class=\"keyword\">as</span> <span class=\"built_in\">any</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/8c6de6a98ca945b18885737a76a0bc37.png\" alt=\"image.png\"> <code>extendObservable</code>中会将我们传入的<code>obj</code>对象的key和对应的descriptor，通过<code>ObservableObjectAdministration</code>实例<code>adm</code>的<code>extend_</code>方法，加到target上。</p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>到这里<code>observable</code>方法的运行就已经全部梳理完了，但我们并没有窥见Mobx的丝毫底层原理。而且我们还遇到了一个陌生的对象<code>ObservableObjectAdministration</code>。“可观察对象管理器”，从命名上就可以看出，这是一个在Mobx中非常关键的class，而正是它将会带我们拨开Mobx神秘的面纱。</p>\n<p>且听下回分解。</p>\n"},{"title":"Mobx6核心源码解析（五）: Reaction和事务","date":"2021-12-06T16:00:00.000Z","_content":"\n前言\n--\n\n前面的文章解析了“观察”部分的源码，既下面代码中的第一行。本文将介绍“反应”部分的代码，既下面代码中的第二行。\n\n```scss\n const target = observable(obj)\n autorun(() => { console.log('target.value=', target.value) })\n```\n\nautorun\n-------\n\n在介绍`Reaction`之前先介绍一下`autorun`:\n\n```ts\nexport function autorun(\n    view: (r: IReactionPublic) => any,\n    opts: IAutorunOptions = EMPTY_OBJECT\n): IReactionDisposer {\n    ...\n    // normal autorun\n    reaction = new Reaction(\n        name,\n        function (this: Reaction) {\n            this.track(reactionRunner)\n        },\n        opts.onError,\n        opts.requiresObservable\n    )\n    ...\n\n    function reactionRunner() {\n        view(reaction)\n    }\n\n    reaction.schedule_()\n    return reaction.getDisposer_()\n}\n```\n\n`autorun`中最重要的事情就是创建了一个`Reaction`实例，并执行了这个实例的`schedule_`方法，驱动反应运行的，正式这个方法。\n\nReaction\n--------\n\nReaction是一种特殊的derivation，derivation都有一个状态，代表它的依赖是否更新：\n\n```ini\nexport enum IDerivationState_ {\n    // 没有依赖\n    NOT_TRACKING_ = -1,\n    // 没有更新\n    UP_TO_DATE_ = 0,\n    // 可能更新（依赖的某个深度属性变更，但依赖本身引用未可能未更新，此时可以按需处理）\n    POSSIBLY_STALE_ = 1,\n    // 更新\n    STALE_ = 2\n}\n```\n\nReaction内部机制如下：\n\n*   1.  reaction创建后，应该以`runReaction`或者通过调度（见`autorun`）启动\n*   2.  `onInvalidate`应以某种方式调用`this.track(someFunction)`\n*   3.  `someFunction`访问的所有可观察对象都将会被这个reaction观察到\n*   4.  一旦发生依赖改版，Reaction将会被再次调度（在变更或事务结束后）\n*   5.  `onInvalidate`调用后会返回第一步 我们还是来看它的源码：\n\n```kotlin\nexport class Reaction implements IDerivation, IReactionPublic {\n    ...\n}\n```\n\n### constructor\n\n```typescript\n constructor(\n    public name_: string = __DEV__ ? \"Reaction@\" + getNextId() : \"Reaction\",\n    private onInvalidate_: () => void,\n    private errorHandler_?: (error: any, derivation: IDerivation) => void,\n    public requiresObservable_ = false\n) {}\n```\n\n这里的`onInvalidate_`参数,是一个调用了它的`track`方法的函数\n\n```javascript\nfunction (this: Reaction) {\n    this.track(reactionRunner)\n},\n```\n\n`reactionRunner`就是上文中的`someFunction`，`view`是传入`autorun`的函数。\n\n```scss\n\n function reactionRunner() {\n    view(reaction)\n}\n```\n\n### schedule\\_\n\n```kotlin\nschedule_() {\n    if (!this.isScheduled_) {\n        this.isScheduled_ = true\n        globalState.pendingReactions.push(this)\n        runReactions()\n    }\n}\n```\n\n刚创建时， `this.isScheduled_`为`false`,这个`reaction`会被放入`globalState.pendingReactions`数组中，并开始运行：`runReactions`会从`globalState.pendingReactions`取出所有的`reaction`，并依次执行它的`runReaction_`方法。\n\n### runReaction\\_\n\n```ts\nrunReaction_() {\n    if (!this.isDisposed_) {\n        startBatch()\n        this.isScheduled_ = false\n        const prev = globalState.trackingContext\n        globalState.trackingContext = this\n        if (shouldCompute(this)) {\n            this.isTrackPending_ = true\n\n            try {\n                this.onInvalidate_()\n            } catch (e) {\n                this.reportExceptionInDerivation_(e)\n            }\n        }\n        globalState.trackingContext = prev\n        endBatch()\n    }\n}\n```\n\n`reaction`被创建时，都是`IDerivationState_.NOT_TRACKING_`的，**因此会执行`this.onInvalidate_()`,也就是调用了这个函数**：\n\n```javascript\nfunction (this: Reaction) {\n    this.track(reactionRunner)\n},\n```\n\n### track\n\n```ts\n track(fn: () => void) {\n    ...\n    startBatch()\n    let startTime\n    this.isRunning_ = true\n    const prevReaction = globalState.trackingContext // reactions could create reactions...\n    globalState.trackingContext = this\n    const result = trackDerivedFunction(this, fn, undefined)\n    globalState.trackingContext = prevReaction\n    this.isRunning_ = false\n    this.isTrackPending_ = false\n   \n    if (isCaughtException(result)) this.reportExceptionInDerivation_(result.cause)\n   \n    endBatch()\n}\n```\n\n这里有一个关键调用：`trackDerivedFunction`\n\n*   trackDerivedFunction 这个函数接收了这个reaction和`someFunction`:\n\n```ini\nexport function trackDerivedFunction<T>(derivation: IDerivation, f: () => T, context: any) {\n    const prevAllowStateReads = allowStateReadsStart(true)\n    changeDependenciesStateTo0(derivation)\n    derivation.newObserving_ = new Array(derivation.observing_.length + 100)\n    derivation.unboundDepsCount_ = 0\n    derivation.runId_ = ++globalState.runId\n    const prevTracking = globalState.trackingDerivation\n    globalState.trackingDerivation = derivation\n    globalState.inBatch++\n    let result\n    ...\n    result = f.call(context)\n    globalState.inBatch--\n    globalState.trackingDerivation = prevTracking\n    bindDependencies(derivation)\n\n    warnAboutDerivationWithoutDependencies(derivation)\n    allowStateReadsEnd(prevAllowStateReads)\n    return result\n}\n```\n\n这里看到`f.call(context)`,意味着我们传入`autorun`的函数被执行了。\n\n另外，这里的`globalState.trackingDerivation = derivation`[呼应了`reportObserved`函数中的`const derivation = globalState.trackingDerivation`](https://juejin.cn/post/7038459812601921550 \"https://juejin.cn/post/7038459812601921550\")。\n\n同样，这里也有一个关键调用`bindDependencies`：\n\n*   bindDependencies\n\n```ini\nfunction bindDependencies(derivation: IDerivation) {\n    ...\n    const prevObserving = derivation.observing_\n    const observing = (derivation.observing_ = derivation.newObserving_!)\n    let lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_\n    ...\n    observing.length = i0\n    while (i0--) {\n        const dep = observing[i0]\n        if (dep.diffValue_ === 1) {\n            dep.diffValue_ = 0\n            addObserver(dep, derivation)\n        }\n    }\n \n}\n```\n\n从`derivation.newObserving_`取出observable,并通过`addObserver`，将这个reaction加到observable的`observers_`属性中。[这一点也与前文中`propagateChanged`函数的逻辑对应](https://juejin.cn/post/7038459812601921550 \"https://juejin.cn/post/7038459812601921550\")\n\n**到这里，上一篇文章中遗留的两个问题都得到了回答。**\n\n### onBecomeStale\\_\n\n在`propagateChanged`中会执行每个reaction的`onBecomeStale_`方法：\n\n```javascript\nonBecomeStale_() {\n    this.schedule_()\n}\n```\n\n它会调动前文中的`schedule_`,于是`runReaction_`、`onInvalidate_`、`track`，又开启新一轮调用。\n\n事务\n--\n\nMobx中还有一个重要的特性：**事务**。\n\n### startBatch与endBatch\n\nMobx维护了一个全局变量`globalState.inBatch`,`startBatch`时加1，`endBatch`时减1,当为0,当为1时（--globalState.inBatch === 0），会调用`runReactions`。\n\n每一次变更开始都会调用`startBatch`,结束时调用`endBatch`。过程中可能多次调用`runReactions`,但每个reaction只会调用一次`runReaction_`。\n\n![image.png](../imgs/d886abe69e114dddb8a1c6235046d729.png)\n\n但是对于两个独立的setter所触发的反应，并不会合并到同一个事务里。这也是为什么Mobx建议所有的变更都放在`action`中。我们看`runInAction`的源码:\n\n```typescript\nexport function runInAction<T>(fn: () => T): T {\n    return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined)\n}\nexport function executeAction(\n    actionName: string,\n    canRunAsDerivation: boolean,\n    fn: Function,\n    scope?: any,\n    args?: IArguments\n) {\n    const runInfo = _startAction(actionName, canRunAsDerivation, scope, args)\n    try {\n        return fn.apply(scope, args)\n    } catch (err) {\n        runInfo.error_ = err\n        throw err\n    } finally {\n        _endAction(runInfo)\n    }\n}\n```\n\n其中`_startAction`和`_endAction`分别调用了一次`startBatch()`和 `endBatch()`,这使得多次变更触发的`runReactions`始终因为`globalState.inBatch>0`挂起，直到最后一次`endBatch()`将`globalState.inBatch`置为0后再让各reaction执行`runReaction_()`\n\n总结\n--\n\n本文分析了Reaction的源码和执行过程，以及Mobx事务的原理。结合前面几篇，Mobx底层运行逻辑已经全部讲完。当然Mobx的源码还有很多未尽之处，但万变不离其宗。由于Mobx源码相当晦涩，系列可能很多地方表述不清，但只看[本系列的第一篇](https://juejin.cn/post/7036354289215733791 \"https://juejin.cn/post/7036354289215733791\")，亦能见微知著。","source":"_posts/Mobx6核心源码解析（五）  Reaction和事务.md","raw":"---\n title: \"Mobx6核心源码解析（五）: Reaction和事务\"\n date: 2021-12-07\n tags: [前端]\n categories: [前端笔记]\n---\n\n前言\n--\n\n前面的文章解析了“观察”部分的源码，既下面代码中的第一行。本文将介绍“反应”部分的代码，既下面代码中的第二行。\n\n```scss\n const target = observable(obj)\n autorun(() => { console.log('target.value=', target.value) })\n```\n\nautorun\n-------\n\n在介绍`Reaction`之前先介绍一下`autorun`:\n\n```ts\nexport function autorun(\n    view: (r: IReactionPublic) => any,\n    opts: IAutorunOptions = EMPTY_OBJECT\n): IReactionDisposer {\n    ...\n    // normal autorun\n    reaction = new Reaction(\n        name,\n        function (this: Reaction) {\n            this.track(reactionRunner)\n        },\n        opts.onError,\n        opts.requiresObservable\n    )\n    ...\n\n    function reactionRunner() {\n        view(reaction)\n    }\n\n    reaction.schedule_()\n    return reaction.getDisposer_()\n}\n```\n\n`autorun`中最重要的事情就是创建了一个`Reaction`实例，并执行了这个实例的`schedule_`方法，驱动反应运行的，正式这个方法。\n\nReaction\n--------\n\nReaction是一种特殊的derivation，derivation都有一个状态，代表它的依赖是否更新：\n\n```ini\nexport enum IDerivationState_ {\n    // 没有依赖\n    NOT_TRACKING_ = -1,\n    // 没有更新\n    UP_TO_DATE_ = 0,\n    // 可能更新（依赖的某个深度属性变更，但依赖本身引用未可能未更新，此时可以按需处理）\n    POSSIBLY_STALE_ = 1,\n    // 更新\n    STALE_ = 2\n}\n```\n\nReaction内部机制如下：\n\n*   1.  reaction创建后，应该以`runReaction`或者通过调度（见`autorun`）启动\n*   2.  `onInvalidate`应以某种方式调用`this.track(someFunction)`\n*   3.  `someFunction`访问的所有可观察对象都将会被这个reaction观察到\n*   4.  一旦发生依赖改版，Reaction将会被再次调度（在变更或事务结束后）\n*   5.  `onInvalidate`调用后会返回第一步 我们还是来看它的源码：\n\n```kotlin\nexport class Reaction implements IDerivation, IReactionPublic {\n    ...\n}\n```\n\n### constructor\n\n```typescript\n constructor(\n    public name_: string = __DEV__ ? \"Reaction@\" + getNextId() : \"Reaction\",\n    private onInvalidate_: () => void,\n    private errorHandler_?: (error: any, derivation: IDerivation) => void,\n    public requiresObservable_ = false\n) {}\n```\n\n这里的`onInvalidate_`参数,是一个调用了它的`track`方法的函数\n\n```javascript\nfunction (this: Reaction) {\n    this.track(reactionRunner)\n},\n```\n\n`reactionRunner`就是上文中的`someFunction`，`view`是传入`autorun`的函数。\n\n```scss\n\n function reactionRunner() {\n    view(reaction)\n}\n```\n\n### schedule\\_\n\n```kotlin\nschedule_() {\n    if (!this.isScheduled_) {\n        this.isScheduled_ = true\n        globalState.pendingReactions.push(this)\n        runReactions()\n    }\n}\n```\n\n刚创建时， `this.isScheduled_`为`false`,这个`reaction`会被放入`globalState.pendingReactions`数组中，并开始运行：`runReactions`会从`globalState.pendingReactions`取出所有的`reaction`，并依次执行它的`runReaction_`方法。\n\n### runReaction\\_\n\n```ts\nrunReaction_() {\n    if (!this.isDisposed_) {\n        startBatch()\n        this.isScheduled_ = false\n        const prev = globalState.trackingContext\n        globalState.trackingContext = this\n        if (shouldCompute(this)) {\n            this.isTrackPending_ = true\n\n            try {\n                this.onInvalidate_()\n            } catch (e) {\n                this.reportExceptionInDerivation_(e)\n            }\n        }\n        globalState.trackingContext = prev\n        endBatch()\n    }\n}\n```\n\n`reaction`被创建时，都是`IDerivationState_.NOT_TRACKING_`的，**因此会执行`this.onInvalidate_()`,也就是调用了这个函数**：\n\n```javascript\nfunction (this: Reaction) {\n    this.track(reactionRunner)\n},\n```\n\n### track\n\n```ts\n track(fn: () => void) {\n    ...\n    startBatch()\n    let startTime\n    this.isRunning_ = true\n    const prevReaction = globalState.trackingContext // reactions could create reactions...\n    globalState.trackingContext = this\n    const result = trackDerivedFunction(this, fn, undefined)\n    globalState.trackingContext = prevReaction\n    this.isRunning_ = false\n    this.isTrackPending_ = false\n   \n    if (isCaughtException(result)) this.reportExceptionInDerivation_(result.cause)\n   \n    endBatch()\n}\n```\n\n这里有一个关键调用：`trackDerivedFunction`\n\n*   trackDerivedFunction 这个函数接收了这个reaction和`someFunction`:\n\n```ini\nexport function trackDerivedFunction<T>(derivation: IDerivation, f: () => T, context: any) {\n    const prevAllowStateReads = allowStateReadsStart(true)\n    changeDependenciesStateTo0(derivation)\n    derivation.newObserving_ = new Array(derivation.observing_.length + 100)\n    derivation.unboundDepsCount_ = 0\n    derivation.runId_ = ++globalState.runId\n    const prevTracking = globalState.trackingDerivation\n    globalState.trackingDerivation = derivation\n    globalState.inBatch++\n    let result\n    ...\n    result = f.call(context)\n    globalState.inBatch--\n    globalState.trackingDerivation = prevTracking\n    bindDependencies(derivation)\n\n    warnAboutDerivationWithoutDependencies(derivation)\n    allowStateReadsEnd(prevAllowStateReads)\n    return result\n}\n```\n\n这里看到`f.call(context)`,意味着我们传入`autorun`的函数被执行了。\n\n另外，这里的`globalState.trackingDerivation = derivation`[呼应了`reportObserved`函数中的`const derivation = globalState.trackingDerivation`](https://juejin.cn/post/7038459812601921550 \"https://juejin.cn/post/7038459812601921550\")。\n\n同样，这里也有一个关键调用`bindDependencies`：\n\n*   bindDependencies\n\n```ini\nfunction bindDependencies(derivation: IDerivation) {\n    ...\n    const prevObserving = derivation.observing_\n    const observing = (derivation.observing_ = derivation.newObserving_!)\n    let lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_\n    ...\n    observing.length = i0\n    while (i0--) {\n        const dep = observing[i0]\n        if (dep.diffValue_ === 1) {\n            dep.diffValue_ = 0\n            addObserver(dep, derivation)\n        }\n    }\n \n}\n```\n\n从`derivation.newObserving_`取出observable,并通过`addObserver`，将这个reaction加到observable的`observers_`属性中。[这一点也与前文中`propagateChanged`函数的逻辑对应](https://juejin.cn/post/7038459812601921550 \"https://juejin.cn/post/7038459812601921550\")\n\n**到这里，上一篇文章中遗留的两个问题都得到了回答。**\n\n### onBecomeStale\\_\n\n在`propagateChanged`中会执行每个reaction的`onBecomeStale_`方法：\n\n```javascript\nonBecomeStale_() {\n    this.schedule_()\n}\n```\n\n它会调动前文中的`schedule_`,于是`runReaction_`、`onInvalidate_`、`track`，又开启新一轮调用。\n\n事务\n--\n\nMobx中还有一个重要的特性：**事务**。\n\n### startBatch与endBatch\n\nMobx维护了一个全局变量`globalState.inBatch`,`startBatch`时加1，`endBatch`时减1,当为0,当为1时（--globalState.inBatch === 0），会调用`runReactions`。\n\n每一次变更开始都会调用`startBatch`,结束时调用`endBatch`。过程中可能多次调用`runReactions`,但每个reaction只会调用一次`runReaction_`。\n\n![image.png](../imgs/d886abe69e114dddb8a1c6235046d729.png)\n\n但是对于两个独立的setter所触发的反应，并不会合并到同一个事务里。这也是为什么Mobx建议所有的变更都放在`action`中。我们看`runInAction`的源码:\n\n```typescript\nexport function runInAction<T>(fn: () => T): T {\n    return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined)\n}\nexport function executeAction(\n    actionName: string,\n    canRunAsDerivation: boolean,\n    fn: Function,\n    scope?: any,\n    args?: IArguments\n) {\n    const runInfo = _startAction(actionName, canRunAsDerivation, scope, args)\n    try {\n        return fn.apply(scope, args)\n    } catch (err) {\n        runInfo.error_ = err\n        throw err\n    } finally {\n        _endAction(runInfo)\n    }\n}\n```\n\n其中`_startAction`和`_endAction`分别调用了一次`startBatch()`和 `endBatch()`,这使得多次变更触发的`runReactions`始终因为`globalState.inBatch>0`挂起，直到最后一次`endBatch()`将`globalState.inBatch`置为0后再让各reaction执行`runReaction_()`\n\n总结\n--\n\n本文分析了Reaction的源码和执行过程，以及Mobx事务的原理。结合前面几篇，Mobx底层运行逻辑已经全部讲完。当然Mobx的源码还有很多未尽之处，但万变不离其宗。由于Mobx源码相当晦涩，系列可能很多地方表述不清，但只看[本系列的第一篇](https://juejin.cn/post/7036354289215733791 \"https://juejin.cn/post/7036354289215733791\")，亦能见微知著。","slug":"Mobx6核心源码解析（五）  Reaction和事务","published":1,"updated":"2024-04-04T15:27:03.570Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhj000khajfcc8k3zly","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前面的文章解析了“观察”部分的源码，既下面代码中的第一行。本文将介绍“反应”部分的代码，既下面代码中的第二行。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const target = <span class=\"built_in\">observable</span>(obj)</span><br><span class=\"line\"><span class=\"built_in\">autorun</span>(() =&gt; &#123; console<span class=\"selector-class\">.log</span>(&#x27;target.value=&#x27;, target.value) &#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"autorun\"><a href=\"#autorun\" class=\"headerlink\" title=\"autorun\"></a>autorun</h2><p>在介绍<code>Reaction</code>之前先介绍一下<code>autorun</code>:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">autorun</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    view: (r: IReactionPublic) =&gt; <span class=\"built_in\">any</span>,</span></span><br><span class=\"line\"><span class=\"params\">    opts: IAutorunOptions = EMPTY_OBJECT</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">IReactionDisposer</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// normal autorun</span></span><br><span class=\"line\">    reaction = <span class=\"keyword\">new</span> <span class=\"title class_\">Reaction</span>(</span><br><span class=\"line\">        name,</span><br><span class=\"line\">        <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">this</span>: Reaction</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">track</span>(reactionRunner)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        opts.<span class=\"property\">onError</span>,</span><br><span class=\"line\">        opts.<span class=\"property\">requiresObservable</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">reactionRunner</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">view</span>(reaction)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    reaction.<span class=\"title function_\">schedule_</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reaction.<span class=\"title function_\">getDisposer_</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>autorun</code>中最重要的事情就是创建了一个<code>Reaction</code>实例，并执行了这个实例的<code>schedule_</code>方法，驱动反应运行的，正式这个方法。</p>\n<h2 id=\"Reaction\"><a href=\"#Reaction\" class=\"headerlink\" title=\"Reaction\"></a>Reaction</h2><p>Reaction是一种特殊的derivation，derivation都有一个状态，代表它的依赖是否更新：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export enum IDerivationState_ &#123;</span><br><span class=\"line\">    // 没有依赖</span><br><span class=\"line\">    <span class=\"attr\">NOT_TRACKING_</span> = -<span class=\"number\">1</span>,</span><br><span class=\"line\">    // 没有更新</span><br><span class=\"line\">    <span class=\"attr\">UP_TO_DATE_</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">    // 可能更新（依赖的某个深度属性变更，但依赖本身引用未可能未更新，此时可以按需处理）</span><br><span class=\"line\">    <span class=\"attr\">POSSIBLY_STALE_</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">    // 更新</span><br><span class=\"line\">    <span class=\"attr\">STALE_</span> = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Reaction内部机制如下：</p>\n<ul>\n<li><ol>\n<li>reaction创建后，应该以<code>runReaction</code>或者通过调度（见<code>autorun</code>）启动</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><code>onInvalidate</code>应以某种方式调用<code>this.track(someFunction)</code></li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li><code>someFunction</code>访问的所有可观察对象都将会被这个reaction观察到</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>一旦发生依赖改版，Reaction将会被再次调度（在变更或事务结束后）</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li><code>onInvalidate</code>调用后会返回第一步 我们还是来看它的源码：</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export <span class=\"keyword\">class</span> <span class=\"title class_\">Reaction</span> <span class=\"title\">implements</span> <span class=\"title\">IDerivation</span>, <span class=\"type\">IReactionPublic</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">public</span> name_: <span class=\"built_in\">string</span> = __DEV__ ? <span class=\"string\">&quot;Reaction@&quot;</span> + getNextId() : <span class=\"string\">&quot;Reaction&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> onInvalidate_: () =&gt; <span class=\"built_in\">void</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> errorHandler_?: (error: <span class=\"built_in\">any</span>, derivation: IDerivation) =&gt; <span class=\"built_in\">void</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">public</span> requiresObservable_ = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>onInvalidate_</code>参数,是一个调用了它的<code>track</code>方法的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">this</span>: Reaction</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">track</span>(reactionRunner)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p><code>reactionRunner</code>就是上文中的<code>someFunction</code>，<code>view</code>是传入<code>autorun</code>的函数。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> function <span class=\"built_in\">reactionRunner</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">view</span>(reaction)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"schedule\"><a href=\"#schedule\" class=\"headerlink\" title=\"schedule_\"></a>schedule_</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schedule_() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.isScheduled_) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isScheduled_ = <span class=\"literal\">true</span></span><br><span class=\"line\">        globalState.pendingReactions.push(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        runReactions()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>刚创建时， <code>this.isScheduled_</code>为<code>false</code>,这个<code>reaction</code>会被放入<code>globalState.pendingReactions</code>数组中，并开始运行：<code>runReactions</code>会从<code>globalState.pendingReactions</code>取出所有的<code>reaction</code>，并依次执行它的<code>runReaction_</code>方法。</p>\n<h3 id=\"runReaction\"><a href=\"#runReaction\" class=\"headerlink\" title=\"runReaction_\"></a>runReaction_</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">runReaction_</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">isDisposed_</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">startBatch</span>()</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">isScheduled_</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> prev = globalState.<span class=\"property\">trackingContext</span></span><br><span class=\"line\">        globalState.<span class=\"property\">trackingContext</span> = <span class=\"variable language_\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">shouldCompute</span>(<span class=\"variable language_\">this</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">isTrackPending_</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">onInvalidate_</span>()</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">reportExceptionInDerivation_</span>(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        globalState.<span class=\"property\">trackingContext</span> = prev</span><br><span class=\"line\">        <span class=\"title function_\">endBatch</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>reaction</code>被创建时，都是<code>IDerivationState_.NOT_TRACKING_</code>的，<strong>因此会执行<code>this.onInvalidate_()</code>,也就是调用了这个函数</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">this</span>: Reaction</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">track</span>(reactionRunner)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"track\"><a href=\"#track\" class=\"headerlink\" title=\"track\"></a>track</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"title function_\">track</span>(<span class=\"params\">fn: () =&gt; <span class=\"built_in\">void</span></span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"title function_\">startBatch</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> startTime</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isRunning_</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevReaction = globalState.<span class=\"property\">trackingContext</span> <span class=\"comment\">// reactions could create reactions...</span></span><br><span class=\"line\">    globalState.<span class=\"property\">trackingContext</span> = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"title function_\">trackDerivedFunction</span>(<span class=\"variable language_\">this</span>, fn, <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    globalState.<span class=\"property\">trackingContext</span> = prevReaction</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isRunning_</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isTrackPending_</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isCaughtException</span>(result)) <span class=\"variable language_\">this</span>.<span class=\"title function_\">reportExceptionInDerivation_</span>(result.<span class=\"property\">cause</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"title function_\">endBatch</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里有一个关键调用：<code>trackDerivedFunction</code></p>\n<ul>\n<li>trackDerivedFunction 这个函数接收了这个reaction和<code>someFunction</code>:</li>\n</ul>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function trackDerivedFunction&lt;T&gt;(derivation: IDerivation, f: () =&gt; T, context: any) &#123;</span><br><span class=\"line\">    const <span class=\"attr\">prevAllowStateReads</span> = allowStateReadsStart(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    changeDependenciesStateTo0(derivation)</span><br><span class=\"line\">    <span class=\"attr\">derivation.newObserving_</span> = new Array(derivation.observing_.length + <span class=\"number\">100</span>)</span><br><span class=\"line\">    <span class=\"attr\">derivation.unboundDepsCount_</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">derivation.runId_</span> = ++globalState.runId</span><br><span class=\"line\">    const <span class=\"attr\">prevTracking</span> = globalState.trackingDerivation</span><br><span class=\"line\">    <span class=\"attr\">globalState.trackingDerivation</span> = derivation</span><br><span class=\"line\">    globalState.inBatch++</span><br><span class=\"line\">    let result</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">result</span> = f.call(context)</span><br><span class=\"line\">    globalState.inBatch--</span><br><span class=\"line\">    <span class=\"attr\">globalState.trackingDerivation</span> = prevTracking</span><br><span class=\"line\">    bindDependencies(derivation)</span><br><span class=\"line\"></span><br><span class=\"line\">    warnAboutDerivationWithoutDependencies(derivation)</span><br><span class=\"line\">    allowStateReadsEnd(prevAllowStateReads)</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里看到<code>f.call(context)</code>,意味着我们传入<code>autorun</code>的函数被执行了。</p>\n<p>另外，这里的<code>globalState.trackingDerivation = derivation</code><a href=\"https://juejin.cn/post/7038459812601921550\" title=\"https://juejin.cn/post/7038459812601921550\">呼应了<code>reportObserved</code>函数中的<code>const derivation = globalState.trackingDerivation</code></a>。</p>\n<p>同样，这里也有一个关键调用<code>bindDependencies</code>：</p>\n<ul>\n<li>bindDependencies</li>\n</ul>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bindDependencies(derivation: IDerivation) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    const <span class=\"attr\">prevObserving</span> = derivation.observing_</span><br><span class=\"line\">    const <span class=\"attr\">observing</span> = (derivation.observing_ = derivation.newObserving_!)</span><br><span class=\"line\">    let <span class=\"attr\">lowestNewObservingDerivationState</span> = IDerivationState_.UP_TO_DATE_</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">observing.length</span> = i0</span><br><span class=\"line\">    while (i0--) &#123;</span><br><span class=\"line\">        const <span class=\"attr\">dep</span> = observing[i0]</span><br><span class=\"line\">        if (<span class=\"attr\">dep.diffValue_</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"attr\">dep.diffValue_</span> = <span class=\"number\">0</span></span><br><span class=\"line\">            addObserver(dep, derivation)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从<code>derivation.newObserving_</code>取出observable,并通过<code>addObserver</code>，将这个reaction加到observable的<code>observers_</code>属性中。<a href=\"https://juejin.cn/post/7038459812601921550\" title=\"https://juejin.cn/post/7038459812601921550\">这一点也与前文中<code>propagateChanged</code>函数的逻辑对应</a></p>\n<p><strong>到这里，上一篇文章中遗留的两个问题都得到了回答。</strong></p>\n<h3 id=\"onBecomeStale\"><a href=\"#onBecomeStale\" class=\"headerlink\" title=\"onBecomeStale_\"></a>onBecomeStale_</h3><p>在<code>propagateChanged</code>中会执行每个reaction的<code>onBecomeStale_</code>方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onBecomeStale_</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">schedule_</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它会调动前文中的<code>schedule_</code>,于是<code>runReaction_</code>、<code>onInvalidate_</code>、<code>track</code>，又开启新一轮调用。</p>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>Mobx中还有一个重要的特性：<strong>事务</strong>。</p>\n<h3 id=\"startBatch与endBatch\"><a href=\"#startBatch与endBatch\" class=\"headerlink\" title=\"startBatch与endBatch\"></a>startBatch与endBatch</h3><p>Mobx维护了一个全局变量<code>globalState.inBatch</code>,<code>startBatch</code>时加1，<code>endBatch</code>时减1,当为0,当为1时（–globalState.inBatch &#x3D;&#x3D;&#x3D; 0），会调用<code>runReactions</code>。</p>\n<p>每一次变更开始都会调用<code>startBatch</code>,结束时调用<code>endBatch</code>。过程中可能多次调用<code>runReactions</code>,但每个reaction只会调用一次<code>runReaction_</code>。</p>\n<p><img src=\"/../imgs/d886abe69e114dddb8a1c6235046d729.png\" alt=\"image.png\"></p>\n<p>但是对于两个独立的setter所触发的反应，并不会合并到同一个事务里。这也是为什么Mobx建议所有的变更都放在<code>action</code>中。我们看<code>runInAction</code>的源码:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> runInAction&lt;T&gt;(<span class=\"attr\">fn</span>: <span class=\"function\">() =&gt;</span> T): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">executeAction</span>(fn.<span class=\"property\">name</span> || <span class=\"variable constant_\">DEFAULT_ACTION_NAME</span>, <span class=\"literal\">false</span>, fn, <span class=\"variable language_\">this</span>, <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">executeAction</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    actionName: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    canRunAsDerivation: <span class=\"built_in\">boolean</span>,</span></span><br><span class=\"line\"><span class=\"params\">    fn: <span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">    scope?: <span class=\"built_in\">any</span>,</span></span><br><span class=\"line\"><span class=\"params\">    args?: IArguments</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> runInfo = <span class=\"title function_\">_startAction</span>(actionName, canRunAsDerivation, scope, args)</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(scope, args)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        runInfo.<span class=\"property\">error_</span> = err</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">_endAction</span>(runInfo)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>_startAction</code>和<code>_endAction</code>分别调用了一次<code>startBatch()</code>和 <code>endBatch()</code>,这使得多次变更触发的<code>runReactions</code>始终因为<code>globalState.inBatch&gt;0</code>挂起，直到最后一次<code>endBatch()</code>将<code>globalState.inBatch</code>置为0后再让各reaction执行<code>runReaction_()</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文分析了Reaction的源码和执行过程，以及Mobx事务的原理。结合前面几篇，Mobx底层运行逻辑已经全部讲完。当然Mobx的源码还有很多未尽之处，但万变不离其宗。由于Mobx源码相当晦涩，系列可能很多地方表述不清，但只看<a href=\"https://juejin.cn/post/7036354289215733791\" title=\"https://juejin.cn/post/7036354289215733791\">本系列的第一篇</a>，亦能见微知著。</p>\n","length":5752,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前面的文章解析了“观察”部分的源码，既下面代码中的第一行。本文将介绍“反应”部分的代码，既下面代码中的第二行。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const target = <span class=\"built_in\">observable</span>(obj)</span><br><span class=\"line\"><span class=\"built_in\">autorun</span>(() =&gt; &#123; console<span class=\"selector-class\">.log</span>(&#x27;target.value=&#x27;, target.value) &#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"autorun\"><a href=\"#autorun\" class=\"headerlink\" title=\"autorun\"></a>autorun</h2><p>在介绍<code>Reaction</code>之前先介绍一下<code>autorun</code>:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">autorun</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    view: (r: IReactionPublic) =&gt; <span class=\"built_in\">any</span>,</span></span><br><span class=\"line\"><span class=\"params\">    opts: IAutorunOptions = EMPTY_OBJECT</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">IReactionDisposer</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// normal autorun</span></span><br><span class=\"line\">    reaction = <span class=\"keyword\">new</span> <span class=\"title class_\">Reaction</span>(</span><br><span class=\"line\">        name,</span><br><span class=\"line\">        <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">this</span>: Reaction</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">track</span>(reactionRunner)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        opts.<span class=\"property\">onError</span>,</span><br><span class=\"line\">        opts.<span class=\"property\">requiresObservable</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">reactionRunner</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">view</span>(reaction)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    reaction.<span class=\"title function_\">schedule_</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reaction.<span class=\"title function_\">getDisposer_</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>autorun</code>中最重要的事情就是创建了一个<code>Reaction</code>实例，并执行了这个实例的<code>schedule_</code>方法，驱动反应运行的，正式这个方法。</p>\n<h2 id=\"Reaction\"><a href=\"#Reaction\" class=\"headerlink\" title=\"Reaction\"></a>Reaction</h2><p>Reaction是一种特殊的derivation，derivation都有一个状态，代表它的依赖是否更新：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export enum IDerivationState_ &#123;</span><br><span class=\"line\">    // 没有依赖</span><br><span class=\"line\">    <span class=\"attr\">NOT_TRACKING_</span> = -<span class=\"number\">1</span>,</span><br><span class=\"line\">    // 没有更新</span><br><span class=\"line\">    <span class=\"attr\">UP_TO_DATE_</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">    // 可能更新（依赖的某个深度属性变更，但依赖本身引用未可能未更新，此时可以按需处理）</span><br><span class=\"line\">    <span class=\"attr\">POSSIBLY_STALE_</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">    // 更新</span><br><span class=\"line\">    <span class=\"attr\">STALE_</span> = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Reaction内部机制如下：</p>\n<ul>\n<li><ol>\n<li>reaction创建后，应该以<code>runReaction</code>或者通过调度（见<code>autorun</code>）启动</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><code>onInvalidate</code>应以某种方式调用<code>this.track(someFunction)</code></li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li><code>someFunction</code>访问的所有可观察对象都将会被这个reaction观察到</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>一旦发生依赖改版，Reaction将会被再次调度（在变更或事务结束后）</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li><code>onInvalidate</code>调用后会返回第一步 我们还是来看它的源码：</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export <span class=\"keyword\">class</span> <span class=\"title class_\">Reaction</span> <span class=\"title\">implements</span> <span class=\"title\">IDerivation</span>, <span class=\"type\">IReactionPublic</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">public</span> name_: <span class=\"built_in\">string</span> = __DEV__ ? <span class=\"string\">&quot;Reaction@&quot;</span> + getNextId() : <span class=\"string\">&quot;Reaction&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> onInvalidate_: () =&gt; <span class=\"built_in\">void</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> errorHandler_?: (error: <span class=\"built_in\">any</span>, derivation: IDerivation) =&gt; <span class=\"built_in\">void</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">public</span> requiresObservable_ = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>onInvalidate_</code>参数,是一个调用了它的<code>track</code>方法的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">this</span>: Reaction</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">track</span>(reactionRunner)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p><code>reactionRunner</code>就是上文中的<code>someFunction</code>，<code>view</code>是传入<code>autorun</code>的函数。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> function <span class=\"built_in\">reactionRunner</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">view</span>(reaction)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"schedule\"><a href=\"#schedule\" class=\"headerlink\" title=\"schedule_\"></a>schedule_</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schedule_() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.isScheduled_) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isScheduled_ = <span class=\"literal\">true</span></span><br><span class=\"line\">        globalState.pendingReactions.push(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        runReactions()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>刚创建时， <code>this.isScheduled_</code>为<code>false</code>,这个<code>reaction</code>会被放入<code>globalState.pendingReactions</code>数组中，并开始运行：<code>runReactions</code>会从<code>globalState.pendingReactions</code>取出所有的<code>reaction</code>，并依次执行它的<code>runReaction_</code>方法。</p>\n<h3 id=\"runReaction\"><a href=\"#runReaction\" class=\"headerlink\" title=\"runReaction_\"></a>runReaction_</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">runReaction_</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">isDisposed_</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">startBatch</span>()</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">isScheduled_</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> prev = globalState.<span class=\"property\">trackingContext</span></span><br><span class=\"line\">        globalState.<span class=\"property\">trackingContext</span> = <span class=\"variable language_\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">shouldCompute</span>(<span class=\"variable language_\">this</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">isTrackPending_</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">onInvalidate_</span>()</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">reportExceptionInDerivation_</span>(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        globalState.<span class=\"property\">trackingContext</span> = prev</span><br><span class=\"line\">        <span class=\"title function_\">endBatch</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>reaction</code>被创建时，都是<code>IDerivationState_.NOT_TRACKING_</code>的，<strong>因此会执行<code>this.onInvalidate_()</code>,也就是调用了这个函数</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">this</span>: Reaction</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">track</span>(reactionRunner)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"track\"><a href=\"#track\" class=\"headerlink\" title=\"track\"></a>track</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"title function_\">track</span>(<span class=\"params\">fn: () =&gt; <span class=\"built_in\">void</span></span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"title function_\">startBatch</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> startTime</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isRunning_</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevReaction = globalState.<span class=\"property\">trackingContext</span> <span class=\"comment\">// reactions could create reactions...</span></span><br><span class=\"line\">    globalState.<span class=\"property\">trackingContext</span> = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"title function_\">trackDerivedFunction</span>(<span class=\"variable language_\">this</span>, fn, <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    globalState.<span class=\"property\">trackingContext</span> = prevReaction</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isRunning_</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isTrackPending_</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isCaughtException</span>(result)) <span class=\"variable language_\">this</span>.<span class=\"title function_\">reportExceptionInDerivation_</span>(result.<span class=\"property\">cause</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"title function_\">endBatch</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里有一个关键调用：<code>trackDerivedFunction</code></p>\n<ul>\n<li>trackDerivedFunction 这个函数接收了这个reaction和<code>someFunction</code>:</li>\n</ul>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function trackDerivedFunction&lt;T&gt;(derivation: IDerivation, f: () =&gt; T, context: any) &#123;</span><br><span class=\"line\">    const <span class=\"attr\">prevAllowStateReads</span> = allowStateReadsStart(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    changeDependenciesStateTo0(derivation)</span><br><span class=\"line\">    <span class=\"attr\">derivation.newObserving_</span> = new Array(derivation.observing_.length + <span class=\"number\">100</span>)</span><br><span class=\"line\">    <span class=\"attr\">derivation.unboundDepsCount_</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">derivation.runId_</span> = ++globalState.runId</span><br><span class=\"line\">    const <span class=\"attr\">prevTracking</span> = globalState.trackingDerivation</span><br><span class=\"line\">    <span class=\"attr\">globalState.trackingDerivation</span> = derivation</span><br><span class=\"line\">    globalState.inBatch++</span><br><span class=\"line\">    let result</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">result</span> = f.call(context)</span><br><span class=\"line\">    globalState.inBatch--</span><br><span class=\"line\">    <span class=\"attr\">globalState.trackingDerivation</span> = prevTracking</span><br><span class=\"line\">    bindDependencies(derivation)</span><br><span class=\"line\"></span><br><span class=\"line\">    warnAboutDerivationWithoutDependencies(derivation)</span><br><span class=\"line\">    allowStateReadsEnd(prevAllowStateReads)</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里看到<code>f.call(context)</code>,意味着我们传入<code>autorun</code>的函数被执行了。</p>\n<p>另外，这里的<code>globalState.trackingDerivation = derivation</code><a href=\"https://juejin.cn/post/7038459812601921550\" title=\"https://juejin.cn/post/7038459812601921550\">呼应了<code>reportObserved</code>函数中的<code>const derivation = globalState.trackingDerivation</code></a>。</p>\n<p>同样，这里也有一个关键调用<code>bindDependencies</code>：</p>\n<ul>\n<li>bindDependencies</li>\n</ul>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bindDependencies(derivation: IDerivation) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    const <span class=\"attr\">prevObserving</span> = derivation.observing_</span><br><span class=\"line\">    const <span class=\"attr\">observing</span> = (derivation.observing_ = derivation.newObserving_!)</span><br><span class=\"line\">    let <span class=\"attr\">lowestNewObservingDerivationState</span> = IDerivationState_.UP_TO_DATE_</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">observing.length</span> = i0</span><br><span class=\"line\">    while (i0--) &#123;</span><br><span class=\"line\">        const <span class=\"attr\">dep</span> = observing[i0]</span><br><span class=\"line\">        if (<span class=\"attr\">dep.diffValue_</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"attr\">dep.diffValue_</span> = <span class=\"number\">0</span></span><br><span class=\"line\">            addObserver(dep, derivation)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从<code>derivation.newObserving_</code>取出observable,并通过<code>addObserver</code>，将这个reaction加到observable的<code>observers_</code>属性中。<a href=\"https://juejin.cn/post/7038459812601921550\" title=\"https://juejin.cn/post/7038459812601921550\">这一点也与前文中<code>propagateChanged</code>函数的逻辑对应</a></p>\n<p><strong>到这里，上一篇文章中遗留的两个问题都得到了回答。</strong></p>\n<h3 id=\"onBecomeStale\"><a href=\"#onBecomeStale\" class=\"headerlink\" title=\"onBecomeStale_\"></a>onBecomeStale_</h3><p>在<code>propagateChanged</code>中会执行每个reaction的<code>onBecomeStale_</code>方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onBecomeStale_</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">schedule_</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它会调动前文中的<code>schedule_</code>,于是<code>runReaction_</code>、<code>onInvalidate_</code>、<code>track</code>，又开启新一轮调用。</p>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>Mobx中还有一个重要的特性：<strong>事务</strong>。</p>\n<h3 id=\"startBatch与endBatch\"><a href=\"#startBatch与endBatch\" class=\"headerlink\" title=\"startBatch与endBatch\"></a>startBatch与endBatch</h3><p>Mobx维护了一个全局变量<code>globalState.inBatch</code>,<code>startBatch</code>时加1，<code>endBatch</code>时减1,当为0,当为1时（–globalState.inBatch &#x3D;&#x3D;&#x3D; 0），会调用<code>runReactions</code>。</p>\n<p>每一次变更开始都会调用<code>startBatch</code>,结束时调用<code>endBatch</code>。过程中可能多次调用<code>runReactions</code>,但每个reaction只会调用一次<code>runReaction_</code>。</p>\n<p><img src=\"/../imgs/d886abe69e114dddb8a1c6235046d729.png\" alt=\"image.png\"></p>\n<p>但是对于两个独立的setter所触发的反应，并不会合并到同一个事务里。这也是为什么Mobx建议所有的变更都放在<code>action</code>中。我们看<code>runInAction</code>的源码:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> runInAction&lt;T&gt;(<span class=\"attr\">fn</span>: <span class=\"function\">() =&gt;</span> T): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">executeAction</span>(fn.<span class=\"property\">name</span> || <span class=\"variable constant_\">DEFAULT_ACTION_NAME</span>, <span class=\"literal\">false</span>, fn, <span class=\"variable language_\">this</span>, <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">executeAction</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    actionName: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    canRunAsDerivation: <span class=\"built_in\">boolean</span>,</span></span><br><span class=\"line\"><span class=\"params\">    fn: <span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">    scope?: <span class=\"built_in\">any</span>,</span></span><br><span class=\"line\"><span class=\"params\">    args?: IArguments</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> runInfo = <span class=\"title function_\">_startAction</span>(actionName, canRunAsDerivation, scope, args)</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(scope, args)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        runInfo.<span class=\"property\">error_</span> = err</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">_endAction</span>(runInfo)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>_startAction</code>和<code>_endAction</code>分别调用了一次<code>startBatch()</code>和 <code>endBatch()</code>,这使得多次变更触发的<code>runReactions</code>始终因为<code>globalState.inBatch&gt;0</code>挂起，直到最后一次<code>endBatch()</code>将<code>globalState.inBatch</code>置为0后再让各reaction执行<code>runReaction_()</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文分析了Reaction的源码和执行过程，以及Mobx事务的原理。结合前面几篇，Mobx底层运行逻辑已经全部讲完。当然Mobx的源码还有很多未尽之处，但万变不离其宗。由于Mobx源码相当晦涩，系列可能很多地方表述不清，但只看<a href=\"https://juejin.cn/post/7036354289215733791\" title=\"https://juejin.cn/post/7036354289215733791\">本系列的第一篇</a>，亦能见微知著。</p>\n"},{"title":"Mobx6核心源码解析（四）: ObservableValue","date":"2021-12-05T16:00:00.000Z","_content":"\n前言\n--\n\n```ini\nlet target = observable(obj)\n```\n\n在Mobx中`Atom`用来监测数据被观察和修改，在设置target的属性描述符的时候，对应每一个key都会创建一个一个`Atom`的子类`ObservableValue`实例。\n\nObservableValue\n---------------\n\n如果`obserable(obj)`的返回值target是\"_明_\",而obj是\"_暗_\"，那么`ObservableValue`实例则是\"_明_\"通往\"_暗_\"的单向桥梁。对target相应key的getter和setter都调用了这个实例的相应方法。\n\n*   value\\_ 这个属性保存了obj对象的对应的key的`descriptor.value`\n*   get： 当访问target的属性的时候，会调用这个方法。返回的就是原obj对象对应key的相应value`reportObserved`，\n\n```kotlin\n public get(): T {\n    this.reportObserved()\n    return this.dehanceValue(this.value_)\n}\n```\n\nget的调用说明该key被依赖，其会调用`reportObserved`处理依赖。\n\n*   reportObserved 这个方法继承自父类`Atom`,该函数中最有价值的事情是确定依赖关系。\n\n```java\nexport function reportObserved(observable: IObservable): boolean {\n    ...\n    const derivation = globalState.trackingDerivation\n    if (derivation !== null) {\n       \n        if (derivation.runId_ !== observable.lastAccessedBy_) {\n            observable.lastAccessedBy_ = derivation.runId_\n          \n            derivation.newObserving_![derivation.unboundDepsCount_++] = observable\n            if (!observable.isBeingObserved_ && globalState.trackingContext) {\n                observable.isBeingObserved_ = true\n                observable.onBO()\n            }\n        }\n        return true\n    } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {\n        queueForUnobservation(observable)\n    }\n\n    return false\n}\n```\n\n`globalState.trackingDerivation`是一个`IDerivation`类型的数据，或者称之为\"_派生_\"，它有一个大名鼎鼎的实现类，叫`Reaction`。可以简单理解：**derivation是observable数据的观察者。** 当这段代码运行的时候就会创建出一个`reaction`，并挂到`globalState.trackingDerivation`上，这个过程在解析`autorun`源码的时候再具体分析。\n\n```scss\nauturun(()=>{...})\n```\n\n总之，这里通过`derivation.newObserving_![derivation.unboundDepsCount_++] = observable`,确定了`derivation`对这个`ObservableValue`实例有依赖。\n\n*   set和setNewValue 当对target设置/修改值的时候会调用`set`或`setNewValue`，set内部也调用了`setNewValue`.\n\n```kotlin\npublic set(newValue: T) {\n    const oldValue = this.value_\n    newValue = this.prepareNewValue_(newValue) as any\n    ...\n    if (newValue !== globalState.UNCHANGED) {\n        this.setNewValue_(newValue)\n    }\n}\nsetNewValue_(newValue: T) {\n    const oldValue = this.value_\n    this.value_ = newValue\n    this.reportChanged()\n   ...\n}\n```\n\n`setNewValue`触发时说明value变更，需要通知依赖进行相应的处理，这里调用的是`reportChanged`。\n\n*   reportChanged 这个方法也继承自父类`Atom`\n\n```scss\n public reportChanged() {\n        startBatch()\n        propagateChanged(this)\n        endBatch()\n    }\n```\n\n`propagateChanged`从`ObservableValue`实例`observable`中找到对它有依赖的所有`derivation`，并调用`onBecomeStale_`,这个方法在`Reaction`中定义，它在经过了一系列复杂的调用后，能够使得依赖的函数再次运行。\n\n```ini\nexport function propagateChanged(observable: IObservable) {\n    // invariantLOS(observable, \"changed start\");\n    if (observable.lowestObserverState_ === IDerivationState_.STALE_) return\n    observable.lowestObserverState_ = IDerivationState_.STALE_\n\n    // Ideally we use for..of here, but the downcompiled version is really slow...\n    observable.observers_.forEach(d => {\n        if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n            if (__DEV__ && d.isTracing_ !== TraceMode.NONE) {\n                logTraceInfo(d, observable)\n            }\n            d.onBecomeStale_()\n        }\n        d.dependenciesState_ = IDerivationState_.STALE_\n    })\n    // invariantLOS(observable, \"changed end\");\n}\n```\n\n未完待续\n----\n\nMobx中“观察”部分的代码到这里就基本结束了，但是遗留了两个问题：`globalState.trackingDerivation`是何时确定的以及`observable.observers_`又是如何收集的。\n\n下一节将开始Mobx“反应”部分的源码解析，回答这两个问题","source":"_posts/Mobx6核心源码解析（四）  ObservableValue.md","raw":"---\n title: \"Mobx6核心源码解析（四）: ObservableValue\"\n date: 2021-12-06\n tags: [前端,MobX]\n categories: [前端笔记]\n---\n\n前言\n--\n\n```ini\nlet target = observable(obj)\n```\n\n在Mobx中`Atom`用来监测数据被观察和修改，在设置target的属性描述符的时候，对应每一个key都会创建一个一个`Atom`的子类`ObservableValue`实例。\n\nObservableValue\n---------------\n\n如果`obserable(obj)`的返回值target是\"_明_\",而obj是\"_暗_\"，那么`ObservableValue`实例则是\"_明_\"通往\"_暗_\"的单向桥梁。对target相应key的getter和setter都调用了这个实例的相应方法。\n\n*   value\\_ 这个属性保存了obj对象的对应的key的`descriptor.value`\n*   get： 当访问target的属性的时候，会调用这个方法。返回的就是原obj对象对应key的相应value`reportObserved`，\n\n```kotlin\n public get(): T {\n    this.reportObserved()\n    return this.dehanceValue(this.value_)\n}\n```\n\nget的调用说明该key被依赖，其会调用`reportObserved`处理依赖。\n\n*   reportObserved 这个方法继承自父类`Atom`,该函数中最有价值的事情是确定依赖关系。\n\n```java\nexport function reportObserved(observable: IObservable): boolean {\n    ...\n    const derivation = globalState.trackingDerivation\n    if (derivation !== null) {\n       \n        if (derivation.runId_ !== observable.lastAccessedBy_) {\n            observable.lastAccessedBy_ = derivation.runId_\n          \n            derivation.newObserving_![derivation.unboundDepsCount_++] = observable\n            if (!observable.isBeingObserved_ && globalState.trackingContext) {\n                observable.isBeingObserved_ = true\n                observable.onBO()\n            }\n        }\n        return true\n    } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {\n        queueForUnobservation(observable)\n    }\n\n    return false\n}\n```\n\n`globalState.trackingDerivation`是一个`IDerivation`类型的数据，或者称之为\"_派生_\"，它有一个大名鼎鼎的实现类，叫`Reaction`。可以简单理解：**derivation是observable数据的观察者。** 当这段代码运行的时候就会创建出一个`reaction`，并挂到`globalState.trackingDerivation`上，这个过程在解析`autorun`源码的时候再具体分析。\n\n```scss\nauturun(()=>{...})\n```\n\n总之，这里通过`derivation.newObserving_![derivation.unboundDepsCount_++] = observable`,确定了`derivation`对这个`ObservableValue`实例有依赖。\n\n*   set和setNewValue 当对target设置/修改值的时候会调用`set`或`setNewValue`，set内部也调用了`setNewValue`.\n\n```kotlin\npublic set(newValue: T) {\n    const oldValue = this.value_\n    newValue = this.prepareNewValue_(newValue) as any\n    ...\n    if (newValue !== globalState.UNCHANGED) {\n        this.setNewValue_(newValue)\n    }\n}\nsetNewValue_(newValue: T) {\n    const oldValue = this.value_\n    this.value_ = newValue\n    this.reportChanged()\n   ...\n}\n```\n\n`setNewValue`触发时说明value变更，需要通知依赖进行相应的处理，这里调用的是`reportChanged`。\n\n*   reportChanged 这个方法也继承自父类`Atom`\n\n```scss\n public reportChanged() {\n        startBatch()\n        propagateChanged(this)\n        endBatch()\n    }\n```\n\n`propagateChanged`从`ObservableValue`实例`observable`中找到对它有依赖的所有`derivation`，并调用`onBecomeStale_`,这个方法在`Reaction`中定义，它在经过了一系列复杂的调用后，能够使得依赖的函数再次运行。\n\n```ini\nexport function propagateChanged(observable: IObservable) {\n    // invariantLOS(observable, \"changed start\");\n    if (observable.lowestObserverState_ === IDerivationState_.STALE_) return\n    observable.lowestObserverState_ = IDerivationState_.STALE_\n\n    // Ideally we use for..of here, but the downcompiled version is really slow...\n    observable.observers_.forEach(d => {\n        if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n            if (__DEV__ && d.isTracing_ !== TraceMode.NONE) {\n                logTraceInfo(d, observable)\n            }\n            d.onBecomeStale_()\n        }\n        d.dependenciesState_ = IDerivationState_.STALE_\n    })\n    // invariantLOS(observable, \"changed end\");\n}\n```\n\n未完待续\n----\n\nMobx中“观察”部分的代码到这里就基本结束了，但是遗留了两个问题：`globalState.trackingDerivation`是何时确定的以及`observable.observers_`又是如何收集的。\n\n下一节将开始Mobx“反应”部分的源码解析，回答这两个问题","slug":"Mobx6核心源码解析（四）  ObservableValue","published":1,"updated":"2024-04-04T15:27:03.562Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhk000ohajf64f638ax","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let <span class=\"attr\">target</span> = observable(obj)</span><br></pre></td></tr></table></figure>\n\n<p>在Mobx中<code>Atom</code>用来监测数据被观察和修改，在设置target的属性描述符的时候，对应每一个key都会创建一个一个<code>Atom</code>的子类<code>ObservableValue</code>实例。</p>\n<h2 id=\"ObservableValue\"><a href=\"#ObservableValue\" class=\"headerlink\" title=\"ObservableValue\"></a>ObservableValue</h2><p>如果<code>obserable(obj)</code>的返回值target是”<em>明</em>“,而obj是”<em>暗</em>“，那么<code>ObservableValue</code>实例则是”<em>明</em>“通往”<em>暗</em>“的单向桥梁。对target相应key的getter和setter都调用了这个实例的相应方法。</p>\n<ul>\n<li>value_ 这个属性保存了obj对象的对应的key的<code>descriptor.value</code></li>\n<li>get： 当访问target的属性的时候，会调用这个方法。返回的就是原obj对象对应key的相应value<code>reportObserved</code>，</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">get</span>(): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reportObserved()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dehanceValue(<span class=\"keyword\">this</span>.value_)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>get的调用说明该key被依赖，其会调用<code>reportObserved</code>处理依赖。</p>\n<ul>\n<li>reportObserved 这个方法继承自父类<code>Atom</code>,该函数中最有价值的事情是确定依赖关系。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function <span class=\"title function_\">reportObserved</span><span class=\"params\">(observable: IObservable)</span>: <span class=\"type\">boolean</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"variable\">derivation</span> <span class=\"operator\">=</span> globalState.trackingDerivation</span><br><span class=\"line\">    <span class=\"title function_\">if</span> <span class=\"params\">(derivation !== <span class=\"literal\">null</span>)</span> &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (derivation.runId_ !== observable.lastAccessedBy_) &#123;</span><br><span class=\"line\">            observable.lastAccessedBy_ = derivation.runId_</span><br><span class=\"line\">          </span><br><span class=\"line\">            derivation.newObserving_![derivation.unboundDepsCount_++] = observable</span><br><span class=\"line\">            <span class=\"title function_\">if</span> <span class=\"params\">(!observable.isBeingObserved_ &amp;&amp; globalState.trackingContext)</span> &#123;</span><br><span class=\"line\">                observable.isBeingObserved_ = <span class=\"literal\">true</span></span><br><span class=\"line\">                observable.onBO()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (observable.observers_.size === <span class=\"number\">0</span> &amp;&amp; globalState.inBatch &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        queueForUnobservation(observable)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>globalState.trackingDerivation</code>是一个<code>IDerivation</code>类型的数据，或者称之为”<em>派生</em>“，它有一个大名鼎鼎的实现类，叫<code>Reaction</code>。可以简单理解：<strong>derivation是observable数据的观察者。</strong> 当这段代码运行的时候就会创建出一个<code>reaction</code>，并挂到<code>globalState.trackingDerivation</code>上，这个过程在解析<code>autorun</code>源码的时候再具体分析。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">auturun</span>(()=&gt;&#123;...&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>总之，这里通过<code>derivation.newObserving_![derivation.unboundDepsCount_++] = observable</code>,确定了<code>derivation</code>对这个<code>ObservableValue</code>实例有依赖。</p>\n<ul>\n<li>set和setNewValue 当对target设置&#x2F;修改值的时候会调用<code>set</code>或<code>setNewValue</code>，set内部也调用了<code>setNewValue</code>.</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">set</span>(newValue: T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldValue = <span class=\"keyword\">this</span>.value_</span><br><span class=\"line\">    newValue = <span class=\"keyword\">this</span>.prepareNewValue_(newValue) <span class=\"keyword\">as</span> any</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newValue !== globalState.UNCHANGED) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setNewValue_(newValue)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setNewValue_(newValue: T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldValue = <span class=\"keyword\">this</span>.value_</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value_ = newValue</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reportChanged()</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>setNewValue</code>触发时说明value变更，需要通知依赖进行相应的处理，这里调用的是<code>reportChanged</code>。</p>\n<ul>\n<li>reportChanged 这个方法也继承自父类<code>Atom</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"built_in\">reportChanged</span>() &#123;</span><br><span class=\"line\">       <span class=\"built_in\">startBatch</span>()</span><br><span class=\"line\">       <span class=\"built_in\">propagateChanged</span>(this)</span><br><span class=\"line\">       <span class=\"built_in\">endBatch</span>()</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>propagateChanged</code>从<code>ObservableValue</code>实例<code>observable</code>中找到对它有依赖的所有<code>derivation</code>，并调用<code>onBecomeStale_</code>,这个方法在<code>Reaction</code>中定义，它在经过了一系列复杂的调用后，能够使得依赖的函数再次运行。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function propagateChanged(observable: IObservable) &#123;</span><br><span class=\"line\">    // invariantLOS(observable, &quot;changed start&quot;)<span class=\"comment\">;</span></span><br><span class=\"line\">    if (<span class=\"attr\">observable.lowestObserverState_</span> === IDerivationState_.STALE_) return</span><br><span class=\"line\">    <span class=\"attr\">observable.lowestObserverState_</span> = IDerivationState_.STALE_</span><br><span class=\"line\"></span><br><span class=\"line\">    // Ideally we use for..of here, but the downcompiled version is really slow...</span><br><span class=\"line\">    observable.observers_.forEach(<span class=\"attr\">d</span> =&gt; &#123;</span><br><span class=\"line\">        if (<span class=\"attr\">d.dependenciesState_</span> === IDerivationState_.UP_TO_DATE_) &#123;</span><br><span class=\"line\">            if (__DEV__ &amp;&amp; d.isTracing_ !== TraceMode.NONE) &#123;</span><br><span class=\"line\">                logTraceInfo(d, observable)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            d.onBecomeStale_()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attr\">d.dependenciesState_</span> = IDerivationState_.STALE_</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    // invariantLOS(observable, &quot;changed end&quot;)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>Mobx中“观察”部分的代码到这里就基本结束了，但是遗留了两个问题：<code>globalState.trackingDerivation</code>是何时确定的以及<code>observable.observers_</code>又是如何收集的。</p>\n<p>下一节将开始Mobx“反应”部分的源码解析，回答这两个问题</p>\n","length":2963,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let <span class=\"attr\">target</span> = observable(obj)</span><br></pre></td></tr></table></figure>\n\n<p>在Mobx中<code>Atom</code>用来监测数据被观察和修改，在设置target的属性描述符的时候，对应每一个key都会创建一个一个<code>Atom</code>的子类<code>ObservableValue</code>实例。</p>\n<h2 id=\"ObservableValue\"><a href=\"#ObservableValue\" class=\"headerlink\" title=\"ObservableValue\"></a>ObservableValue</h2><p>如果<code>obserable(obj)</code>的返回值target是”<em>明</em>“,而obj是”<em>暗</em>“，那么<code>ObservableValue</code>实例则是”<em>明</em>“通往”<em>暗</em>“的单向桥梁。对target相应key的getter和setter都调用了这个实例的相应方法。</p>\n<ul>\n<li>value_ 这个属性保存了obj对象的对应的key的<code>descriptor.value</code></li>\n<li>get： 当访问target的属性的时候，会调用这个方法。返回的就是原obj对象对应key的相应value<code>reportObserved</code>，</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">get</span>(): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reportObserved()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dehanceValue(<span class=\"keyword\">this</span>.value_)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>get的调用说明该key被依赖，其会调用<code>reportObserved</code>处理依赖。</p>\n<ul>\n<li>reportObserved 这个方法继承自父类<code>Atom</code>,该函数中最有价值的事情是确定依赖关系。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function <span class=\"title function_\">reportObserved</span><span class=\"params\">(observable: IObservable)</span>: <span class=\"type\">boolean</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"variable\">derivation</span> <span class=\"operator\">=</span> globalState.trackingDerivation</span><br><span class=\"line\">    <span class=\"title function_\">if</span> <span class=\"params\">(derivation !== <span class=\"literal\">null</span>)</span> &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (derivation.runId_ !== observable.lastAccessedBy_) &#123;</span><br><span class=\"line\">            observable.lastAccessedBy_ = derivation.runId_</span><br><span class=\"line\">          </span><br><span class=\"line\">            derivation.newObserving_![derivation.unboundDepsCount_++] = observable</span><br><span class=\"line\">            <span class=\"title function_\">if</span> <span class=\"params\">(!observable.isBeingObserved_ &amp;&amp; globalState.trackingContext)</span> &#123;</span><br><span class=\"line\">                observable.isBeingObserved_ = <span class=\"literal\">true</span></span><br><span class=\"line\">                observable.onBO()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (observable.observers_.size === <span class=\"number\">0</span> &amp;&amp; globalState.inBatch &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        queueForUnobservation(observable)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>globalState.trackingDerivation</code>是一个<code>IDerivation</code>类型的数据，或者称之为”<em>派生</em>“，它有一个大名鼎鼎的实现类，叫<code>Reaction</code>。可以简单理解：<strong>derivation是observable数据的观察者。</strong> 当这段代码运行的时候就会创建出一个<code>reaction</code>，并挂到<code>globalState.trackingDerivation</code>上，这个过程在解析<code>autorun</code>源码的时候再具体分析。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">auturun</span>(()=&gt;&#123;...&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>总之，这里通过<code>derivation.newObserving_![derivation.unboundDepsCount_++] = observable</code>,确定了<code>derivation</code>对这个<code>ObservableValue</code>实例有依赖。</p>\n<ul>\n<li>set和setNewValue 当对target设置&#x2F;修改值的时候会调用<code>set</code>或<code>setNewValue</code>，set内部也调用了<code>setNewValue</code>.</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">set</span>(newValue: T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldValue = <span class=\"keyword\">this</span>.value_</span><br><span class=\"line\">    newValue = <span class=\"keyword\">this</span>.prepareNewValue_(newValue) <span class=\"keyword\">as</span> any</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newValue !== globalState.UNCHANGED) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setNewValue_(newValue)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setNewValue_(newValue: T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldValue = <span class=\"keyword\">this</span>.value_</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value_ = newValue</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reportChanged()</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>setNewValue</code>触发时说明value变更，需要通知依赖进行相应的处理，这里调用的是<code>reportChanged</code>。</p>\n<ul>\n<li>reportChanged 这个方法也继承自父类<code>Atom</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"built_in\">reportChanged</span>() &#123;</span><br><span class=\"line\">       <span class=\"built_in\">startBatch</span>()</span><br><span class=\"line\">       <span class=\"built_in\">propagateChanged</span>(this)</span><br><span class=\"line\">       <span class=\"built_in\">endBatch</span>()</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>propagateChanged</code>从<code>ObservableValue</code>实例<code>observable</code>中找到对它有依赖的所有<code>derivation</code>，并调用<code>onBecomeStale_</code>,这个方法在<code>Reaction</code>中定义，它在经过了一系列复杂的调用后，能够使得依赖的函数再次运行。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function propagateChanged(observable: IObservable) &#123;</span><br><span class=\"line\">    // invariantLOS(observable, &quot;changed start&quot;)<span class=\"comment\">;</span></span><br><span class=\"line\">    if (<span class=\"attr\">observable.lowestObserverState_</span> === IDerivationState_.STALE_) return</span><br><span class=\"line\">    <span class=\"attr\">observable.lowestObserverState_</span> = IDerivationState_.STALE_</span><br><span class=\"line\"></span><br><span class=\"line\">    // Ideally we use for..of here, but the downcompiled version is really slow...</span><br><span class=\"line\">    observable.observers_.forEach(<span class=\"attr\">d</span> =&gt; &#123;</span><br><span class=\"line\">        if (<span class=\"attr\">d.dependenciesState_</span> === IDerivationState_.UP_TO_DATE_) &#123;</span><br><span class=\"line\">            if (__DEV__ &amp;&amp; d.isTracing_ !== TraceMode.NONE) &#123;</span><br><span class=\"line\">                logTraceInfo(d, observable)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            d.onBecomeStale_()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attr\">d.dependenciesState_</span> = IDerivationState_.STALE_</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    // invariantLOS(observable, &quot;changed end&quot;)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>Mobx中“观察”部分的代码到这里就基本结束了，但是遗留了两个问题：<code>globalState.trackingDerivation</code>是何时确定的以及<code>observable.observers_</code>又是如何收集的。</p>\n<p>下一节将开始Mobx“反应”部分的源码解析，回答这两个问题</p>\n"},{"title":"MongoDB 整库导入","date":"2022-02-23T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第27天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n背景\n--\n\n兄弟部门扔了个文件夹过来，说是mongo导出的部分数据，需要测试一下。\n\n文件夹里大概长这样：\n\n![image.png](../imgs/503f78a59ccd4cb58576e9fc02767ecd.png)\n\n我表示现在的前端可真不好干。。。\n\n启动MongoDB\n---------\n\n既然是测试，那么本地使用docker起一个MongoDB是最方便的，编写docker-compose.yml如下：\n\n```yaml\nversion: '3.1'\n\nservices:\n\n  mongo:\n    image: mongo\n    restart: always\n    ports:\n      - 27017:27017\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: example\n\n  mongo-express:\n    image: mongo-express\n    restart: always\n    ports:\n      - 8081:8081\n    environment:\n      ME_CONFIG_MONGODB_ADMINUSERNAME: root\n      ME_CONFIG_MONGODB_ADMINPASSWORD: example\n      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/\n```\n\n启动命令：`docker-compose up -d --no-recreate`\n\n### 查看MongoDB\n\n可以用mongo-express，打开`http://localhost:8081/`\n\n![image.png](../imgs/b14906e8bf9d42adabf68728b85f47cc.png)\n\n或者安装一个MongoDB Compass\n\n![image.png](../imgs/b1b144ee16394b449e0d9cb9952ebcce.png)\n\n将数据库文件传入docker 容器\n-----------------\n\n首先查看docker container id，运行`docker container ls`\n\n![image.png](../imgs/fea1fc3b1a6e456d95dc097e7636e292.png) 可以使用docker cp命令，`docker cp from containerId:to`，将文件赋值到目标路径。\n\n### 进入docker container\n\n控制台输入命令： `docker exec -it containerid bash`，进入docker container\n\n![image.png](../imgs/35379bb1ef624db4868454ba2df4a31a.png)\n\n### 检查文件是否已经全部传输完成\n\n进入文件所在目录，通过`ls`命令查看文件是否已经传过来；通过`ls -l | grep \"^-\" | wc -l`命令检查文件数量是否和源文件夹一直。\n\n使用mongorestore导入数据\n------------------\n\n[mongorestore](https://docs.mongodb.com%2Fdatabase-tools%2Fmongorestore%2F \"https://docs.mongodb.com/database-tools/mongorestore/\")能够创建数据库，并将整个文件夹导入，命令为`mongorestore -d db_name 文件夹目录`。\n\n*   `--db=<database>, -d=<database>`指定将数据还原到哪个数据库，如果不存在则会创建它\n\n如果命令运行成功，会看到输出\\* document(s) restored successfully. 0 document(s) failed to restore.\\*\n\n通过Compass，可以看到我们导入的新数据库：\n\n![image.png](../imgs/5c1163271f3d47b4a911d8b08e248644.png)\n\n### 常见报错及解决办法\n\n*   运行命令`mongorestore -d db_test ./example`,将example中的文件导入db\\_test库，报错_error reading database: (Unauthorized) command listCollections requires authentication_\n    \n    ![image.png](../imgs/cddfa26a428743cc8389ba3ccf05f2c5.png) 需要增加`--uri`参数:\n    \n    ```ini\n    mongorestore -d db_test ./example --uri=\"mongodb://username:password@host:port\"\n    ```\n    \n*   运行命令`mongorestore -d db_test ./example --uri=\"mongodb://xxx:xxx@127.0.0.1:27017\"`，报错_unable to authenticate using mechanism \"SCRAM-SHA-1\": (AuthenticationFailed) Authentication failed_\n    \n    ![image.png](../imgs/124a2ee904c54b6fb2e7f064b8d05946.png) 需要对`--uri`增加`?authSource=admin`\n    \n    ```ini\n    mongorestore -d db_test ./example --uri=\"mongodb://***:***@host:port/?authSource=admin\"\n    ```","source":"_posts/MongoDB 整库导入.md","raw":"---\n title: \"MongoDB 整库导入\"\n date: 2022-02-24\n tags: [MongoDB]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第27天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n背景\n--\n\n兄弟部门扔了个文件夹过来，说是mongo导出的部分数据，需要测试一下。\n\n文件夹里大概长这样：\n\n![image.png](../imgs/503f78a59ccd4cb58576e9fc02767ecd.png)\n\n我表示现在的前端可真不好干。。。\n\n启动MongoDB\n---------\n\n既然是测试，那么本地使用docker起一个MongoDB是最方便的，编写docker-compose.yml如下：\n\n```yaml\nversion: '3.1'\n\nservices:\n\n  mongo:\n    image: mongo\n    restart: always\n    ports:\n      - 27017:27017\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: example\n\n  mongo-express:\n    image: mongo-express\n    restart: always\n    ports:\n      - 8081:8081\n    environment:\n      ME_CONFIG_MONGODB_ADMINUSERNAME: root\n      ME_CONFIG_MONGODB_ADMINPASSWORD: example\n      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/\n```\n\n启动命令：`docker-compose up -d --no-recreate`\n\n### 查看MongoDB\n\n可以用mongo-express，打开`http://localhost:8081/`\n\n![image.png](../imgs/b14906e8bf9d42adabf68728b85f47cc.png)\n\n或者安装一个MongoDB Compass\n\n![image.png](../imgs/b1b144ee16394b449e0d9cb9952ebcce.png)\n\n将数据库文件传入docker 容器\n-----------------\n\n首先查看docker container id，运行`docker container ls`\n\n![image.png](../imgs/fea1fc3b1a6e456d95dc097e7636e292.png) 可以使用docker cp命令，`docker cp from containerId:to`，将文件赋值到目标路径。\n\n### 进入docker container\n\n控制台输入命令： `docker exec -it containerid bash`，进入docker container\n\n![image.png](../imgs/35379bb1ef624db4868454ba2df4a31a.png)\n\n### 检查文件是否已经全部传输完成\n\n进入文件所在目录，通过`ls`命令查看文件是否已经传过来；通过`ls -l | grep \"^-\" | wc -l`命令检查文件数量是否和源文件夹一直。\n\n使用mongorestore导入数据\n------------------\n\n[mongorestore](https://docs.mongodb.com%2Fdatabase-tools%2Fmongorestore%2F \"https://docs.mongodb.com/database-tools/mongorestore/\")能够创建数据库，并将整个文件夹导入，命令为`mongorestore -d db_name 文件夹目录`。\n\n*   `--db=<database>, -d=<database>`指定将数据还原到哪个数据库，如果不存在则会创建它\n\n如果命令运行成功，会看到输出\\* document(s) restored successfully. 0 document(s) failed to restore.\\*\n\n通过Compass，可以看到我们导入的新数据库：\n\n![image.png](../imgs/5c1163271f3d47b4a911d8b08e248644.png)\n\n### 常见报错及解决办法\n\n*   运行命令`mongorestore -d db_test ./example`,将example中的文件导入db\\_test库，报错_error reading database: (Unauthorized) command listCollections requires authentication_\n    \n    ![image.png](../imgs/cddfa26a428743cc8389ba3ccf05f2c5.png) 需要增加`--uri`参数:\n    \n    ```ini\n    mongorestore -d db_test ./example --uri=\"mongodb://username:password@host:port\"\n    ```\n    \n*   运行命令`mongorestore -d db_test ./example --uri=\"mongodb://xxx:xxx@127.0.0.1:27017\"`，报错_unable to authenticate using mechanism \"SCRAM-SHA-1\": (AuthenticationFailed) Authentication failed_\n    \n    ![image.png](../imgs/124a2ee904c54b6fb2e7f064b8d05946.png) 需要对`--uri`增加`?authSource=admin`\n    \n    ```ini\n    mongorestore -d db_test ./example --uri=\"mongodb://***:***@host:port/?authSource=admin\"\n    ```","slug":"MongoDB 整库导入","published":1,"updated":"2024-04-04T15:27:03.585Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhk000rhajf5otm4nlv","content":"<p>「这是我参与2022首次更文挑战的第27天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>兄弟部门扔了个文件夹过来，说是mongo导出的部分数据，需要测试一下。</p>\n<p>文件夹里大概长这样：</p>\n<p><img src=\"/../imgs/503f78a59ccd4cb58576e9fc02767ecd.png\" alt=\"image.png\"></p>\n<p>我表示现在的前端可真不好干。。。</p>\n<h2 id=\"启动MongoDB\"><a href=\"#启动MongoDB\" class=\"headerlink\" title=\"启动MongoDB\"></a>启动MongoDB</h2><p>既然是测试，那么本地使用docker起一个MongoDB是最方便的，编写docker-compose.yml如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mongo:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">27017</span><span class=\"string\">:27017</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MONGO_INITDB_ROOT_USERNAME:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">MONGO_INITDB_ROOT_PASSWORD:</span> <span class=\"string\">example</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mongo-express:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mongo-express</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8081</span><span class=\"string\">:8081</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">ME_CONFIG_MONGODB_ADMINUSERNAME:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">ME_CONFIG_MONGODB_ADMINPASSWORD:</span> <span class=\"string\">example</span></span><br><span class=\"line\">      <span class=\"attr\">ME_CONFIG_MONGODB_URL:</span> <span class=\"string\">mongodb://root:example@mongo:27017/</span></span><br></pre></td></tr></table></figure>\n\n<p>启动命令：<code>docker-compose up -d --no-recreate</code></p>\n<h3 id=\"查看MongoDB\"><a href=\"#查看MongoDB\" class=\"headerlink\" title=\"查看MongoDB\"></a>查看MongoDB</h3><p>可以用mongo-express，打开<code>http://localhost:8081/</code></p>\n<p><img src=\"/../imgs/b14906e8bf9d42adabf68728b85f47cc.png\" alt=\"image.png\"></p>\n<p>或者安装一个MongoDB Compass</p>\n<p><img src=\"/../imgs/b1b144ee16394b449e0d9cb9952ebcce.png\" alt=\"image.png\"></p>\n<h2 id=\"将数据库文件传入docker-容器\"><a href=\"#将数据库文件传入docker-容器\" class=\"headerlink\" title=\"将数据库文件传入docker 容器\"></a>将数据库文件传入docker 容器</h2><p>首先查看docker container id，运行<code>docker container ls</code></p>\n<p><img src=\"/../imgs/fea1fc3b1a6e456d95dc097e7636e292.png\" alt=\"image.png\"> 可以使用docker cp命令，<code>docker cp from containerId:to</code>，将文件赋值到目标路径。</p>\n<h3 id=\"进入docker-container\"><a href=\"#进入docker-container\" class=\"headerlink\" title=\"进入docker container\"></a>进入docker container</h3><p>控制台输入命令： <code>docker exec -it containerid bash</code>，进入docker container</p>\n<p><img src=\"/../imgs/35379bb1ef624db4868454ba2df4a31a.png\" alt=\"image.png\"></p>\n<h3 id=\"检查文件是否已经全部传输完成\"><a href=\"#检查文件是否已经全部传输完成\" class=\"headerlink\" title=\"检查文件是否已经全部传输完成\"></a>检查文件是否已经全部传输完成</h3><p>进入文件所在目录，通过<code>ls</code>命令查看文件是否已经传过来；通过<code>ls -l | grep &quot;^-&quot; | wc -l</code>命令检查文件数量是否和源文件夹一直。</p>\n<h2 id=\"使用mongorestore导入数据\"><a href=\"#使用mongorestore导入数据\" class=\"headerlink\" title=\"使用mongorestore导入数据\"></a>使用mongorestore导入数据</h2><p><a href=\"https://docs.mongodb.com%2Fdatabase-tools%2Fmongorestore%2F\" title=\"https://docs.mongodb.com/database-tools/mongorestore/\">mongorestore</a>能够创建数据库，并将整个文件夹导入，命令为<code>mongorestore -d db_name 文件夹目录</code>。</p>\n<ul>\n<li><code>--db=&lt;database&gt;, -d=&lt;database&gt;</code>指定将数据还原到哪个数据库，如果不存在则会创建它</li>\n</ul>\n<p>如果命令运行成功，会看到输出* document(s) restored successfully. 0 document(s) failed to restore.*</p>\n<p>通过Compass，可以看到我们导入的新数据库：</p>\n<p><img src=\"/../imgs/5c1163271f3d47b4a911d8b08e248644.png\" alt=\"image.png\"></p>\n<h3 id=\"常见报错及解决办法\"><a href=\"#常见报错及解决办法\" class=\"headerlink\" title=\"常见报错及解决办法\"></a>常见报错及解决办法</h3><ul>\n<li><p>运行命令<code>mongorestore -d db_test ./example</code>,将example中的文件导入db_test库，报错_error reading database: (Unauthorized) command listCollections requires authentication_</p>\n<p><img src=\"/../imgs/cddfa26a428743cc8389ba3ccf05f2c5.png\" alt=\"image.png\"> 需要增加<code>--uri</code>参数:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongorestore -d db_test ./example <span class=\"attr\">--uri</span>=<span class=\"string\">&quot;mongodb://username:password@host:port&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行命令<code>mongorestore -d db_test ./example --uri=&quot;mongodb://xxx:xxx@127.0.0.1:27017&quot;</code>，报错_unable to authenticate using mechanism “SCRAM-SHA-1”: (AuthenticationFailed) Authentication failed_</p>\n<p><img src=\"/../imgs/124a2ee904c54b6fb2e7f064b8d05946.png\" alt=\"image.png\"> 需要对<code>--uri</code>增加<code>?authSource=admin</code></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongorestore -d db_test ./example <span class=\"attr\">--uri</span>=<span class=\"string\">&quot;mongodb://***:***@host:port/?authSource=admin&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","length":1737,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第27天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>兄弟部门扔了个文件夹过来，说是mongo导出的部分数据，需要测试一下。</p>\n<p>文件夹里大概长这样：</p>\n<p><img src=\"/../imgs/503f78a59ccd4cb58576e9fc02767ecd.png\" alt=\"image.png\"></p>\n<p>我表示现在的前端可真不好干。。。</p>\n<h2 id=\"启动MongoDB\"><a href=\"#启动MongoDB\" class=\"headerlink\" title=\"启动MongoDB\"></a>启动MongoDB</h2><p>既然是测试，那么本地使用docker起一个MongoDB是最方便的，编写docker-compose.yml如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mongo:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">27017</span><span class=\"string\">:27017</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MONGO_INITDB_ROOT_USERNAME:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">MONGO_INITDB_ROOT_PASSWORD:</span> <span class=\"string\">example</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mongo-express:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mongo-express</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8081</span><span class=\"string\">:8081</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">ME_CONFIG_MONGODB_ADMINUSERNAME:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">ME_CONFIG_MONGODB_ADMINPASSWORD:</span> <span class=\"string\">example</span></span><br><span class=\"line\">      <span class=\"attr\">ME_CONFIG_MONGODB_URL:</span> <span class=\"string\">mongodb://root:example@mongo:27017/</span></span><br></pre></td></tr></table></figure>\n\n<p>启动命令：<code>docker-compose up -d --no-recreate</code></p>\n<h3 id=\"查看MongoDB\"><a href=\"#查看MongoDB\" class=\"headerlink\" title=\"查看MongoDB\"></a>查看MongoDB</h3><p>可以用mongo-express，打开<code>http://localhost:8081/</code></p>\n<p><img src=\"/../imgs/b14906e8bf9d42adabf68728b85f47cc.png\" alt=\"image.png\"></p>\n<p>或者安装一个MongoDB Compass</p>\n<p><img src=\"/../imgs/b1b144ee16394b449e0d9cb9952ebcce.png\" alt=\"image.png\"></p>\n<h2 id=\"将数据库文件传入docker-容器\"><a href=\"#将数据库文件传入docker-容器\" class=\"headerlink\" title=\"将数据库文件传入docker 容器\"></a>将数据库文件传入docker 容器</h2><p>首先查看docker container id，运行<code>docker container ls</code></p>\n<p><img src=\"/../imgs/fea1fc3b1a6e456d95dc097e7636e292.png\" alt=\"image.png\"> 可以使用docker cp命令，<code>docker cp from containerId:to</code>，将文件赋值到目标路径。</p>\n<h3 id=\"进入docker-container\"><a href=\"#进入docker-container\" class=\"headerlink\" title=\"进入docker container\"></a>进入docker container</h3><p>控制台输入命令： <code>docker exec -it containerid bash</code>，进入docker container</p>\n<p><img src=\"/../imgs/35379bb1ef624db4868454ba2df4a31a.png\" alt=\"image.png\"></p>\n<h3 id=\"检查文件是否已经全部传输完成\"><a href=\"#检查文件是否已经全部传输完成\" class=\"headerlink\" title=\"检查文件是否已经全部传输完成\"></a>检查文件是否已经全部传输完成</h3><p>进入文件所在目录，通过<code>ls</code>命令查看文件是否已经传过来；通过<code>ls -l | grep &quot;^-&quot; | wc -l</code>命令检查文件数量是否和源文件夹一直。</p>\n<h2 id=\"使用mongorestore导入数据\"><a href=\"#使用mongorestore导入数据\" class=\"headerlink\" title=\"使用mongorestore导入数据\"></a>使用mongorestore导入数据</h2><p><a href=\"https://docs.mongodb.com%2Fdatabase-tools%2Fmongorestore%2F\" title=\"https://docs.mongodb.com/database-tools/mongorestore/\">mongorestore</a>能够创建数据库，并将整个文件夹导入，命令为<code>mongorestore -d db_name 文件夹目录</code>。</p>\n<ul>\n<li><code>--db=&lt;database&gt;, -d=&lt;database&gt;</code>指定将数据还原到哪个数据库，如果不存在则会创建它</li>\n</ul>\n<p>如果命令运行成功，会看到输出* document(s) restored successfully. 0 document(s) failed to restore.*</p>\n<p>通过Compass，可以看到我们导入的新数据库：</p>\n<p><img src=\"/../imgs/5c1163271f3d47b4a911d8b08e248644.png\" alt=\"image.png\"></p>\n<h3 id=\"常见报错及解决办法\"><a href=\"#常见报错及解决办法\" class=\"headerlink\" title=\"常见报错及解决办法\"></a>常见报错及解决办法</h3><ul>\n<li><p>运行命令<code>mongorestore -d db_test ./example</code>,将example中的文件导入db_test库，报错_error reading database: (Unauthorized) command listCollections requires authentication_</p>\n<p><img src=\"/../imgs/cddfa26a428743cc8389ba3ccf05f2c5.png\" alt=\"image.png\"> 需要增加<code>--uri</code>参数:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongorestore -d db_test ./example <span class=\"attr\">--uri</span>=<span class=\"string\">&quot;mongodb://username:password@host:port&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行命令<code>mongorestore -d db_test ./example --uri=&quot;mongodb://xxx:xxx@127.0.0.1:27017&quot;</code>，报错_unable to authenticate using mechanism “SCRAM-SHA-1”: (AuthenticationFailed) Authentication failed_</p>\n<p><img src=\"/../imgs/124a2ee904c54b6fb2e7f064b8d05946.png\" alt=\"image.png\"> 需要对<code>--uri</code>增加<code>?authSource=admin</code></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongorestore -d db_test ./example <span class=\"attr\">--uri</span>=<span class=\"string\">&quot;mongodb://***:***@host:port/?authSource=admin&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"React hooks的闭包陷阱：function props","date":"2021-05-11T16:00:00.000Z","_content":"\n引子\n--\n\n这是一段简单的代码，父组件将一个函数作为prop传给子组件，子组件在5s后调用这个函数\n\n```javascript\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const [input, setInput] = useState('')\n  const delay = () => {\n    alert(`delay函数打印：input值为${input}`)\n  }\n  return (\n    <div className=\"App\">\n      {/* hook闭包问题 */}\n      <input onChange={(e) => setInput(e.target.value)}></input>\n      <div>input值为：{input}</div>\n      <Child delay={delay}></Child>\n    </div>\n  );\n}\nfunction Child(props) {\n  useEffect(() => {\n    setTimeout(() => {\n      props.delay()\n    }, 5000)\n  }, [])\n \n  return <div>5s后会执行一次delay</div>\n}\n```\n\n这个function 会打印父组件中的input值，而这个input可能会改变，我们期望的是，子组件执行这个function的时候，能打印当下的input值\n\n问题\n--\n\n![image.png](../imgs/07830b476af641af90b3934713ad04c1.png)\n\n然而并没有。\n\n原因\n--\n\n如果开了eslint，会发现有一个错误提醒： `React Hook useEffect has a missing dependency: 'props'`\n\n![image.png](../imgs/566bb1081f7a4747a00139f8e144116e.png)\n\nprops改变了，但是Child中调用的delay仍然是第一次渲染传过来的props的delay，在这个闭包里，input永远是空。\n\n解决\n--\n\n### 方案一：useEffect中增加props的依赖\n\n虽然这个方法看起来可行但是需要在每次props变更后，都清除原来的定时器。在挂载时执行一些init函数是一个很常见的场景，但是执行uninit往往并不容易。这并不是一个好的办法\n\n### 方案二：使用useRef\n\nuseRef能跨渲染周期保存引用，因此在监听到props后，将新的function传给ref.current,而在useEffect的callback中通过ref.current调用，这个方法显然更简洁。","source":"_posts/React hooks的闭包陷阱：function props.md","raw":"---\n title: \"React hooks的闭包陷阱：function props\"\n date: 2021-05-12\n tags: [React.js]\n categories: [前端笔记]\n---\n\n引子\n--\n\n这是一段简单的代码，父组件将一个函数作为prop传给子组件，子组件在5s后调用这个函数\n\n```javascript\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const [input, setInput] = useState('')\n  const delay = () => {\n    alert(`delay函数打印：input值为${input}`)\n  }\n  return (\n    <div className=\"App\">\n      {/* hook闭包问题 */}\n      <input onChange={(e) => setInput(e.target.value)}></input>\n      <div>input值为：{input}</div>\n      <Child delay={delay}></Child>\n    </div>\n  );\n}\nfunction Child(props) {\n  useEffect(() => {\n    setTimeout(() => {\n      props.delay()\n    }, 5000)\n  }, [])\n \n  return <div>5s后会执行一次delay</div>\n}\n```\n\n这个function 会打印父组件中的input值，而这个input可能会改变，我们期望的是，子组件执行这个function的时候，能打印当下的input值\n\n问题\n--\n\n![image.png](../imgs/07830b476af641af90b3934713ad04c1.png)\n\n然而并没有。\n\n原因\n--\n\n如果开了eslint，会发现有一个错误提醒： `React Hook useEffect has a missing dependency: 'props'`\n\n![image.png](../imgs/566bb1081f7a4747a00139f8e144116e.png)\n\nprops改变了，但是Child中调用的delay仍然是第一次渲染传过来的props的delay，在这个闭包里，input永远是空。\n\n解决\n--\n\n### 方案一：useEffect中增加props的依赖\n\n虽然这个方法看起来可行但是需要在每次props变更后，都清除原来的定时器。在挂载时执行一些init函数是一个很常见的场景，但是执行uninit往往并不容易。这并不是一个好的办法\n\n### 方案二：使用useRef\n\nuseRef能跨渲染周期保存引用，因此在监听到props后，将新的function传给ref.current,而在useEffect的callback中通过ref.current调用，这个方法显然更简洁。","slug":"React hooks的闭包陷阱：function props","published":1,"updated":"2024-04-04T15:27:03.610Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhk000vhajf6nyegrjc","content":"<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>这是一段简单的代码，父组件将一个函数作为prop传给子组件，子组件在5s后调用这个函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [input, setInput] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">delay</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">`delay函数打印：input值为<span class=\"subst\">$&#123;input&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;/* hook闭包问题 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>input值为：&#123;input&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">delay</span>=<span class=\"string\">&#123;delay&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      props.<span class=\"title function_\">delay</span>()</span><br><span class=\"line\">    &#125;, <span class=\"number\">5000</span>)</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>5s后会执行一次delay<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个function 会打印父组件中的input值，而这个input可能会改变，我们期望的是，子组件执行这个function的时候，能打印当下的input值</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p><img src=\"/../imgs/07830b476af641af90b3934713ad04c1.png\" alt=\"image.png\"></p>\n<p>然而并没有。</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>如果开了eslint，会发现有一个错误提醒： <code>React Hook useEffect has a missing dependency: &#39;props&#39;</code></p>\n<p><img src=\"/../imgs/566bb1081f7a4747a00139f8e144116e.png\" alt=\"image.png\"></p>\n<p>props改变了，但是Child中调用的delay仍然是第一次渲染传过来的props的delay，在这个闭包里，input永远是空。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><h3 id=\"方案一：useEffect中增加props的依赖\"><a href=\"#方案一：useEffect中增加props的依赖\" class=\"headerlink\" title=\"方案一：useEffect中增加props的依赖\"></a>方案一：useEffect中增加props的依赖</h3><p>虽然这个方法看起来可行但是需要在每次props变更后，都清除原来的定时器。在挂载时执行一些init函数是一个很常见的场景，但是执行uninit往往并不容易。这并不是一个好的办法</p>\n<h3 id=\"方案二：使用useRef\"><a href=\"#方案二：使用useRef\" class=\"headerlink\" title=\"方案二：使用useRef\"></a>方案二：使用useRef</h3><p>useRef能跨渲染周期保存引用，因此在监听到props后，将新的function传给ref.current,而在useEffect的callback中通过ref.current调用，这个方法显然更简洁。</p>\n","length":1160,"excerpt":"","more":"<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>这是一段简单的代码，父组件将一个函数作为prop传给子组件，子组件在5s后调用这个函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [input, setInput] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">delay</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">`delay函数打印：input值为<span class=\"subst\">$&#123;input&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;/* hook闭包问题 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>input值为：&#123;input&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">delay</span>=<span class=\"string\">&#123;delay&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      props.<span class=\"title function_\">delay</span>()</span><br><span class=\"line\">    &#125;, <span class=\"number\">5000</span>)</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>5s后会执行一次delay<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个function 会打印父组件中的input值，而这个input可能会改变，我们期望的是，子组件执行这个function的时候，能打印当下的input值</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p><img src=\"/../imgs/07830b476af641af90b3934713ad04c1.png\" alt=\"image.png\"></p>\n<p>然而并没有。</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>如果开了eslint，会发现有一个错误提醒： <code>React Hook useEffect has a missing dependency: &#39;props&#39;</code></p>\n<p><img src=\"/../imgs/566bb1081f7a4747a00139f8e144116e.png\" alt=\"image.png\"></p>\n<p>props改变了，但是Child中调用的delay仍然是第一次渲染传过来的props的delay，在这个闭包里，input永远是空。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><h3 id=\"方案一：useEffect中增加props的依赖\"><a href=\"#方案一：useEffect中增加props的依赖\" class=\"headerlink\" title=\"方案一：useEffect中增加props的依赖\"></a>方案一：useEffect中增加props的依赖</h3><p>虽然这个方法看起来可行但是需要在每次props变更后，都清除原来的定时器。在挂载时执行一些init函数是一个很常见的场景，但是执行uninit往往并不容易。这并不是一个好的办法</p>\n<h3 id=\"方案二：使用useRef\"><a href=\"#方案二：使用useRef\" class=\"headerlink\" title=\"方案二：使用useRef\"></a>方案二：使用useRef</h3><p>useRef能跨渲染周期保存引用，因此在监听到props后，将新的function传给ref.current,而在useEffect的callback中通过ref.current调用，这个方法显然更简洁。</p>\n"},{"title":"React library 快速入门——React Query","date":"2021-11-07T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第 8 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n前言\n--\n\nReact的生态非常庞大，各种lib层出不穷，本系列将介绍其中最受欢迎的一些lib，并给出快速入门的实践案例。\n\n本期介绍的是React Query。\n\n概览\n--\n\nReact Query是一个管理请求数据的库。\n\n> React Query is often described as the missing data-fetching library for React, but in more technical terms, it makes **fetching, caching, synchronizing and updating server state** in your React applications a breeze.\n\n看官网解释可能有些费解，上代码：\n\n```javascript\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider, useQuery } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Example />\n    </QueryClientProvider>\n  );\n}\n\nfunction Example() {\n  const { isLoading, error, data, isFetching } = useQuery(\"repoData\", () =>\n    fetch(\n      \"https://api.github.com/repos/tannerlinsley/react-query\"\n    ).then((res) => res.json())\n  );\n\n  if (isLoading) return \"Loading...\";\n\n  if (error) return \"An error has occurred: \" + error.message;\n\n  return (\n    <div>\n      <h1>{data.name}</h1>\n      <p>{data.description}</p>\n      <strong>👀 {data.subscribers_count}</strong>{\" \"}\n      <strong>✨ {data.stargazers_count}</strong>{\" \"}\n      <strong>🍴 {data.forks_count}</strong>\n      <div>{isFetching ? \"Updating...\" : \"\"}</div>\n      <ReactQueryDevtools initialIsOpen />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n```\n\n这个例子很好地体现出了我们对一个请求最关心的三个部分：返回值、错误和请求loading。react query并不替你发送请求，它做的是对请求的管理。\n\n核心api\n-----\n\n### useQuery\n\n当需要查询数据的时候使用`useQuery`\n\n#### 语法\n\n```ini\n const result = useQuery({\n   queryKey,\n   queryFn,\n   enabled,\n })\n```\n\n#### 参数说明\n\n```typescript\n  const [page, setPage] = useState<{\n    current: number;\n    pageSize: number;\n  }>({ current: 1, pageSize: 10 });\n  const [params, setParams] = useState<{ name: string; status: number }>();\n  \n const { data, isLoading, refetch } = useQuery(\n    ['files', page, params],\n    () => {\n      return fetch({\n        url: '/api/files',\n        method: 'POST',\n        body: { page, params },\n      });\n    },\n    {\n      onSuccess(data) {\n        console.log(data);\n      },\n    },\n  );\n```\n\n这段代码里，在page和params变化的时候会自动进行请求，因此不需要额外用户操作后再次发起请求更新数据。 但是默认情况下，第一次进来也会进行一次请求，另外如果请求失败，会进行三次重试。这是react-query默认设置的。\n\n*   `queryKey`\n    *   **必传**\n    *   用于此查询的query key。\n    *   当此键更改时，查询将自动更新（只要`enabled`未设置为`false`）。\n*   `queryFn:(context: QueryFunctionContext) => Promise<TData>`\n    *   在没有指定默认的query function时**必传**\n    *   可以从context中获取`queryKey`\n    *   必须返回一个promise\n*   第三个参数可以传一个对象，其中几个常用的属性如下：\n    *   enabled： 可以关闭自动更新\n    *   retry: 请求失败重试，可以关闭或传入重试次数\n    *   onSuccess: 成功回调\n    *   onError：失败回调\n    *   refetchOnWindowFocus: 如果数据过期了，当window focus时会进行请求（这也是默认设置），可以关闭该特性\n    *   staleTime：多长时间数据会过期\n\n### QueryClient\n\n以上选型可以通过QueryClient设置默认值：\n\n```php\nconst queryClient = new QueryClient();\n// 默认不在挂载和focus时自动运行，不重试，但是默认enable为true，根据依赖变化自动运行\nqueryClient.setDefaultOptions({\n  queries: {\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchOnReconnect: false,\n    retry: false,\n  },\n});\n```\n\n### useMutation\n\n当需要变更数据时使用useMutation\n\n```ini\nconst Upload: FC<UploadProps> = function (props) {\n  const component = props.dragger ? FileSelector.Dragger : FileSelector;\n\n  const { mutate, isLoading } = useMutation(\n    (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('name', file.name);\n      return fetch({ url: '/api/upload', method: 'POST', body: formData });\n    },\n    {\n      onSuccess(data) {\n        message.success('文件上传成功');\n        props.onSuccess?.(data);\n      },\n      onError(err) {\n        message.error('文件上传失败');\n        props.onError?.(err);\n      },\n    },\n  );\n  const upload = (f: RcCustomRequestOptions) => {\n    mutate(f.file);\n  };\n  return React.createElement(\n    component,\n    { customRequest: upload, ...props },\n    props.children || props.dragger ? (\n      <p className=\"p-6\">点击或拖拽文件到此区域</p>\n    ) : (\n      <Button\n        type=\"primary\"\n        htmlType=\"button\"\n        loading={isLoading}\n        disabled={isLoading}\n      >\n        <Icon type={props.icon || 'upload'} className=\"align-middle\" />\n        <span className=\"align-middle\"> {props.text || '上传文件'}</span>\n      </Button>\n    ),\n  );\n};\n```\n\n上面这段代码是一个简单的上传组件：\n\n用户点击按钮\n\n选择文件\n\n发起请求\n\n![image.png](../imgs/af4554dd19ce4a6aa911769fc36a839f.png) 这里的请求需要我们主动发起，这时候就需要调用`useMutation`返回的`mutate`\n\n#### 参数\n\n```scss\n const {\n   data,\n   error,\n   isError,\n   isIdle,\n   isLoading,\n   isPaused,\n   isSuccess,\n   mutate,\n   mutateAsync,\n   reset,\n   status,\n } = useMutation(mutationFn, {\n   mutationKey,\n   onError,\n   onMutate,\n   onSettled,\n   onSuccess,\n   useErrorBoundary,\n })\n\nmutate(variables, {\n   onError,\n   onSettled,\n   onSuccess,\n })\n\n```\n\n*   `mutationFn: (variables: TVariables) => Promise<TData>`\n    \n    *   **必传**\n    *   一个返回promise的函数。\n    *   参数`variables`由`mutate`传过来\n*   `onSuccess: (data: TData, variables: TVariables, context?: TContext) => Promise<unknown> | void`\n    \n    *   可选\n    *   成功回调\n*   `onError: (err: TError, variables: TVariables, context?: TContext) => Promise<unknown> | void`\n    \n    *   可选的\n    *   失败回调\n*   `retry: boolean | number | (failureCount: number, error: TError) => boolean`\n    \n    *   如果设置为`false`，失败后不会重试。","source":"_posts/React library 快速入门——React Query.md","raw":"---\n title: \"React library 快速入门——React Query\"\n date: 2021-11-08\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第 8 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n前言\n--\n\nReact的生态非常庞大，各种lib层出不穷，本系列将介绍其中最受欢迎的一些lib，并给出快速入门的实践案例。\n\n本期介绍的是React Query。\n\n概览\n--\n\nReact Query是一个管理请求数据的库。\n\n> React Query is often described as the missing data-fetching library for React, but in more technical terms, it makes **fetching, caching, synchronizing and updating server state** in your React applications a breeze.\n\n看官网解释可能有些费解，上代码：\n\n```javascript\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider, useQuery } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Example />\n    </QueryClientProvider>\n  );\n}\n\nfunction Example() {\n  const { isLoading, error, data, isFetching } = useQuery(\"repoData\", () =>\n    fetch(\n      \"https://api.github.com/repos/tannerlinsley/react-query\"\n    ).then((res) => res.json())\n  );\n\n  if (isLoading) return \"Loading...\";\n\n  if (error) return \"An error has occurred: \" + error.message;\n\n  return (\n    <div>\n      <h1>{data.name}</h1>\n      <p>{data.description}</p>\n      <strong>👀 {data.subscribers_count}</strong>{\" \"}\n      <strong>✨ {data.stargazers_count}</strong>{\" \"}\n      <strong>🍴 {data.forks_count}</strong>\n      <div>{isFetching ? \"Updating...\" : \"\"}</div>\n      <ReactQueryDevtools initialIsOpen />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n```\n\n这个例子很好地体现出了我们对一个请求最关心的三个部分：返回值、错误和请求loading。react query并不替你发送请求，它做的是对请求的管理。\n\n核心api\n-----\n\n### useQuery\n\n当需要查询数据的时候使用`useQuery`\n\n#### 语法\n\n```ini\n const result = useQuery({\n   queryKey,\n   queryFn,\n   enabled,\n })\n```\n\n#### 参数说明\n\n```typescript\n  const [page, setPage] = useState<{\n    current: number;\n    pageSize: number;\n  }>({ current: 1, pageSize: 10 });\n  const [params, setParams] = useState<{ name: string; status: number }>();\n  \n const { data, isLoading, refetch } = useQuery(\n    ['files', page, params],\n    () => {\n      return fetch({\n        url: '/api/files',\n        method: 'POST',\n        body: { page, params },\n      });\n    },\n    {\n      onSuccess(data) {\n        console.log(data);\n      },\n    },\n  );\n```\n\n这段代码里，在page和params变化的时候会自动进行请求，因此不需要额外用户操作后再次发起请求更新数据。 但是默认情况下，第一次进来也会进行一次请求，另外如果请求失败，会进行三次重试。这是react-query默认设置的。\n\n*   `queryKey`\n    *   **必传**\n    *   用于此查询的query key。\n    *   当此键更改时，查询将自动更新（只要`enabled`未设置为`false`）。\n*   `queryFn:(context: QueryFunctionContext) => Promise<TData>`\n    *   在没有指定默认的query function时**必传**\n    *   可以从context中获取`queryKey`\n    *   必须返回一个promise\n*   第三个参数可以传一个对象，其中几个常用的属性如下：\n    *   enabled： 可以关闭自动更新\n    *   retry: 请求失败重试，可以关闭或传入重试次数\n    *   onSuccess: 成功回调\n    *   onError：失败回调\n    *   refetchOnWindowFocus: 如果数据过期了，当window focus时会进行请求（这也是默认设置），可以关闭该特性\n    *   staleTime：多长时间数据会过期\n\n### QueryClient\n\n以上选型可以通过QueryClient设置默认值：\n\n```php\nconst queryClient = new QueryClient();\n// 默认不在挂载和focus时自动运行，不重试，但是默认enable为true，根据依赖变化自动运行\nqueryClient.setDefaultOptions({\n  queries: {\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchOnReconnect: false,\n    retry: false,\n  },\n});\n```\n\n### useMutation\n\n当需要变更数据时使用useMutation\n\n```ini\nconst Upload: FC<UploadProps> = function (props) {\n  const component = props.dragger ? FileSelector.Dragger : FileSelector;\n\n  const { mutate, isLoading } = useMutation(\n    (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('name', file.name);\n      return fetch({ url: '/api/upload', method: 'POST', body: formData });\n    },\n    {\n      onSuccess(data) {\n        message.success('文件上传成功');\n        props.onSuccess?.(data);\n      },\n      onError(err) {\n        message.error('文件上传失败');\n        props.onError?.(err);\n      },\n    },\n  );\n  const upload = (f: RcCustomRequestOptions) => {\n    mutate(f.file);\n  };\n  return React.createElement(\n    component,\n    { customRequest: upload, ...props },\n    props.children || props.dragger ? (\n      <p className=\"p-6\">点击或拖拽文件到此区域</p>\n    ) : (\n      <Button\n        type=\"primary\"\n        htmlType=\"button\"\n        loading={isLoading}\n        disabled={isLoading}\n      >\n        <Icon type={props.icon || 'upload'} className=\"align-middle\" />\n        <span className=\"align-middle\"> {props.text || '上传文件'}</span>\n      </Button>\n    ),\n  );\n};\n```\n\n上面这段代码是一个简单的上传组件：\n\n用户点击按钮\n\n选择文件\n\n发起请求\n\n![image.png](../imgs/af4554dd19ce4a6aa911769fc36a839f.png) 这里的请求需要我们主动发起，这时候就需要调用`useMutation`返回的`mutate`\n\n#### 参数\n\n```scss\n const {\n   data,\n   error,\n   isError,\n   isIdle,\n   isLoading,\n   isPaused,\n   isSuccess,\n   mutate,\n   mutateAsync,\n   reset,\n   status,\n } = useMutation(mutationFn, {\n   mutationKey,\n   onError,\n   onMutate,\n   onSettled,\n   onSuccess,\n   useErrorBoundary,\n })\n\nmutate(variables, {\n   onError,\n   onSettled,\n   onSuccess,\n })\n\n```\n\n*   `mutationFn: (variables: TVariables) => Promise<TData>`\n    \n    *   **必传**\n    *   一个返回promise的函数。\n    *   参数`variables`由`mutate`传过来\n*   `onSuccess: (data: TData, variables: TVariables, context?: TContext) => Promise<unknown> | void`\n    \n    *   可选\n    *   成功回调\n*   `onError: (err: TError, variables: TVariables, context?: TContext) => Promise<unknown> | void`\n    \n    *   可选的\n    *   失败回调\n*   `retry: boolean | number | (failureCount: number, error: TError) => boolean`\n    \n    *   如果设置为`false`，失败后不会重试。","slug":"React library 快速入门——React Query","published":1,"updated":"2024-04-04T15:27:03.618Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhl000yhajfhz3c0ida","content":"<p>这是我参与11月更文挑战的第 8 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>React的生态非常庞大，各种lib层出不穷，本系列将介绍其中最受欢迎的一些lib，并给出快速入门的实践案例。</p>\n<p>本期介绍的是React Query。</p>\n<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>React Query是一个管理请求数据的库。</p>\n<blockquote>\n<p>React Query is often described as the missing data-fetching library for React, but in more technical terms, it makes <strong>fetching, caching, synchronizing and updating server state</strong> in your React applications a breeze.</p>\n</blockquote>\n<p>看官网解释可能有些费解，上代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">QueryClient</span>, <span class=\"title class_\">QueryClientProvider</span>, useQuery &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-query&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ReactQueryDevtools</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-query/devtools&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> queryClient = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryClient</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">QueryClientProvider</span> <span class=\"attr\">client</span>=<span class=\"string\">&#123;queryClient&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Example</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">QueryClientProvider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; isLoading, error, data, isFetching &#125; = <span class=\"title function_\">useQuery</span>(<span class=\"string\">&quot;repoData&quot;</span>, <span class=\"function\">() =&gt;</span></span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;https://api.github.com/repos/tannerlinsley/react-query&quot;</span></span><br><span class=\"line\">    ).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.<span class=\"title function_\">json</span>())</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isLoading) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Loading...&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) <span class=\"keyword\">return</span> <span class=\"string\">&quot;An error has occurred: &quot;</span> + error.<span class=\"property\">message</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;data.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;data.description&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>👀 &#123;data.subscribers_count&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>✨ &#123;data.stargazers_count&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>🍴 &#123;data.forks_count&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;isFetching ? &quot;Updating...&quot; : &quot;&quot;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ReactQueryDevtools</span> <span class=\"attr\">initialIsOpen</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>, rootElement);</span><br></pre></td></tr></table></figure>\n\n<p>这个例子很好地体现出了我们对一个请求最关心的三个部分：返回值、错误和请求loading。react query并不替你发送请求，它做的是对请求的管理。</p>\n<h2 id=\"核心api\"><a href=\"#核心api\" class=\"headerlink\" title=\"核心api\"></a>核心api</h2><h3 id=\"useQuery\"><a href=\"#useQuery\" class=\"headerlink\" title=\"useQuery\"></a>useQuery</h3><p>当需要查询数据的时候使用<code>useQuery</code></p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">result</span> = useQuery(&#123;</span><br><span class=\"line\">  queryKey,</span><br><span class=\"line\">  queryFn,</span><br><span class=\"line\">  enabled,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> [page, setPage] = useState&lt;&#123;</span><br><span class=\"line\">   <span class=\"attr\">current</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">   <span class=\"attr\">pageSize</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"> &#125;&gt;(&#123; <span class=\"attr\">current</span>: <span class=\"number\">1</span>, <span class=\"attr\">pageSize</span>: <span class=\"number\">10</span> &#125;);</span><br><span class=\"line\"> <span class=\"keyword\">const</span> [params, setParams] = useState&lt;&#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">status</span>: <span class=\"built_in\">number</span> &#125;&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; data, isLoading, refetch &#125; = <span class=\"title function_\">useQuery</span>(</span><br><span class=\"line\">   [<span class=\"string\">&#x27;files&#x27;</span>, page, params],</span><br><span class=\"line\">   <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"title function_\">fetch</span>(&#123;</span><br><span class=\"line\">       <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/api/files&#x27;</span>,</span><br><span class=\"line\">       <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">       <span class=\"attr\">body</span>: &#123; page, params &#125;,</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     <span class=\"title function_\">onSuccess</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"> );</span><br></pre></td></tr></table></figure>\n\n<p>这段代码里，在page和params变化的时候会自动进行请求，因此不需要额外用户操作后再次发起请求更新数据。 但是默认情况下，第一次进来也会进行一次请求，另外如果请求失败，会进行三次重试。这是react-query默认设置的。</p>\n<ul>\n<li><code>queryKey</code><ul>\n<li><strong>必传</strong></li>\n<li>用于此查询的query key。</li>\n<li>当此键更改时，查询将自动更新（只要<code>enabled</code>未设置为<code>false</code>）。</li>\n</ul>\n</li>\n<li><code>queryFn:(context: QueryFunctionContext) =&gt; Promise&lt;TData&gt;</code><ul>\n<li>在没有指定默认的query function时<strong>必传</strong></li>\n<li>可以从context中获取<code>queryKey</code></li>\n<li>必须返回一个promise</li>\n</ul>\n</li>\n<li>第三个参数可以传一个对象，其中几个常用的属性如下：<ul>\n<li>enabled： 可以关闭自动更新</li>\n<li>retry: 请求失败重试，可以关闭或传入重试次数</li>\n<li>onSuccess: 成功回调</li>\n<li>onError：失败回调</li>\n<li>refetchOnWindowFocus: 如果数据过期了，当window focus时会进行请求（这也是默认设置），可以关闭该特性</li>\n<li>staleTime：多长时间数据会过期</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"QueryClient\"><a href=\"#QueryClient\" class=\"headerlink\" title=\"QueryClient\"></a>QueryClient</h3><p>以上选型可以通过QueryClient设置默认值：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">queryClient</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryClient</span>();</span><br><span class=\"line\"><span class=\"comment\">// 默认不在挂载和focus时自动运行，不重试，但是默认enable为true，根据依赖变化自动运行</span></span><br><span class=\"line\">queryClient.<span class=\"title function_ invoke__\">setDefaultOptions</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">queries</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">refetchOnWindowFocus</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">refetchOnMount</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">refetchOnReconnect</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">retry</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useMutation\"><a href=\"#useMutation\" class=\"headerlink\" title=\"useMutation\"></a>useMutation</h3><p>当需要变更数据时使用useMutation</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Upload: FC&lt;UploadProps&gt; = function (props) &#123;</span><br><span class=\"line\">  const <span class=\"attr\">component</span> = props.dragger ? FileSelector.Dragger : FileSelector<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  const &#123; mutate, isLoading &#125; = useMutation(</span><br><span class=\"line\">    (file: File) =&gt; &#123;</span><br><span class=\"line\">      const <span class=\"attr\">formData</span> = new FormData()<span class=\"comment\">;</span></span><br><span class=\"line\">      formData.append(&#x27;file&#x27;, file)<span class=\"comment\">;</span></span><br><span class=\"line\">      formData.append(&#x27;name&#x27;, file.name)<span class=\"comment\">;</span></span><br><span class=\"line\">      return fetch(&#123; url: &#x27;/api/upload&#x27;, method: &#x27;POST&#x27;, body: formData &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      onSuccess(data) &#123;</span><br><span class=\"line\">        message.success(&#x27;文件上传成功&#x27;)<span class=\"comment\">;</span></span><br><span class=\"line\">        props.onSuccess?.(data)<span class=\"comment\">;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      onError(err) &#123;</span><br><span class=\"line\">        message.error(&#x27;文件上传失败&#x27;)<span class=\"comment\">;</span></span><br><span class=\"line\">        props.onError?.(err)<span class=\"comment\">;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  )<span class=\"comment\">;</span></span><br><span class=\"line\">  const <span class=\"attr\">upload</span> = (f: RcCustomRequestOptions) =&gt; &#123;</span><br><span class=\"line\">    mutate(f.file)<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;<span class=\"comment\">;</span></span><br><span class=\"line\">  return React.createElement(</span><br><span class=\"line\">    component,</span><br><span class=\"line\">    &#123; customRequest: upload, ...props &#125;,</span><br><span class=\"line\">    props.children || props.dragger ? (</span><br><span class=\"line\">      &lt;p <span class=\"attr\">className</span>=<span class=\"string\">&quot;p-6&quot;</span>&gt;点击或拖拽文件到此区域&lt;/p&gt;</span><br><span class=\"line\">    ) : (</span><br><span class=\"line\">      &lt;Button</span><br><span class=\"line\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">htmlType</span>=<span class=\"string\">&quot;button&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">loading</span>=&#123;isLoading&#125;</span><br><span class=\"line\">        <span class=\"attr\">disabled</span>=&#123;isLoading&#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        &lt;Icon <span class=\"attr\">type</span>=&#123;props.icon || <span class=\"string\">&#x27;upload&#x27;</span>&#125; className=<span class=\"string\">&quot;align-middle&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;span <span class=\"attr\">className</span>=<span class=\"string\">&quot;align-middle&quot;</span>&gt; &#123;props.text || <span class=\"string\">&#x27;上传文件&#x27;</span>&#125;&lt;/span&gt;</span><br><span class=\"line\">      &lt;/Button&gt;</span><br><span class=\"line\">    ),</span><br><span class=\"line\">  )<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这段代码是一个简单的上传组件：</p>\n<p>用户点击按钮</p>\n<p>选择文件</p>\n<p>发起请求</p>\n<p><img src=\"/../imgs/af4554dd19ce4a6aa911769fc36a839f.png\" alt=\"image.png\"> 这里的请求需要我们主动发起，这时候就需要调用<code>useMutation</code>返回的<code>mutate</code></p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> const &#123;</span><br><span class=\"line\">   data,</span><br><span class=\"line\">   error,</span><br><span class=\"line\">   isError,</span><br><span class=\"line\">   isIdle,</span><br><span class=\"line\">   isLoading,</span><br><span class=\"line\">   isPaused,</span><br><span class=\"line\">   isSuccess,</span><br><span class=\"line\">   mutate,</span><br><span class=\"line\">   mutateAsync,</span><br><span class=\"line\">   reset,</span><br><span class=\"line\">   status,</span><br><span class=\"line\"> &#125; = <span class=\"built_in\">useMutation</span>(mutationFn, &#123;</span><br><span class=\"line\">   mutationKey,</span><br><span class=\"line\">   onError,</span><br><span class=\"line\">   onMutate,</span><br><span class=\"line\">   onSettled,</span><br><span class=\"line\">   onSuccess,</span><br><span class=\"line\">   useErrorBoundary,</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mutate</span>(variables, &#123;</span><br><span class=\"line\">   onError,</span><br><span class=\"line\">   onSettled,</span><br><span class=\"line\">   onSuccess,</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>mutationFn: (variables: TVariables) =&gt; Promise&lt;TData&gt;</code></p>\n<ul>\n<li><strong>必传</strong></li>\n<li>一个返回promise的函数。</li>\n<li>参数<code>variables</code>由<code>mutate</code>传过来</li>\n</ul>\n</li>\n<li><p><code>onSuccess: (data: TData, variables: TVariables, context?: TContext) =&gt; Promise&lt;unknown&gt; | void</code></p>\n<ul>\n<li>可选</li>\n<li>成功回调</li>\n</ul>\n</li>\n<li><p><code>onError: (err: TError, variables: TVariables, context?: TContext) =&gt; Promise&lt;unknown&gt; | void</code></p>\n<ul>\n<li>可选的</li>\n<li>失败回调</li>\n</ul>\n</li>\n<li><p><code>retry: boolean | number | (failureCount: number, error: TError) =&gt; boolean</code></p>\n<ul>\n<li>如果设置为<code>false</code>，失败后不会重试。</li>\n</ul>\n</li>\n</ul>\n","length":5168,"excerpt":"","more":"<p>这是我参与11月更文挑战的第 8 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>React的生态非常庞大，各种lib层出不穷，本系列将介绍其中最受欢迎的一些lib，并给出快速入门的实践案例。</p>\n<p>本期介绍的是React Query。</p>\n<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>React Query是一个管理请求数据的库。</p>\n<blockquote>\n<p>React Query is often described as the missing data-fetching library for React, but in more technical terms, it makes <strong>fetching, caching, synchronizing and updating server state</strong> in your React applications a breeze.</p>\n</blockquote>\n<p>看官网解释可能有些费解，上代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">QueryClient</span>, <span class=\"title class_\">QueryClientProvider</span>, useQuery &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-query&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ReactQueryDevtools</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-query/devtools&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> queryClient = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryClient</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">QueryClientProvider</span> <span class=\"attr\">client</span>=<span class=\"string\">&#123;queryClient&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Example</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">QueryClientProvider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; isLoading, error, data, isFetching &#125; = <span class=\"title function_\">useQuery</span>(<span class=\"string\">&quot;repoData&quot;</span>, <span class=\"function\">() =&gt;</span></span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;https://api.github.com/repos/tannerlinsley/react-query&quot;</span></span><br><span class=\"line\">    ).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.<span class=\"title function_\">json</span>())</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isLoading) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Loading...&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) <span class=\"keyword\">return</span> <span class=\"string\">&quot;An error has occurred: &quot;</span> + error.<span class=\"property\">message</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;data.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;data.description&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>👀 &#123;data.subscribers_count&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>✨ &#123;data.stargazers_count&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>🍴 &#123;data.forks_count&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;isFetching ? &quot;Updating...&quot; : &quot;&quot;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ReactQueryDevtools</span> <span class=\"attr\">initialIsOpen</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>, rootElement);</span><br></pre></td></tr></table></figure>\n\n<p>这个例子很好地体现出了我们对一个请求最关心的三个部分：返回值、错误和请求loading。react query并不替你发送请求，它做的是对请求的管理。</p>\n<h2 id=\"核心api\"><a href=\"#核心api\" class=\"headerlink\" title=\"核心api\"></a>核心api</h2><h3 id=\"useQuery\"><a href=\"#useQuery\" class=\"headerlink\" title=\"useQuery\"></a>useQuery</h3><p>当需要查询数据的时候使用<code>useQuery</code></p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">result</span> = useQuery(&#123;</span><br><span class=\"line\">  queryKey,</span><br><span class=\"line\">  queryFn,</span><br><span class=\"line\">  enabled,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> [page, setPage] = useState&lt;&#123;</span><br><span class=\"line\">   <span class=\"attr\">current</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">   <span class=\"attr\">pageSize</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"> &#125;&gt;(&#123; <span class=\"attr\">current</span>: <span class=\"number\">1</span>, <span class=\"attr\">pageSize</span>: <span class=\"number\">10</span> &#125;);</span><br><span class=\"line\"> <span class=\"keyword\">const</span> [params, setParams] = useState&lt;&#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">status</span>: <span class=\"built_in\">number</span> &#125;&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; data, isLoading, refetch &#125; = <span class=\"title function_\">useQuery</span>(</span><br><span class=\"line\">   [<span class=\"string\">&#x27;files&#x27;</span>, page, params],</span><br><span class=\"line\">   <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"title function_\">fetch</span>(&#123;</span><br><span class=\"line\">       <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/api/files&#x27;</span>,</span><br><span class=\"line\">       <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">       <span class=\"attr\">body</span>: &#123; page, params &#125;,</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     <span class=\"title function_\">onSuccess</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"> );</span><br></pre></td></tr></table></figure>\n\n<p>这段代码里，在page和params变化的时候会自动进行请求，因此不需要额外用户操作后再次发起请求更新数据。 但是默认情况下，第一次进来也会进行一次请求，另外如果请求失败，会进行三次重试。这是react-query默认设置的。</p>\n<ul>\n<li><code>queryKey</code><ul>\n<li><strong>必传</strong></li>\n<li>用于此查询的query key。</li>\n<li>当此键更改时，查询将自动更新（只要<code>enabled</code>未设置为<code>false</code>）。</li>\n</ul>\n</li>\n<li><code>queryFn:(context: QueryFunctionContext) =&gt; Promise&lt;TData&gt;</code><ul>\n<li>在没有指定默认的query function时<strong>必传</strong></li>\n<li>可以从context中获取<code>queryKey</code></li>\n<li>必须返回一个promise</li>\n</ul>\n</li>\n<li>第三个参数可以传一个对象，其中几个常用的属性如下：<ul>\n<li>enabled： 可以关闭自动更新</li>\n<li>retry: 请求失败重试，可以关闭或传入重试次数</li>\n<li>onSuccess: 成功回调</li>\n<li>onError：失败回调</li>\n<li>refetchOnWindowFocus: 如果数据过期了，当window focus时会进行请求（这也是默认设置），可以关闭该特性</li>\n<li>staleTime：多长时间数据会过期</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"QueryClient\"><a href=\"#QueryClient\" class=\"headerlink\" title=\"QueryClient\"></a>QueryClient</h3><p>以上选型可以通过QueryClient设置默认值：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">queryClient</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryClient</span>();</span><br><span class=\"line\"><span class=\"comment\">// 默认不在挂载和focus时自动运行，不重试，但是默认enable为true，根据依赖变化自动运行</span></span><br><span class=\"line\">queryClient.<span class=\"title function_ invoke__\">setDefaultOptions</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">queries</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">refetchOnWindowFocus</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">refetchOnMount</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">refetchOnReconnect</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">retry</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useMutation\"><a href=\"#useMutation\" class=\"headerlink\" title=\"useMutation\"></a>useMutation</h3><p>当需要变更数据时使用useMutation</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Upload: FC&lt;UploadProps&gt; = function (props) &#123;</span><br><span class=\"line\">  const <span class=\"attr\">component</span> = props.dragger ? FileSelector.Dragger : FileSelector<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  const &#123; mutate, isLoading &#125; = useMutation(</span><br><span class=\"line\">    (file: File) =&gt; &#123;</span><br><span class=\"line\">      const <span class=\"attr\">formData</span> = new FormData()<span class=\"comment\">;</span></span><br><span class=\"line\">      formData.append(&#x27;file&#x27;, file)<span class=\"comment\">;</span></span><br><span class=\"line\">      formData.append(&#x27;name&#x27;, file.name)<span class=\"comment\">;</span></span><br><span class=\"line\">      return fetch(&#123; url: &#x27;/api/upload&#x27;, method: &#x27;POST&#x27;, body: formData &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      onSuccess(data) &#123;</span><br><span class=\"line\">        message.success(&#x27;文件上传成功&#x27;)<span class=\"comment\">;</span></span><br><span class=\"line\">        props.onSuccess?.(data)<span class=\"comment\">;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      onError(err) &#123;</span><br><span class=\"line\">        message.error(&#x27;文件上传失败&#x27;)<span class=\"comment\">;</span></span><br><span class=\"line\">        props.onError?.(err)<span class=\"comment\">;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  )<span class=\"comment\">;</span></span><br><span class=\"line\">  const <span class=\"attr\">upload</span> = (f: RcCustomRequestOptions) =&gt; &#123;</span><br><span class=\"line\">    mutate(f.file)<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;<span class=\"comment\">;</span></span><br><span class=\"line\">  return React.createElement(</span><br><span class=\"line\">    component,</span><br><span class=\"line\">    &#123; customRequest: upload, ...props &#125;,</span><br><span class=\"line\">    props.children || props.dragger ? (</span><br><span class=\"line\">      &lt;p <span class=\"attr\">className</span>=<span class=\"string\">&quot;p-6&quot;</span>&gt;点击或拖拽文件到此区域&lt;/p&gt;</span><br><span class=\"line\">    ) : (</span><br><span class=\"line\">      &lt;Button</span><br><span class=\"line\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">htmlType</span>=<span class=\"string\">&quot;button&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">loading</span>=&#123;isLoading&#125;</span><br><span class=\"line\">        <span class=\"attr\">disabled</span>=&#123;isLoading&#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        &lt;Icon <span class=\"attr\">type</span>=&#123;props.icon || <span class=\"string\">&#x27;upload&#x27;</span>&#125; className=<span class=\"string\">&quot;align-middle&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;span <span class=\"attr\">className</span>=<span class=\"string\">&quot;align-middle&quot;</span>&gt; &#123;props.text || <span class=\"string\">&#x27;上传文件&#x27;</span>&#125;&lt;/span&gt;</span><br><span class=\"line\">      &lt;/Button&gt;</span><br><span class=\"line\">    ),</span><br><span class=\"line\">  )<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这段代码是一个简单的上传组件：</p>\n<p>用户点击按钮</p>\n<p>选择文件</p>\n<p>发起请求</p>\n<p><img src=\"/../imgs/af4554dd19ce4a6aa911769fc36a839f.png\" alt=\"image.png\"> 这里的请求需要我们主动发起，这时候就需要调用<code>useMutation</code>返回的<code>mutate</code></p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> const &#123;</span><br><span class=\"line\">   data,</span><br><span class=\"line\">   error,</span><br><span class=\"line\">   isError,</span><br><span class=\"line\">   isIdle,</span><br><span class=\"line\">   isLoading,</span><br><span class=\"line\">   isPaused,</span><br><span class=\"line\">   isSuccess,</span><br><span class=\"line\">   mutate,</span><br><span class=\"line\">   mutateAsync,</span><br><span class=\"line\">   reset,</span><br><span class=\"line\">   status,</span><br><span class=\"line\"> &#125; = <span class=\"built_in\">useMutation</span>(mutationFn, &#123;</span><br><span class=\"line\">   mutationKey,</span><br><span class=\"line\">   onError,</span><br><span class=\"line\">   onMutate,</span><br><span class=\"line\">   onSettled,</span><br><span class=\"line\">   onSuccess,</span><br><span class=\"line\">   useErrorBoundary,</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mutate</span>(variables, &#123;</span><br><span class=\"line\">   onError,</span><br><span class=\"line\">   onSettled,</span><br><span class=\"line\">   onSuccess,</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>mutationFn: (variables: TVariables) =&gt; Promise&lt;TData&gt;</code></p>\n<ul>\n<li><strong>必传</strong></li>\n<li>一个返回promise的函数。</li>\n<li>参数<code>variables</code>由<code>mutate</code>传过来</li>\n</ul>\n</li>\n<li><p><code>onSuccess: (data: TData, variables: TVariables, context?: TContext) =&gt; Promise&lt;unknown&gt; | void</code></p>\n<ul>\n<li>可选</li>\n<li>成功回调</li>\n</ul>\n</li>\n<li><p><code>onError: (err: TError, variables: TVariables, context?: TContext) =&gt; Promise&lt;unknown&gt; | void</code></p>\n<ul>\n<li>可选的</li>\n<li>失败回调</li>\n</ul>\n</li>\n<li><p><code>retry: boolean | number | (failureCount: number, error: TError) =&gt; boolean</code></p>\n<ul>\n<li>如果设置为<code>false</code>，失败后不会重试。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"React library 快速入门——Recoil","date":"2021-11-13T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第14天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n介绍\n--\n\nRecoil是React的一个轻量且高性能状态管理库，它的目标是解决一下几个问题：\n\n> *   组件间的状态共享只能通过将 state 提升至它们的公共祖先来实现，但这样做可能导致重新渲染一颗巨大的组件树。\n> *   Context 只能存储单一值，无法存储多个各自拥有消费者的值的集合。\n> *   以上两种方式都很难将组件树的顶层（state 必须存在的地方）与叶子组件 (使用 state 的地方) 进行代码分割。\n\n快速上手\n----\n\n在介绍它的api之前我们先看一下应用在项目中应用Recoil是有多么简单：\n\n*   首先是引入`RecoilRoot`并将其放在根组件的位置（也可以放在其他父组件位置上）\n\n```javascript\nimport {RecoilRoot} from 'recoil';\n...\n<RecoilRoot>\n   <App />\n</RecoilRoot>\n```\n\n*   设置公共状态：`atom` store.js\n\n```arduino\nexport const cloudClassSpuState = atom<number>({\n    key: 'cloudClassSpuState', \n    default: 702 \n});\n```\n\n一个公共状态可以用一个`atom`表示\n\n*   使用和修改公共状态：`useRecoilState`\n\n```javascript\nimport { cloudClassSpuState} from '../store.js';\nimport {useRecoilState} from 'recoil';\n...\nexport default function StudyRoom() {\n    const [cloudClassSpu, setSpu] = useRecoilState<number>(cloudClassSpuState);\n    return <div>{cloudClassSpu}</div>\n}\n```\n\n`useRecoilState`返回的是一个数组，第一个值是公共状态，第二个值就是对这个公共状态的修改方法，调用这个方法后其他有依赖到这个状态的组件自动会进行更新。\n\n以上就是Recoil的级别用法了，核心的api就是`atom`和`useRecoilState`\n\n其他常用api\n-------\n\n*   `selector`和`useRecoilValue` selector表示派生状态，类似于`vue`中的`computed`,\n\n```ini\nconst todoListStatsState = selector({\n  key: 'todoListStatsState',\n  get: ({get}) => {\n    const todoList = get(todoListState);\n    const totalNum = todoList.length;\n    const totalCompletedNum = todoList.filter((item) => item.isComplete).length;\n    const totalUncompletedNum = totalNum - totalCompletedNum;\n    const percentCompleted = totalNum === 0 ? 0 : totalCompletedNum / totalNum * 100;\n\n    return {\n      totalNum,\n      totalCompletedNum,\n      totalUncompletedNum,\n      percentCompleted,\n    };\n  },\n});\n```\n\n而要使用`selector`则需要`useRecoilValue`\n\n```javascript\nfunction TodoListStats() {\n  const {\n    totalNum,\n    totalCompletedNum,\n    totalUncompletedNum,\n    percentCompleted,\n  } = useRecoilValue(todoListStatsState);\n\n  const formattedPercentCompleted = Math.round(percentCompleted);\n\n  return (\n    <ul>\n      <li>Total items: {totalNum}</li>\n      <li>Items completed: {totalCompletedNum}</li>\n      <li>Items not completed: {totalUncompletedNum}</li>\n      <li>Percent completed: {formattedPercentCompleted}</li>\n    </ul>\n  );\n}\n```\n\n这里在定义`selector`的时候只设置了`get`而没有设置`set`，因此这个`selector`是只读的\n\n另外`selector`的get可以返回一个`promise`，在获取`selector`中值的时候会等待这个`promise`吐出结果，这就是异步`selector`\n\n*   `useSetRecoilState` 当使用`useRecoilState`获取状态时，组件也同时会订阅该状态，一旦发生变更就会进行更新，但是有些组件仅仅需要进行状态的修改而不需要渲染该状态，这时候就可以用这个api\n\n```javascript\nimport { useSetRecoilState} from 'recoil';\nimport {infoState} from '../store';\n\nfunction form() {\n  const setInfoState = useSetRecoilState(infoState);\\\n  return (\n      <button onClick={() => setInfoState({end:false})}>set info</button>\n)\n\n```\n\n*   `useResetRecoilState` 这个api可以将某个state重设为默认值，比如用在表单的重置按钮上\n    \n*   `useRecoilStateLoadable` 这个api可以读取异步`selector`,并返回一个[`Loadable`](https://www.recoiljs.cn%2Fdocs%2Fapi-reference%2Fcore%2FLoadable \"https://www.recoiljs.cn/docs/api-reference/core/Loadable\") 对象，可以从这个对象中获知值是否在加载中、已完成、出错。\n    \n\n掌握以上这些常用api就可以在项目中启用`recoil`了，相比`redux`,这个库对状态的管理和组织更为灵活。","source":"_posts/React library 快速入门——Recoil.md","raw":"---\n title: \"React library 快速入门——Recoil\"\n date: 2021-11-14\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第14天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n介绍\n--\n\nRecoil是React的一个轻量且高性能状态管理库，它的目标是解决一下几个问题：\n\n> *   组件间的状态共享只能通过将 state 提升至它们的公共祖先来实现，但这样做可能导致重新渲染一颗巨大的组件树。\n> *   Context 只能存储单一值，无法存储多个各自拥有消费者的值的集合。\n> *   以上两种方式都很难将组件树的顶层（state 必须存在的地方）与叶子组件 (使用 state 的地方) 进行代码分割。\n\n快速上手\n----\n\n在介绍它的api之前我们先看一下应用在项目中应用Recoil是有多么简单：\n\n*   首先是引入`RecoilRoot`并将其放在根组件的位置（也可以放在其他父组件位置上）\n\n```javascript\nimport {RecoilRoot} from 'recoil';\n...\n<RecoilRoot>\n   <App />\n</RecoilRoot>\n```\n\n*   设置公共状态：`atom` store.js\n\n```arduino\nexport const cloudClassSpuState = atom<number>({\n    key: 'cloudClassSpuState', \n    default: 702 \n});\n```\n\n一个公共状态可以用一个`atom`表示\n\n*   使用和修改公共状态：`useRecoilState`\n\n```javascript\nimport { cloudClassSpuState} from '../store.js';\nimport {useRecoilState} from 'recoil';\n...\nexport default function StudyRoom() {\n    const [cloudClassSpu, setSpu] = useRecoilState<number>(cloudClassSpuState);\n    return <div>{cloudClassSpu}</div>\n}\n```\n\n`useRecoilState`返回的是一个数组，第一个值是公共状态，第二个值就是对这个公共状态的修改方法，调用这个方法后其他有依赖到这个状态的组件自动会进行更新。\n\n以上就是Recoil的级别用法了，核心的api就是`atom`和`useRecoilState`\n\n其他常用api\n-------\n\n*   `selector`和`useRecoilValue` selector表示派生状态，类似于`vue`中的`computed`,\n\n```ini\nconst todoListStatsState = selector({\n  key: 'todoListStatsState',\n  get: ({get}) => {\n    const todoList = get(todoListState);\n    const totalNum = todoList.length;\n    const totalCompletedNum = todoList.filter((item) => item.isComplete).length;\n    const totalUncompletedNum = totalNum - totalCompletedNum;\n    const percentCompleted = totalNum === 0 ? 0 : totalCompletedNum / totalNum * 100;\n\n    return {\n      totalNum,\n      totalCompletedNum,\n      totalUncompletedNum,\n      percentCompleted,\n    };\n  },\n});\n```\n\n而要使用`selector`则需要`useRecoilValue`\n\n```javascript\nfunction TodoListStats() {\n  const {\n    totalNum,\n    totalCompletedNum,\n    totalUncompletedNum,\n    percentCompleted,\n  } = useRecoilValue(todoListStatsState);\n\n  const formattedPercentCompleted = Math.round(percentCompleted);\n\n  return (\n    <ul>\n      <li>Total items: {totalNum}</li>\n      <li>Items completed: {totalCompletedNum}</li>\n      <li>Items not completed: {totalUncompletedNum}</li>\n      <li>Percent completed: {formattedPercentCompleted}</li>\n    </ul>\n  );\n}\n```\n\n这里在定义`selector`的时候只设置了`get`而没有设置`set`，因此这个`selector`是只读的\n\n另外`selector`的get可以返回一个`promise`，在获取`selector`中值的时候会等待这个`promise`吐出结果，这就是异步`selector`\n\n*   `useSetRecoilState` 当使用`useRecoilState`获取状态时，组件也同时会订阅该状态，一旦发生变更就会进行更新，但是有些组件仅仅需要进行状态的修改而不需要渲染该状态，这时候就可以用这个api\n\n```javascript\nimport { useSetRecoilState} from 'recoil';\nimport {infoState} from '../store';\n\nfunction form() {\n  const setInfoState = useSetRecoilState(infoState);\\\n  return (\n      <button onClick={() => setInfoState({end:false})}>set info</button>\n)\n\n```\n\n*   `useResetRecoilState` 这个api可以将某个state重设为默认值，比如用在表单的重置按钮上\n    \n*   `useRecoilStateLoadable` 这个api可以读取异步`selector`,并返回一个[`Loadable`](https://www.recoiljs.cn%2Fdocs%2Fapi-reference%2Fcore%2FLoadable \"https://www.recoiljs.cn/docs/api-reference/core/Loadable\") 对象，可以从这个对象中获知值是否在加载中、已完成、出错。\n    \n\n掌握以上这些常用api就可以在项目中启用`recoil`了，相比`redux`,这个库对状态的管理和组织更为灵活。","slug":"React library 快速入门——Recoil","published":1,"updated":"2024-04-04T15:27:03.627Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhl0011hajfcp0efgjl","content":"<p>这是我参与11月更文挑战的第14天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Recoil是React的一个轻量且高性能状态管理库，它的目标是解决一下几个问题：</p>\n<blockquote>\n<ul>\n<li>组件间的状态共享只能通过将 state 提升至它们的公共祖先来实现，但这样做可能导致重新渲染一颗巨大的组件树。</li>\n<li>Context 只能存储单一值，无法存储多个各自拥有消费者的值的集合。</li>\n<li>以上两种方式都很难将组件树的顶层（state 必须存在的地方）与叶子组件 (使用 state 的地方) 进行代码分割。</li>\n</ul>\n</blockquote>\n<h2 id=\"快速上手\"><a href=\"#快速上手\" class=\"headerlink\" title=\"快速上手\"></a>快速上手</h2><p>在介绍它的api之前我们先看一下应用在项目中应用Recoil是有多么简单：</p>\n<ul>\n<li>首先是引入<code>RecoilRoot</code>并将其放在根组件的位置（也可以放在其他父组件位置上）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">RecoilRoot</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;recoil&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;<span class=\"title class_\">RecoilRoot</span>&gt;</span><br><span class=\"line\">   <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\">&lt;/<span class=\"title class_\">RecoilRoot</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置公共状态：<code>atom</code> store.js</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"type\">const</span> cloudClassSpuState = <span class=\"built_in\">atom</span>&lt;number&gt;(&#123;</span><br><span class=\"line\">    key: <span class=\"string\">&#x27;cloudClassSpuState&#x27;</span>, </span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"number\">702</span> </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>一个公共状态可以用一个<code>atom</code>表示</p>\n<ul>\n<li>使用和修改公共状态：<code>useRecoilState</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; cloudClassSpuState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;useRecoilState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;recoil&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">StudyRoom</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [cloudClassSpu, setSpu] = useRecoilState&lt;number&gt;(cloudClassSpuState);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;cloudClassSpu&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>useRecoilState</code>返回的是一个数组，第一个值是公共状态，第二个值就是对这个公共状态的修改方法，调用这个方法后其他有依赖到这个状态的组件自动会进行更新。</p>\n<p>以上就是Recoil的级别用法了，核心的api就是<code>atom</code>和<code>useRecoilState</code></p>\n<h2 id=\"其他常用api\"><a href=\"#其他常用api\" class=\"headerlink\" title=\"其他常用api\"></a>其他常用api</h2><ul>\n<li><code>selector</code>和<code>useRecoilValue</code> selector表示派生状态，类似于<code>vue</code>中的<code>computed</code>,</li>\n</ul>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">todoListStatsState</span> = selector(&#123;</span><br><span class=\"line\">  key: &#x27;todoListStatsState&#x27;,</span><br><span class=\"line\">  get: (&#123;get&#125;) =&gt; &#123;</span><br><span class=\"line\">    const <span class=\"attr\">todoList</span> = get(todoListState)<span class=\"comment\">;</span></span><br><span class=\"line\">    const <span class=\"attr\">totalNum</span> = todoList.length<span class=\"comment\">;</span></span><br><span class=\"line\">    const <span class=\"attr\">totalCompletedNum</span> = todoList.filter((item) =&gt; item.isComplete).length<span class=\"comment\">;</span></span><br><span class=\"line\">    const <span class=\"attr\">totalUncompletedNum</span> = totalNum - totalCompletedNum<span class=\"comment\">;</span></span><br><span class=\"line\">    const <span class=\"attr\">percentCompleted</span> = totalNum === <span class=\"number\">0</span> ? <span class=\"number\">0</span> : totalCompletedNum / totalNum * <span class=\"number\">100</span><span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      totalNum,</span><br><span class=\"line\">      totalCompletedNum,</span><br><span class=\"line\">      totalUncompletedNum,</span><br><span class=\"line\">      percentCompleted,</span><br><span class=\"line\">    &#125;<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>而要使用<code>selector</code>则需要<code>useRecoilValue</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">TodoListStats</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    totalNum,</span><br><span class=\"line\">    totalCompletedNum,</span><br><span class=\"line\">    totalUncompletedNum,</span><br><span class=\"line\">    percentCompleted,</span><br><span class=\"line\">  &#125; = <span class=\"title function_\">useRecoilValue</span>(todoListStatsState);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> formattedPercentCompleted = <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(percentCompleted);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Total items: &#123;totalNum&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Items completed: &#123;totalCompletedNum&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Items not completed: &#123;totalUncompletedNum&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Percent completed: &#123;formattedPercentCompleted&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里在定义<code>selector</code>的时候只设置了<code>get</code>而没有设置<code>set</code>，因此这个<code>selector</code>是只读的</p>\n<p>另外<code>selector</code>的get可以返回一个<code>promise</code>，在获取<code>selector</code>中值的时候会等待这个<code>promise</code>吐出结果，这就是异步<code>selector</code></p>\n<ul>\n<li><code>useSetRecoilState</code> 当使用<code>useRecoilState</code>获取状态时，组件也同时会订阅该状态，一旦发生变更就会进行更新，但是有些组件仅仅需要进行状态的修改而不需要渲染该状态，这时候就可以用这个api</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useSetRecoilState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;recoil&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;infoState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">form</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> setInfoState = <span class=\"title function_\">useSetRecoilState</span>(infoState);\\</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setInfoState(&#123;end:false&#125;)&#125;&gt;set info<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>useResetRecoilState</code> 这个api可以将某个state重设为默认值，比如用在表单的重置按钮上</p>\n</li>\n<li><p><code>useRecoilStateLoadable</code> 这个api可以读取异步<code>selector</code>,并返回一个<a href=\"https://www.recoiljs.cn%2Fdocs%2Fapi-reference%2Fcore%2FLoadable\" title=\"https://www.recoiljs.cn/docs/api-reference/core/Loadable\"><code>Loadable</code></a> 对象，可以从这个对象中获知值是否在加载中、已完成、出错。</p>\n</li>\n</ul>\n<p>掌握以上这些常用api就可以在项目中启用<code>recoil</code>了，相比<code>redux</code>,这个库对状态的管理和组织更为灵活。</p>\n","length":2830,"excerpt":"","more":"<p>这是我参与11月更文挑战的第14天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Recoil是React的一个轻量且高性能状态管理库，它的目标是解决一下几个问题：</p>\n<blockquote>\n<ul>\n<li>组件间的状态共享只能通过将 state 提升至它们的公共祖先来实现，但这样做可能导致重新渲染一颗巨大的组件树。</li>\n<li>Context 只能存储单一值，无法存储多个各自拥有消费者的值的集合。</li>\n<li>以上两种方式都很难将组件树的顶层（state 必须存在的地方）与叶子组件 (使用 state 的地方) 进行代码分割。</li>\n</ul>\n</blockquote>\n<h2 id=\"快速上手\"><a href=\"#快速上手\" class=\"headerlink\" title=\"快速上手\"></a>快速上手</h2><p>在介绍它的api之前我们先看一下应用在项目中应用Recoil是有多么简单：</p>\n<ul>\n<li>首先是引入<code>RecoilRoot</code>并将其放在根组件的位置（也可以放在其他父组件位置上）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">RecoilRoot</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;recoil&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;<span class=\"title class_\">RecoilRoot</span>&gt;</span><br><span class=\"line\">   <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\">&lt;/<span class=\"title class_\">RecoilRoot</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置公共状态：<code>atom</code> store.js</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"type\">const</span> cloudClassSpuState = <span class=\"built_in\">atom</span>&lt;number&gt;(&#123;</span><br><span class=\"line\">    key: <span class=\"string\">&#x27;cloudClassSpuState&#x27;</span>, </span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"number\">702</span> </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>一个公共状态可以用一个<code>atom</code>表示</p>\n<ul>\n<li>使用和修改公共状态：<code>useRecoilState</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; cloudClassSpuState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;useRecoilState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;recoil&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">StudyRoom</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [cloudClassSpu, setSpu] = useRecoilState&lt;number&gt;(cloudClassSpuState);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;cloudClassSpu&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>useRecoilState</code>返回的是一个数组，第一个值是公共状态，第二个值就是对这个公共状态的修改方法，调用这个方法后其他有依赖到这个状态的组件自动会进行更新。</p>\n<p>以上就是Recoil的级别用法了，核心的api就是<code>atom</code>和<code>useRecoilState</code></p>\n<h2 id=\"其他常用api\"><a href=\"#其他常用api\" class=\"headerlink\" title=\"其他常用api\"></a>其他常用api</h2><ul>\n<li><code>selector</code>和<code>useRecoilValue</code> selector表示派生状态，类似于<code>vue</code>中的<code>computed</code>,</li>\n</ul>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">todoListStatsState</span> = selector(&#123;</span><br><span class=\"line\">  key: &#x27;todoListStatsState&#x27;,</span><br><span class=\"line\">  get: (&#123;get&#125;) =&gt; &#123;</span><br><span class=\"line\">    const <span class=\"attr\">todoList</span> = get(todoListState)<span class=\"comment\">;</span></span><br><span class=\"line\">    const <span class=\"attr\">totalNum</span> = todoList.length<span class=\"comment\">;</span></span><br><span class=\"line\">    const <span class=\"attr\">totalCompletedNum</span> = todoList.filter((item) =&gt; item.isComplete).length<span class=\"comment\">;</span></span><br><span class=\"line\">    const <span class=\"attr\">totalUncompletedNum</span> = totalNum - totalCompletedNum<span class=\"comment\">;</span></span><br><span class=\"line\">    const <span class=\"attr\">percentCompleted</span> = totalNum === <span class=\"number\">0</span> ? <span class=\"number\">0</span> : totalCompletedNum / totalNum * <span class=\"number\">100</span><span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      totalNum,</span><br><span class=\"line\">      totalCompletedNum,</span><br><span class=\"line\">      totalUncompletedNum,</span><br><span class=\"line\">      percentCompleted,</span><br><span class=\"line\">    &#125;<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>而要使用<code>selector</code>则需要<code>useRecoilValue</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">TodoListStats</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    totalNum,</span><br><span class=\"line\">    totalCompletedNum,</span><br><span class=\"line\">    totalUncompletedNum,</span><br><span class=\"line\">    percentCompleted,</span><br><span class=\"line\">  &#125; = <span class=\"title function_\">useRecoilValue</span>(todoListStatsState);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> formattedPercentCompleted = <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(percentCompleted);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Total items: &#123;totalNum&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Items completed: &#123;totalCompletedNum&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Items not completed: &#123;totalUncompletedNum&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Percent completed: &#123;formattedPercentCompleted&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里在定义<code>selector</code>的时候只设置了<code>get</code>而没有设置<code>set</code>，因此这个<code>selector</code>是只读的</p>\n<p>另外<code>selector</code>的get可以返回一个<code>promise</code>，在获取<code>selector</code>中值的时候会等待这个<code>promise</code>吐出结果，这就是异步<code>selector</code></p>\n<ul>\n<li><code>useSetRecoilState</code> 当使用<code>useRecoilState</code>获取状态时，组件也同时会订阅该状态，一旦发生变更就会进行更新，但是有些组件仅仅需要进行状态的修改而不需要渲染该状态，这时候就可以用这个api</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useSetRecoilState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;recoil&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;infoState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">form</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> setInfoState = <span class=\"title function_\">useSetRecoilState</span>(infoState);\\</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setInfoState(&#123;end:false&#125;)&#125;&gt;set info<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>useResetRecoilState</code> 这个api可以将某个state重设为默认值，比如用在表单的重置按钮上</p>\n</li>\n<li><p><code>useRecoilStateLoadable</code> 这个api可以读取异步<code>selector</code>,并返回一个<a href=\"https://www.recoiljs.cn%2Fdocs%2Fapi-reference%2Fcore%2FLoadable\" title=\"https://www.recoiljs.cn/docs/api-reference/core/Loadable\"><code>Loadable</code></a> 对象，可以从这个对象中获知值是否在加载中、已完成、出错。</p>\n</li>\n</ul>\n<p>掌握以上这些常用api就可以在项目中启用<code>recoil</code>了，相比<code>redux</code>,这个库对状态的管理和组织更为灵活。</p>\n"},{"title":"React library快速入门——Mobx","date":"2021-11-27T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第28天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\nMobx介绍\n------\n\nMobx，和Redux一样，也是React状态管理比较流行的解决方案之一。\n\nMobx的作者非常厌恶Redux的繁琐（可能很多人也是），于是设计了Mobx作为状态管理，并宣称它的性能远远超过Redux（在react-redux使用hooks改造前也确实是这样的）。\n\nMobx早期参考了Vue，也使用了响应式编程。这意味着这个库并不是基于`Context`的中心化状态管理，这是和Redux最大的不同点，也使它成为了当年诸多状态方案中的一股清流。当然响应式的状态管理也给它带来了诸多争议，其中一个观点便是：\n\n> React+Mobx的选型就是一个复杂版的Vue\n\nMobx6之前大量使用了装饰器语法，非常简洁。但是6.x之后抛弃了装饰器。\n\n> 然而，装饰器语法尚未定案以及未被纳入ES标准，标准化的过程还需要很长时间，且未来制定的标准可能与当前的装饰器实现方案有所不同。出于兼容性的考虑，我们在MobX 6中放弃了它们...\n\nhooks本身的特性和它带来的各种新的状态管理库使得Mobx不再那么耀眼，但hooks并不能完全代替class 组件，在大型项目中，Mobx依然是一个不错的技术选型。\n\n对于一些老项目，需要注意mobx-react的版本，如果需要在这些老项目中搭配react hooks使用，可以用[mobx-react-lite](https://www.npmjs.com%2Fpackage%2Fmobx-react-lite \"https://www.npmjs.com/package/mobx-react-lite\")\n\n![image.png](../imgs/ee559a33603348b7ab100b67c07cc172.png)\n\n由于装饰器依然有着相当的拥趸，因此本文将分别介绍两种方式。\n\n假设我们有一个全局的状态是主题颜色，我们将它维护在store目录中：\n\n不用装饰器\n-----\n\n全局状态：src/store/CommonStore.ts\n\n```ts\nimport {makeAutoObservable} from 'mobx';\n\nexport default class CommonStore {\n\tcolor = 'red';\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\t}\n\tchangeTheme() {\n\t\tthis.color = `#${Math.random()\n\t\t\t.toString(16)\n\t\t\t.slice(-6)}`;\n\t}\n}\n\nexport const commonStore = new CommonStore();\n```\n\n组件中引用及修改store：\n\n```tsx\nimport {observer} from 'mobx-react';\nimport {commonStore} from '../../../store/CommonStore';\n\nconst HomePage = observer(() => {\n\tconst [text, setText] = useState('xxx');\n\tconst change = () => {\n\t\tcommonStore.changeTheme();\n\t};\n\treturn (\n\t\t<div className=\"HomePage\">\n\t\t\n\t\t\t<div className=\"px-16 d-flex align-items-center justify-content-end\">\n\t\t\t\t<Paragraph color={commonStore.color} >\n\t\t\t\t<p className=\"font-20\">{text}</p>\n\t\t\t\t\t<Button type=\"primary\" size=\"small\" onClick={change} >\n\t\t\t\t\t\t切换主题色\n\t\t\t\t\t</Button>\n\t\t\t\t</Paragraph>\n\n\t\t\t</div>\n\t\t</div>\n\t);\n});\nexport default HomePage;\n```\n\n使用装饰器\n-----\n\n全局状态：src/store/CommonStore.ts\n\n```typescript\nexport default class CommonStore {\n\t@observable color = 'red';\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\t}\n\tchangeTheme() {\n\t\tthis.color = `#${Math.random()\n\t\t\t.toString(16)\n\t\t\t.slice(-6)}`;\n\t}\n}\n\nexport const commonStore = new CommonStore();\n```\n\n组件中引用及修改store：\n\n```typescript\n@observer\nclass HomePage extends React.Component {\n\t@observable text = 0;\n\tconstructor() {\n\t\tsuper({})\n        makeObservable(this)\n    }\n\tchange = () => {\n\t\tconsole.log(this.text)\n\t\tthis.text= Date.now();\n\t\tcommonStore.changeTheme();\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"HomePage\">\n\n\t\t\t\t<div className=\"px-16 d-flex align-items-center justify-content-end\">\n\t\t\t\t\t<Paragraph color={commonStore.color} >\n\t\t\t\t\t\t<p className=\"font-20\">{this.text}</p>\n\t\t\t\t\t\t<Button type=\"primary\" size=\"small\" onClick={this.change.bind(this)} >\n\t\t\t\t\t\t\t切换主题色和内容\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Paragraph>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n\n在Mobx6中是一定要加上`makeObservable`或者`makeObservable`的，否则不会更新视图。对于store来说，如果加上了这段代码，即使不用`@observable`，视图也能响应变换。\n\n因此在Mobx6中虽然仍然支持装饰器，但纯属鸡肋。\n\n核心概念和API\n--------\n\nmobx和mobx-react搭配使用，前者提供创建可观察对象的方法，后者能让组件订阅这个状态并进行更新。\n\n### 概念\n\n*   observable: 可观察的状态，意味着mobx能够监测到这个数据的改动，并可以对它做出反应\n*   computed：计算数据，类似Vue中的computed\n*   action： 动作，修改状态。\n*   Reaction: 状态与动作的关联，相关的api有`autorun`,`when`,`reaction`,但一般用不到。\n*   flow: flow并不属于mobx的核心概念，也是一个重要特性。flow是async/await的替代方案，`makeAutoObservable`能自动将generator函数推断为flow,这个函数返回的promise带有cancel，能够中断该promise。另外一个特性是省去了`action`或`runInAction`的包装。（这些后续单独开Mobx的源码解析。）\n\n### Mobx apis\n\n#### 创建可观察数据：`observable`/`makeObservable`/`makeAutoObservable`\n\n##### observable\n\n可以创建一个简单的可观察对象：\n\n```js\nconst data = observable({count:1})\n```\n\n##### makeObservable\n\n用在class state中，能够识别哪些属性是`observable`或者`computed`，哪些方法需要支持`action`或者是`flow`\n\n```php\nconstructor() {\n    makeObservable(this, {\n    value: observable,\n    double: computed,\n    increment: action,\n    fetch: flow\n    })\n}\n```\n\n##### makeAutoObservable\n\n`makeObservable`的智能版，能够自动推断所有属性，规则如下：\n\n*   所有 _自有_ 属性都成为 `observable`。\n*   所有 `getters` 都成为 `computed`。\n*   所有 `setters` 都成为 `action`。\n*   所有 _prototype 中的 functions_ 都成为 `autoAction`。\n*   所有 _prototype 中的 generator functions_ 都成为 `flow`。\n\n#### 修改数据\n\n##### action/runInAction\n\nMobx要求数据的修改都放在action中，并提供了`action`和`runInAction`两个api来标记action。 `action`是创建一个函数，`runInAction`是创建一个函数并立即执行\n\n```tsx\n<button \n    onClick={action(e =>  { \n            formState.resetPendingUploads()\n            formState.resetValues()\n            e.stopPropagation() \n        })\n    } \n> \n    Reset form \n</button>\n```\n\n虽然不放在action中并不影响它观察，但会失去Mobx的事务管理。\n\nMobx中的事务，是指对数据的多次修改合并为一次事务，只触发一次reaction。\n\n### mobx-react apis\n\n#### observer\n\n使组件能够在观察到observable变更后重新渲染 const TimerView = observer(({ timer }) => Seconds passed: {timer.secondsPassed})\\\\\n\n#### Observer\n\n将observer的特性应有在局部（能够在更小的粒度上更新）\n\n```scala\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                {this.props.person.name}\n                <Observer>{() => <div>{this.props.person.name}</div>}</Observer>\n            </div>\n        )\n    }\n}\n\nconst person = observable({ name: \"John\" })\n```\n\n这里persion的变化会在Observer组件内更新，而不会导致App组件的更新。\n\nmobx-react核心的api就这两个，其他的比如 `useLocalObservable`在当下已经并不常用了。","source":"_posts/React library快速入门——Mobx.md","raw":"---\n title: \"React library快速入门——Mobx\"\n date: 2021-11-28\n tags: [前端,React.js]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第28天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\nMobx介绍\n------\n\nMobx，和Redux一样，也是React状态管理比较流行的解决方案之一。\n\nMobx的作者非常厌恶Redux的繁琐（可能很多人也是），于是设计了Mobx作为状态管理，并宣称它的性能远远超过Redux（在react-redux使用hooks改造前也确实是这样的）。\n\nMobx早期参考了Vue，也使用了响应式编程。这意味着这个库并不是基于`Context`的中心化状态管理，这是和Redux最大的不同点，也使它成为了当年诸多状态方案中的一股清流。当然响应式的状态管理也给它带来了诸多争议，其中一个观点便是：\n\n> React+Mobx的选型就是一个复杂版的Vue\n\nMobx6之前大量使用了装饰器语法，非常简洁。但是6.x之后抛弃了装饰器。\n\n> 然而，装饰器语法尚未定案以及未被纳入ES标准，标准化的过程还需要很长时间，且未来制定的标准可能与当前的装饰器实现方案有所不同。出于兼容性的考虑，我们在MobX 6中放弃了它们...\n\nhooks本身的特性和它带来的各种新的状态管理库使得Mobx不再那么耀眼，但hooks并不能完全代替class 组件，在大型项目中，Mobx依然是一个不错的技术选型。\n\n对于一些老项目，需要注意mobx-react的版本，如果需要在这些老项目中搭配react hooks使用，可以用[mobx-react-lite](https://www.npmjs.com%2Fpackage%2Fmobx-react-lite \"https://www.npmjs.com/package/mobx-react-lite\")\n\n![image.png](../imgs/ee559a33603348b7ab100b67c07cc172.png)\n\n由于装饰器依然有着相当的拥趸，因此本文将分别介绍两种方式。\n\n假设我们有一个全局的状态是主题颜色，我们将它维护在store目录中：\n\n不用装饰器\n-----\n\n全局状态：src/store/CommonStore.ts\n\n```ts\nimport {makeAutoObservable} from 'mobx';\n\nexport default class CommonStore {\n\tcolor = 'red';\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\t}\n\tchangeTheme() {\n\t\tthis.color = `#${Math.random()\n\t\t\t.toString(16)\n\t\t\t.slice(-6)}`;\n\t}\n}\n\nexport const commonStore = new CommonStore();\n```\n\n组件中引用及修改store：\n\n```tsx\nimport {observer} from 'mobx-react';\nimport {commonStore} from '../../../store/CommonStore';\n\nconst HomePage = observer(() => {\n\tconst [text, setText] = useState('xxx');\n\tconst change = () => {\n\t\tcommonStore.changeTheme();\n\t};\n\treturn (\n\t\t<div className=\"HomePage\">\n\t\t\n\t\t\t<div className=\"px-16 d-flex align-items-center justify-content-end\">\n\t\t\t\t<Paragraph color={commonStore.color} >\n\t\t\t\t<p className=\"font-20\">{text}</p>\n\t\t\t\t\t<Button type=\"primary\" size=\"small\" onClick={change} >\n\t\t\t\t\t\t切换主题色\n\t\t\t\t\t</Button>\n\t\t\t\t</Paragraph>\n\n\t\t\t</div>\n\t\t</div>\n\t);\n});\nexport default HomePage;\n```\n\n使用装饰器\n-----\n\n全局状态：src/store/CommonStore.ts\n\n```typescript\nexport default class CommonStore {\n\t@observable color = 'red';\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\t}\n\tchangeTheme() {\n\t\tthis.color = `#${Math.random()\n\t\t\t.toString(16)\n\t\t\t.slice(-6)}`;\n\t}\n}\n\nexport const commonStore = new CommonStore();\n```\n\n组件中引用及修改store：\n\n```typescript\n@observer\nclass HomePage extends React.Component {\n\t@observable text = 0;\n\tconstructor() {\n\t\tsuper({})\n        makeObservable(this)\n    }\n\tchange = () => {\n\t\tconsole.log(this.text)\n\t\tthis.text= Date.now();\n\t\tcommonStore.changeTheme();\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"HomePage\">\n\n\t\t\t\t<div className=\"px-16 d-flex align-items-center justify-content-end\">\n\t\t\t\t\t<Paragraph color={commonStore.color} >\n\t\t\t\t\t\t<p className=\"font-20\">{this.text}</p>\n\t\t\t\t\t\t<Button type=\"primary\" size=\"small\" onClick={this.change.bind(this)} >\n\t\t\t\t\t\t\t切换主题色和内容\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Paragraph>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n\n在Mobx6中是一定要加上`makeObservable`或者`makeObservable`的，否则不会更新视图。对于store来说，如果加上了这段代码，即使不用`@observable`，视图也能响应变换。\n\n因此在Mobx6中虽然仍然支持装饰器，但纯属鸡肋。\n\n核心概念和API\n--------\n\nmobx和mobx-react搭配使用，前者提供创建可观察对象的方法，后者能让组件订阅这个状态并进行更新。\n\n### 概念\n\n*   observable: 可观察的状态，意味着mobx能够监测到这个数据的改动，并可以对它做出反应\n*   computed：计算数据，类似Vue中的computed\n*   action： 动作，修改状态。\n*   Reaction: 状态与动作的关联，相关的api有`autorun`,`when`,`reaction`,但一般用不到。\n*   flow: flow并不属于mobx的核心概念，也是一个重要特性。flow是async/await的替代方案，`makeAutoObservable`能自动将generator函数推断为flow,这个函数返回的promise带有cancel，能够中断该promise。另外一个特性是省去了`action`或`runInAction`的包装。（这些后续单独开Mobx的源码解析。）\n\n### Mobx apis\n\n#### 创建可观察数据：`observable`/`makeObservable`/`makeAutoObservable`\n\n##### observable\n\n可以创建一个简单的可观察对象：\n\n```js\nconst data = observable({count:1})\n```\n\n##### makeObservable\n\n用在class state中，能够识别哪些属性是`observable`或者`computed`，哪些方法需要支持`action`或者是`flow`\n\n```php\nconstructor() {\n    makeObservable(this, {\n    value: observable,\n    double: computed,\n    increment: action,\n    fetch: flow\n    })\n}\n```\n\n##### makeAutoObservable\n\n`makeObservable`的智能版，能够自动推断所有属性，规则如下：\n\n*   所有 _自有_ 属性都成为 `observable`。\n*   所有 `getters` 都成为 `computed`。\n*   所有 `setters` 都成为 `action`。\n*   所有 _prototype 中的 functions_ 都成为 `autoAction`。\n*   所有 _prototype 中的 generator functions_ 都成为 `flow`。\n\n#### 修改数据\n\n##### action/runInAction\n\nMobx要求数据的修改都放在action中，并提供了`action`和`runInAction`两个api来标记action。 `action`是创建一个函数，`runInAction`是创建一个函数并立即执行\n\n```tsx\n<button \n    onClick={action(e =>  { \n            formState.resetPendingUploads()\n            formState.resetValues()\n            e.stopPropagation() \n        })\n    } \n> \n    Reset form \n</button>\n```\n\n虽然不放在action中并不影响它观察，但会失去Mobx的事务管理。\n\nMobx中的事务，是指对数据的多次修改合并为一次事务，只触发一次reaction。\n\n### mobx-react apis\n\n#### observer\n\n使组件能够在观察到observable变更后重新渲染 const TimerView = observer(({ timer }) => Seconds passed: {timer.secondsPassed})\\\\\n\n#### Observer\n\n将observer的特性应有在局部（能够在更小的粒度上更新）\n\n```scala\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                {this.props.person.name}\n                <Observer>{() => <div>{this.props.person.name}</div>}</Observer>\n            </div>\n        )\n    }\n}\n\nconst person = observable({ name: \"John\" })\n```\n\n这里persion的变化会在Observer组件内更新，而不会导致App组件的更新。\n\nmobx-react核心的api就这两个，其他的比如 `useLocalObservable`在当下已经并不常用了。","slug":"React library快速入门——Mobx","published":1,"updated":"2024-04-04T15:27:03.635Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhl0014hajfbp323o8h","content":"<p>这是我参与11月更文挑战的第28天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"Mobx介绍\"><a href=\"#Mobx介绍\" class=\"headerlink\" title=\"Mobx介绍\"></a>Mobx介绍</h2><p>Mobx，和Redux一样，也是React状态管理比较流行的解决方案之一。</p>\n<p>Mobx的作者非常厌恶Redux的繁琐（可能很多人也是），于是设计了Mobx作为状态管理，并宣称它的性能远远超过Redux（在react-redux使用hooks改造前也确实是这样的）。</p>\n<p>Mobx早期参考了Vue，也使用了响应式编程。这意味着这个库并不是基于<code>Context</code>的中心化状态管理，这是和Redux最大的不同点，也使它成为了当年诸多状态方案中的一股清流。当然响应式的状态管理也给它带来了诸多争议，其中一个观点便是：</p>\n<blockquote>\n<p>React+Mobx的选型就是一个复杂版的Vue</p>\n</blockquote>\n<p>Mobx6之前大量使用了装饰器语法，非常简洁。但是6.x之后抛弃了装饰器。</p>\n<blockquote>\n<p>然而，装饰器语法尚未定案以及未被纳入ES标准，标准化的过程还需要很长时间，且未来制定的标准可能与当前的装饰器实现方案有所不同。出于兼容性的考虑，我们在MobX 6中放弃了它们…</p>\n</blockquote>\n<p>hooks本身的特性和它带来的各种新的状态管理库使得Mobx不再那么耀眼，但hooks并不能完全代替class 组件，在大型项目中，Mobx依然是一个不错的技术选型。</p>\n<p>对于一些老项目，需要注意mobx-react的版本，如果需要在这些老项目中搭配react hooks使用，可以用<a href=\"https://www.npmjs.com%2Fpackage%2Fmobx-react-lite\" title=\"https://www.npmjs.com/package/mobx-react-lite\">mobx-react-lite</a></p>\n<p><img src=\"/../imgs/ee559a33603348b7ab100b67c07cc172.png\" alt=\"image.png\"></p>\n<p>由于装饰器依然有着相当的拥趸，因此本文将分别介绍两种方式。</p>\n<p>假设我们有一个全局的状态是主题颜色，我们将它维护在store目录中：</p>\n<h2 id=\"不用装饰器\"><a href=\"#不用装饰器\" class=\"headerlink\" title=\"不用装饰器\"></a>不用装饰器</h2><p>全局状态：src&#x2F;store&#x2F;CommonStore.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;makeAutoObservable&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;mobx&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommonStore</span> &#123;</span><br><span class=\"line\">\tcolor = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">makeAutoObservable</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">changeTheme</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t.toString(<span class=\"number\">16</span>)</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t.slice(-<span class=\"number\">6</span>)&#125;</span>`</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> commonStore = <span class=\"keyword\">new</span> <span class=\"title class_\">CommonStore</span>();</span><br></pre></td></tr></table></figure>\n\n<p>组件中引用及修改store：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;mobx-react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;commonStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../../store/CommonStore&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HomePage</span> = <span class=\"title function_\">observer</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> [text, setText] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;xxx&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"title function_\">change</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">\t\tcommonStore.<span class=\"title function_\">changeTheme</span>();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;HomePage&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;px-16 d-flex align-items-center justify-content-end&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Paragraph</span> <span class=\"attr\">color</span>=<span class=\"string\">&#123;commonStore.color&#125;</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;font-20&quot;</span>&gt;</span>&#123;text&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;change&#125;</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t切换主题色</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">Paragraph</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">HomePage</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用装饰器\"><a href=\"#使用装饰器\" class=\"headerlink\" title=\"使用装饰器\"></a>使用装饰器</h2><p>全局状态：src&#x2F;store&#x2F;CommonStore.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommonStore</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@observable</span> color = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">makeAutoObservable</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">changeTheme</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t.toString(<span class=\"number\">16</span>)</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t.slice(-<span class=\"number\">6</span>)&#125;</span>`</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> commonStore = <span class=\"keyword\">new</span> <span class=\"title class_\">CommonStore</span>();</span><br></pre></td></tr></table></figure>\n\n<p>组件中引用及修改store：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@observer</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HomePage</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@observable</span> text = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">super</span>(&#123;&#125;)</span><br><span class=\"line\">        <span class=\"title function_\">makeObservable</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tchange = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">text</span>)</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">text</span>= <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">\t\tcommonStore.<span class=\"title function_\">changeTheme</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;HomePage&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;px-16 d-flex align-items-center justify-content-end&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Paragraph</span> <span class=\"attr\">color</span>=<span class=\"string\">&#123;commonStore.color&#125;</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;font-20&quot;</span>&gt;</span>&#123;this.text&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.change.bind(this)&#125;</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t\t切换主题色和内容</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">Paragraph</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Mobx6中是一定要加上<code>makeObservable</code>或者<code>makeObservable</code>的，否则不会更新视图。对于store来说，如果加上了这段代码，即使不用<code>@observable</code>，视图也能响应变换。</p>\n<p>因此在Mobx6中虽然仍然支持装饰器，但纯属鸡肋。</p>\n<h2 id=\"核心概念和API\"><a href=\"#核心概念和API\" class=\"headerlink\" title=\"核心概念和API\"></a>核心概念和API</h2><p>mobx和mobx-react搭配使用，前者提供创建可观察对象的方法，后者能让组件订阅这个状态并进行更新。</p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>observable: 可观察的状态，意味着mobx能够监测到这个数据的改动，并可以对它做出反应</li>\n<li>computed：计算数据，类似Vue中的computed</li>\n<li>action： 动作，修改状态。</li>\n<li>Reaction: 状态与动作的关联，相关的api有<code>autorun</code>,<code>when</code>,<code>reaction</code>,但一般用不到。</li>\n<li>flow: flow并不属于mobx的核心概念，也是一个重要特性。flow是async&#x2F;await的替代方案，<code>makeAutoObservable</code>能自动将generator函数推断为flow,这个函数返回的promise带有cancel，能够中断该promise。另外一个特性是省去了<code>action</code>或<code>runInAction</code>的包装。（这些后续单独开Mobx的源码解析。）</li>\n</ul>\n<h3 id=\"Mobx-apis\"><a href=\"#Mobx-apis\" class=\"headerlink\" title=\"Mobx apis\"></a>Mobx apis</h3><h4 id=\"创建可观察数据：observable-makeObservable-makeAutoObservable\"><a href=\"#创建可观察数据：observable-makeObservable-makeAutoObservable\" class=\"headerlink\" title=\"创建可观察数据：observable&#x2F;makeObservable&#x2F;makeAutoObservable\"></a>创建可观察数据：<code>observable</code>&#x2F;<code>makeObservable</code>&#x2F;<code>makeAutoObservable</code></h4><h5 id=\"observable\"><a href=\"#observable\" class=\"headerlink\" title=\"observable\"></a>observable</h5><p>可以创建一个简单的可观察对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"title function_\">observable</span>(&#123;<span class=\"attr\">count</span>:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"makeObservable\"><a href=\"#makeObservable\" class=\"headerlink\" title=\"makeObservable\"></a>makeObservable</h5><p>用在class state中，能够识别哪些属性是<code>observable</code>或者<code>computed</code>，哪些方法需要支持<code>action</code>或者是<code>flow</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">makeObservable</span>(this, &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: observable,</span><br><span class=\"line\">    <span class=\"attr\">double</span>: computed,</span><br><span class=\"line\">    <span class=\"attr\">increment</span>: action,</span><br><span class=\"line\">    <span class=\"attr\">fetch</span>: flow</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"makeAutoObservable\"><a href=\"#makeAutoObservable\" class=\"headerlink\" title=\"makeAutoObservable\"></a>makeAutoObservable</h5><p><code>makeObservable</code>的智能版，能够自动推断所有属性，规则如下：</p>\n<ul>\n<li>所有 <em>自有</em> 属性都成为 <code>observable</code>。</li>\n<li>所有 <code>getters</code> 都成为 <code>computed</code>。</li>\n<li>所有 <code>setters</code> 都成为 <code>action</code>。</li>\n<li>所有 <em>prototype 中的 functions</em> 都成为 <code>autoAction</code>。</li>\n<li>所有 <em>prototype 中的 generator functions</em> 都成为 <code>flow</code>。</li>\n</ul>\n<h4 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h4><h5 id=\"action-runInAction\"><a href=\"#action-runInAction\" class=\"headerlink\" title=\"action&#x2F;runInAction\"></a>action&#x2F;runInAction</h5><p>Mobx要求数据的修改都放在action中，并提供了<code>action</code>和<code>runInAction</code>两个api来标记action。 <code>action</code>是创建一个函数，<code>runInAction</code>是创建一个函数并立即执行</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button </span><br><span class=\"line\">    onClick=&#123;<span class=\"title function_\">action</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span>  &#123; </span><br><span class=\"line\">            formState.<span class=\"title function_\">resetPendingUploads</span>()</span><br><span class=\"line\">            formState.<span class=\"title function_\">resetValues</span>()</span><br><span class=\"line\">            e.<span class=\"title function_\">stopPropagation</span>() </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&gt; </span><br><span class=\"line\">    <span class=\"title class_\">Reset</span> form </span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>虽然不放在action中并不影响它观察，但会失去Mobx的事务管理。</p>\n<p>Mobx中的事务，是指对数据的多次修改合并为一次事务，只触发一次reaction。</p>\n<h3 id=\"mobx-react-apis\"><a href=\"#mobx-react-apis\" class=\"headerlink\" title=\"mobx-react apis\"></a>mobx-react apis</h3><h4 id=\"observer\"><a href=\"#observer\" class=\"headerlink\" title=\"observer\"></a>observer</h4><p>使组件能够在观察到observable变更后重新渲染 const TimerView &#x3D; observer(({ timer }) &#x3D;&gt; Seconds passed: {timer.secondsPassed})\\</p>\n<h4 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h4><p>将observer的特性应有在局部（能够在更小的粒度上更新）</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &#123;<span class=\"keyword\">this</span>.props.person.name&#125;</span><br><span class=\"line\">                &lt;<span class=\"type\">Observer</span>&gt;&#123;() =&gt; &lt;div&gt;&#123;<span class=\"keyword\">this</span>.props.person.name&#125;&lt;/div&gt;&#125;&lt;/<span class=\"type\">Observer</span>&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const person = observable(&#123; name: <span class=\"string\">&quot;John&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这里persion的变化会在Observer组件内更新，而不会导致App组件的更新。</p>\n<p>mobx-react核心的api就这两个，其他的比如 <code>useLocalObservable</code>在当下已经并不常用了。</p>\n","length":4797,"excerpt":"","more":"<p>这是我参与11月更文挑战的第28天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"Mobx介绍\"><a href=\"#Mobx介绍\" class=\"headerlink\" title=\"Mobx介绍\"></a>Mobx介绍</h2><p>Mobx，和Redux一样，也是React状态管理比较流行的解决方案之一。</p>\n<p>Mobx的作者非常厌恶Redux的繁琐（可能很多人也是），于是设计了Mobx作为状态管理，并宣称它的性能远远超过Redux（在react-redux使用hooks改造前也确实是这样的）。</p>\n<p>Mobx早期参考了Vue，也使用了响应式编程。这意味着这个库并不是基于<code>Context</code>的中心化状态管理，这是和Redux最大的不同点，也使它成为了当年诸多状态方案中的一股清流。当然响应式的状态管理也给它带来了诸多争议，其中一个观点便是：</p>\n<blockquote>\n<p>React+Mobx的选型就是一个复杂版的Vue</p>\n</blockquote>\n<p>Mobx6之前大量使用了装饰器语法，非常简洁。但是6.x之后抛弃了装饰器。</p>\n<blockquote>\n<p>然而，装饰器语法尚未定案以及未被纳入ES标准，标准化的过程还需要很长时间，且未来制定的标准可能与当前的装饰器实现方案有所不同。出于兼容性的考虑，我们在MobX 6中放弃了它们…</p>\n</blockquote>\n<p>hooks本身的特性和它带来的各种新的状态管理库使得Mobx不再那么耀眼，但hooks并不能完全代替class 组件，在大型项目中，Mobx依然是一个不错的技术选型。</p>\n<p>对于一些老项目，需要注意mobx-react的版本，如果需要在这些老项目中搭配react hooks使用，可以用<a href=\"https://www.npmjs.com%2Fpackage%2Fmobx-react-lite\" title=\"https://www.npmjs.com/package/mobx-react-lite\">mobx-react-lite</a></p>\n<p><img src=\"/../imgs/ee559a33603348b7ab100b67c07cc172.png\" alt=\"image.png\"></p>\n<p>由于装饰器依然有着相当的拥趸，因此本文将分别介绍两种方式。</p>\n<p>假设我们有一个全局的状态是主题颜色，我们将它维护在store目录中：</p>\n<h2 id=\"不用装饰器\"><a href=\"#不用装饰器\" class=\"headerlink\" title=\"不用装饰器\"></a>不用装饰器</h2><p>全局状态：src&#x2F;store&#x2F;CommonStore.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;makeAutoObservable&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;mobx&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommonStore</span> &#123;</span><br><span class=\"line\">\tcolor = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">makeAutoObservable</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">changeTheme</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t.toString(<span class=\"number\">16</span>)</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t.slice(-<span class=\"number\">6</span>)&#125;</span>`</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> commonStore = <span class=\"keyword\">new</span> <span class=\"title class_\">CommonStore</span>();</span><br></pre></td></tr></table></figure>\n\n<p>组件中引用及修改store：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;mobx-react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;commonStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../../store/CommonStore&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HomePage</span> = <span class=\"title function_\">observer</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> [text, setText] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;xxx&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"title function_\">change</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">\t\tcommonStore.<span class=\"title function_\">changeTheme</span>();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;HomePage&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;px-16 d-flex align-items-center justify-content-end&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Paragraph</span> <span class=\"attr\">color</span>=<span class=\"string\">&#123;commonStore.color&#125;</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;font-20&quot;</span>&gt;</span>&#123;text&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;change&#125;</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t切换主题色</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">Paragraph</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">HomePage</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用装饰器\"><a href=\"#使用装饰器\" class=\"headerlink\" title=\"使用装饰器\"></a>使用装饰器</h2><p>全局状态：src&#x2F;store&#x2F;CommonStore.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommonStore</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@observable</span> color = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">makeAutoObservable</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">changeTheme</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t.toString(<span class=\"number\">16</span>)</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t.slice(-<span class=\"number\">6</span>)&#125;</span>`</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> commonStore = <span class=\"keyword\">new</span> <span class=\"title class_\">CommonStore</span>();</span><br></pre></td></tr></table></figure>\n\n<p>组件中引用及修改store：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@observer</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HomePage</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@observable</span> text = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">super</span>(&#123;&#125;)</span><br><span class=\"line\">        <span class=\"title function_\">makeObservable</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tchange = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">text</span>)</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">text</span>= <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">\t\tcommonStore.<span class=\"title function_\">changeTheme</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;HomePage&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;px-16 d-flex align-items-center justify-content-end&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Paragraph</span> <span class=\"attr\">color</span>=<span class=\"string\">&#123;commonStore.color&#125;</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;font-20&quot;</span>&gt;</span>&#123;this.text&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.change.bind(this)&#125;</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t\t切换主题色和内容</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">Paragraph</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Mobx6中是一定要加上<code>makeObservable</code>或者<code>makeObservable</code>的，否则不会更新视图。对于store来说，如果加上了这段代码，即使不用<code>@observable</code>，视图也能响应变换。</p>\n<p>因此在Mobx6中虽然仍然支持装饰器，但纯属鸡肋。</p>\n<h2 id=\"核心概念和API\"><a href=\"#核心概念和API\" class=\"headerlink\" title=\"核心概念和API\"></a>核心概念和API</h2><p>mobx和mobx-react搭配使用，前者提供创建可观察对象的方法，后者能让组件订阅这个状态并进行更新。</p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>observable: 可观察的状态，意味着mobx能够监测到这个数据的改动，并可以对它做出反应</li>\n<li>computed：计算数据，类似Vue中的computed</li>\n<li>action： 动作，修改状态。</li>\n<li>Reaction: 状态与动作的关联，相关的api有<code>autorun</code>,<code>when</code>,<code>reaction</code>,但一般用不到。</li>\n<li>flow: flow并不属于mobx的核心概念，也是一个重要特性。flow是async&#x2F;await的替代方案，<code>makeAutoObservable</code>能自动将generator函数推断为flow,这个函数返回的promise带有cancel，能够中断该promise。另外一个特性是省去了<code>action</code>或<code>runInAction</code>的包装。（这些后续单独开Mobx的源码解析。）</li>\n</ul>\n<h3 id=\"Mobx-apis\"><a href=\"#Mobx-apis\" class=\"headerlink\" title=\"Mobx apis\"></a>Mobx apis</h3><h4 id=\"创建可观察数据：observable-makeObservable-makeAutoObservable\"><a href=\"#创建可观察数据：observable-makeObservable-makeAutoObservable\" class=\"headerlink\" title=\"创建可观察数据：observable&#x2F;makeObservable&#x2F;makeAutoObservable\"></a>创建可观察数据：<code>observable</code>&#x2F;<code>makeObservable</code>&#x2F;<code>makeAutoObservable</code></h4><h5 id=\"observable\"><a href=\"#observable\" class=\"headerlink\" title=\"observable\"></a>observable</h5><p>可以创建一个简单的可观察对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"title function_\">observable</span>(&#123;<span class=\"attr\">count</span>:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"makeObservable\"><a href=\"#makeObservable\" class=\"headerlink\" title=\"makeObservable\"></a>makeObservable</h5><p>用在class state中，能够识别哪些属性是<code>observable</code>或者<code>computed</code>，哪些方法需要支持<code>action</code>或者是<code>flow</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">makeObservable</span>(this, &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: observable,</span><br><span class=\"line\">    <span class=\"attr\">double</span>: computed,</span><br><span class=\"line\">    <span class=\"attr\">increment</span>: action,</span><br><span class=\"line\">    <span class=\"attr\">fetch</span>: flow</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"makeAutoObservable\"><a href=\"#makeAutoObservable\" class=\"headerlink\" title=\"makeAutoObservable\"></a>makeAutoObservable</h5><p><code>makeObservable</code>的智能版，能够自动推断所有属性，规则如下：</p>\n<ul>\n<li>所有 <em>自有</em> 属性都成为 <code>observable</code>。</li>\n<li>所有 <code>getters</code> 都成为 <code>computed</code>。</li>\n<li>所有 <code>setters</code> 都成为 <code>action</code>。</li>\n<li>所有 <em>prototype 中的 functions</em> 都成为 <code>autoAction</code>。</li>\n<li>所有 <em>prototype 中的 generator functions</em> 都成为 <code>flow</code>。</li>\n</ul>\n<h4 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h4><h5 id=\"action-runInAction\"><a href=\"#action-runInAction\" class=\"headerlink\" title=\"action&#x2F;runInAction\"></a>action&#x2F;runInAction</h5><p>Mobx要求数据的修改都放在action中，并提供了<code>action</code>和<code>runInAction</code>两个api来标记action。 <code>action</code>是创建一个函数，<code>runInAction</code>是创建一个函数并立即执行</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button </span><br><span class=\"line\">    onClick=&#123;<span class=\"title function_\">action</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span>  &#123; </span><br><span class=\"line\">            formState.<span class=\"title function_\">resetPendingUploads</span>()</span><br><span class=\"line\">            formState.<span class=\"title function_\">resetValues</span>()</span><br><span class=\"line\">            e.<span class=\"title function_\">stopPropagation</span>() </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&gt; </span><br><span class=\"line\">    <span class=\"title class_\">Reset</span> form </span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>虽然不放在action中并不影响它观察，但会失去Mobx的事务管理。</p>\n<p>Mobx中的事务，是指对数据的多次修改合并为一次事务，只触发一次reaction。</p>\n<h3 id=\"mobx-react-apis\"><a href=\"#mobx-react-apis\" class=\"headerlink\" title=\"mobx-react apis\"></a>mobx-react apis</h3><h4 id=\"observer\"><a href=\"#observer\" class=\"headerlink\" title=\"observer\"></a>observer</h4><p>使组件能够在观察到observable变更后重新渲染 const TimerView &#x3D; observer(({ timer }) &#x3D;&gt; Seconds passed: {timer.secondsPassed})\\</p>\n<h4 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h4><p>将observer的特性应有在局部（能够在更小的粒度上更新）</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &#123;<span class=\"keyword\">this</span>.props.person.name&#125;</span><br><span class=\"line\">                &lt;<span class=\"type\">Observer</span>&gt;&#123;() =&gt; &lt;div&gt;&#123;<span class=\"keyword\">this</span>.props.person.name&#125;&lt;/div&gt;&#125;&lt;/<span class=\"type\">Observer</span>&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const person = observable(&#123; name: <span class=\"string\">&quot;John&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这里persion的变化会在Observer组件内更新，而不会导致App组件的更新。</p>\n<p>mobx-react核心的api就这两个，其他的比如 <code>useLocalObservable</code>在当下已经并不常用了。</p>\n"},{"title":"React library快速入门——Redux Toolkit","date":"2021-11-19T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第20天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n介绍\n--\n\nRedux Toolkit是Redux官方的一个工具包。根据它[官网](https://redux-toolkit.js.org%2Fintroduction%2Fgetting-started \"https://redux-toolkit.js.org/introduction/getting-started\")的介绍：\n\n> The official, opinionated, batteries-included toolset for efficient Redux development\n\n理解一个lib，首先要理解它的官方介绍。这句话的里包含了几个关键的信息\n\n*   opinionated： 字面意思是武断、固执己见的。在这里表示这个库有自己的设计理念和实践原则，如果加上official,可以一定程度上认为这个库代表着redux的最佳实践（个人认为的确也是最佳实践）\n*   batteries-included： 字面意思是内置了电池。比如买了一个玩具，不用担心它需要配几号电池，打开后简单组装就能用。在编程中，它的引申义不是开箱即用，但可以理解为功能完备。\n*   toolset: 工具集，这意味着这个库可能是将几个工具组合起来，以及我们可能需要理解有哪些工具，以及Redux Toolkit是如何组装它的（这些工具不一定是它自带的）。\n\nRedux的痛点\n--------\n\n用过Redux的人一定对下面这些痛点有深刻的感受。\n\n*   模板太多，多个目录和文件切换太痛苦\n*   类型定义很困难\n*   需要配合多种工具使用，比如下面这段代码\n\n![image.png](../imgs/e3d7b03357a54239877eb4a9e93b8aaf.png)\n\n使用\n--\n\nRedux Toolkit能很好地解决上面这些问题。\n\n### 创建store：\n\n```ts\nimport {configureStore} from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n\nimport demoReducer, {initDemoState} from './demoReducer';\nimport commonReducer, {initCommonState} from './commonReducer';\n\nexport type StateType = {demo: typeof initDemoState; common: typeof initCommonState};\n\nexport const initState: StateType = {\n\tdemo: initDemoState,\n\tcommon: initCommonState\n};\n// toolkit将大大简化创建store的操作,默认集成了thunk，immutable\nconst store = configureStore({\n\treducer: {\n\t\tdemo: demoReducer,\n\t\tcommon: commonReducer\n\t},\n\tmiddleware: getDefaultMiddleware => getDefaultMiddleware().concat(logger),\n\tpreloadedState: initState,\n\tdevTools: true\n});\nexport default store;\n```\n\nRedux Toolkit集成了thunk，immutable，不需要再引入和配置。配置logger和devTool也很简单。\n\n### 编写reducer\n\n```typescript\n//toolkit将大大简化redux开发，并解决类型问题\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {demoApi} from '@/api/DemoApi';\nexport const initDemoState: {text: string} = {\n\ttext: ''\n};\nexport const demoSlice = createSlice({\n\tname: 'demo',\n\tinitialState: initDemoState,\n\treducers: {\n\t\t// 使用toolkit，不需要返回一个新的state\n\t\tsetText: (state, action: PayloadAction<string>) => {\n\t\t\tconst {payload} = action;\n\t\t\tstate.text = payload;\n\t\t}\n\t}\n});\n\n// 使用toolkit，不需要创建action文件\nexport const {setText} = demoSlice.actions;\n\nexport const fetchText = () => async dispatch => {\n\treturn demoApi.fetchText().then(data => {\n\t\tdispatch(setText(data.text));\n\t\treturn data;\n\t});\n};\n\nexport default demoSlice.reducer;\n```\n\n以前可能需要分三个文件：\n\n![image.png](../imgs/2ae47ba735a443b39c114dd962dd39d0.png)\n\n而现在只需要一个文件。\n\n另外，以前对state的合并操作非常痛苦，尤其是对数组操作的时候，但是用了Redux Toolkit后可以放心地操作state：\n\n![image.png](../imgs/bb7773a4f2124134b153436c3d9083a8.png)\n\n### 引入状态和派发action：\n\n```ts\nimport React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {fetchText} from '@/store/demoReducer';\nimport store, {StateType} from '@/store';\nexport default function HomePage() {\n    const dispatch = useDispatch<typeof store.dispatch>();\n\tconst content = useSelector((state: StateType) => ({\n\t\ttext: state.demo.text\n\t}));\n\tconst getText = () => {\n\t\treturn dispatch(fetchText()).then(res => {\n\t\t\tconsole.log(res);\n\t\t});\n\t};\n\tuseEffect(() => {\n\t\tgetText();\n\t}, []);\n        ...\n}\n```\n\n如果前面定义的类型都是能让ts进行推导的话，那么编程的时候就会有便捷的类型提示：\n\n![image.png](../imgs/5eed898b39224137bea299ec92cf5a8a.png)\n\n总结\n--\n\n个人觉得按照这个lib进行代码组织，不需要进行复杂的配置，没有各种模板目录和代码，每个模块的state分别作为一个slice，项目结构干净，类型定义简单，真的可以说是Redux的最佳实践了。如果项目中选择Redux作为状态管理库的话，**强烈推荐**这个工具。","source":"_posts/React library快速入门——Redux Toolkit.md","raw":"---\n title: \"React library快速入门——Redux Toolkit\"\n date: 2021-11-20\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第20天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n介绍\n--\n\nRedux Toolkit是Redux官方的一个工具包。根据它[官网](https://redux-toolkit.js.org%2Fintroduction%2Fgetting-started \"https://redux-toolkit.js.org/introduction/getting-started\")的介绍：\n\n> The official, opinionated, batteries-included toolset for efficient Redux development\n\n理解一个lib，首先要理解它的官方介绍。这句话的里包含了几个关键的信息\n\n*   opinionated： 字面意思是武断、固执己见的。在这里表示这个库有自己的设计理念和实践原则，如果加上official,可以一定程度上认为这个库代表着redux的最佳实践（个人认为的确也是最佳实践）\n*   batteries-included： 字面意思是内置了电池。比如买了一个玩具，不用担心它需要配几号电池，打开后简单组装就能用。在编程中，它的引申义不是开箱即用，但可以理解为功能完备。\n*   toolset: 工具集，这意味着这个库可能是将几个工具组合起来，以及我们可能需要理解有哪些工具，以及Redux Toolkit是如何组装它的（这些工具不一定是它自带的）。\n\nRedux的痛点\n--------\n\n用过Redux的人一定对下面这些痛点有深刻的感受。\n\n*   模板太多，多个目录和文件切换太痛苦\n*   类型定义很困难\n*   需要配合多种工具使用，比如下面这段代码\n\n![image.png](../imgs/e3d7b03357a54239877eb4a9e93b8aaf.png)\n\n使用\n--\n\nRedux Toolkit能很好地解决上面这些问题。\n\n### 创建store：\n\n```ts\nimport {configureStore} from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n\nimport demoReducer, {initDemoState} from './demoReducer';\nimport commonReducer, {initCommonState} from './commonReducer';\n\nexport type StateType = {demo: typeof initDemoState; common: typeof initCommonState};\n\nexport const initState: StateType = {\n\tdemo: initDemoState,\n\tcommon: initCommonState\n};\n// toolkit将大大简化创建store的操作,默认集成了thunk，immutable\nconst store = configureStore({\n\treducer: {\n\t\tdemo: demoReducer,\n\t\tcommon: commonReducer\n\t},\n\tmiddleware: getDefaultMiddleware => getDefaultMiddleware().concat(logger),\n\tpreloadedState: initState,\n\tdevTools: true\n});\nexport default store;\n```\n\nRedux Toolkit集成了thunk，immutable，不需要再引入和配置。配置logger和devTool也很简单。\n\n### 编写reducer\n\n```typescript\n//toolkit将大大简化redux开发，并解决类型问题\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {demoApi} from '@/api/DemoApi';\nexport const initDemoState: {text: string} = {\n\ttext: ''\n};\nexport const demoSlice = createSlice({\n\tname: 'demo',\n\tinitialState: initDemoState,\n\treducers: {\n\t\t// 使用toolkit，不需要返回一个新的state\n\t\tsetText: (state, action: PayloadAction<string>) => {\n\t\t\tconst {payload} = action;\n\t\t\tstate.text = payload;\n\t\t}\n\t}\n});\n\n// 使用toolkit，不需要创建action文件\nexport const {setText} = demoSlice.actions;\n\nexport const fetchText = () => async dispatch => {\n\treturn demoApi.fetchText().then(data => {\n\t\tdispatch(setText(data.text));\n\t\treturn data;\n\t});\n};\n\nexport default demoSlice.reducer;\n```\n\n以前可能需要分三个文件：\n\n![image.png](../imgs/2ae47ba735a443b39c114dd962dd39d0.png)\n\n而现在只需要一个文件。\n\n另外，以前对state的合并操作非常痛苦，尤其是对数组操作的时候，但是用了Redux Toolkit后可以放心地操作state：\n\n![image.png](../imgs/bb7773a4f2124134b153436c3d9083a8.png)\n\n### 引入状态和派发action：\n\n```ts\nimport React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {fetchText} from '@/store/demoReducer';\nimport store, {StateType} from '@/store';\nexport default function HomePage() {\n    const dispatch = useDispatch<typeof store.dispatch>();\n\tconst content = useSelector((state: StateType) => ({\n\t\ttext: state.demo.text\n\t}));\n\tconst getText = () => {\n\t\treturn dispatch(fetchText()).then(res => {\n\t\t\tconsole.log(res);\n\t\t});\n\t};\n\tuseEffect(() => {\n\t\tgetText();\n\t}, []);\n        ...\n}\n```\n\n如果前面定义的类型都是能让ts进行推导的话，那么编程的时候就会有便捷的类型提示：\n\n![image.png](../imgs/5eed898b39224137bea299ec92cf5a8a.png)\n\n总结\n--\n\n个人觉得按照这个lib进行代码组织，不需要进行复杂的配置，没有各种模板目录和代码，每个模块的state分别作为一个slice，项目结构干净，类型定义简单，真的可以说是Redux的最佳实践了。如果项目中选择Redux作为状态管理库的话，**强烈推荐**这个工具。","slug":"React library快速入门——Redux Toolkit","published":1,"updated":"2024-04-04T15:27:03.643Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhl0018hajf1bxyb3rx","content":"<p>这是我参与11月更文挑战的第20天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Redux Toolkit是Redux官方的一个工具包。根据它<a href=\"https://redux-toolkit.js.org%2Fintroduction%2Fgetting-started\" title=\"https://redux-toolkit.js.org/introduction/getting-started\">官网</a>的介绍：</p>\n<blockquote>\n<p>The official, opinionated, batteries-included toolset for efficient Redux development</p>\n</blockquote>\n<p>理解一个lib，首先要理解它的官方介绍。这句话的里包含了几个关键的信息</p>\n<ul>\n<li>opinionated： 字面意思是武断、固执己见的。在这里表示这个库有自己的设计理念和实践原则，如果加上official,可以一定程度上认为这个库代表着redux的最佳实践（个人认为的确也是最佳实践）</li>\n<li>batteries-included： 字面意思是内置了电池。比如买了一个玩具，不用担心它需要配几号电池，打开后简单组装就能用。在编程中，它的引申义不是开箱即用，但可以理解为功能完备。</li>\n<li>toolset: 工具集，这意味着这个库可能是将几个工具组合起来，以及我们可能需要理解有哪些工具，以及Redux Toolkit是如何组装它的（这些工具不一定是它自带的）。</li>\n</ul>\n<h2 id=\"Redux的痛点\"><a href=\"#Redux的痛点\" class=\"headerlink\" title=\"Redux的痛点\"></a>Redux的痛点</h2><p>用过Redux的人一定对下面这些痛点有深刻的感受。</p>\n<ul>\n<li>模板太多，多个目录和文件切换太痛苦</li>\n<li>类型定义很困难</li>\n<li>需要配合多种工具使用，比如下面这段代码</li>\n</ul>\n<p><img src=\"/../imgs/e3d7b03357a54239877eb4a9e93b8aaf.png\" alt=\"image.png\"></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>Redux Toolkit能很好地解决上面这些问题。</p>\n<h3 id=\"创建store：\"><a href=\"#创建store：\" class=\"headerlink\" title=\"创建store：\"></a>创建store：</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;configureStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logger <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux-logger&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> demoReducer, &#123;initDemoState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./demoReducer&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> commonReducer, &#123;initCommonState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./commonReducer&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">StateType</span> = &#123;<span class=\"attr\">demo</span>: <span class=\"keyword\">typeof</span> initDemoState; <span class=\"attr\">common</span>: <span class=\"keyword\">typeof</span> initCommonState&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">initState</span>: <span class=\"title class_\">StateType</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">demo</span>: initDemoState,</span><br><span class=\"line\">\t<span class=\"attr\">common</span>: initCommonState</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// toolkit将大大简化创建store的操作,默认集成了thunk，immutable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">configureStore</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">reducer</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">demo</span>: demoReducer,</span><br><span class=\"line\">\t\t<span class=\"attr\">common</span>: commonReducer</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">middleware</span>: <span class=\"function\"><span class=\"params\">getDefaultMiddleware</span> =&gt;</span> <span class=\"title function_\">getDefaultMiddleware</span>().<span class=\"title function_\">concat</span>(logger),</span><br><span class=\"line\">\t<span class=\"attr\">preloadedState</span>: initState,</span><br><span class=\"line\">\t<span class=\"attr\">devTools</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br></pre></td></tr></table></figure>\n\n<p>Redux Toolkit集成了thunk，immutable，不需要再引入和配置。配置logger和devTool也很简单。</p>\n<h3 id=\"编写reducer\"><a href=\"#编写reducer\" class=\"headerlink\" title=\"编写reducer\"></a>编写reducer</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//toolkit将大大简化redux开发，并解决类型问题</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;createSlice, <span class=\"title class_\">PayloadAction</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;demoApi&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/DemoApi&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">initDemoState</span>: &#123;<span class=\"attr\">text</span>: <span class=\"built_in\">string</span>&#125; = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">text</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> demoSlice = <span class=\"title function_\">createSlice</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;demo&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">initialState</span>: initDemoState,</span><br><span class=\"line\">\t<span class=\"attr\">reducers</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用toolkit，不需要返回一个新的state</span></span><br><span class=\"line\">\t\t<span class=\"attr\">setText</span>: <span class=\"function\">(<span class=\"params\">state, action: PayloadAction&lt;<span class=\"built_in\">string</span>&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> &#123;payload&#125; = action;</span><br><span class=\"line\">\t\t\tstate.<span class=\"property\">text</span> = payload;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用toolkit，不需要创建action文件</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123;setText&#125; = demoSlice.<span class=\"property\">actions</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">fetchText</span> = (<span class=\"params\"></span>) =&gt; <span class=\"keyword\">async</span> dispatch =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> demoApi.<span class=\"title function_\">fetchText</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">dispatch</span>(<span class=\"title function_\">setText</span>(data.<span class=\"property\">text</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> demoSlice.<span class=\"property\">reducer</span>;</span><br></pre></td></tr></table></figure>\n\n<p>以前可能需要分三个文件：</p>\n<p><img src=\"/../imgs/2ae47ba735a443b39c114dd962dd39d0.png\" alt=\"image.png\"></p>\n<p>而现在只需要一个文件。</p>\n<p>另外，以前对state的合并操作非常痛苦，尤其是对数组操作的时候，但是用了Redux Toolkit后可以放心地操作state：</p>\n<p><img src=\"/../imgs/bb7773a4f2124134b153436c3d9083a8.png\" alt=\"image.png\"></p>\n<h3 id=\"引入状态和派发action：\"><a href=\"#引入状态和派发action：\" class=\"headerlink\" title=\"引入状态和派发action：\"></a>引入状态和派发action：</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123;useEffect, useState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;useDispatch, useSelector&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;fetchText&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/store/demoReducer&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store, &#123;<span class=\"title class_\">StateType</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/store&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">HomePage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dispatch = useDispatch&lt;<span class=\"keyword\">typeof</span> store.<span class=\"property\">dispatch</span>&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> content = <span class=\"title function_\">useSelector</span>(<span class=\"function\">(<span class=\"params\">state: StateType</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">text</span>: state.<span class=\"property\">demo</span>.<span class=\"property\">text</span></span><br><span class=\"line\">\t&#125;));</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"title function_\">getText</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchText</span>()).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">getText</span>();</span><br><span class=\"line\">\t&#125;, []);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果前面定义的类型都是能让ts进行推导的话，那么编程的时候就会有便捷的类型提示：</p>\n<p><img src=\"/../imgs/5eed898b39224137bea299ec92cf5a8a.png\" alt=\"image.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>个人觉得按照这个lib进行代码组织，不需要进行复杂的配置，没有各种模板目录和代码，每个模块的state分别作为一个slice，项目结构干净，类型定义简单，真的可以说是Redux的最佳实践了。如果项目中选择Redux作为状态管理库的话，<strong>强烈推荐</strong>这个工具。</p>\n","length":3075,"excerpt":"","more":"<p>这是我参与11月更文挑战的第20天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Redux Toolkit是Redux官方的一个工具包。根据它<a href=\"https://redux-toolkit.js.org%2Fintroduction%2Fgetting-started\" title=\"https://redux-toolkit.js.org/introduction/getting-started\">官网</a>的介绍：</p>\n<blockquote>\n<p>The official, opinionated, batteries-included toolset for efficient Redux development</p>\n</blockquote>\n<p>理解一个lib，首先要理解它的官方介绍。这句话的里包含了几个关键的信息</p>\n<ul>\n<li>opinionated： 字面意思是武断、固执己见的。在这里表示这个库有自己的设计理念和实践原则，如果加上official,可以一定程度上认为这个库代表着redux的最佳实践（个人认为的确也是最佳实践）</li>\n<li>batteries-included： 字面意思是内置了电池。比如买了一个玩具，不用担心它需要配几号电池，打开后简单组装就能用。在编程中，它的引申义不是开箱即用，但可以理解为功能完备。</li>\n<li>toolset: 工具集，这意味着这个库可能是将几个工具组合起来，以及我们可能需要理解有哪些工具，以及Redux Toolkit是如何组装它的（这些工具不一定是它自带的）。</li>\n</ul>\n<h2 id=\"Redux的痛点\"><a href=\"#Redux的痛点\" class=\"headerlink\" title=\"Redux的痛点\"></a>Redux的痛点</h2><p>用过Redux的人一定对下面这些痛点有深刻的感受。</p>\n<ul>\n<li>模板太多，多个目录和文件切换太痛苦</li>\n<li>类型定义很困难</li>\n<li>需要配合多种工具使用，比如下面这段代码</li>\n</ul>\n<p><img src=\"/../imgs/e3d7b03357a54239877eb4a9e93b8aaf.png\" alt=\"image.png\"></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>Redux Toolkit能很好地解决上面这些问题。</p>\n<h3 id=\"创建store：\"><a href=\"#创建store：\" class=\"headerlink\" title=\"创建store：\"></a>创建store：</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;configureStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logger <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux-logger&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> demoReducer, &#123;initDemoState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./demoReducer&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> commonReducer, &#123;initCommonState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./commonReducer&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">StateType</span> = &#123;<span class=\"attr\">demo</span>: <span class=\"keyword\">typeof</span> initDemoState; <span class=\"attr\">common</span>: <span class=\"keyword\">typeof</span> initCommonState&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">initState</span>: <span class=\"title class_\">StateType</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">demo</span>: initDemoState,</span><br><span class=\"line\">\t<span class=\"attr\">common</span>: initCommonState</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// toolkit将大大简化创建store的操作,默认集成了thunk，immutable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">configureStore</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">reducer</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">demo</span>: demoReducer,</span><br><span class=\"line\">\t\t<span class=\"attr\">common</span>: commonReducer</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">middleware</span>: <span class=\"function\"><span class=\"params\">getDefaultMiddleware</span> =&gt;</span> <span class=\"title function_\">getDefaultMiddleware</span>().<span class=\"title function_\">concat</span>(logger),</span><br><span class=\"line\">\t<span class=\"attr\">preloadedState</span>: initState,</span><br><span class=\"line\">\t<span class=\"attr\">devTools</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br></pre></td></tr></table></figure>\n\n<p>Redux Toolkit集成了thunk，immutable，不需要再引入和配置。配置logger和devTool也很简单。</p>\n<h3 id=\"编写reducer\"><a href=\"#编写reducer\" class=\"headerlink\" title=\"编写reducer\"></a>编写reducer</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//toolkit将大大简化redux开发，并解决类型问题</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;createSlice, <span class=\"title class_\">PayloadAction</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;demoApi&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/DemoApi&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">initDemoState</span>: &#123;<span class=\"attr\">text</span>: <span class=\"built_in\">string</span>&#125; = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">text</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> demoSlice = <span class=\"title function_\">createSlice</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;demo&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">initialState</span>: initDemoState,</span><br><span class=\"line\">\t<span class=\"attr\">reducers</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用toolkit，不需要返回一个新的state</span></span><br><span class=\"line\">\t\t<span class=\"attr\">setText</span>: <span class=\"function\">(<span class=\"params\">state, action: PayloadAction&lt;<span class=\"built_in\">string</span>&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> &#123;payload&#125; = action;</span><br><span class=\"line\">\t\t\tstate.<span class=\"property\">text</span> = payload;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用toolkit，不需要创建action文件</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123;setText&#125; = demoSlice.<span class=\"property\">actions</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">fetchText</span> = (<span class=\"params\"></span>) =&gt; <span class=\"keyword\">async</span> dispatch =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> demoApi.<span class=\"title function_\">fetchText</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">dispatch</span>(<span class=\"title function_\">setText</span>(data.<span class=\"property\">text</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> demoSlice.<span class=\"property\">reducer</span>;</span><br></pre></td></tr></table></figure>\n\n<p>以前可能需要分三个文件：</p>\n<p><img src=\"/../imgs/2ae47ba735a443b39c114dd962dd39d0.png\" alt=\"image.png\"></p>\n<p>而现在只需要一个文件。</p>\n<p>另外，以前对state的合并操作非常痛苦，尤其是对数组操作的时候，但是用了Redux Toolkit后可以放心地操作state：</p>\n<p><img src=\"/../imgs/bb7773a4f2124134b153436c3d9083a8.png\" alt=\"image.png\"></p>\n<h3 id=\"引入状态和派发action：\"><a href=\"#引入状态和派发action：\" class=\"headerlink\" title=\"引入状态和派发action：\"></a>引入状态和派发action：</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123;useEffect, useState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;useDispatch, useSelector&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;fetchText&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/store/demoReducer&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store, &#123;<span class=\"title class_\">StateType</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/store&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">HomePage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dispatch = useDispatch&lt;<span class=\"keyword\">typeof</span> store.<span class=\"property\">dispatch</span>&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> content = <span class=\"title function_\">useSelector</span>(<span class=\"function\">(<span class=\"params\">state: StateType</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">text</span>: state.<span class=\"property\">demo</span>.<span class=\"property\">text</span></span><br><span class=\"line\">\t&#125;));</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"title function_\">getText</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchText</span>()).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">getText</span>();</span><br><span class=\"line\">\t&#125;, []);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果前面定义的类型都是能让ts进行推导的话，那么编程的时候就会有便捷的类型提示：</p>\n<p><img src=\"/../imgs/5eed898b39224137bea299ec92cf5a8a.png\" alt=\"image.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>个人觉得按照这个lib进行代码组织，不需要进行复杂的配置，没有各种模板目录和代码，每个模块的state分别作为一个slice，项目结构干净，类型定义简单，真的可以说是Redux的最佳实践了。如果项目中选择Redux作为状态管理库的话，<strong>强烈推荐</strong>这个工具。</p>\n"},{"title":"React 关于ref，你想知道的都在这里","date":"2021-11-22T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第23天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\nref属性可以传哪些值\n-----------\n\nReact.createRef()、React.useRef()创建的对象；回调函数、字符串\n\n> 此属性可以是一个由 [`React.createRef()` 函数](https://zh-hans.reactjs.org%2Fdocs%2Freact-api.html%23reactcreateref \"https://zh-hans.reactjs.org/docs/react-api.html#reactcreateref\")创建的对象、或者一个回调函数、或者一个字符串（遗留 API）。当 `ref` 属性是一个回调函数时，此函数会（根据元素的类型）接收底层 DOM 元素或 class 实例作为其参数。这能够让你直接访问 DOM 元素或组件实例。\n\n字符串refs\n-------\n\n曾经字符串refs在class component中比较流行，但是现在，传字符串的用法已经过时了\n\n> 我们不建议使用它，因为 string 类型的 refs 存在 [一些问题](https://github.com%2Ffacebook%2Freact%2Fpull%2F8333%23issuecomment-271648615 \"https://github.com/facebook/react/pull/8333#issuecomment-271648615\")。它已过时并可能会在未来的版本被移除。\n\n回调refs\n------\n\n```ini\nexport default function IndexPage() {\n  const [count, setCount] = useState(0);\n\n  const add = useCallback(() => {\n    setCount((count) => {\n      return ++count;\n    });\n  }, []);\n\n  return (\n    <div className=\" p-12\">\n      <div>callback refs </div>\n      <div className=\"w-32 inline-block mr-2\">\n        <Input value={count}></Input>\n      </div>\n      <Button\n        ref={(dom)=>console.log(dom)}\n        icon={<PlusOutlined />}\n        className=\"ml-8\"\n        onClick={add}\n      >\n        add\n      </Button>\n    </div>\n  );\n}\n```\n\nReact 将在组件挂载时，会调用 `ref` 回调函数并传入 DOM 元素，当卸载时调用它并传入 `null`。在 `componentDidMount` 或 `componentDidUpdate` 触发前，React 会保证 refs 一定是最新的。\n\n另外，组件的每一次更新都会调用这个callback两次，第一次传入null：\n\n![image.png](../imgs/ce724a5dffb94210bc95e6efedaef78d.png)\n\ncreateRef与useRef\n----------------\n\n### 定义：\n\n*   createRef:`React.createRef` 创建一个能够通过 ref 属性附加到 React 元素的 [ref](https://zh-hans.reactjs.org%2Fdocs%2Frefs-and-the-dom.html \"https://zh-hans.reactjs.org/docs/refs-and-the-dom.html\")。\n*   useRef: `useRef`：简单理解就是返回了一个ref对象，拥有`current`属性。\n\n> useRef返回一个可变的 ref 对象，其 `.current` 属性被初始化为传入的参数（`initialValue`）。返回的 ref 对象在组件的整个生命周期内持续存在。\n\n虽然两者都能够传给ref，并获取到dom，但是我们来看一下区别：\n\n### 区别\n\n*   语法区别 createRef是不可以传入初始值的，current属性也是只读的。而useRef不是。\n*   底层区别 首先维护两个set\n\n```javascript\nexport const  uRefs = new Set()\nexport const cRefs = new Set()\n```\n\n每次更新都将useRef和createRef创建的对象分别放入这两个set:\n\n```typescript\nimport { uRefs, cRefs } from './data';\n\nexport default function IndexPage() {\n  const [count, setCount] = useState(0);\n  const uRef = useRef<any>();\n  const cRef = createRef<any>();\n  const uRef1 = useRef(0);\n\n  const cRef1 = createRef();\n  const add = useCallback(() => {\n    setCount((count) => {\n      return ++count;\n    });\n  }, []);\n  useEffect(() => {\n    console.log('update')\n    uRefs.add(uRef);\n    cRefs.add(cRef)\n    console.log('uRef', uRefs)\n    console.log('cRef', cRefs)\n  });\n\n  return (\n    <div className=\" p-12\">\n      <div>createRef 与 useRef </div>\n      <div className=\"w-32 inline-block mr-2\">\n        use ref ：<Input ref={uRef} value={count}></Input>\n      </div>\n      <div className=\"w-32 inline-block\">\n        create ref: <Input ref={cRef} value={count}></Input>\n      </div>\n      <Button  icon={<PlusOutlined />}  className=\"ml-8\" onClick={add}>\n        add\n      </Button>\n    </div>\n  );\n}\n```\n\n经历两次更新后： ![image.png](../imgs/81a67e5d708a4e75af8b9a9fc7c2d317.png) 可以看到，每次更新，createRef都会重新创建一次ref对象，并将老的ref对象的current置位null;\n\n而useRef,在多次更新中始终是同一个对象。这就是这句定义的解释：\n\n> 在组件的整个生命周期内持续存在\n\n**因此当有一个不涉及渲染的复杂对象需要维护时，用useRef就可以避免频繁更新导致创建该对象的性能消耗。**\n\nforwardRef和useImperativeHandle\n------------------------------\n\n### forwardRef\n\n> `React.forwardRef` 会创建一个React组件，这个组件能够将其接受的 [ref](https://zh-hans.reactjs.org%2Fdocs%2Frefs-and-the-dom.html \"https://zh-hans.reactjs.org/docs/refs-and-the-dom.html\") 属性转发到其组件树下的另一个组件中。\n\n这个api主要有两个场景：转发ref和对function component使用ref(其实本质上也是转发ref)。\n\n所谓的“转发”，其实也就是让你封装的组件支持ref属性，并通过ref暴露这个组件中的某一个dom（不一定是该组件的根dom）\n\n另外，function component无法使用ref（因为它并没有组件实例）,这时候就可以使用这个api进行转发\n\n> **You may not use the `ref` attribute on function components** because they don’t have instances.\n\n```javascript\nconst FancyButton = React.forwardRef((props, ref) => (  <button ref={ref} className=\"FancyButton\">    {props.children}\n  </button>\n));\n\n// You can now get a ref directly to the DOM button:\nconst ref = React.createRef();\n<FancyButton ref={ref}>Click me!</FancyButton>;\n```\n\n### useImperativeHandle\n\n这个api与forwardRef配合使用，能使暴露出去的ref对象，具有它定义的某些功能\n\n> `useImperativeHandle` 可以让你在使用 `ref` 时自定义暴露给父组件的实例值。在大多数情况下，应当避免使用 ref 这样的命令式代码。`useImperativeHandle` 应当与 [`forwardRef`](https://zh-hans.reactjs.org%2Fdocs%2Freact-api.html%23reactforwardref \"https://zh-hans.reactjs.org/docs/react-api.html#reactforwardref\") 一起使用：\n\n```ini\nfunction FancyInput(props, ref) {\n  const inputRef = useRef();\n  useImperativeHandle(ref, () => ({\n    focus: () => {\n      inputRef.current.focus();\n    }\n  }));\n  return <input ref={inputRef} ... />;\n}\nFancyInput = forwardRef(FancyInput);\n```\n\n### 实例：antd3在form外部提交\n\nTalk is cheap. 我们来看一个实例：\n\nantd3中，form对象没有submit属性，因此想要在外部（比如弹窗）触发form的onSubmit，就需要结合`useImperativeHandle`与`useImperativeHandle`\n\nform: 通过useImperativeHandle暴露submit方法，该方法会直接调用onSubmit。\n\n当然也可以对外暴露更多的api，比如beforeSubmit、afterSubmit、onError，以及form对象等等。\n\n```ini\n const Demo = React.forwardRef((props: FormComponentProps, ref)=>{\n  const {\n    getFieldDecorator,\n    validateFields,\n  } = props.form;\n  const onSubmit = (e?: FormEvent)=>{\n    e?.preventDefault();\n    validateFields((e, v) => {})\n  }\n  useImperativeHandle(ref,()=>({\n    submit:onSubmit\n  }))\n  return <Form onSubmit={onSubmit}>\n    <Form.Item label=\"姓名\">\n      {getFieldDecorator('name',{rules:[{required:true,message:'请输入用户名'}]})(\n        <Input placeholder=\"user name\"/>\n      )}\n    </Form.Item>\n    <Form.Item label=\"地址\">\n    {getFieldDecorator('address')(\n        <Input placeholder=\"user address\"/>\n      )}\n    </Form.Item>\n  </Form>\n })\n\nconst DemoForm =  Form.create()(Demo)\n```\n\nmodal: 创建ref，并传入组件，因为这里被Form.create了，因此需要按照文档传入`wrappedComponentRef`\n\n当点击确认时，调用ref.current.submit，这样就触发了表单的校验。\n\n```typescript\nconst DemoModal = () => {\n  const ref = useRef<any>()\n  return <Modal title=\"demo\" visible={true} onOk={()=>{ref.current.submit()}}>\n    <DemoForm wrappedComponentRef={ref}></DemoForm>\n  </Modal>\n}\n```\n\n效果：\n\n![image.png](../imgs/c3e1ac10e91f4a249046400414dd795c.png)","source":"_posts/React 关于ref，你想知道的都在这里.md","raw":"---\n title: \"React 关于ref，你想知道的都在这里\"\n date: 2021-11-23\n tags: [前端,React.js]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第23天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\nref属性可以传哪些值\n-----------\n\nReact.createRef()、React.useRef()创建的对象；回调函数、字符串\n\n> 此属性可以是一个由 [`React.createRef()` 函数](https://zh-hans.reactjs.org%2Fdocs%2Freact-api.html%23reactcreateref \"https://zh-hans.reactjs.org/docs/react-api.html#reactcreateref\")创建的对象、或者一个回调函数、或者一个字符串（遗留 API）。当 `ref` 属性是一个回调函数时，此函数会（根据元素的类型）接收底层 DOM 元素或 class 实例作为其参数。这能够让你直接访问 DOM 元素或组件实例。\n\n字符串refs\n-------\n\n曾经字符串refs在class component中比较流行，但是现在，传字符串的用法已经过时了\n\n> 我们不建议使用它，因为 string 类型的 refs 存在 [一些问题](https://github.com%2Ffacebook%2Freact%2Fpull%2F8333%23issuecomment-271648615 \"https://github.com/facebook/react/pull/8333#issuecomment-271648615\")。它已过时并可能会在未来的版本被移除。\n\n回调refs\n------\n\n```ini\nexport default function IndexPage() {\n  const [count, setCount] = useState(0);\n\n  const add = useCallback(() => {\n    setCount((count) => {\n      return ++count;\n    });\n  }, []);\n\n  return (\n    <div className=\" p-12\">\n      <div>callback refs </div>\n      <div className=\"w-32 inline-block mr-2\">\n        <Input value={count}></Input>\n      </div>\n      <Button\n        ref={(dom)=>console.log(dom)}\n        icon={<PlusOutlined />}\n        className=\"ml-8\"\n        onClick={add}\n      >\n        add\n      </Button>\n    </div>\n  );\n}\n```\n\nReact 将在组件挂载时，会调用 `ref` 回调函数并传入 DOM 元素，当卸载时调用它并传入 `null`。在 `componentDidMount` 或 `componentDidUpdate` 触发前，React 会保证 refs 一定是最新的。\n\n另外，组件的每一次更新都会调用这个callback两次，第一次传入null：\n\n![image.png](../imgs/ce724a5dffb94210bc95e6efedaef78d.png)\n\ncreateRef与useRef\n----------------\n\n### 定义：\n\n*   createRef:`React.createRef` 创建一个能够通过 ref 属性附加到 React 元素的 [ref](https://zh-hans.reactjs.org%2Fdocs%2Frefs-and-the-dom.html \"https://zh-hans.reactjs.org/docs/refs-and-the-dom.html\")。\n*   useRef: `useRef`：简单理解就是返回了一个ref对象，拥有`current`属性。\n\n> useRef返回一个可变的 ref 对象，其 `.current` 属性被初始化为传入的参数（`initialValue`）。返回的 ref 对象在组件的整个生命周期内持续存在。\n\n虽然两者都能够传给ref，并获取到dom，但是我们来看一下区别：\n\n### 区别\n\n*   语法区别 createRef是不可以传入初始值的，current属性也是只读的。而useRef不是。\n*   底层区别 首先维护两个set\n\n```javascript\nexport const  uRefs = new Set()\nexport const cRefs = new Set()\n```\n\n每次更新都将useRef和createRef创建的对象分别放入这两个set:\n\n```typescript\nimport { uRefs, cRefs } from './data';\n\nexport default function IndexPage() {\n  const [count, setCount] = useState(0);\n  const uRef = useRef<any>();\n  const cRef = createRef<any>();\n  const uRef1 = useRef(0);\n\n  const cRef1 = createRef();\n  const add = useCallback(() => {\n    setCount((count) => {\n      return ++count;\n    });\n  }, []);\n  useEffect(() => {\n    console.log('update')\n    uRefs.add(uRef);\n    cRefs.add(cRef)\n    console.log('uRef', uRefs)\n    console.log('cRef', cRefs)\n  });\n\n  return (\n    <div className=\" p-12\">\n      <div>createRef 与 useRef </div>\n      <div className=\"w-32 inline-block mr-2\">\n        use ref ：<Input ref={uRef} value={count}></Input>\n      </div>\n      <div className=\"w-32 inline-block\">\n        create ref: <Input ref={cRef} value={count}></Input>\n      </div>\n      <Button  icon={<PlusOutlined />}  className=\"ml-8\" onClick={add}>\n        add\n      </Button>\n    </div>\n  );\n}\n```\n\n经历两次更新后： ![image.png](../imgs/81a67e5d708a4e75af8b9a9fc7c2d317.png) 可以看到，每次更新，createRef都会重新创建一次ref对象，并将老的ref对象的current置位null;\n\n而useRef,在多次更新中始终是同一个对象。这就是这句定义的解释：\n\n> 在组件的整个生命周期内持续存在\n\n**因此当有一个不涉及渲染的复杂对象需要维护时，用useRef就可以避免频繁更新导致创建该对象的性能消耗。**\n\nforwardRef和useImperativeHandle\n------------------------------\n\n### forwardRef\n\n> `React.forwardRef` 会创建一个React组件，这个组件能够将其接受的 [ref](https://zh-hans.reactjs.org%2Fdocs%2Frefs-and-the-dom.html \"https://zh-hans.reactjs.org/docs/refs-and-the-dom.html\") 属性转发到其组件树下的另一个组件中。\n\n这个api主要有两个场景：转发ref和对function component使用ref(其实本质上也是转发ref)。\n\n所谓的“转发”，其实也就是让你封装的组件支持ref属性，并通过ref暴露这个组件中的某一个dom（不一定是该组件的根dom）\n\n另外，function component无法使用ref（因为它并没有组件实例）,这时候就可以使用这个api进行转发\n\n> **You may not use the `ref` attribute on function components** because they don’t have instances.\n\n```javascript\nconst FancyButton = React.forwardRef((props, ref) => (  <button ref={ref} className=\"FancyButton\">    {props.children}\n  </button>\n));\n\n// You can now get a ref directly to the DOM button:\nconst ref = React.createRef();\n<FancyButton ref={ref}>Click me!</FancyButton>;\n```\n\n### useImperativeHandle\n\n这个api与forwardRef配合使用，能使暴露出去的ref对象，具有它定义的某些功能\n\n> `useImperativeHandle` 可以让你在使用 `ref` 时自定义暴露给父组件的实例值。在大多数情况下，应当避免使用 ref 这样的命令式代码。`useImperativeHandle` 应当与 [`forwardRef`](https://zh-hans.reactjs.org%2Fdocs%2Freact-api.html%23reactforwardref \"https://zh-hans.reactjs.org/docs/react-api.html#reactforwardref\") 一起使用：\n\n```ini\nfunction FancyInput(props, ref) {\n  const inputRef = useRef();\n  useImperativeHandle(ref, () => ({\n    focus: () => {\n      inputRef.current.focus();\n    }\n  }));\n  return <input ref={inputRef} ... />;\n}\nFancyInput = forwardRef(FancyInput);\n```\n\n### 实例：antd3在form外部提交\n\nTalk is cheap. 我们来看一个实例：\n\nantd3中，form对象没有submit属性，因此想要在外部（比如弹窗）触发form的onSubmit，就需要结合`useImperativeHandle`与`useImperativeHandle`\n\nform: 通过useImperativeHandle暴露submit方法，该方法会直接调用onSubmit。\n\n当然也可以对外暴露更多的api，比如beforeSubmit、afterSubmit、onError，以及form对象等等。\n\n```ini\n const Demo = React.forwardRef((props: FormComponentProps, ref)=>{\n  const {\n    getFieldDecorator,\n    validateFields,\n  } = props.form;\n  const onSubmit = (e?: FormEvent)=>{\n    e?.preventDefault();\n    validateFields((e, v) => {})\n  }\n  useImperativeHandle(ref,()=>({\n    submit:onSubmit\n  }))\n  return <Form onSubmit={onSubmit}>\n    <Form.Item label=\"姓名\">\n      {getFieldDecorator('name',{rules:[{required:true,message:'请输入用户名'}]})(\n        <Input placeholder=\"user name\"/>\n      )}\n    </Form.Item>\n    <Form.Item label=\"地址\">\n    {getFieldDecorator('address')(\n        <Input placeholder=\"user address\"/>\n      )}\n    </Form.Item>\n  </Form>\n })\n\nconst DemoForm =  Form.create()(Demo)\n```\n\nmodal: 创建ref，并传入组件，因为这里被Form.create了，因此需要按照文档传入`wrappedComponentRef`\n\n当点击确认时，调用ref.current.submit，这样就触发了表单的校验。\n\n```typescript\nconst DemoModal = () => {\n  const ref = useRef<any>()\n  return <Modal title=\"demo\" visible={true} onOk={()=>{ref.current.submit()}}>\n    <DemoForm wrappedComponentRef={ref}></DemoForm>\n  </Modal>\n}\n```\n\n效果：\n\n![image.png](../imgs/c3e1ac10e91f4a249046400414dd795c.png)","slug":"React 关于ref，你想知道的都在这里","published":1,"updated":"2024-04-04T15:27:03.602Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhm001bhajf3oh7aao5","content":"<p>这是我参与11月更文挑战的第23天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"ref属性可以传哪些值\"><a href=\"#ref属性可以传哪些值\" class=\"headerlink\" title=\"ref属性可以传哪些值\"></a>ref属性可以传哪些值</h2><p>React.createRef()、React.useRef()创建的对象；回调函数、字符串</p>\n<blockquote>\n<p>此属性可以是一个由 <a href=\"https://zh-hans.reactjs.org%2Fdocs%2Freact-api.html%23reactcreateref\" title=\"https://zh-hans.reactjs.org/docs/react-api.html#reactcreateref\"><code>React.createRef()</code> 函数</a>创建的对象、或者一个回调函数、或者一个字符串（遗留 API）。当 <code>ref</code> 属性是一个回调函数时，此函数会（根据元素的类型）接收底层 DOM 元素或 class 实例作为其参数。这能够让你直接访问 DOM 元素或组件实例。</p>\n</blockquote>\n<h2 id=\"字符串refs\"><a href=\"#字符串refs\" class=\"headerlink\" title=\"字符串refs\"></a>字符串refs</h2><p>曾经字符串refs在class component中比较流行，但是现在，传字符串的用法已经过时了</p>\n<blockquote>\n<p>我们不建议使用它，因为 string 类型的 refs 存在 <a href=\"https://github.com%2Ffacebook%2Freact%2Fpull%2F8333%23issuecomment-271648615\" title=\"https://github.com/facebook/react/pull/8333#issuecomment-271648615\">一些问题</a>。它已过时并可能会在未来的版本被移除。</p>\n</blockquote>\n<h2 id=\"回调refs\"><a href=\"#回调refs\" class=\"headerlink\" title=\"回调refs\"></a>回调refs</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function IndexPage() &#123;</span><br><span class=\"line\">  const <span class=\"section\">[count, setCount]</span> = useState(0)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  const <span class=\"attr\">add</span> = useCallback(() =&gt; &#123;</span><br><span class=\"line\">    setCount((count) =&gt; &#123;</span><br><span class=\"line\">      return ++count<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;, <span class=\"section\">[]</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div <span class=\"attr\">className</span>=<span class=\"string\">&quot; p-12&quot;</span>&gt;</span><br><span class=\"line\">      &lt;div&gt;callback refs &lt;/div&gt;</span><br><span class=\"line\">      &lt;div <span class=\"attr\">className</span>=<span class=\"string\">&quot;w-32 inline-block mr-2&quot;</span>&gt;</span><br><span class=\"line\">        &lt;Input <span class=\"attr\">value</span>=&#123;count&#125;&gt;&lt;/Input&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;Button</span><br><span class=\"line\">        <span class=\"attr\">ref</span>=&#123;(dom)=&gt;console.log(dom)&#125;</span><br><span class=\"line\">        <span class=\"attr\">icon</span>=&#123;&lt;PlusOutlined /&gt;&#125;</span><br><span class=\"line\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;ml-8&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">onClick</span>=&#123;add&#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        add</span><br><span class=\"line\">      &lt;/Button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>React 将在组件挂载时，会调用 <code>ref</code> 回调函数并传入 DOM 元素，当卸载时调用它并传入 <code>null</code>。在 <code>componentDidMount</code> 或 <code>componentDidUpdate</code> 触发前，React 会保证 refs 一定是最新的。</p>\n<p>另外，组件的每一次更新都会调用这个callback两次，第一次传入null：</p>\n<p><img src=\"/../imgs/ce724a5dffb94210bc95e6efedaef78d.png\" alt=\"image.png\"></p>\n<h2 id=\"createRef与useRef\"><a href=\"#createRef与useRef\" class=\"headerlink\" title=\"createRef与useRef\"></a>createRef与useRef</h2><h3 id=\"定义：\"><a href=\"#定义：\" class=\"headerlink\" title=\"定义：\"></a>定义：</h3><ul>\n<li>createRef:<code>React.createRef</code> 创建一个能够通过 ref 属性附加到 React 元素的 <a href=\"https://zh-hans.reactjs.org%2Fdocs%2Frefs-and-the-dom.html\" title=\"https://zh-hans.reactjs.org/docs/refs-and-the-dom.html\">ref</a>。</li>\n<li>useRef: <code>useRef</code>：简单理解就是返回了一个ref对象，拥有<code>current</code>属性。</li>\n</ul>\n<blockquote>\n<p>useRef返回一个可变的 ref 对象，其 <code>.current</code> 属性被初始化为传入的参数（<code>initialValue</code>）。返回的 ref 对象在组件的整个生命周期内持续存在。</p>\n</blockquote>\n<p>虽然两者都能够传给ref，并获取到dom，但是我们来看一下区别：</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>语法区别 createRef是不可以传入初始值的，current属性也是只读的。而useRef不是。</li>\n<li>底层区别 首先维护两个set</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span>  uRefs = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> cRefs = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br></pre></td></tr></table></figure>\n\n<p>每次更新都将useRef和createRef创建的对象分别放入这两个set:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; uRefs, cRefs &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./data&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">IndexPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> uRef = useRef&lt;<span class=\"built_in\">any</span>&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cRef = createRef&lt;<span class=\"built_in\">any</span>&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> uRef1 = <span class=\"title function_\">useRef</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> cRef1 = <span class=\"title function_\">createRef</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> add = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(<span class=\"function\">(<span class=\"params\">count</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ++count;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;update&#x27;</span>)</span><br><span class=\"line\">    uRefs.<span class=\"title function_\">add</span>(uRef);</span><br><span class=\"line\">    cRefs.<span class=\"title function_\">add</span>(cRef)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;uRef&#x27;</span>, uRefs)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;cRef&#x27;</span>, cRefs)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot; p-12&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>createRef 与 useRef <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;w-32 inline-block mr-2&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        use ref ：<span class=\"tag\">&lt;<span class=\"name\">Input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;uRef&#125;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;count&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;w-32 inline-block&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        create ref: <span class=\"tag\">&lt;<span class=\"name\">Input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;cRef&#125;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;count&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span>  <span class=\"attr\">icon</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">PlusOutlined</span> /&gt;</span>&#125;  className=&quot;ml-8&quot; onClick=&#123;add&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        add</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经历两次更新后： <img src=\"/../imgs/81a67e5d708a4e75af8b9a9fc7c2d317.png\" alt=\"image.png\"> 可以看到，每次更新，createRef都会重新创建一次ref对象，并将老的ref对象的current置位null;</p>\n<p>而useRef,在多次更新中始终是同一个对象。这就是这句定义的解释：</p>\n<blockquote>\n<p>在组件的整个生命周期内持续存在</p>\n</blockquote>\n<p><strong>因此当有一个不涉及渲染的复杂对象需要维护时，用useRef就可以避免频繁更新导致创建该对象的性能消耗。</strong></p>\n<h2 id=\"forwardRef和useImperativeHandle\"><a href=\"#forwardRef和useImperativeHandle\" class=\"headerlink\" title=\"forwardRef和useImperativeHandle\"></a>forwardRef和useImperativeHandle</h2><h3 id=\"forwardRef\"><a href=\"#forwardRef\" class=\"headerlink\" title=\"forwardRef\"></a>forwardRef</h3><blockquote>\n<p><code>React.forwardRef</code> 会创建一个React组件，这个组件能够将其接受的 <a href=\"https://zh-hans.reactjs.org%2Fdocs%2Frefs-and-the-dom.html\" title=\"https://zh-hans.reactjs.org/docs/refs-and-the-dom.html\">ref</a> 属性转发到其组件树下的另一个组件中。</p>\n</blockquote>\n<p>这个api主要有两个场景：转发ref和对function component使用ref(其实本质上也是转发ref)。</p>\n<p>所谓的“转发”，其实也就是让你封装的组件支持ref属性，并通过ref暴露这个组件中的某一个dom（不一定是该组件的根dom）</p>\n<p>另外，function component无法使用ref（因为它并没有组件实例）,这时候就可以使用这个api进行转发</p>\n<blockquote>\n<p><strong>You may not use the <code>ref</code> attribute on function components</strong> because they don’t have instances.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">FancyButton</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">forwardRef</span>(<span class=\"function\">(<span class=\"params\">props, ref</span>) =&gt;</span> (  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;FancyButton&quot;</span>&gt;</span>    &#123;props.children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// You can now get a ref directly to the DOM button:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ref = <span class=\"title class_\">React</span>.<span class=\"title function_\">createRef</span>();</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">FancyButton</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">FancyButton</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useImperativeHandle\"><a href=\"#useImperativeHandle\" class=\"headerlink\" title=\"useImperativeHandle\"></a>useImperativeHandle</h3><p>这个api与forwardRef配合使用，能使暴露出去的ref对象，具有它定义的某些功能</p>\n<blockquote>\n<p><code>useImperativeHandle</code> 可以让你在使用 <code>ref</code> 时自定义暴露给父组件的实例值。在大多数情况下，应当避免使用 ref 这样的命令式代码。<code>useImperativeHandle</code> 应当与 <a href=\"https://zh-hans.reactjs.org%2Fdocs%2Freact-api.html%23reactforwardref\" title=\"https://zh-hans.reactjs.org/docs/react-api.html#reactforwardref\"><code>forwardRef</code></a> 一起使用：</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function FancyInput(props, ref) &#123;</span><br><span class=\"line\">  const <span class=\"attr\">inputRef</span> = useRef()<span class=\"comment\">;</span></span><br><span class=\"line\">  useImperativeHandle(ref, () =&gt; (&#123;</span><br><span class=\"line\">    focus: () =&gt; &#123;</span><br><span class=\"line\">      inputRef.current.focus()<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;))<span class=\"comment\">;</span></span><br><span class=\"line\">  return &lt;input <span class=\"attr\">ref</span>=&#123;inputRef&#125; ... /&gt;<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"attr\">FancyInput</span> = forwardRef(FancyInput)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例：antd3在form外部提交\"><a href=\"#实例：antd3在form外部提交\" class=\"headerlink\" title=\"实例：antd3在form外部提交\"></a>实例：antd3在form外部提交</h3><p>Talk is cheap. 我们来看一个实例：</p>\n<p>antd3中，form对象没有submit属性，因此想要在外部（比如弹窗）触发form的onSubmit，就需要结合<code>useImperativeHandle</code>与<code>useImperativeHandle</code></p>\n<p>form: 通过useImperativeHandle暴露submit方法，该方法会直接调用onSubmit。</p>\n<p>当然也可以对外暴露更多的api，比如beforeSubmit、afterSubmit、onError，以及form对象等等。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> const <span class=\"attr\">Demo</span> = React.forwardRef((props: FormComponentProps, ref)=&gt;&#123;</span><br><span class=\"line\">  const &#123;</span><br><span class=\"line\">    getFieldDecorator,</span><br><span class=\"line\">    validateFields,</span><br><span class=\"line\">  &#125; = props.form<span class=\"comment\">;</span></span><br><span class=\"line\">  const <span class=\"attr\">onSubmit</span> = (e?: FormEvent)=&gt;&#123;</span><br><span class=\"line\">    e?.preventDefault()<span class=\"comment\">;</span></span><br><span class=\"line\">    validateFields((e, v) =&gt; &#123;&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  useImperativeHandle(ref,()=&gt;(&#123;</span><br><span class=\"line\">    submit:onSubmit</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">  return &lt;Form <span class=\"attr\">onSubmit</span>=&#123;<span class=\"literal\">on</span>Submit&#125;&gt;</span><br><span class=\"line\">    &lt;Form.Item <span class=\"attr\">label</span>=<span class=\"string\">&quot;姓名&quot;</span>&gt;</span><br><span class=\"line\">      &#123;getFieldDecorator(&#x27;name&#x27;,&#123;rules:<span class=\"section\">[&#123;required:true,message:&#x27;请输入用户名&#x27;&#125;]</span>&#125;)(</span><br><span class=\"line\">        &lt;Input <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;user name&quot;</span>/&gt;</span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    &lt;/Form.Item&gt;</span><br><span class=\"line\">    &lt;Form.Item <span class=\"attr\">label</span>=<span class=\"string\">&quot;地址&quot;</span>&gt;</span><br><span class=\"line\">    &#123;getFieldDecorator(&#x27;address&#x27;)(</span><br><span class=\"line\">        &lt;Input <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;user address&quot;</span>/&gt;</span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    &lt;/Form.Item&gt;</span><br><span class=\"line\">  &lt;/Form&gt;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const <span class=\"attr\">DemoForm</span> =  Form.create()(Demo)</span><br></pre></td></tr></table></figure>\n\n<p>modal: 创建ref，并传入组件，因为这里被Form.create了，因此需要按照文档传入<code>wrappedComponentRef</code></p>\n<p>当点击确认时，调用ref.current.submit，这样就触发了表单的校验。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">DemoModal</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ref = useRef&lt;<span class=\"built_in\">any</span>&gt;()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Modal</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;demo&quot;</span> <span class=\"attr\">visible</span>=<span class=\"string\">&#123;true&#125;</span> <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;ref.current.submit()&#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">DemoForm</span> <span class=\"attr\">wrappedComponentRef</span>=<span class=\"string\">&#123;ref&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">DemoForm</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img src=\"/../imgs/c3e1ac10e91f4a249046400414dd795c.png\" alt=\"image.png\"></p>\n","length":5193,"excerpt":"","more":"<p>这是我参与11月更文挑战的第23天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"ref属性可以传哪些值\"><a href=\"#ref属性可以传哪些值\" class=\"headerlink\" title=\"ref属性可以传哪些值\"></a>ref属性可以传哪些值</h2><p>React.createRef()、React.useRef()创建的对象；回调函数、字符串</p>\n<blockquote>\n<p>此属性可以是一个由 <a href=\"https://zh-hans.reactjs.org%2Fdocs%2Freact-api.html%23reactcreateref\" title=\"https://zh-hans.reactjs.org/docs/react-api.html#reactcreateref\"><code>React.createRef()</code> 函数</a>创建的对象、或者一个回调函数、或者一个字符串（遗留 API）。当 <code>ref</code> 属性是一个回调函数时，此函数会（根据元素的类型）接收底层 DOM 元素或 class 实例作为其参数。这能够让你直接访问 DOM 元素或组件实例。</p>\n</blockquote>\n<h2 id=\"字符串refs\"><a href=\"#字符串refs\" class=\"headerlink\" title=\"字符串refs\"></a>字符串refs</h2><p>曾经字符串refs在class component中比较流行，但是现在，传字符串的用法已经过时了</p>\n<blockquote>\n<p>我们不建议使用它，因为 string 类型的 refs 存在 <a href=\"https://github.com%2Ffacebook%2Freact%2Fpull%2F8333%23issuecomment-271648615\" title=\"https://github.com/facebook/react/pull/8333#issuecomment-271648615\">一些问题</a>。它已过时并可能会在未来的版本被移除。</p>\n</blockquote>\n<h2 id=\"回调refs\"><a href=\"#回调refs\" class=\"headerlink\" title=\"回调refs\"></a>回调refs</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function IndexPage() &#123;</span><br><span class=\"line\">  const <span class=\"section\">[count, setCount]</span> = useState(0)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  const <span class=\"attr\">add</span> = useCallback(() =&gt; &#123;</span><br><span class=\"line\">    setCount((count) =&gt; &#123;</span><br><span class=\"line\">      return ++count<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;, <span class=\"section\">[]</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div <span class=\"attr\">className</span>=<span class=\"string\">&quot; p-12&quot;</span>&gt;</span><br><span class=\"line\">      &lt;div&gt;callback refs &lt;/div&gt;</span><br><span class=\"line\">      &lt;div <span class=\"attr\">className</span>=<span class=\"string\">&quot;w-32 inline-block mr-2&quot;</span>&gt;</span><br><span class=\"line\">        &lt;Input <span class=\"attr\">value</span>=&#123;count&#125;&gt;&lt;/Input&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;Button</span><br><span class=\"line\">        <span class=\"attr\">ref</span>=&#123;(dom)=&gt;console.log(dom)&#125;</span><br><span class=\"line\">        <span class=\"attr\">icon</span>=&#123;&lt;PlusOutlined /&gt;&#125;</span><br><span class=\"line\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;ml-8&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">onClick</span>=&#123;add&#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        add</span><br><span class=\"line\">      &lt;/Button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>React 将在组件挂载时，会调用 <code>ref</code> 回调函数并传入 DOM 元素，当卸载时调用它并传入 <code>null</code>。在 <code>componentDidMount</code> 或 <code>componentDidUpdate</code> 触发前，React 会保证 refs 一定是最新的。</p>\n<p>另外，组件的每一次更新都会调用这个callback两次，第一次传入null：</p>\n<p><img src=\"/../imgs/ce724a5dffb94210bc95e6efedaef78d.png\" alt=\"image.png\"></p>\n<h2 id=\"createRef与useRef\"><a href=\"#createRef与useRef\" class=\"headerlink\" title=\"createRef与useRef\"></a>createRef与useRef</h2><h3 id=\"定义：\"><a href=\"#定义：\" class=\"headerlink\" title=\"定义：\"></a>定义：</h3><ul>\n<li>createRef:<code>React.createRef</code> 创建一个能够通过 ref 属性附加到 React 元素的 <a href=\"https://zh-hans.reactjs.org%2Fdocs%2Frefs-and-the-dom.html\" title=\"https://zh-hans.reactjs.org/docs/refs-and-the-dom.html\">ref</a>。</li>\n<li>useRef: <code>useRef</code>：简单理解就是返回了一个ref对象，拥有<code>current</code>属性。</li>\n</ul>\n<blockquote>\n<p>useRef返回一个可变的 ref 对象，其 <code>.current</code> 属性被初始化为传入的参数（<code>initialValue</code>）。返回的 ref 对象在组件的整个生命周期内持续存在。</p>\n</blockquote>\n<p>虽然两者都能够传给ref，并获取到dom，但是我们来看一下区别：</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>语法区别 createRef是不可以传入初始值的，current属性也是只读的。而useRef不是。</li>\n<li>底层区别 首先维护两个set</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span>  uRefs = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> cRefs = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br></pre></td></tr></table></figure>\n\n<p>每次更新都将useRef和createRef创建的对象分别放入这两个set:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; uRefs, cRefs &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./data&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">IndexPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> uRef = useRef&lt;<span class=\"built_in\">any</span>&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cRef = createRef&lt;<span class=\"built_in\">any</span>&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> uRef1 = <span class=\"title function_\">useRef</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> cRef1 = <span class=\"title function_\">createRef</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> add = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(<span class=\"function\">(<span class=\"params\">count</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ++count;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;update&#x27;</span>)</span><br><span class=\"line\">    uRefs.<span class=\"title function_\">add</span>(uRef);</span><br><span class=\"line\">    cRefs.<span class=\"title function_\">add</span>(cRef)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;uRef&#x27;</span>, uRefs)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;cRef&#x27;</span>, cRefs)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot; p-12&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>createRef 与 useRef <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;w-32 inline-block mr-2&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        use ref ：<span class=\"tag\">&lt;<span class=\"name\">Input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;uRef&#125;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;count&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;w-32 inline-block&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        create ref: <span class=\"tag\">&lt;<span class=\"name\">Input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;cRef&#125;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;count&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span>  <span class=\"attr\">icon</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">PlusOutlined</span> /&gt;</span>&#125;  className=&quot;ml-8&quot; onClick=&#123;add&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        add</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经历两次更新后： <img src=\"/../imgs/81a67e5d708a4e75af8b9a9fc7c2d317.png\" alt=\"image.png\"> 可以看到，每次更新，createRef都会重新创建一次ref对象，并将老的ref对象的current置位null;</p>\n<p>而useRef,在多次更新中始终是同一个对象。这就是这句定义的解释：</p>\n<blockquote>\n<p>在组件的整个生命周期内持续存在</p>\n</blockquote>\n<p><strong>因此当有一个不涉及渲染的复杂对象需要维护时，用useRef就可以避免频繁更新导致创建该对象的性能消耗。</strong></p>\n<h2 id=\"forwardRef和useImperativeHandle\"><a href=\"#forwardRef和useImperativeHandle\" class=\"headerlink\" title=\"forwardRef和useImperativeHandle\"></a>forwardRef和useImperativeHandle</h2><h3 id=\"forwardRef\"><a href=\"#forwardRef\" class=\"headerlink\" title=\"forwardRef\"></a>forwardRef</h3><blockquote>\n<p><code>React.forwardRef</code> 会创建一个React组件，这个组件能够将其接受的 <a href=\"https://zh-hans.reactjs.org%2Fdocs%2Frefs-and-the-dom.html\" title=\"https://zh-hans.reactjs.org/docs/refs-and-the-dom.html\">ref</a> 属性转发到其组件树下的另一个组件中。</p>\n</blockquote>\n<p>这个api主要有两个场景：转发ref和对function component使用ref(其实本质上也是转发ref)。</p>\n<p>所谓的“转发”，其实也就是让你封装的组件支持ref属性，并通过ref暴露这个组件中的某一个dom（不一定是该组件的根dom）</p>\n<p>另外，function component无法使用ref（因为它并没有组件实例）,这时候就可以使用这个api进行转发</p>\n<blockquote>\n<p><strong>You may not use the <code>ref</code> attribute on function components</strong> because they don’t have instances.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">FancyButton</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">forwardRef</span>(<span class=\"function\">(<span class=\"params\">props, ref</span>) =&gt;</span> (  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;FancyButton&quot;</span>&gt;</span>    &#123;props.children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// You can now get a ref directly to the DOM button:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ref = <span class=\"title class_\">React</span>.<span class=\"title function_\">createRef</span>();</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">FancyButton</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">FancyButton</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useImperativeHandle\"><a href=\"#useImperativeHandle\" class=\"headerlink\" title=\"useImperativeHandle\"></a>useImperativeHandle</h3><p>这个api与forwardRef配合使用，能使暴露出去的ref对象，具有它定义的某些功能</p>\n<blockquote>\n<p><code>useImperativeHandle</code> 可以让你在使用 <code>ref</code> 时自定义暴露给父组件的实例值。在大多数情况下，应当避免使用 ref 这样的命令式代码。<code>useImperativeHandle</code> 应当与 <a href=\"https://zh-hans.reactjs.org%2Fdocs%2Freact-api.html%23reactforwardref\" title=\"https://zh-hans.reactjs.org/docs/react-api.html#reactforwardref\"><code>forwardRef</code></a> 一起使用：</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function FancyInput(props, ref) &#123;</span><br><span class=\"line\">  const <span class=\"attr\">inputRef</span> = useRef()<span class=\"comment\">;</span></span><br><span class=\"line\">  useImperativeHandle(ref, () =&gt; (&#123;</span><br><span class=\"line\">    focus: () =&gt; &#123;</span><br><span class=\"line\">      inputRef.current.focus()<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;))<span class=\"comment\">;</span></span><br><span class=\"line\">  return &lt;input <span class=\"attr\">ref</span>=&#123;inputRef&#125; ... /&gt;<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"attr\">FancyInput</span> = forwardRef(FancyInput)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例：antd3在form外部提交\"><a href=\"#实例：antd3在form外部提交\" class=\"headerlink\" title=\"实例：antd3在form外部提交\"></a>实例：antd3在form外部提交</h3><p>Talk is cheap. 我们来看一个实例：</p>\n<p>antd3中，form对象没有submit属性，因此想要在外部（比如弹窗）触发form的onSubmit，就需要结合<code>useImperativeHandle</code>与<code>useImperativeHandle</code></p>\n<p>form: 通过useImperativeHandle暴露submit方法，该方法会直接调用onSubmit。</p>\n<p>当然也可以对外暴露更多的api，比如beforeSubmit、afterSubmit、onError，以及form对象等等。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> const <span class=\"attr\">Demo</span> = React.forwardRef((props: FormComponentProps, ref)=&gt;&#123;</span><br><span class=\"line\">  const &#123;</span><br><span class=\"line\">    getFieldDecorator,</span><br><span class=\"line\">    validateFields,</span><br><span class=\"line\">  &#125; = props.form<span class=\"comment\">;</span></span><br><span class=\"line\">  const <span class=\"attr\">onSubmit</span> = (e?: FormEvent)=&gt;&#123;</span><br><span class=\"line\">    e?.preventDefault()<span class=\"comment\">;</span></span><br><span class=\"line\">    validateFields((e, v) =&gt; &#123;&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  useImperativeHandle(ref,()=&gt;(&#123;</span><br><span class=\"line\">    submit:onSubmit</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">  return &lt;Form <span class=\"attr\">onSubmit</span>=&#123;<span class=\"literal\">on</span>Submit&#125;&gt;</span><br><span class=\"line\">    &lt;Form.Item <span class=\"attr\">label</span>=<span class=\"string\">&quot;姓名&quot;</span>&gt;</span><br><span class=\"line\">      &#123;getFieldDecorator(&#x27;name&#x27;,&#123;rules:<span class=\"section\">[&#123;required:true,message:&#x27;请输入用户名&#x27;&#125;]</span>&#125;)(</span><br><span class=\"line\">        &lt;Input <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;user name&quot;</span>/&gt;</span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    &lt;/Form.Item&gt;</span><br><span class=\"line\">    &lt;Form.Item <span class=\"attr\">label</span>=<span class=\"string\">&quot;地址&quot;</span>&gt;</span><br><span class=\"line\">    &#123;getFieldDecorator(&#x27;address&#x27;)(</span><br><span class=\"line\">        &lt;Input <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;user address&quot;</span>/&gt;</span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    &lt;/Form.Item&gt;</span><br><span class=\"line\">  &lt;/Form&gt;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const <span class=\"attr\">DemoForm</span> =  Form.create()(Demo)</span><br></pre></td></tr></table></figure>\n\n<p>modal: 创建ref，并传入组件，因为这里被Form.create了，因此需要按照文档传入<code>wrappedComponentRef</code></p>\n<p>当点击确认时，调用ref.current.submit，这样就触发了表单的校验。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">DemoModal</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ref = useRef&lt;<span class=\"built_in\">any</span>&gt;()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Modal</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;demo&quot;</span> <span class=\"attr\">visible</span>=<span class=\"string\">&#123;true&#125;</span> <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;ref.current.submit()&#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">DemoForm</span> <span class=\"attr\">wrappedComponentRef</span>=<span class=\"string\">&#123;ref&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">DemoForm</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img src=\"/../imgs/c3e1ac10e91f4a249046400414dd795c.png\" alt=\"image.png\"></p>\n"},{"title":"React-Redux7源码解析——Provider","date":"2022-01-24T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第8天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nReact Redux8已经使用了React18的`useSyncExternalStore`，不过还未完成，代码中还。因此本系列将从React Redux 7开始，等8正式出来后再进行比较。关于`uSES`的用法可以参考[前文](https://juejin.cn/post/7056588815170813965 \"https://juejin.cn/post/7056588815170813965\")[juejin.cn/post/705658…](https://juejin.cn/post/7056588815170813965 \"https://juejin.cn/post/7056588815170813965\")\n\nReact Redux中核心api也不多，关键的两个是`Provider`和`connect`。本系列从`Provider`开始，看看React Redux到底是如何运行的。\n\nReact Redux是如何触发更新的\n-------------------\n\n分析源码必须带着问题，React Redux解决的核心问题就是触发react组件的更新。\n\n先来一段简单的代码\n\n```javascript\nimport { createStore } from 'redux';\nimport { Provider, connect } from '../react-redux';\n//创建store\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD':\n      state.list.push(action.payload)\n      state.list = [...state.list]\n      return { ...state }\n    case 'CLEAR':\n      return { ...state, list: [] }\n    case 'DELETE':\n      state.list.splice(action.payload, 1);\n      return { ...state }\n    default:\n      return state\n  }\n}\n\nconst store = createStore(reducer, { list: ['read'] })\n\n\n// 外层组件\nexport default function IndexPage() {\n  return (\n    <Provider store={store}>\n      <TestWrap name={'TODO LIST'}></TestWrap>\n    </Provider>\n  );\n}\n\nfunction Test(props) {\n  return <div>\n    <div>name:{props.name}</div>\n    <div><ul>{props.list.map(item => <li key={item}>{item}</li>)}</ul></div>\n    <button onClick={() => props.add('eat')}>+</button>\n    <button onClick={() => props.clear()}>clear</button>\n  </div>\n}\nfunction mapStateToProps(state, props) {\n  return { list: state.list, ...props }\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    add(item) {\n      dispatch({ type: 'ADD', payload: item })\n    },\n    clear() {\n      dispatch({ type: 'CLEAR' })\n    }\n  }\n}\nconst TestWrap = connect(mapStateToProps, mapDispatchToProps)(Test)\n\n```\n\n![image.png](../imgs/0d3e7a37ccb24c51bcfdc875f442774b.png)\n\n这段代码的效果是：点击\\*+_按钮会增加一条todo，点击_clear\\*会清空。\n\nTest组件中调用的`dispatch`，就是redux store的dispatch方法，这个方法会触发store的更新，但并不能导致组件更新。React Redux中将组件与store进行衔接的api，首当其冲的就是`Provider`\n\nProvider\n--------\n\n大家都知道React Redux使用了`context`api，而Provider组件就是react context与 redux store的一个衔接点。\n\n### 用法\n\nProvider可以传入一个context对象和一个redux store。大多数时候我们都不必指定context，因为它内部会自己创建一个。\n\n```xml\n<Provider context={MyContext} store={store}>\n  <App />\n</Provider>\n```\n\n### 核心源码\n\n这里将源码稍微做了一些改动，大致如下：\n\n```javascript\nimport { createSubscription } from '../utils/Subscription'\nconst ReactReduxContext = React.createContext(null)\nfunction Provider({ store, context, children }) {\n  const contextValue = useMemo(() => {\n    const subscription = createSubscription(store)\n    subscription.onStateChange = subscription.notifyNestedSubs\n    return {\n      store,\n      subscription,\n    }\n  }, [store])\n\n  const previousState = useMemo(() => store.getState(), [store])\n\n  useLayoutEffect(() => {\n    const { subscription } = contextValue\n    subscription.trySubscribe()\n\n    if (previousState !== store.getState()) {\n      subscription.notifyNestedSubs()\n    }\n    return () => {\n      subscription.tryUnsubscribe()\n      subscription.onStateChange = null\n    }\n  }, [contextValue, previousState])\n\n  const Context = ReactReduxContext\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>\n}\n\nexport default Provider\n```\n\n#### ReactReduxContext\n\nReact Redux内部创建的context便是`ReactReduxContext`，并且这个context也被导出了，代码中可以直接使用\n\n```ts\nimport { ReactReduxContext } from 'react-redux'\n\nfunction MyConnectedComponent() {\n\n  const { store } = useContext(ReactReduxContext)\n\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => { }}\n    </ReactReduxContext.Consumer>\n  )\n}\n```\n\n#### contextValue\n\ncontextValue是一个对象，结构如下：\n\n```css\n{\n  store,\n  subscription:{\n    addNestedSub,\n    notifyNestedSubs,\n    handleChangeWrapper,\n    isSubscribed,\n    trySubscribe,\n    tryUnsubscribe,\n    getListeners: () => listeners,\n  }\n}\n```\n\n这个对象简而言之，是在store之外增加了一层自己的订阅。\n\nProvider的代码比较简单，它主要做了这几件事情：\n\n*   创建一个context\n*   创建一个subscription\n*   将redux store与subscription设置为context的value\n*   订阅store，当store发生变化时执行`subscription.onStateChange`\n\n需要注意的是，当前`subscription`的`onStateChange`尚未设置。因此仅有`Provider`,是无法更新组件的。\n\n直到有组件调用`connect`,context中的`subscription`才真正有了自己的价值。\n\n未完待续\n----\n\n总结下来，**Provider的源码对我们理解React Redux核心原理的价值不大**，真正的核心实现在`connect`中。\n\n但是，它的源码埋了一个**伏笔**——React Redux为何要费尽再搞一个subscription进行订阅？","source":"_posts/React-Redux7源码解析——Provider.md","raw":"---\n title: \"React-Redux7源码解析——Provider\"\n date: 2022-01-25\n tags: [前端,源码]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第8天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nReact Redux8已经使用了React18的`useSyncExternalStore`，不过还未完成，代码中还。因此本系列将从React Redux 7开始，等8正式出来后再进行比较。关于`uSES`的用法可以参考[前文](https://juejin.cn/post/7056588815170813965 \"https://juejin.cn/post/7056588815170813965\")[juejin.cn/post/705658…](https://juejin.cn/post/7056588815170813965 \"https://juejin.cn/post/7056588815170813965\")\n\nReact Redux中核心api也不多，关键的两个是`Provider`和`connect`。本系列从`Provider`开始，看看React Redux到底是如何运行的。\n\nReact Redux是如何触发更新的\n-------------------\n\n分析源码必须带着问题，React Redux解决的核心问题就是触发react组件的更新。\n\n先来一段简单的代码\n\n```javascript\nimport { createStore } from 'redux';\nimport { Provider, connect } from '../react-redux';\n//创建store\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD':\n      state.list.push(action.payload)\n      state.list = [...state.list]\n      return { ...state }\n    case 'CLEAR':\n      return { ...state, list: [] }\n    case 'DELETE':\n      state.list.splice(action.payload, 1);\n      return { ...state }\n    default:\n      return state\n  }\n}\n\nconst store = createStore(reducer, { list: ['read'] })\n\n\n// 外层组件\nexport default function IndexPage() {\n  return (\n    <Provider store={store}>\n      <TestWrap name={'TODO LIST'}></TestWrap>\n    </Provider>\n  );\n}\n\nfunction Test(props) {\n  return <div>\n    <div>name:{props.name}</div>\n    <div><ul>{props.list.map(item => <li key={item}>{item}</li>)}</ul></div>\n    <button onClick={() => props.add('eat')}>+</button>\n    <button onClick={() => props.clear()}>clear</button>\n  </div>\n}\nfunction mapStateToProps(state, props) {\n  return { list: state.list, ...props }\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    add(item) {\n      dispatch({ type: 'ADD', payload: item })\n    },\n    clear() {\n      dispatch({ type: 'CLEAR' })\n    }\n  }\n}\nconst TestWrap = connect(mapStateToProps, mapDispatchToProps)(Test)\n\n```\n\n![image.png](../imgs/0d3e7a37ccb24c51bcfdc875f442774b.png)\n\n这段代码的效果是：点击\\*+_按钮会增加一条todo，点击_clear\\*会清空。\n\nTest组件中调用的`dispatch`，就是redux store的dispatch方法，这个方法会触发store的更新，但并不能导致组件更新。React Redux中将组件与store进行衔接的api，首当其冲的就是`Provider`\n\nProvider\n--------\n\n大家都知道React Redux使用了`context`api，而Provider组件就是react context与 redux store的一个衔接点。\n\n### 用法\n\nProvider可以传入一个context对象和一个redux store。大多数时候我们都不必指定context，因为它内部会自己创建一个。\n\n```xml\n<Provider context={MyContext} store={store}>\n  <App />\n</Provider>\n```\n\n### 核心源码\n\n这里将源码稍微做了一些改动，大致如下：\n\n```javascript\nimport { createSubscription } from '../utils/Subscription'\nconst ReactReduxContext = React.createContext(null)\nfunction Provider({ store, context, children }) {\n  const contextValue = useMemo(() => {\n    const subscription = createSubscription(store)\n    subscription.onStateChange = subscription.notifyNestedSubs\n    return {\n      store,\n      subscription,\n    }\n  }, [store])\n\n  const previousState = useMemo(() => store.getState(), [store])\n\n  useLayoutEffect(() => {\n    const { subscription } = contextValue\n    subscription.trySubscribe()\n\n    if (previousState !== store.getState()) {\n      subscription.notifyNestedSubs()\n    }\n    return () => {\n      subscription.tryUnsubscribe()\n      subscription.onStateChange = null\n    }\n  }, [contextValue, previousState])\n\n  const Context = ReactReduxContext\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>\n}\n\nexport default Provider\n```\n\n#### ReactReduxContext\n\nReact Redux内部创建的context便是`ReactReduxContext`，并且这个context也被导出了，代码中可以直接使用\n\n```ts\nimport { ReactReduxContext } from 'react-redux'\n\nfunction MyConnectedComponent() {\n\n  const { store } = useContext(ReactReduxContext)\n\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => { }}\n    </ReactReduxContext.Consumer>\n  )\n}\n```\n\n#### contextValue\n\ncontextValue是一个对象，结构如下：\n\n```css\n{\n  store,\n  subscription:{\n    addNestedSub,\n    notifyNestedSubs,\n    handleChangeWrapper,\n    isSubscribed,\n    trySubscribe,\n    tryUnsubscribe,\n    getListeners: () => listeners,\n  }\n}\n```\n\n这个对象简而言之，是在store之外增加了一层自己的订阅。\n\nProvider的代码比较简单，它主要做了这几件事情：\n\n*   创建一个context\n*   创建一个subscription\n*   将redux store与subscription设置为context的value\n*   订阅store，当store发生变化时执行`subscription.onStateChange`\n\n需要注意的是，当前`subscription`的`onStateChange`尚未设置。因此仅有`Provider`,是无法更新组件的。\n\n直到有组件调用`connect`,context中的`subscription`才真正有了自己的价值。\n\n未完待续\n----\n\n总结下来，**Provider的源码对我们理解React Redux核心原理的价值不大**，真正的核心实现在`connect`中。\n\n但是，它的源码埋了一个**伏笔**——React Redux为何要费尽再搞一个subscription进行订阅？","slug":"React-Redux7源码解析——Provider","published":1,"updated":"2024-04-04T15:27:03.661Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhm001fhajf57b37bnc","content":"<p>「这是我参与2022首次更文挑战的第8天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>React Redux8已经使用了React18的<code>useSyncExternalStore</code>，不过还未完成，代码中还。因此本系列将从React Redux 7开始，等8正式出来后再进行比较。关于<code>uSES</code>的用法可以参考<a href=\"https://juejin.cn/post/7056588815170813965\" title=\"https://juejin.cn/post/7056588815170813965\">前文</a><a href=\"https://juejin.cn/post/7056588815170813965\" title=\"https://juejin.cn/post/7056588815170813965\">juejin.cn&#x2F;post&#x2F;705658…</a></p>\n<p>React Redux中核心api也不多，关键的两个是<code>Provider</code>和<code>connect</code>。本系列从<code>Provider</code>开始，看看React Redux到底是如何运行的。</p>\n<h2 id=\"React-Redux是如何触发更新的\"><a href=\"#React-Redux是如何触发更新的\" class=\"headerlink\" title=\"React Redux是如何触发更新的\"></a>React Redux是如何触发更新的</h2><p>分析源码必须带着问题，React Redux解决的核心问题就是触发react组件的更新。</p>\n<p>先来一段简单的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Provider</span>, connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../react-redux&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//创建store</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reducer</span> = (<span class=\"params\">state, action</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;ADD&#x27;</span>:</span><br><span class=\"line\">      state.<span class=\"property\">list</span>.<span class=\"title function_\">push</span>(action.<span class=\"property\">payload</span>)</span><br><span class=\"line\">      state.<span class=\"property\">list</span> = [...state.<span class=\"property\">list</span>]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;CLEAR&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">list</span>: [] &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;DELETE&#x27;</span>:</span><br><span class=\"line\">      state.<span class=\"property\">list</span>.<span class=\"title function_\">splice</span>(action.<span class=\"property\">payload</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state &#125;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer, &#123; <span class=\"attr\">list</span>: [<span class=\"string\">&#x27;read&#x27;</span>] &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 外层组件</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">IndexPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">TestWrap</span> <span class=\"attr\">name</span>=<span class=\"string\">&#123;</span>&#x27;<span class=\"attr\">TODO</span> <span class=\"attr\">LIST</span>&#x27;&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TestWrap</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Test</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>name:&#123;props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>&#123;props.list.map(item =&gt; <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>)&#125;<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> props.add(&#x27;eat&#x27;)&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> props.clear()&#125;&gt;clear<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapStateToProps</span>(<span class=\"params\">state, props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">list</span>: state.<span class=\"property\">list</span>, ...props &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">add</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;ADD&#x27;</span>, <span class=\"attr\">payload</span>: item &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">clear</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CLEAR&#x27;</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TestWrap</span> = <span class=\"title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"title class_\">Test</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/0d3e7a37ccb24c51bcfdc875f442774b.png\" alt=\"image.png\"></p>\n<p>这段代码的效果是：点击*+_按钮会增加一条todo，点击_clear*会清空。</p>\n<p>Test组件中调用的<code>dispatch</code>，就是redux store的dispatch方法，这个方法会触发store的更新，但并不能导致组件更新。React Redux中将组件与store进行衔接的api，首当其冲的就是<code>Provider</code></p>\n<h2 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"Provider\"></a>Provider</h2><p>大家都知道React Redux使用了<code>context</code>api，而Provider组件就是react context与 redux store的一个衔接点。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>Provider可以传入一个context对象和一个redux store。大多数时候我们都不必指定context，因为它内部会自己创建一个。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">context</span>=<span class=\"string\">&#123;MyContext&#125;</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心源码\"><a href=\"#核心源码\" class=\"headerlink\" title=\"核心源码\"></a>核心源码</h3><p>这里将源码稍微做了一些改动，大致如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSubscription &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../utils/Subscription&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ReactReduxContext</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">createContext</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Provider</span>(<span class=\"params\">&#123; store, context, children &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> contextValue = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> subscription = <span class=\"title function_\">createSubscription</span>(store)</span><br><span class=\"line\">    subscription.<span class=\"property\">onStateChange</span> = subscription.<span class=\"property\">notifyNestedSubs</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      store,</span><br><span class=\"line\">      subscription,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [store])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> previousState = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> store.<span class=\"title function_\">getState</span>(), [store])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useLayoutEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; subscription &#125; = contextValue</span><br><span class=\"line\">    subscription.<span class=\"title function_\">trySubscribe</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (previousState !== store.<span class=\"title function_\">getState</span>()) &#123;</span><br><span class=\"line\">      subscription.<span class=\"title function_\">notifyNestedSubs</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      subscription.<span class=\"title function_\">tryUnsubscribe</span>()</span><br><span class=\"line\">      subscription.<span class=\"property\">onStateChange</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [contextValue, previousState])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title class_\">ReactReduxContext</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;contextValue&#125;</span>&gt;</span>&#123;children&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Provider</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ReactReduxContext\"><a href=\"#ReactReduxContext\" class=\"headerlink\" title=\"ReactReduxContext\"></a>ReactReduxContext</h4><p>React Redux内部创建的context便是<code>ReactReduxContext</code>，并且这个context也被导出了，代码中可以直接使用</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ReactReduxContext</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyConnectedComponent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; store &#125; = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">ReactReduxContext</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ReactReduxContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;(&#123; store &#125;) =&gt; &#123; &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ReactReduxContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"contextValue\"><a href=\"#contextValue\" class=\"headerlink\" title=\"contextValue\"></a>contextValue</h4><p>contextValue是一个对象，结构如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  subscription:&#123;</span><br><span class=\"line\">    addNestedSub,</span><br><span class=\"line\">    notifyNestedSubs,</span><br><span class=\"line\">    handleChangeWrapper,</span><br><span class=\"line\">    isSubscribed,</span><br><span class=\"line\">    trySubscribe,</span><br><span class=\"line\">    tryUnsubscribe,</span><br><span class=\"line\">    getListeners: () =&gt; listeners,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个对象简而言之，是在store之外增加了一层自己的订阅。</p>\n<p>Provider的代码比较简单，它主要做了这几件事情：</p>\n<ul>\n<li>创建一个context</li>\n<li>创建一个subscription</li>\n<li>将redux store与subscription设置为context的value</li>\n<li>订阅store，当store发生变化时执行<code>subscription.onStateChange</code></li>\n</ul>\n<p>需要注意的是，当前<code>subscription</code>的<code>onStateChange</code>尚未设置。因此仅有<code>Provider</code>,是无法更新组件的。</p>\n<p>直到有组件调用<code>connect</code>,context中的<code>subscription</code>才真正有了自己的价值。</p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>总结下来，<strong>Provider的源码对我们理解React Redux核心原理的价值不大</strong>，真正的核心实现在<code>connect</code>中。</p>\n<p>但是，它的源码埋了一个<strong>伏笔</strong>——React Redux为何要费尽再搞一个subscription进行订阅？</p>\n","length":4262,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第8天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>React Redux8已经使用了React18的<code>useSyncExternalStore</code>，不过还未完成，代码中还。因此本系列将从React Redux 7开始，等8正式出来后再进行比较。关于<code>uSES</code>的用法可以参考<a href=\"https://juejin.cn/post/7056588815170813965\" title=\"https://juejin.cn/post/7056588815170813965\">前文</a><a href=\"https://juejin.cn/post/7056588815170813965\" title=\"https://juejin.cn/post/7056588815170813965\">juejin.cn&#x2F;post&#x2F;705658…</a></p>\n<p>React Redux中核心api也不多，关键的两个是<code>Provider</code>和<code>connect</code>。本系列从<code>Provider</code>开始，看看React Redux到底是如何运行的。</p>\n<h2 id=\"React-Redux是如何触发更新的\"><a href=\"#React-Redux是如何触发更新的\" class=\"headerlink\" title=\"React Redux是如何触发更新的\"></a>React Redux是如何触发更新的</h2><p>分析源码必须带着问题，React Redux解决的核心问题就是触发react组件的更新。</p>\n<p>先来一段简单的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Provider</span>, connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../react-redux&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//创建store</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reducer</span> = (<span class=\"params\">state, action</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;ADD&#x27;</span>:</span><br><span class=\"line\">      state.<span class=\"property\">list</span>.<span class=\"title function_\">push</span>(action.<span class=\"property\">payload</span>)</span><br><span class=\"line\">      state.<span class=\"property\">list</span> = [...state.<span class=\"property\">list</span>]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;CLEAR&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">list</span>: [] &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;DELETE&#x27;</span>:</span><br><span class=\"line\">      state.<span class=\"property\">list</span>.<span class=\"title function_\">splice</span>(action.<span class=\"property\">payload</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state &#125;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer, &#123; <span class=\"attr\">list</span>: [<span class=\"string\">&#x27;read&#x27;</span>] &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 外层组件</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">IndexPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">TestWrap</span> <span class=\"attr\">name</span>=<span class=\"string\">&#123;</span>&#x27;<span class=\"attr\">TODO</span> <span class=\"attr\">LIST</span>&#x27;&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TestWrap</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Test</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>name:&#123;props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>&#123;props.list.map(item =&gt; <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>)&#125;<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> props.add(&#x27;eat&#x27;)&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> props.clear()&#125;&gt;clear<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapStateToProps</span>(<span class=\"params\">state, props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">list</span>: state.<span class=\"property\">list</span>, ...props &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">add</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;ADD&#x27;</span>, <span class=\"attr\">payload</span>: item &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">clear</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CLEAR&#x27;</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TestWrap</span> = <span class=\"title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"title class_\">Test</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/0d3e7a37ccb24c51bcfdc875f442774b.png\" alt=\"image.png\"></p>\n<p>这段代码的效果是：点击*+_按钮会增加一条todo，点击_clear*会清空。</p>\n<p>Test组件中调用的<code>dispatch</code>，就是redux store的dispatch方法，这个方法会触发store的更新，但并不能导致组件更新。React Redux中将组件与store进行衔接的api，首当其冲的就是<code>Provider</code></p>\n<h2 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"Provider\"></a>Provider</h2><p>大家都知道React Redux使用了<code>context</code>api，而Provider组件就是react context与 redux store的一个衔接点。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>Provider可以传入一个context对象和一个redux store。大多数时候我们都不必指定context，因为它内部会自己创建一个。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">context</span>=<span class=\"string\">&#123;MyContext&#125;</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心源码\"><a href=\"#核心源码\" class=\"headerlink\" title=\"核心源码\"></a>核心源码</h3><p>这里将源码稍微做了一些改动，大致如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSubscription &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../utils/Subscription&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ReactReduxContext</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">createContext</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Provider</span>(<span class=\"params\">&#123; store, context, children &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> contextValue = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> subscription = <span class=\"title function_\">createSubscription</span>(store)</span><br><span class=\"line\">    subscription.<span class=\"property\">onStateChange</span> = subscription.<span class=\"property\">notifyNestedSubs</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      store,</span><br><span class=\"line\">      subscription,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [store])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> previousState = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> store.<span class=\"title function_\">getState</span>(), [store])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useLayoutEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; subscription &#125; = contextValue</span><br><span class=\"line\">    subscription.<span class=\"title function_\">trySubscribe</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (previousState !== store.<span class=\"title function_\">getState</span>()) &#123;</span><br><span class=\"line\">      subscription.<span class=\"title function_\">notifyNestedSubs</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      subscription.<span class=\"title function_\">tryUnsubscribe</span>()</span><br><span class=\"line\">      subscription.<span class=\"property\">onStateChange</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [contextValue, previousState])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title class_\">ReactReduxContext</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;contextValue&#125;</span>&gt;</span>&#123;children&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Provider</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ReactReduxContext\"><a href=\"#ReactReduxContext\" class=\"headerlink\" title=\"ReactReduxContext\"></a>ReactReduxContext</h4><p>React Redux内部创建的context便是<code>ReactReduxContext</code>，并且这个context也被导出了，代码中可以直接使用</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ReactReduxContext</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyConnectedComponent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; store &#125; = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">ReactReduxContext</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ReactReduxContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;(&#123; store &#125;) =&gt; &#123; &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ReactReduxContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"contextValue\"><a href=\"#contextValue\" class=\"headerlink\" title=\"contextValue\"></a>contextValue</h4><p>contextValue是一个对象，结构如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  subscription:&#123;</span><br><span class=\"line\">    addNestedSub,</span><br><span class=\"line\">    notifyNestedSubs,</span><br><span class=\"line\">    handleChangeWrapper,</span><br><span class=\"line\">    isSubscribed,</span><br><span class=\"line\">    trySubscribe,</span><br><span class=\"line\">    tryUnsubscribe,</span><br><span class=\"line\">    getListeners: () =&gt; listeners,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个对象简而言之，是在store之外增加了一层自己的订阅。</p>\n<p>Provider的代码比较简单，它主要做了这几件事情：</p>\n<ul>\n<li>创建一个context</li>\n<li>创建一个subscription</li>\n<li>将redux store与subscription设置为context的value</li>\n<li>订阅store，当store发生变化时执行<code>subscription.onStateChange</code></li>\n</ul>\n<p>需要注意的是，当前<code>subscription</code>的<code>onStateChange</code>尚未设置。因此仅有<code>Provider</code>,是无法更新组件的。</p>\n<p>直到有组件调用<code>connect</code>,context中的<code>subscription</code>才真正有了自己的价值。</p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>总结下来，<strong>Provider的源码对我们理解React Redux核心原理的价值不大</strong>，真正的核心实现在<code>connect</code>中。</p>\n<p>但是，它的源码埋了一个<strong>伏笔</strong>——React Redux为何要费尽再搞一个subscription进行订阅？</p>\n"},{"title":"React-Redux7源码解析——connect","date":"2022-01-26T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第10天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n前文分析了Provider的源码，以及用Context全局状态管理的问题，本文将进入connect的源码，看看react-redux是如何解决这些问题的。\n\nconnect\n-------\n\nconnect的核心代码在connectAdvanced.js中：\n\n```jsx\nexport default function connectAdvanced(...) {\n    ...\n    return function wrapWithConnect(WrappedComponent){\n        ...\n        function ConnectFunction(props) {\n            ...\n            const renderedChild = useMemo(() => {\n                if (shouldHandleStateChanges) {\n                    return (\n                        <ContextToUse.Provider value={overriddenContextValue}>\n                          {renderedWrappedComponent}\n                        </ContextToUse.Provider>\n                    )\n                }\n                return renderedWrappedComponent\n            }, [ContextToUse, renderedWrappedComponent, overriddenContextValue])\n                \n            return renderedChild\n        }\n        const Connect = pure ? React.memo(ConnectFunction) : ConnectFunction\n        ...\n        return hoistStatics(Connect, WrappedComponent)\n    \n    }\n\n}\n```\n\n这里有几个函数和变量：\n\n*   wrapWithConnect:`connect()`返回的高阶组件。_高阶组件是参数为组件，返回值为新组件的函数_\n*   ConnectFunction：`connect()(WrappedComponent)`返回的真正组件\n*   shouldHandleStateChanges: `connect`可以传递4个参数： `mapStateToProps`,`mapDispatchToProps`, `mergeProps`,`options`。如果没有传递`mapStateToProps`，意味着这个组件对store中的state没有依赖，也就不需要处理state变更后的组件更新。而如果传递了这个参数，那么当state变更后，就需要触发这个组件的更新。\n*   ContextToUse：默认情况下它的值就是ReactReduxContext\n*   overriddenContextValue：默认情况下是下面这个对象：首先获取到Provider中创建的context value，然后创建了一个新的subscription\n\n```ini\nconst contextValue = useContext(ContextToUse)\n...\n{\n  ...contextValue,\n  subscription,\n}\n```\n\n*   hoistStatics： 这个函数是将WrappedComponent上的static方法传递到Connect组件上\n\n可以connect将组件包在了Context的Provider中：每个被connect的组件都单独在一个Context.Provider中，虽然这个方法可以破解Context的全局更新，但是并不必要，这个设计有这另一个目的。\n\n```xml\n<ContextToUse.Provider value={overriddenContextValue}>\n  {renderedWrappedComponent}\n</ContextToUse.Provider>\n```\n\n如果监听到store变化，在组件中调用类似`forceUpdate`的方法，也能做到局部的re-render。\n\n如何触发更新\n------\n\n在ConnectFunction中有这样一段代码\n\n```js\n   function ConnectFunction(props) {\n       ...\n       // Our re-subscribe logic only runs when the store/subscription setup changes\n       useIsomorphicLayoutEffectWithArgs(\n        subscribeUpdates,\n        [\n          shouldHandleStateChanges,\n          store,\n          subscription,\n          childPropsSelector,\n          lastWrapperProps,\n          lastChildProps,\n          renderIsScheduled,\n          childPropsFromStoreUpdate,\n          notifyNestedSubs,\n          forceComponentUpdateDispatch,\n        ],\n        [store, subscription, childPropsSelector]\n      )\n       ...\n   }\n\n```\n\n它相当于\n\n```scss\nuseLayoutEffect(()=>{\n    subscribeUpdates( \n        shouldHandleStateChanges,\n        store,\n        subscription,\n        childPropsSelector,\n        lastWrapperProps,\n        lastChildProps,\n        renderIsScheduled,\n        childPropsFromStoreUpdate,\n        notifyNestedSubs,\n        forceComponentUpdateDispatch\n    )\n},[store, subscription, childPropsSelector])\n```\n\n其中subscribeUpdates的执行是得组件订阅了store中state的变化：\n\n```js\nfunction subscribeUpdates(...){\n    \n    ...\n    const checkForUpdates = () => {\n         forceComponentUpdateDispatch({\n            type: 'STORE_UPDATED',\n            payload: {\n              error,\n            },\n         })\n    }\n    subscription.onStateChange = checkForUpdates\n    subscription.trySubscribe()\n    ...\n}\n```\n\n`subscription.trySubscribe`是将`subscription.onStateChange`挂入redux store的listeners中，当相应到变化后使用forceComponentUpdateDispatch进行组件更新，这个函数是`useReducer`返回的一个dispatch，它每次调用都会改变`useReducer`中的state，从而**触发了组件更新**。\n\n```scss\nfunction storeStateUpdatesReducer(state, action) {\n  const [, updateCount] = state\n  return [action.payload, updateCount + 1]\n}\n\nconst [,forceComponentUpdateDispatch,] = useReducer(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates)\n```\n\n为什么设计多层嵌套的Context.Provider\n--------------------------\n\n这个设计得从一个api说起：useContext\n\n### useContext\n\n```ini\nconst value = useContext(MyContext);\n```\n\n这个api返回的是最近的一个Context.Provider的value值\n\n> Accepts a context object (the value returned from `React.createContext`) and returns the current context value for that context. The current context value is determined by the `value` prop of the nearest `<MyContext.Provider>` above the calling component in the tree.\n\n结合createSubscription和connect中subscribeUpdates的源码：\n\n```js\n// 这里可以传一个父级的subscription\nfunction createSubscription(store, parentSub) {\n    function notifyNestedSubs() {\n      listeners.notify()\n    }\n    // 当传入了parentSub时，传入的listener是挂在parentSub，而不是store上的\n    function trySubscribe() {\n    if (!unsubscribe) {\n      unsubscribe = parentSub\n        ? parentSub.addNestedSub(handleChangeWrapper)\n        : store.subscribe(handleChangeWrapper)\n\n      listeners = createListenerCollection()\n    }\n  }\n  ...\n}\n\nconst checkForUpdates = () => {\n    // If the child props haven't changed, nothing to do here - cascade the subscription update\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs()\n      }\n    }\n}\n```\n\n当connect的组件中计算出的props没有变化，也即这个父组件本身不需要更新，那么就调用子组件的更新判断。\n\n这个设计能够让我们避免一种重复更新的情况：\n\n如果每个组件单独监听store的改变并强制re-render，那么当父组件更新时，子组件机会因为父组件的更新而更新，也会因为自身监听到state的改变而更新。\n\nuseSelector\n-----------\n\n在useSelector的源码中也有相似的触发更新的方法，\n\n```js\nconst [, forceRender] = useReducer((s) => s + 1, 0)\n...\nfunction checkForUpdates() {\n    ...\n     forceRender()\n}\n```\n\n但是useSelector中无法再包裹Context.Provider，因此如果这个组件的子组件也使用了useSelector，那么可能会出现父子组件同时被forceRender的情况，造成子组件被渲染两次。\n\n图中Author是Paragraph的子组件，并且都用到了store中的颜色，当改变颜色是，触发了两次forceRender。\n\n![image.png](../imgs/79fe9b3629fa4bda83dcb76fa774fa3a.png)\n\n但重复渲染，因为react自身也有更新合并。如果要测试这个特性，可以将forceRender套在flushSync中\n\n```js\n flushSync(()=>{ forceRender()})\n```\n\n![image.png](../imgs/6e0b1b1548574754a0e3b59abe3996b7.png)\n\n总结\n--\n\nreact-redux不仅基于Context将redux与react结合了起来，并且还进行了各种性能优化，其中最精彩的便是全局状态和局部更新的协调，因此不要被它源码中随处可见的useMemo、props比较，`unstable_batchedUpdates`一叶蔽目而不见森林。","source":"_posts/React-Redux7源码解析——connect.md","raw":"---\n title: \"React-Redux7源码解析——connect\"\n date: 2022-01-27\n tags: [源码,React.js]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第10天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n前文分析了Provider的源码，以及用Context全局状态管理的问题，本文将进入connect的源码，看看react-redux是如何解决这些问题的。\n\nconnect\n-------\n\nconnect的核心代码在connectAdvanced.js中：\n\n```jsx\nexport default function connectAdvanced(...) {\n    ...\n    return function wrapWithConnect(WrappedComponent){\n        ...\n        function ConnectFunction(props) {\n            ...\n            const renderedChild = useMemo(() => {\n                if (shouldHandleStateChanges) {\n                    return (\n                        <ContextToUse.Provider value={overriddenContextValue}>\n                          {renderedWrappedComponent}\n                        </ContextToUse.Provider>\n                    )\n                }\n                return renderedWrappedComponent\n            }, [ContextToUse, renderedWrappedComponent, overriddenContextValue])\n                \n            return renderedChild\n        }\n        const Connect = pure ? React.memo(ConnectFunction) : ConnectFunction\n        ...\n        return hoistStatics(Connect, WrappedComponent)\n    \n    }\n\n}\n```\n\n这里有几个函数和变量：\n\n*   wrapWithConnect:`connect()`返回的高阶组件。_高阶组件是参数为组件，返回值为新组件的函数_\n*   ConnectFunction：`connect()(WrappedComponent)`返回的真正组件\n*   shouldHandleStateChanges: `connect`可以传递4个参数： `mapStateToProps`,`mapDispatchToProps`, `mergeProps`,`options`。如果没有传递`mapStateToProps`，意味着这个组件对store中的state没有依赖，也就不需要处理state变更后的组件更新。而如果传递了这个参数，那么当state变更后，就需要触发这个组件的更新。\n*   ContextToUse：默认情况下它的值就是ReactReduxContext\n*   overriddenContextValue：默认情况下是下面这个对象：首先获取到Provider中创建的context value，然后创建了一个新的subscription\n\n```ini\nconst contextValue = useContext(ContextToUse)\n...\n{\n  ...contextValue,\n  subscription,\n}\n```\n\n*   hoistStatics： 这个函数是将WrappedComponent上的static方法传递到Connect组件上\n\n可以connect将组件包在了Context的Provider中：每个被connect的组件都单独在一个Context.Provider中，虽然这个方法可以破解Context的全局更新，但是并不必要，这个设计有这另一个目的。\n\n```xml\n<ContextToUse.Provider value={overriddenContextValue}>\n  {renderedWrappedComponent}\n</ContextToUse.Provider>\n```\n\n如果监听到store变化，在组件中调用类似`forceUpdate`的方法，也能做到局部的re-render。\n\n如何触发更新\n------\n\n在ConnectFunction中有这样一段代码\n\n```js\n   function ConnectFunction(props) {\n       ...\n       // Our re-subscribe logic only runs when the store/subscription setup changes\n       useIsomorphicLayoutEffectWithArgs(\n        subscribeUpdates,\n        [\n          shouldHandleStateChanges,\n          store,\n          subscription,\n          childPropsSelector,\n          lastWrapperProps,\n          lastChildProps,\n          renderIsScheduled,\n          childPropsFromStoreUpdate,\n          notifyNestedSubs,\n          forceComponentUpdateDispatch,\n        ],\n        [store, subscription, childPropsSelector]\n      )\n       ...\n   }\n\n```\n\n它相当于\n\n```scss\nuseLayoutEffect(()=>{\n    subscribeUpdates( \n        shouldHandleStateChanges,\n        store,\n        subscription,\n        childPropsSelector,\n        lastWrapperProps,\n        lastChildProps,\n        renderIsScheduled,\n        childPropsFromStoreUpdate,\n        notifyNestedSubs,\n        forceComponentUpdateDispatch\n    )\n},[store, subscription, childPropsSelector])\n```\n\n其中subscribeUpdates的执行是得组件订阅了store中state的变化：\n\n```js\nfunction subscribeUpdates(...){\n    \n    ...\n    const checkForUpdates = () => {\n         forceComponentUpdateDispatch({\n            type: 'STORE_UPDATED',\n            payload: {\n              error,\n            },\n         })\n    }\n    subscription.onStateChange = checkForUpdates\n    subscription.trySubscribe()\n    ...\n}\n```\n\n`subscription.trySubscribe`是将`subscription.onStateChange`挂入redux store的listeners中，当相应到变化后使用forceComponentUpdateDispatch进行组件更新，这个函数是`useReducer`返回的一个dispatch，它每次调用都会改变`useReducer`中的state，从而**触发了组件更新**。\n\n```scss\nfunction storeStateUpdatesReducer(state, action) {\n  const [, updateCount] = state\n  return [action.payload, updateCount + 1]\n}\n\nconst [,forceComponentUpdateDispatch,] = useReducer(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates)\n```\n\n为什么设计多层嵌套的Context.Provider\n--------------------------\n\n这个设计得从一个api说起：useContext\n\n### useContext\n\n```ini\nconst value = useContext(MyContext);\n```\n\n这个api返回的是最近的一个Context.Provider的value值\n\n> Accepts a context object (the value returned from `React.createContext`) and returns the current context value for that context. The current context value is determined by the `value` prop of the nearest `<MyContext.Provider>` above the calling component in the tree.\n\n结合createSubscription和connect中subscribeUpdates的源码：\n\n```js\n// 这里可以传一个父级的subscription\nfunction createSubscription(store, parentSub) {\n    function notifyNestedSubs() {\n      listeners.notify()\n    }\n    // 当传入了parentSub时，传入的listener是挂在parentSub，而不是store上的\n    function trySubscribe() {\n    if (!unsubscribe) {\n      unsubscribe = parentSub\n        ? parentSub.addNestedSub(handleChangeWrapper)\n        : store.subscribe(handleChangeWrapper)\n\n      listeners = createListenerCollection()\n    }\n  }\n  ...\n}\n\nconst checkForUpdates = () => {\n    // If the child props haven't changed, nothing to do here - cascade the subscription update\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs()\n      }\n    }\n}\n```\n\n当connect的组件中计算出的props没有变化，也即这个父组件本身不需要更新，那么就调用子组件的更新判断。\n\n这个设计能够让我们避免一种重复更新的情况：\n\n如果每个组件单独监听store的改变并强制re-render，那么当父组件更新时，子组件机会因为父组件的更新而更新，也会因为自身监听到state的改变而更新。\n\nuseSelector\n-----------\n\n在useSelector的源码中也有相似的触发更新的方法，\n\n```js\nconst [, forceRender] = useReducer((s) => s + 1, 0)\n...\nfunction checkForUpdates() {\n    ...\n     forceRender()\n}\n```\n\n但是useSelector中无法再包裹Context.Provider，因此如果这个组件的子组件也使用了useSelector，那么可能会出现父子组件同时被forceRender的情况，造成子组件被渲染两次。\n\n图中Author是Paragraph的子组件，并且都用到了store中的颜色，当改变颜色是，触发了两次forceRender。\n\n![image.png](../imgs/79fe9b3629fa4bda83dcb76fa774fa3a.png)\n\n但重复渲染，因为react自身也有更新合并。如果要测试这个特性，可以将forceRender套在flushSync中\n\n```js\n flushSync(()=>{ forceRender()})\n```\n\n![image.png](../imgs/6e0b1b1548574754a0e3b59abe3996b7.png)\n\n总结\n--\n\nreact-redux不仅基于Context将redux与react结合了起来，并且还进行了各种性能优化，其中最精彩的便是全局状态和局部更新的协调，因此不要被它源码中随处可见的useMemo、props比较，`unstable_batchedUpdates`一叶蔽目而不见森林。","slug":"React-Redux7源码解析——connect","published":1,"updated":"2024-04-04T15:27:03.652Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhm001ihajf6su7g17u","content":"<p>「这是我参与2022首次更文挑战的第10天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>前文分析了Provider的源码，以及用Context全局状态管理的问题，本文将进入connect的源码，看看react-redux是如何解决这些问题的。</p>\n<h2 id=\"connect\"><a href=\"#connect\" class=\"headerlink\" title=\"connect\"></a>connect</h2><p>connect的核心代码在connectAdvanced.js中：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">connectAdvanced</span>(<span class=\"params\">...</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">wrapWithConnect</span>(<span class=\"params\">WrappedComponent</span>)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">ConnectFunction</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"keyword\">const</span> renderedChild = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (shouldHandleStateChanges) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ContextToUse.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;overriddenContextValue&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                          &#123;renderedWrappedComponent&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                        <span class=\"tag\">&lt;/<span class=\"name\">ContextToUse.Provider</span>&gt;</span></span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> renderedWrappedComponent</span><br><span class=\"line\">            &#125;, [<span class=\"title class_\">ContextToUse</span>, renderedWrappedComponent, overriddenContextValue])</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"keyword\">return</span> renderedChild</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title class_\">Connect</span> = pure ? <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"title class_\">ConnectFunction</span>) : <span class=\"title class_\">ConnectFunction</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">hoistStatics</span>(<span class=\"title class_\">Connect</span>, <span class=\"title class_\">WrappedComponent</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里有几个函数和变量：</p>\n<ul>\n<li>wrapWithConnect:<code>connect()</code>返回的高阶组件。<em>高阶组件是参数为组件，返回值为新组件的函数</em></li>\n<li>ConnectFunction：<code>connect()(WrappedComponent)</code>返回的真正组件</li>\n<li>shouldHandleStateChanges: <code>connect</code>可以传递4个参数： <code>mapStateToProps</code>,<code>mapDispatchToProps</code>, <code>mergeProps</code>,<code>options</code>。如果没有传递<code>mapStateToProps</code>，意味着这个组件对store中的state没有依赖，也就不需要处理state变更后的组件更新。而如果传递了这个参数，那么当state变更后，就需要触发这个组件的更新。</li>\n<li>ContextToUse：默认情况下它的值就是ReactReduxContext</li>\n<li>overriddenContextValue：默认情况下是下面这个对象：首先获取到Provider中创建的context value，然后创建了一个新的subscription</li>\n</ul>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">contextValue</span> = useContext(ContextToUse)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...contextValue,</span><br><span class=\"line\">  subscription,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>hoistStatics： 这个函数是将WrappedComponent上的static方法传递到Connect组件上</li>\n</ul>\n<p>可以connect将组件包在了Context的Provider中：每个被connect的组件都单独在一个Context.Provider中，虽然这个方法可以破解Context的全局更新，但是并不必要，这个设计有这另一个目的。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ContextToUse.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;overriddenContextValue&#125;</span>&gt;</span></span><br><span class=\"line\">  &#123;renderedWrappedComponent&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ContextToUse.Provider</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果监听到store变化，在组件中调用类似<code>forceUpdate</code>的方法，也能做到局部的re-render。</p>\n<h2 id=\"如何触发更新\"><a href=\"#如何触发更新\" class=\"headerlink\" title=\"如何触发更新\"></a>如何触发更新</h2><p>在ConnectFunction中有这样一段代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ConnectFunction</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// Our re-subscribe logic only runs when the store/subscription setup changes</span></span><br><span class=\"line\">    <span class=\"title function_\">useIsomorphicLayoutEffectWithArgs</span>(</span><br><span class=\"line\">     subscribeUpdates,</span><br><span class=\"line\">     [</span><br><span class=\"line\">       shouldHandleStateChanges,</span><br><span class=\"line\">       store,</span><br><span class=\"line\">       subscription,</span><br><span class=\"line\">       childPropsSelector,</span><br><span class=\"line\">       lastWrapperProps,</span><br><span class=\"line\">       lastChildProps,</span><br><span class=\"line\">       renderIsScheduled,</span><br><span class=\"line\">       childPropsFromStoreUpdate,</span><br><span class=\"line\">       notifyNestedSubs,</span><br><span class=\"line\">       forceComponentUpdateDispatch,</span><br><span class=\"line\">     ],</span><br><span class=\"line\">     [store, subscription, childPropsSelector]</span><br><span class=\"line\">   )</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>它相当于</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">useLayoutEffect</span>(()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">subscribeUpdates</span>( </span><br><span class=\"line\">        shouldHandleStateChanges,</span><br><span class=\"line\">        store,</span><br><span class=\"line\">        subscription,</span><br><span class=\"line\">        childPropsSelector,</span><br><span class=\"line\">        lastWrapperProps,</span><br><span class=\"line\">        lastChildProps,</span><br><span class=\"line\">        renderIsScheduled,</span><br><span class=\"line\">        childPropsFromStoreUpdate,</span><br><span class=\"line\">        notifyNestedSubs,</span><br><span class=\"line\">        forceComponentUpdateDispatch</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;,<span class=\"selector-attr\">[store, subscription, childPropsSelector]</span>)</span><br></pre></td></tr></table></figure>\n\n<p>其中subscribeUpdates的执行是得组件订阅了store中state的变化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">subscribeUpdates</span>(<span class=\"params\">...</span>)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">checkForUpdates</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">         <span class=\"title function_\">forceComponentUpdateDispatch</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;STORE_UPDATED&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">payload</span>: &#123;</span><br><span class=\"line\">              error,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    subscription.<span class=\"property\">onStateChange</span> = checkForUpdates</span><br><span class=\"line\">    subscription.<span class=\"title function_\">trySubscribe</span>()</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>subscription.trySubscribe</code>是将<code>subscription.onStateChange</code>挂入redux store的listeners中，当相应到变化后使用forceComponentUpdateDispatch进行组件更新，这个函数是<code>useReducer</code>返回的一个dispatch，它每次调用都会改变<code>useReducer</code>中的state，从而<strong>触发了组件更新</strong>。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"built_in\">storeStateUpdatesReducer</span>(state, action) &#123;</span><br><span class=\"line\">  const <span class=\"selector-attr\">[, updateCount]</span> = state</span><br><span class=\"line\">  return <span class=\"selector-attr\">[action.payload, updateCount + 1]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const <span class=\"selector-attr\">[,forceComponentUpdateDispatch,]</span> = <span class=\"built_in\">useReducer</span>(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为什么设计多层嵌套的Context-Provider\"><a href=\"#为什么设计多层嵌套的Context-Provider\" class=\"headerlink\" title=\"为什么设计多层嵌套的Context.Provider\"></a>为什么设计多层嵌套的Context.Provider</h2><p>这个设计得从一个api说起：useContext</p>\n<h3 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">value</span> = useContext(MyContext)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个api返回的是最近的一个Context.Provider的value值</p>\n<blockquote>\n<p>Accepts a context object (the value returned from <code>React.createContext</code>) and returns the current context value for that context. The current context value is determined by the <code>value</code> prop of the nearest <code>&lt;MyContext.Provider&gt;</code> above the calling component in the tree.</p>\n</blockquote>\n<p>结合createSubscription和connect中subscribeUpdates的源码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里可以传一个父级的subscription</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createSubscription</span>(<span class=\"params\">store, parentSub</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">notifyNestedSubs</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      listeners.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当传入了parentSub时，传入的listener是挂在parentSub，而不是store上的</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">trySubscribe</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!unsubscribe) &#123;</span><br><span class=\"line\">      unsubscribe = parentSub</span><br><span class=\"line\">        ? parentSub.<span class=\"title function_\">addNestedSub</span>(handleChangeWrapper)</span><br><span class=\"line\">        : store.<span class=\"title function_\">subscribe</span>(handleChangeWrapper)</span><br><span class=\"line\"></span><br><span class=\"line\">      listeners = <span class=\"title function_\">createListenerCollection</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">checkForUpdates</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// If the child props haven&#x27;t changed, nothing to do here - cascade the subscription update</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newChildProps === lastChildProps.<span class=\"property\">current</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!renderIsScheduled.<span class=\"property\">current</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">notifyNestedSubs</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当connect的组件中计算出的props没有变化，也即这个父组件本身不需要更新，那么就调用子组件的更新判断。</p>\n<p>这个设计能够让我们避免一种重复更新的情况：</p>\n<p>如果每个组件单独监听store的改变并强制re-render，那么当父组件更新时，子组件机会因为父组件的更新而更新，也会因为自身监听到state的改变而更新。</p>\n<h2 id=\"useSelector\"><a href=\"#useSelector\" class=\"headerlink\" title=\"useSelector\"></a>useSelector</h2><p>在useSelector的源码中也有相似的触发更新的方法，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [, forceRender] = <span class=\"title function_\">useReducer</span>(<span class=\"function\">(<span class=\"params\">s</span>) =&gt;</span> s + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkForUpdates</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">     <span class=\"title function_\">forceRender</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是useSelector中无法再包裹Context.Provider，因此如果这个组件的子组件也使用了useSelector，那么可能会出现父子组件同时被forceRender的情况，造成子组件被渲染两次。</p>\n<p>图中Author是Paragraph的子组件，并且都用到了store中的颜色，当改变颜色是，触发了两次forceRender。</p>\n<p><img src=\"/../imgs/79fe9b3629fa4bda83dcb76fa774fa3a.png\" alt=\"image.png\"></p>\n<p>但重复渲染，因为react自身也有更新合并。如果要测试这个特性，可以将forceRender套在flushSync中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">flushSync</span>(<span class=\"function\">()=&gt;</span>&#123; <span class=\"title function_\">forceRender</span>()&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/6e0b1b1548574754a0e3b59abe3996b7.png\" alt=\"image.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>react-redux不仅基于Context将redux与react结合了起来，并且还进行了各种性能优化，其中最精彩的便是全局状态和局部更新的协调，因此不要被它源码中随处可见的useMemo、props比较，<code>unstable_batchedUpdates</code>一叶蔽目而不见森林。</p>\n","length":4988,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第10天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>前文分析了Provider的源码，以及用Context全局状态管理的问题，本文将进入connect的源码，看看react-redux是如何解决这些问题的。</p>\n<h2 id=\"connect\"><a href=\"#connect\" class=\"headerlink\" title=\"connect\"></a>connect</h2><p>connect的核心代码在connectAdvanced.js中：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">connectAdvanced</span>(<span class=\"params\">...</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">wrapWithConnect</span>(<span class=\"params\">WrappedComponent</span>)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">ConnectFunction</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"keyword\">const</span> renderedChild = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (shouldHandleStateChanges) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ContextToUse.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;overriddenContextValue&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                          &#123;renderedWrappedComponent&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                        <span class=\"tag\">&lt;/<span class=\"name\">ContextToUse.Provider</span>&gt;</span></span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> renderedWrappedComponent</span><br><span class=\"line\">            &#125;, [<span class=\"title class_\">ContextToUse</span>, renderedWrappedComponent, overriddenContextValue])</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"keyword\">return</span> renderedChild</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title class_\">Connect</span> = pure ? <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"title class_\">ConnectFunction</span>) : <span class=\"title class_\">ConnectFunction</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">hoistStatics</span>(<span class=\"title class_\">Connect</span>, <span class=\"title class_\">WrappedComponent</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里有几个函数和变量：</p>\n<ul>\n<li>wrapWithConnect:<code>connect()</code>返回的高阶组件。<em>高阶组件是参数为组件，返回值为新组件的函数</em></li>\n<li>ConnectFunction：<code>connect()(WrappedComponent)</code>返回的真正组件</li>\n<li>shouldHandleStateChanges: <code>connect</code>可以传递4个参数： <code>mapStateToProps</code>,<code>mapDispatchToProps</code>, <code>mergeProps</code>,<code>options</code>。如果没有传递<code>mapStateToProps</code>，意味着这个组件对store中的state没有依赖，也就不需要处理state变更后的组件更新。而如果传递了这个参数，那么当state变更后，就需要触发这个组件的更新。</li>\n<li>ContextToUse：默认情况下它的值就是ReactReduxContext</li>\n<li>overriddenContextValue：默认情况下是下面这个对象：首先获取到Provider中创建的context value，然后创建了一个新的subscription</li>\n</ul>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">contextValue</span> = useContext(ContextToUse)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...contextValue,</span><br><span class=\"line\">  subscription,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>hoistStatics： 这个函数是将WrappedComponent上的static方法传递到Connect组件上</li>\n</ul>\n<p>可以connect将组件包在了Context的Provider中：每个被connect的组件都单独在一个Context.Provider中，虽然这个方法可以破解Context的全局更新，但是并不必要，这个设计有这另一个目的。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ContextToUse.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;overriddenContextValue&#125;</span>&gt;</span></span><br><span class=\"line\">  &#123;renderedWrappedComponent&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ContextToUse.Provider</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果监听到store变化，在组件中调用类似<code>forceUpdate</code>的方法，也能做到局部的re-render。</p>\n<h2 id=\"如何触发更新\"><a href=\"#如何触发更新\" class=\"headerlink\" title=\"如何触发更新\"></a>如何触发更新</h2><p>在ConnectFunction中有这样一段代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ConnectFunction</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// Our re-subscribe logic only runs when the store/subscription setup changes</span></span><br><span class=\"line\">    <span class=\"title function_\">useIsomorphicLayoutEffectWithArgs</span>(</span><br><span class=\"line\">     subscribeUpdates,</span><br><span class=\"line\">     [</span><br><span class=\"line\">       shouldHandleStateChanges,</span><br><span class=\"line\">       store,</span><br><span class=\"line\">       subscription,</span><br><span class=\"line\">       childPropsSelector,</span><br><span class=\"line\">       lastWrapperProps,</span><br><span class=\"line\">       lastChildProps,</span><br><span class=\"line\">       renderIsScheduled,</span><br><span class=\"line\">       childPropsFromStoreUpdate,</span><br><span class=\"line\">       notifyNestedSubs,</span><br><span class=\"line\">       forceComponentUpdateDispatch,</span><br><span class=\"line\">     ],</span><br><span class=\"line\">     [store, subscription, childPropsSelector]</span><br><span class=\"line\">   )</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>它相当于</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">useLayoutEffect</span>(()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">subscribeUpdates</span>( </span><br><span class=\"line\">        shouldHandleStateChanges,</span><br><span class=\"line\">        store,</span><br><span class=\"line\">        subscription,</span><br><span class=\"line\">        childPropsSelector,</span><br><span class=\"line\">        lastWrapperProps,</span><br><span class=\"line\">        lastChildProps,</span><br><span class=\"line\">        renderIsScheduled,</span><br><span class=\"line\">        childPropsFromStoreUpdate,</span><br><span class=\"line\">        notifyNestedSubs,</span><br><span class=\"line\">        forceComponentUpdateDispatch</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;,<span class=\"selector-attr\">[store, subscription, childPropsSelector]</span>)</span><br></pre></td></tr></table></figure>\n\n<p>其中subscribeUpdates的执行是得组件订阅了store中state的变化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">subscribeUpdates</span>(<span class=\"params\">...</span>)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">checkForUpdates</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">         <span class=\"title function_\">forceComponentUpdateDispatch</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;STORE_UPDATED&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">payload</span>: &#123;</span><br><span class=\"line\">              error,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    subscription.<span class=\"property\">onStateChange</span> = checkForUpdates</span><br><span class=\"line\">    subscription.<span class=\"title function_\">trySubscribe</span>()</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>subscription.trySubscribe</code>是将<code>subscription.onStateChange</code>挂入redux store的listeners中，当相应到变化后使用forceComponentUpdateDispatch进行组件更新，这个函数是<code>useReducer</code>返回的一个dispatch，它每次调用都会改变<code>useReducer</code>中的state，从而<strong>触发了组件更新</strong>。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"built_in\">storeStateUpdatesReducer</span>(state, action) &#123;</span><br><span class=\"line\">  const <span class=\"selector-attr\">[, updateCount]</span> = state</span><br><span class=\"line\">  return <span class=\"selector-attr\">[action.payload, updateCount + 1]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const <span class=\"selector-attr\">[,forceComponentUpdateDispatch,]</span> = <span class=\"built_in\">useReducer</span>(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为什么设计多层嵌套的Context-Provider\"><a href=\"#为什么设计多层嵌套的Context-Provider\" class=\"headerlink\" title=\"为什么设计多层嵌套的Context.Provider\"></a>为什么设计多层嵌套的Context.Provider</h2><p>这个设计得从一个api说起：useContext</p>\n<h3 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">value</span> = useContext(MyContext)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个api返回的是最近的一个Context.Provider的value值</p>\n<blockquote>\n<p>Accepts a context object (the value returned from <code>React.createContext</code>) and returns the current context value for that context. The current context value is determined by the <code>value</code> prop of the nearest <code>&lt;MyContext.Provider&gt;</code> above the calling component in the tree.</p>\n</blockquote>\n<p>结合createSubscription和connect中subscribeUpdates的源码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里可以传一个父级的subscription</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createSubscription</span>(<span class=\"params\">store, parentSub</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">notifyNestedSubs</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      listeners.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当传入了parentSub时，传入的listener是挂在parentSub，而不是store上的</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">trySubscribe</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!unsubscribe) &#123;</span><br><span class=\"line\">      unsubscribe = parentSub</span><br><span class=\"line\">        ? parentSub.<span class=\"title function_\">addNestedSub</span>(handleChangeWrapper)</span><br><span class=\"line\">        : store.<span class=\"title function_\">subscribe</span>(handleChangeWrapper)</span><br><span class=\"line\"></span><br><span class=\"line\">      listeners = <span class=\"title function_\">createListenerCollection</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">checkForUpdates</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// If the child props haven&#x27;t changed, nothing to do here - cascade the subscription update</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newChildProps === lastChildProps.<span class=\"property\">current</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!renderIsScheduled.<span class=\"property\">current</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">notifyNestedSubs</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当connect的组件中计算出的props没有变化，也即这个父组件本身不需要更新，那么就调用子组件的更新判断。</p>\n<p>这个设计能够让我们避免一种重复更新的情况：</p>\n<p>如果每个组件单独监听store的改变并强制re-render，那么当父组件更新时，子组件机会因为父组件的更新而更新，也会因为自身监听到state的改变而更新。</p>\n<h2 id=\"useSelector\"><a href=\"#useSelector\" class=\"headerlink\" title=\"useSelector\"></a>useSelector</h2><p>在useSelector的源码中也有相似的触发更新的方法，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [, forceRender] = <span class=\"title function_\">useReducer</span>(<span class=\"function\">(<span class=\"params\">s</span>) =&gt;</span> s + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkForUpdates</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">     <span class=\"title function_\">forceRender</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是useSelector中无法再包裹Context.Provider，因此如果这个组件的子组件也使用了useSelector，那么可能会出现父子组件同时被forceRender的情况，造成子组件被渲染两次。</p>\n<p>图中Author是Paragraph的子组件，并且都用到了store中的颜色，当改变颜色是，触发了两次forceRender。</p>\n<p><img src=\"/../imgs/79fe9b3629fa4bda83dcb76fa774fa3a.png\" alt=\"image.png\"></p>\n<p>但重复渲染，因为react自身也有更新合并。如果要测试这个特性，可以将forceRender套在flushSync中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">flushSync</span>(<span class=\"function\">()=&gt;</span>&#123; <span class=\"title function_\">forceRender</span>()&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/6e0b1b1548574754a0e3b59abe3996b7.png\" alt=\"image.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>react-redux不仅基于Context将redux与react结合了起来，并且还进行了各种性能优化，其中最精彩的便是全局状态和局部更新的协调，因此不要被它源码中随处可见的useMemo、props比较，<code>unstable_batchedUpdates</code>一叶蔽目而不见森林。</p>\n"},{"title":"React18中的新特性——Automatic batching","date":"2022-01-21T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第5天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n从一道经典面试题开始——setState是同步的还是异步的\n-----------------------------\n\n曾有一段时间，这道题目几乎成为了react面试的必问题。\n\n很多人都知道答案：在React的生命周期、合成事件中它是异步的；但是在异步事件、原生事件中，又是同步的\n\n但这个答案仅仅是表象。\n\n这个问题的根源是React或者Vue这种，由数据驱动视图的框架必须回答的一道命题——当数据改变时，如何减少渲染次数。\n\n而这两个框架选择了截然不同的答案。Vue选择了异步更新。而React则是同步更新，合并state：也即setState触发生命周期的流转，但直到调用render前，才对state进行合并，从而表现出“异步”。然而在异步事件或原生事件脱离了react的掌控，没有开启批量更新，从而表现出同步，因此说setState“异步”，是一定要打上引号的。\n\n但是2022年，有经验的面试官不会再问这道题了，因为React18中不会再出现这种既同步又“异步”的怪异现象了。\n\nReact18中的Automatic batching\n---------------------------\n\n在React18中，如果是调用`ReactDOM.createRoot(rootElement).render(<App />);`渲染根组件的话，将会开启Automatic batching。\n\n### 什么是batching\n\nbatching就是合并re-render。\n\n在React17或更早的版本中，下面的代码只会触发一次re-render。\n\n```javascript\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [flag, setFlag] = useState(false);\n\n  function handleClick() {\n    setCount(c => c + 1); // Does not re-render yet\n    setFlag(f => !f); // Does not re-render yet\n    // React will only re-render once at the end (that's batching!)\n  }\n\n  return (\n    <div>\n      <button onClick={handleClick}>Next</button>\n      <h1 style={{ color: flag ? \"blue\" : \"black\" }}>{count}</h1>\n    </div>\n  );\n}\n```\n\n但是在下面这段代码中，会触发两次： 虽然合成事件onClick的callback会开启batch,但是setCount和setFlag是在这个callback之后执行的(而不是在batching期间),因此会触发两次re-render。\n\n```javascript\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [flag, setFlag] = useState(false);\n\n  function handleClick() {\n    fetchSomething().then(() => {\n      setCount(c => c + 1); // Causes a re-render\n      setFlag(f => !f); // Causes a re-render\n    });\n  }\n\n  return (\n    <div>\n      <button onClick={handleClick}>Next</button>\n      <h1 style={{ color: flag ? \"blue\" : \"black\" }}>{count}</h1>\n    </div>\n  );\n}\n```\n\n### 什么是automatic batching\n\n如果你的根组件渲染是通过`ReactDOM.createRoot(...).render(...)`，那么在下面的代码中，两次改变state只会触发一次re-render，即使它们在promise、setTimeout或原生事件中。\n\n```javascript\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [flag, setFlag] = useState(false);\n\n  function handleClick() {\n    fetchSomething().then(() => {\n      // React 18 and later DOES batch these:\n      setCount(c => c + 1);\n      setFlag(f => !f);\n      // React will only re-render once at the end (that's batching!)\n    });\n  }\n\n  return (\n    <div>\n      <button onClick={handleClick}>Next</button>\n      <h1 style={{ color: flag ? \"blue\" : \"black\" }}>{count}</h1>\n    </div>\n  );\n}\n```\n\n### React18中如何关闭Automatic batching\n\n*   方案一： `ReactDOM.render(<App />, rootElement);`：只有`createRoot`才能开启批量更新\n*   方案二：使用react-dom的`flushSync`\n\n```scss\nimport { flushSync } from 'react-dom'; // Note: react-dom, not react\n\nfunction handleClick() {\n  flushSync(() => {\n    setCounter(c => c + 1);\n  });\n  // React has updated the DOM by now\n  flushSync(() => {\n    setFlag(f => !f);\n  });\n  // React has updated the DOM by now\n}\n```","source":"_posts/React18中的新特性——Automatic batching.md","raw":"---\n title: \"React18中的新特性——Automatic batching\"\n date: 2022-01-22\n tags: [前端,React.js]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第5天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n从一道经典面试题开始——setState是同步的还是异步的\n-----------------------------\n\n曾有一段时间，这道题目几乎成为了react面试的必问题。\n\n很多人都知道答案：在React的生命周期、合成事件中它是异步的；但是在异步事件、原生事件中，又是同步的\n\n但这个答案仅仅是表象。\n\n这个问题的根源是React或者Vue这种，由数据驱动视图的框架必须回答的一道命题——当数据改变时，如何减少渲染次数。\n\n而这两个框架选择了截然不同的答案。Vue选择了异步更新。而React则是同步更新，合并state：也即setState触发生命周期的流转，但直到调用render前，才对state进行合并，从而表现出“异步”。然而在异步事件或原生事件脱离了react的掌控，没有开启批量更新，从而表现出同步，因此说setState“异步”，是一定要打上引号的。\n\n但是2022年，有经验的面试官不会再问这道题了，因为React18中不会再出现这种既同步又“异步”的怪异现象了。\n\nReact18中的Automatic batching\n---------------------------\n\n在React18中，如果是调用`ReactDOM.createRoot(rootElement).render(<App />);`渲染根组件的话，将会开启Automatic batching。\n\n### 什么是batching\n\nbatching就是合并re-render。\n\n在React17或更早的版本中，下面的代码只会触发一次re-render。\n\n```javascript\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [flag, setFlag] = useState(false);\n\n  function handleClick() {\n    setCount(c => c + 1); // Does not re-render yet\n    setFlag(f => !f); // Does not re-render yet\n    // React will only re-render once at the end (that's batching!)\n  }\n\n  return (\n    <div>\n      <button onClick={handleClick}>Next</button>\n      <h1 style={{ color: flag ? \"blue\" : \"black\" }}>{count}</h1>\n    </div>\n  );\n}\n```\n\n但是在下面这段代码中，会触发两次： 虽然合成事件onClick的callback会开启batch,但是setCount和setFlag是在这个callback之后执行的(而不是在batching期间),因此会触发两次re-render。\n\n```javascript\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [flag, setFlag] = useState(false);\n\n  function handleClick() {\n    fetchSomething().then(() => {\n      setCount(c => c + 1); // Causes a re-render\n      setFlag(f => !f); // Causes a re-render\n    });\n  }\n\n  return (\n    <div>\n      <button onClick={handleClick}>Next</button>\n      <h1 style={{ color: flag ? \"blue\" : \"black\" }}>{count}</h1>\n    </div>\n  );\n}\n```\n\n### 什么是automatic batching\n\n如果你的根组件渲染是通过`ReactDOM.createRoot(...).render(...)`，那么在下面的代码中，两次改变state只会触发一次re-render，即使它们在promise、setTimeout或原生事件中。\n\n```javascript\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [flag, setFlag] = useState(false);\n\n  function handleClick() {\n    fetchSomething().then(() => {\n      // React 18 and later DOES batch these:\n      setCount(c => c + 1);\n      setFlag(f => !f);\n      // React will only re-render once at the end (that's batching!)\n    });\n  }\n\n  return (\n    <div>\n      <button onClick={handleClick}>Next</button>\n      <h1 style={{ color: flag ? \"blue\" : \"black\" }}>{count}</h1>\n    </div>\n  );\n}\n```\n\n### React18中如何关闭Automatic batching\n\n*   方案一： `ReactDOM.render(<App />, rootElement);`：只有`createRoot`才能开启批量更新\n*   方案二：使用react-dom的`flushSync`\n\n```scss\nimport { flushSync } from 'react-dom'; // Note: react-dom, not react\n\nfunction handleClick() {\n  flushSync(() => {\n    setCounter(c => c + 1);\n  });\n  // React has updated the DOM by now\n  flushSync(() => {\n    setFlag(f => !f);\n  });\n  // React has updated the DOM by now\n}\n```","slug":"React18中的新特性——Automatic batching","published":1,"updated":"2024-04-04T15:27:03.669Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhm001mhajf3qs21njd","content":"<p>「这是我参与2022首次更文挑战的第5天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"从一道经典面试题开始——setState是同步的还是异步的\"><a href=\"#从一道经典面试题开始——setState是同步的还是异步的\" class=\"headerlink\" title=\"从一道经典面试题开始——setState是同步的还是异步的\"></a>从一道经典面试题开始——setState是同步的还是异步的</h2><p>曾有一段时间，这道题目几乎成为了react面试的必问题。</p>\n<p>很多人都知道答案：在React的生命周期、合成事件中它是异步的；但是在异步事件、原生事件中，又是同步的</p>\n<p>但这个答案仅仅是表象。</p>\n<p>这个问题的根源是React或者Vue这种，由数据驱动视图的框架必须回答的一道命题——当数据改变时，如何减少渲染次数。</p>\n<p>而这两个框架选择了截然不同的答案。Vue选择了异步更新。而React则是同步更新，合并state：也即setState触发生命周期的流转，但直到调用render前，才对state进行合并，从而表现出“异步”。然而在异步事件或原生事件脱离了react的掌控，没有开启批量更新，从而表现出同步，因此说setState“异步”，是一定要打上引号的。</p>\n<p>但是2022年，有经验的面试官不会再问这道题了，因为React18中不会再出现这种既同步又“异步”的怪异现象了。</p>\n<h2 id=\"React18中的Automatic-batching\"><a href=\"#React18中的Automatic-batching\" class=\"headerlink\" title=\"React18中的Automatic batching\"></a>React18中的Automatic batching</h2><p>在React18中，如果是调用<code>ReactDOM.createRoot(rootElement).render(&lt;App /&gt;);</code>渲染根组件的话，将会开启Automatic batching。</p>\n<h3 id=\"什么是batching\"><a href=\"#什么是batching\" class=\"headerlink\" title=\"什么是batching\"></a>什么是batching</h3><p>batching就是合并re-render。</p>\n<p>在React17或更早的版本中，下面的代码只会触发一次re-render。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [flag, setFlag] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c + <span class=\"number\">1</span>); <span class=\"comment\">// Does not re-render yet</span></span><br><span class=\"line\">    <span class=\"title function_\">setFlag</span>(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> !f); <span class=\"comment\">// Does not re-render yet</span></span><br><span class=\"line\">    <span class=\"comment\">// React will only re-render once at the end (that&#x27;s batching!)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span>Next<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> <span class=\"attr\">flag</span> ? &quot;<span class=\"attr\">blue</span>&quot; <span class=\"attr\">:</span> &quot;<span class=\"attr\">black</span>&quot; &#125;&#125;&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是在下面这段代码中，会触发两次： 虽然合成事件onClick的callback会开启batch,但是setCount和setFlag是在这个callback之后执行的(而不是在batching期间),因此会触发两次re-render。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [flag, setFlag] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fetchSomething</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setCount</span>(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c + <span class=\"number\">1</span>); <span class=\"comment\">// Causes a re-render</span></span><br><span class=\"line\">      <span class=\"title function_\">setFlag</span>(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> !f); <span class=\"comment\">// Causes a re-render</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span>Next<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> <span class=\"attr\">flag</span> ? &quot;<span class=\"attr\">blue</span>&quot; <span class=\"attr\">:</span> &quot;<span class=\"attr\">black</span>&quot; &#125;&#125;&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么是automatic-batching\"><a href=\"#什么是automatic-batching\" class=\"headerlink\" title=\"什么是automatic batching\"></a>什么是automatic batching</h3><p>如果你的根组件渲染是通过<code>ReactDOM.createRoot(...).render(...)</code>，那么在下面的代码中，两次改变state只会触发一次re-render，即使它们在promise、setTimeout或原生事件中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [flag, setFlag] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fetchSomething</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// React 18 and later DOES batch these:</span></span><br><span class=\"line\">      <span class=\"title function_\">setCount</span>(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c + <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"title function_\">setFlag</span>(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> !f);</span><br><span class=\"line\">      <span class=\"comment\">// React will only re-render once at the end (that&#x27;s batching!)</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span>Next<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> <span class=\"attr\">flag</span> ? &quot;<span class=\"attr\">blue</span>&quot; <span class=\"attr\">:</span> &quot;<span class=\"attr\">black</span>&quot; &#125;&#125;&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"React18中如何关闭Automatic-batching\"><a href=\"#React18中如何关闭Automatic-batching\" class=\"headerlink\" title=\"React18中如何关闭Automatic batching\"></a>React18中如何关闭Automatic batching</h3><ul>\n<li>方案一： <code>ReactDOM.render(&lt;App /&gt;, rootElement);</code>：只有<code>createRoot</code>才能开启批量更新</li>\n<li>方案二：使用react-dom的<code>flushSync</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; flushSync &#125; from &#x27;react-dom&#x27;; <span class=\"comment\">// <span class=\"doctag\">Note:</span> react-dom, not react</span></span><br><span class=\"line\"></span><br><span class=\"line\">function <span class=\"built_in\">handleClick</span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">flushSync</span>(() =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setCounter</span>(c =&gt; c + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// React has updated the DOM by now</span></span><br><span class=\"line\">  <span class=\"built_in\">flushSync</span>(() =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setFlag</span>(f =&gt; !f);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// React has updated the DOM by now</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","length":2814,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第5天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"从一道经典面试题开始——setState是同步的还是异步的\"><a href=\"#从一道经典面试题开始——setState是同步的还是异步的\" class=\"headerlink\" title=\"从一道经典面试题开始——setState是同步的还是异步的\"></a>从一道经典面试题开始——setState是同步的还是异步的</h2><p>曾有一段时间，这道题目几乎成为了react面试的必问题。</p>\n<p>很多人都知道答案：在React的生命周期、合成事件中它是异步的；但是在异步事件、原生事件中，又是同步的</p>\n<p>但这个答案仅仅是表象。</p>\n<p>这个问题的根源是React或者Vue这种，由数据驱动视图的框架必须回答的一道命题——当数据改变时，如何减少渲染次数。</p>\n<p>而这两个框架选择了截然不同的答案。Vue选择了异步更新。而React则是同步更新，合并state：也即setState触发生命周期的流转，但直到调用render前，才对state进行合并，从而表现出“异步”。然而在异步事件或原生事件脱离了react的掌控，没有开启批量更新，从而表现出同步，因此说setState“异步”，是一定要打上引号的。</p>\n<p>但是2022年，有经验的面试官不会再问这道题了，因为React18中不会再出现这种既同步又“异步”的怪异现象了。</p>\n<h2 id=\"React18中的Automatic-batching\"><a href=\"#React18中的Automatic-batching\" class=\"headerlink\" title=\"React18中的Automatic batching\"></a>React18中的Automatic batching</h2><p>在React18中，如果是调用<code>ReactDOM.createRoot(rootElement).render(&lt;App /&gt;);</code>渲染根组件的话，将会开启Automatic batching。</p>\n<h3 id=\"什么是batching\"><a href=\"#什么是batching\" class=\"headerlink\" title=\"什么是batching\"></a>什么是batching</h3><p>batching就是合并re-render。</p>\n<p>在React17或更早的版本中，下面的代码只会触发一次re-render。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [flag, setFlag] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c + <span class=\"number\">1</span>); <span class=\"comment\">// Does not re-render yet</span></span><br><span class=\"line\">    <span class=\"title function_\">setFlag</span>(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> !f); <span class=\"comment\">// Does not re-render yet</span></span><br><span class=\"line\">    <span class=\"comment\">// React will only re-render once at the end (that&#x27;s batching!)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span>Next<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> <span class=\"attr\">flag</span> ? &quot;<span class=\"attr\">blue</span>&quot; <span class=\"attr\">:</span> &quot;<span class=\"attr\">black</span>&quot; &#125;&#125;&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是在下面这段代码中，会触发两次： 虽然合成事件onClick的callback会开启batch,但是setCount和setFlag是在这个callback之后执行的(而不是在batching期间),因此会触发两次re-render。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [flag, setFlag] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fetchSomething</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setCount</span>(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c + <span class=\"number\">1</span>); <span class=\"comment\">// Causes a re-render</span></span><br><span class=\"line\">      <span class=\"title function_\">setFlag</span>(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> !f); <span class=\"comment\">// Causes a re-render</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span>Next<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> <span class=\"attr\">flag</span> ? &quot;<span class=\"attr\">blue</span>&quot; <span class=\"attr\">:</span> &quot;<span class=\"attr\">black</span>&quot; &#125;&#125;&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么是automatic-batching\"><a href=\"#什么是automatic-batching\" class=\"headerlink\" title=\"什么是automatic batching\"></a>什么是automatic batching</h3><p>如果你的根组件渲染是通过<code>ReactDOM.createRoot(...).render(...)</code>，那么在下面的代码中，两次改变state只会触发一次re-render，即使它们在promise、setTimeout或原生事件中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [flag, setFlag] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fetchSomething</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// React 18 and later DOES batch these:</span></span><br><span class=\"line\">      <span class=\"title function_\">setCount</span>(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c + <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"title function_\">setFlag</span>(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> !f);</span><br><span class=\"line\">      <span class=\"comment\">// React will only re-render once at the end (that&#x27;s batching!)</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span>Next<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> <span class=\"attr\">flag</span> ? &quot;<span class=\"attr\">blue</span>&quot; <span class=\"attr\">:</span> &quot;<span class=\"attr\">black</span>&quot; &#125;&#125;&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"React18中如何关闭Automatic-batching\"><a href=\"#React18中如何关闭Automatic-batching\" class=\"headerlink\" title=\"React18中如何关闭Automatic batching\"></a>React18中如何关闭Automatic batching</h3><ul>\n<li>方案一： <code>ReactDOM.render(&lt;App /&gt;, rootElement);</code>：只有<code>createRoot</code>才能开启批量更新</li>\n<li>方案二：使用react-dom的<code>flushSync</code></li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; flushSync &#125; from &#x27;react-dom&#x27;; <span class=\"comment\">// <span class=\"doctag\">Note:</span> react-dom, not react</span></span><br><span class=\"line\"></span><br><span class=\"line\">function <span class=\"built_in\">handleClick</span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">flushSync</span>(() =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setCounter</span>(c =&gt; c + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// React has updated the DOM by now</span></span><br><span class=\"line\">  <span class=\"built_in\">flushSync</span>(() =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setFlag</span>(f =&gt; !f);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// React has updated the DOM by now</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"React18中的新特性——startTransition","date":"2022-01-22T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第6天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n`startTransition`\n-----------------\n\n为了构建感觉流畅且响应迅速的应用程序，React18引入了一个新的api：`startTransition`。这个api能够将部分更新标记为_transitions_，将其从_urgent_（紧急）更新中区分出来。\n\n用法\n--\n\n```javascript\nimport { useTransition } from 'react';\n...\nconst [isPending, startTransition] = useTransition();\n`startTransition`中的更新是同步执行的，(() => {\n  setSearchQuery(input);\n});\n```\n\n在`startTransition`中的更新都被视为_非紧急更新_，如果更新期间出现了用户输入、点击等紧急更新，_transitions_会被中断并挂起，等待紧急更新完成后继续执行。并且React会将抛弃过期的渲染工作，仅渲染最新的更新。 我们可以使用`isPending`来判断是否挂起，并给用户一个提示（比如loading）\n\nUrgent updates和Transition updates\n---------------------------------\n\nReact中将状态更新氛围两类：**紧急更新（Urgent updates）**和**过渡更新（Transition updates）**。\n\n*   Urgent updates：代表用户交互，比如输入和点击等\n*   Transition updates： UI视图的切换\n\n比如有一个学生列表和过滤条件：\n\n![image.png](../imgs/fb1bc2b58f4c4fc2a1af5cdec46e6e97.png)\n\n如果数据量非常大，或者list中每个item结构非常复杂，那么点击Switch时可能会有卡顿。\n\n在这个场景中， 当用户点击Switch触发的显示状态更新，是一个urgent update。而列表的筛选更新是一个transition update。\n\n（掘金好像不能上传视频，不过这里有个真实的案例：[github.com/reactwg/rea…](https://github.com%2Freactwg%2Freact-18%2Fdiscussions%2F65%25EF%25BC%2589 \"https://github.com/reactwg/react-18/discussions/65%EF%BC%89\")\n\n为什么不用防抖和节流\n----------\n\n很多时候我们可以通过防抖和节流减少更新的频率,这两种方式本质上都是通过setTimeout延迟更新。但是如果更新时用户仍然在输入，仍然可能卡住页面。 而`startTransition`中的更新是同步执行且可中断的：如果更新中又发生了用户输入实践，那么它会让浏览器在不同组件更新的小间隙去处理这些事件。","source":"_posts/React18中的新特性——startTransition.md","raw":"---\n title: \"React18中的新特性——startTransition\"\n date: 2022-01-23\n tags: [前端]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第6天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n`startTransition`\n-----------------\n\n为了构建感觉流畅且响应迅速的应用程序，React18引入了一个新的api：`startTransition`。这个api能够将部分更新标记为_transitions_，将其从_urgent_（紧急）更新中区分出来。\n\n用法\n--\n\n```javascript\nimport { useTransition } from 'react';\n...\nconst [isPending, startTransition] = useTransition();\n`startTransition`中的更新是同步执行的，(() => {\n  setSearchQuery(input);\n});\n```\n\n在`startTransition`中的更新都被视为_非紧急更新_，如果更新期间出现了用户输入、点击等紧急更新，_transitions_会被中断并挂起，等待紧急更新完成后继续执行。并且React会将抛弃过期的渲染工作，仅渲染最新的更新。 我们可以使用`isPending`来判断是否挂起，并给用户一个提示（比如loading）\n\nUrgent updates和Transition updates\n---------------------------------\n\nReact中将状态更新氛围两类：**紧急更新（Urgent updates）**和**过渡更新（Transition updates）**。\n\n*   Urgent updates：代表用户交互，比如输入和点击等\n*   Transition updates： UI视图的切换\n\n比如有一个学生列表和过滤条件：\n\n![image.png](../imgs/fb1bc2b58f4c4fc2a1af5cdec46e6e97.png)\n\n如果数据量非常大，或者list中每个item结构非常复杂，那么点击Switch时可能会有卡顿。\n\n在这个场景中， 当用户点击Switch触发的显示状态更新，是一个urgent update。而列表的筛选更新是一个transition update。\n\n（掘金好像不能上传视频，不过这里有个真实的案例：[github.com/reactwg/rea…](https://github.com%2Freactwg%2Freact-18%2Fdiscussions%2F65%25EF%25BC%2589 \"https://github.com/reactwg/react-18/discussions/65%EF%BC%89\")\n\n为什么不用防抖和节流\n----------\n\n很多时候我们可以通过防抖和节流减少更新的频率,这两种方式本质上都是通过setTimeout延迟更新。但是如果更新时用户仍然在输入，仍然可能卡住页面。 而`startTransition`中的更新是同步执行且可中断的：如果更新中又发生了用户输入实践，那么它会让浏览器在不同组件更新的小间隙去处理这些事件。","slug":"React18中的新特性——startTransition","published":1,"updated":"2024-04-04T15:27:03.677Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhn001phajf7h27bey0","content":"<p>「这是我参与2022首次更文挑战的第6天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"startTransition\"><a href=\"#startTransition\" class=\"headerlink\" title=\"startTransition\"></a><code>startTransition</code></h2><p>为了构建感觉流畅且响应迅速的应用程序，React18引入了一个新的api：<code>startTransition</code>。这个api能够将部分更新标记为_transitions_，将其从_urgent_（紧急）更新中区分出来。</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useTransition &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> [isPending, startTransition] = <span class=\"title function_\">useTransition</span>();</span><br><span class=\"line\"><span class=\"string\">`startTransition`</span>中的更新是同步执行的，(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setSearchQuery</span>(input);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在<code>startTransition</code>中的更新都被视为_非紧急更新_，如果更新期间出现了用户输入、点击等紧急更新，_transitions_会被中断并挂起，等待紧急更新完成后继续执行。并且React会将抛弃过期的渲染工作，仅渲染最新的更新。 我们可以使用<code>isPending</code>来判断是否挂起，并给用户一个提示（比如loading）</p>\n<h2 id=\"Urgent-updates和Transition-updates\"><a href=\"#Urgent-updates和Transition-updates\" class=\"headerlink\" title=\"Urgent updates和Transition updates\"></a>Urgent updates和Transition updates</h2><p>React中将状态更新氛围两类：<strong>紧急更新（Urgent updates）</strong>和<strong>过渡更新（Transition updates）</strong>。</p>\n<ul>\n<li>Urgent updates：代表用户交互，比如输入和点击等</li>\n<li>Transition updates： UI视图的切换</li>\n</ul>\n<p>比如有一个学生列表和过滤条件：</p>\n<p><img src=\"/../imgs/fb1bc2b58f4c4fc2a1af5cdec46e6e97.png\" alt=\"image.png\"></p>\n<p>如果数据量非常大，或者list中每个item结构非常复杂，那么点击Switch时可能会有卡顿。</p>\n<p>在这个场景中， 当用户点击Switch触发的显示状态更新，是一个urgent update。而列表的筛选更新是一个transition update。</p>\n<p>（掘金好像不能上传视频，不过这里有个真实的案例：<a href=\"https://github.com%2Freactwg%2Freact-18%2Fdiscussions%2F65%25EF%25BC%2589\" title=\"https://github.com/reactwg/react-18/discussions/65%EF%BC%89\">github.com&#x2F;reactwg&#x2F;rea…</a></p>\n<h2 id=\"为什么不用防抖和节流\"><a href=\"#为什么不用防抖和节流\" class=\"headerlink\" title=\"为什么不用防抖和节流\"></a>为什么不用防抖和节流</h2><p>很多时候我们可以通过防抖和节流减少更新的频率,这两种方式本质上都是通过setTimeout延迟更新。但是如果更新时用户仍然在输入，仍然可能卡住页面。 而<code>startTransition</code>中的更新是同步执行且可中断的：如果更新中又发生了用户输入实践，那么它会让浏览器在不同组件更新的小间隙去处理这些事件。</p>\n","length":997,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第6天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"startTransition\"><a href=\"#startTransition\" class=\"headerlink\" title=\"startTransition\"></a><code>startTransition</code></h2><p>为了构建感觉流畅且响应迅速的应用程序，React18引入了一个新的api：<code>startTransition</code>。这个api能够将部分更新标记为_transitions_，将其从_urgent_（紧急）更新中区分出来。</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useTransition &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> [isPending, startTransition] = <span class=\"title function_\">useTransition</span>();</span><br><span class=\"line\"><span class=\"string\">`startTransition`</span>中的更新是同步执行的，(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setSearchQuery</span>(input);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在<code>startTransition</code>中的更新都被视为_非紧急更新_，如果更新期间出现了用户输入、点击等紧急更新，_transitions_会被中断并挂起，等待紧急更新完成后继续执行。并且React会将抛弃过期的渲染工作，仅渲染最新的更新。 我们可以使用<code>isPending</code>来判断是否挂起，并给用户一个提示（比如loading）</p>\n<h2 id=\"Urgent-updates和Transition-updates\"><a href=\"#Urgent-updates和Transition-updates\" class=\"headerlink\" title=\"Urgent updates和Transition updates\"></a>Urgent updates和Transition updates</h2><p>React中将状态更新氛围两类：<strong>紧急更新（Urgent updates）</strong>和<strong>过渡更新（Transition updates）</strong>。</p>\n<ul>\n<li>Urgent updates：代表用户交互，比如输入和点击等</li>\n<li>Transition updates： UI视图的切换</li>\n</ul>\n<p>比如有一个学生列表和过滤条件：</p>\n<p><img src=\"/../imgs/fb1bc2b58f4c4fc2a1af5cdec46e6e97.png\" alt=\"image.png\"></p>\n<p>如果数据量非常大，或者list中每个item结构非常复杂，那么点击Switch时可能会有卡顿。</p>\n<p>在这个场景中， 当用户点击Switch触发的显示状态更新，是一个urgent update。而列表的筛选更新是一个transition update。</p>\n<p>（掘金好像不能上传视频，不过这里有个真实的案例：<a href=\"https://github.com%2Freactwg%2Freact-18%2Fdiscussions%2F65%25EF%25BC%2589\" title=\"https://github.com/reactwg/react-18/discussions/65%EF%BC%89\">github.com&#x2F;reactwg&#x2F;rea…</a></p>\n<h2 id=\"为什么不用防抖和节流\"><a href=\"#为什么不用防抖和节流\" class=\"headerlink\" title=\"为什么不用防抖和节流\"></a>为什么不用防抖和节流</h2><p>很多时候我们可以通过防抖和节流减少更新的频率,这两种方式本质上都是通过setTimeout延迟更新。但是如果更新时用户仍然在输入，仍然可能卡住页面。 而<code>startTransition</code>中的更新是同步执行且可中断的：如果更新中又发生了用户输入实践，那么它会让浏览器在不同组件更新的小间隙去处理这些事件。</p>\n"},{"title":"React18中的新特性——useSyncExternalStore","date":"2022-01-23T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第7天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nReact18的beta版本将`useMutableSource`更新为了`useSyncExternalStore`，这个新的api将会对React的各种状态管理库产生非常大的影响，本文将介绍`useSyncExternalStore`的用法和场景\n\nReact状态管理库的核心命题\n---------------\n\n对于React的状态管理库来说，它的首要问题不是如何改变状态，而是如何触发更新。\n\n不管是Mobx的observable，还是Redux的单向数据流，它们本身并不会绑定使用的框架或场景，因此不能直接用在React或其他MV\\*框架上。于是有了mobx-react和react-redux，将数据管理方案与react相结合。不管是那种数据管理方案，都一定会提供数据变更的观测方式，而观测到数据变更后如何更新，是这些react状态管理的核心命题。\n\n在react中主动触发更新，无非是通过forceUpdate（Mobx）或setState。而其他比如change props，context，也都衍生与setState，因此可以看到react-redux5中，可以看到它为了触发更新，创建了一个dumb state（一个空对象`{}`）。\n\n而React18对这个命题给出一个官方答案：`useSyncExternalStore`\n\nuseSyncExternalStore\n--------------------\n\n这个api可以基于外部store创建一个state：\n\n`const state = useSyncExternalStore(store.subscribe, ()=>store.getSnapshot().data);`\n\n传入的第一个参数是是一个订阅函数，react会传入一个listener，当数据发生改变时必须调用这个listener。\n\n第二个参数是获取store中state的方法，这里可以直接传`store.getSnapshot()`，也可以通过`()=>store.getSnapshot().data`进行select。\n\n基于useSyncExternalStore进行状态管理\n----------------------------\n\n我们可以通过这个api自行设计一个redux + react-redux的数据方案：\n\n### 设计store\n\n首先我们要设计一个store，它必须有如下属性：\n\n*   currentState:当前状态\n*   subscribe:提供状态发生变化时的订阅能力\n*   getSnapshot: 获取当前状态 以及改变state的方法，这里参考redux，设计了dispatch、reducer\n\n```javascript\nconst store = {\n    currentState:{data:0},\n    listeners:[],\n    reducer(action){\n        switch(action.type) {\n            case 'ADD':\n                return {data:store.currentState.data+1}\n            default:\n                return store.state\n        }\n    },\n    subscribe(l){\n        store.listeners.push(l)\n    },\n    getSnapshot() {\n        return store.currentState\n    },\n    dispatch(action) {\n        store.currentState = store.reducer(action)\n        store.listeners.forEach(l=>l())\n        return action;\n    }\n}\n```\n\n### 使用useSyncExternalStore创建state\n\n```javascript\nimport {useSyncExternalStore} from 'react';\n\nfunction Demo() {\n    const state = useSyncExternalStore(store.subscribe, ()=>store.getSnapshot().data);\n    \n    return <div className='p-100'>\n        <div>count:{state}</div>\n        <div>\n            <button onClick={()=>store.dispatch({type:'ADD'})}>add+</button>\n        </div>\n    </div>\n}\nexport default Demo\n```\n\n`useSyncExternalStore`会执行`store.subscribe`，并传入一个函数，当store中状态发生变更时，执行这个函数，便可以触发组件的更新。\n\n效果如下：\n\n![syncStore.gif](../imgs/90f63a48a6cc42b7aedab51da67cf398.png)","source":"_posts/React18中的新特性——useSyncExternalStore.md","raw":"---\n title: \"React18中的新特性——useSyncExternalStore\"\n date: 2022-01-24\n tags: [前端]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第7天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nReact18的beta版本将`useMutableSource`更新为了`useSyncExternalStore`，这个新的api将会对React的各种状态管理库产生非常大的影响，本文将介绍`useSyncExternalStore`的用法和场景\n\nReact状态管理库的核心命题\n---------------\n\n对于React的状态管理库来说，它的首要问题不是如何改变状态，而是如何触发更新。\n\n不管是Mobx的observable，还是Redux的单向数据流，它们本身并不会绑定使用的框架或场景，因此不能直接用在React或其他MV\\*框架上。于是有了mobx-react和react-redux，将数据管理方案与react相结合。不管是那种数据管理方案，都一定会提供数据变更的观测方式，而观测到数据变更后如何更新，是这些react状态管理的核心命题。\n\n在react中主动触发更新，无非是通过forceUpdate（Mobx）或setState。而其他比如change props，context，也都衍生与setState，因此可以看到react-redux5中，可以看到它为了触发更新，创建了一个dumb state（一个空对象`{}`）。\n\n而React18对这个命题给出一个官方答案：`useSyncExternalStore`\n\nuseSyncExternalStore\n--------------------\n\n这个api可以基于外部store创建一个state：\n\n`const state = useSyncExternalStore(store.subscribe, ()=>store.getSnapshot().data);`\n\n传入的第一个参数是是一个订阅函数，react会传入一个listener，当数据发生改变时必须调用这个listener。\n\n第二个参数是获取store中state的方法，这里可以直接传`store.getSnapshot()`，也可以通过`()=>store.getSnapshot().data`进行select。\n\n基于useSyncExternalStore进行状态管理\n----------------------------\n\n我们可以通过这个api自行设计一个redux + react-redux的数据方案：\n\n### 设计store\n\n首先我们要设计一个store，它必须有如下属性：\n\n*   currentState:当前状态\n*   subscribe:提供状态发生变化时的订阅能力\n*   getSnapshot: 获取当前状态 以及改变state的方法，这里参考redux，设计了dispatch、reducer\n\n```javascript\nconst store = {\n    currentState:{data:0},\n    listeners:[],\n    reducer(action){\n        switch(action.type) {\n            case 'ADD':\n                return {data:store.currentState.data+1}\n            default:\n                return store.state\n        }\n    },\n    subscribe(l){\n        store.listeners.push(l)\n    },\n    getSnapshot() {\n        return store.currentState\n    },\n    dispatch(action) {\n        store.currentState = store.reducer(action)\n        store.listeners.forEach(l=>l())\n        return action;\n    }\n}\n```\n\n### 使用useSyncExternalStore创建state\n\n```javascript\nimport {useSyncExternalStore} from 'react';\n\nfunction Demo() {\n    const state = useSyncExternalStore(store.subscribe, ()=>store.getSnapshot().data);\n    \n    return <div className='p-100'>\n        <div>count:{state}</div>\n        <div>\n            <button onClick={()=>store.dispatch({type:'ADD'})}>add+</button>\n        </div>\n    </div>\n}\nexport default Demo\n```\n\n`useSyncExternalStore`会执行`store.subscribe`，并传入一个函数，当store中状态发生变更时，执行这个函数，便可以触发组件的更新。\n\n效果如下：\n\n![syncStore.gif](../imgs/90f63a48a6cc42b7aedab51da67cf398.png)","slug":"React18中的新特性——useSyncExternalStore","published":1,"updated":"2024-04-04T15:27:03.686Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhn001thajf1c9ye3ov","content":"<p>「这是我参与2022首次更文挑战的第7天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>React18的beta版本将<code>useMutableSource</code>更新为了<code>useSyncExternalStore</code>，这个新的api将会对React的各种状态管理库产生非常大的影响，本文将介绍<code>useSyncExternalStore</code>的用法和场景</p>\n<h2 id=\"React状态管理库的核心命题\"><a href=\"#React状态管理库的核心命题\" class=\"headerlink\" title=\"React状态管理库的核心命题\"></a>React状态管理库的核心命题</h2><p>对于React的状态管理库来说，它的首要问题不是如何改变状态，而是如何触发更新。</p>\n<p>不管是Mobx的observable，还是Redux的单向数据流，它们本身并不会绑定使用的框架或场景，因此不能直接用在React或其他MV*框架上。于是有了mobx-react和react-redux，将数据管理方案与react相结合。不管是那种数据管理方案，都一定会提供数据变更的观测方式，而观测到数据变更后如何更新，是这些react状态管理的核心命题。</p>\n<p>在react中主动触发更新，无非是通过forceUpdate（Mobx）或setState。而其他比如change props，context，也都衍生与setState，因此可以看到react-redux5中，可以看到它为了触发更新，创建了一个dumb state（一个空对象<code>&#123;&#125;</code>）。</p>\n<p>而React18对这个命题给出一个官方答案：<code>useSyncExternalStore</code></p>\n<h2 id=\"useSyncExternalStore\"><a href=\"#useSyncExternalStore\" class=\"headerlink\" title=\"useSyncExternalStore\"></a>useSyncExternalStore</h2><p>这个api可以基于外部store创建一个state：</p>\n<p><code>const state = useSyncExternalStore(store.subscribe, ()=&gt;store.getSnapshot().data);</code></p>\n<p>传入的第一个参数是是一个订阅函数，react会传入一个listener，当数据发生改变时必须调用这个listener。</p>\n<p>第二个参数是获取store中state的方法，这里可以直接传<code>store.getSnapshot()</code>，也可以通过<code>()=&gt;store.getSnapshot().data</code>进行select。</p>\n<h2 id=\"基于useSyncExternalStore进行状态管理\"><a href=\"#基于useSyncExternalStore进行状态管理\" class=\"headerlink\" title=\"基于useSyncExternalStore进行状态管理\"></a>基于useSyncExternalStore进行状态管理</h2><p>我们可以通过这个api自行设计一个redux + react-redux的数据方案：</p>\n<h3 id=\"设计store\"><a href=\"#设计store\" class=\"headerlink\" title=\"设计store\"></a>设计store</h3><p>首先我们要设计一个store，它必须有如下属性：</p>\n<ul>\n<li>currentState:当前状态</li>\n<li>subscribe:提供状态发生变化时的订阅能力</li>\n<li>getSnapshot: 获取当前状态 以及改变state的方法，这里参考redux，设计了dispatch、reducer</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = &#123;</span><br><span class=\"line\">    <span class=\"attr\">currentState</span>:&#123;<span class=\"attr\">data</span>:<span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">    <span class=\"attr\">listeners</span>:[],</span><br><span class=\"line\">    <span class=\"title function_\">reducer</span>(<span class=\"params\">action</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;ADD&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;<span class=\"attr\">data</span>:store.<span class=\"property\">currentState</span>.<span class=\"property\">data</span>+<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">            <span class=\"attr\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> store.<span class=\"property\">state</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">subscribe</span>(<span class=\"params\">l</span>)&#123;</span><br><span class=\"line\">        store.<span class=\"property\">listeners</span>.<span class=\"title function_\">push</span>(l)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">getSnapshot</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> store.<span class=\"property\">currentState</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(<span class=\"params\">action</span>) &#123;</span><br><span class=\"line\">        store.<span class=\"property\">currentState</span> = store.<span class=\"title function_\">reducer</span>(action)</span><br><span class=\"line\">        store.<span class=\"property\">listeners</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">l</span>=&gt;</span><span class=\"title function_\">l</span>())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> action;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用useSyncExternalStore创建state\"><a href=\"#使用useSyncExternalStore创建state\" class=\"headerlink\" title=\"使用useSyncExternalStore创建state\"></a>使用useSyncExternalStore创建state</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;useSyncExternalStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Demo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state = <span class=\"title function_\">useSyncExternalStore</span>(store.<span class=\"property\">subscribe</span>, <span class=\"function\">()=&gt;</span>store.<span class=\"title function_\">getSnapshot</span>().<span class=\"property\">data</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;p-100&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>count:&#123;state&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>store.dispatch(&#123;type:&#x27;ADD&#x27;&#125;)&#125;&gt;add+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Demo</span></span><br></pre></td></tr></table></figure>\n\n<p><code>useSyncExternalStore</code>会执行<code>store.subscribe</code>，并传入一个函数，当store中状态发生变更时，执行这个函数，便可以触发组件的更新。</p>\n<p>效果如下：</p>\n<p><img src=\"/../imgs/90f63a48a6cc42b7aedab51da67cf398.png\" alt=\"syncStore.gif\"></p>\n","length":2083,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第7天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>React18的beta版本将<code>useMutableSource</code>更新为了<code>useSyncExternalStore</code>，这个新的api将会对React的各种状态管理库产生非常大的影响，本文将介绍<code>useSyncExternalStore</code>的用法和场景</p>\n<h2 id=\"React状态管理库的核心命题\"><a href=\"#React状态管理库的核心命题\" class=\"headerlink\" title=\"React状态管理库的核心命题\"></a>React状态管理库的核心命题</h2><p>对于React的状态管理库来说，它的首要问题不是如何改变状态，而是如何触发更新。</p>\n<p>不管是Mobx的observable，还是Redux的单向数据流，它们本身并不会绑定使用的框架或场景，因此不能直接用在React或其他MV*框架上。于是有了mobx-react和react-redux，将数据管理方案与react相结合。不管是那种数据管理方案，都一定会提供数据变更的观测方式，而观测到数据变更后如何更新，是这些react状态管理的核心命题。</p>\n<p>在react中主动触发更新，无非是通过forceUpdate（Mobx）或setState。而其他比如change props，context，也都衍生与setState，因此可以看到react-redux5中，可以看到它为了触发更新，创建了一个dumb state（一个空对象<code>&#123;&#125;</code>）。</p>\n<p>而React18对这个命题给出一个官方答案：<code>useSyncExternalStore</code></p>\n<h2 id=\"useSyncExternalStore\"><a href=\"#useSyncExternalStore\" class=\"headerlink\" title=\"useSyncExternalStore\"></a>useSyncExternalStore</h2><p>这个api可以基于外部store创建一个state：</p>\n<p><code>const state = useSyncExternalStore(store.subscribe, ()=&gt;store.getSnapshot().data);</code></p>\n<p>传入的第一个参数是是一个订阅函数，react会传入一个listener，当数据发生改变时必须调用这个listener。</p>\n<p>第二个参数是获取store中state的方法，这里可以直接传<code>store.getSnapshot()</code>，也可以通过<code>()=&gt;store.getSnapshot().data</code>进行select。</p>\n<h2 id=\"基于useSyncExternalStore进行状态管理\"><a href=\"#基于useSyncExternalStore进行状态管理\" class=\"headerlink\" title=\"基于useSyncExternalStore进行状态管理\"></a>基于useSyncExternalStore进行状态管理</h2><p>我们可以通过这个api自行设计一个redux + react-redux的数据方案：</p>\n<h3 id=\"设计store\"><a href=\"#设计store\" class=\"headerlink\" title=\"设计store\"></a>设计store</h3><p>首先我们要设计一个store，它必须有如下属性：</p>\n<ul>\n<li>currentState:当前状态</li>\n<li>subscribe:提供状态发生变化时的订阅能力</li>\n<li>getSnapshot: 获取当前状态 以及改变state的方法，这里参考redux，设计了dispatch、reducer</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = &#123;</span><br><span class=\"line\">    <span class=\"attr\">currentState</span>:&#123;<span class=\"attr\">data</span>:<span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">    <span class=\"attr\">listeners</span>:[],</span><br><span class=\"line\">    <span class=\"title function_\">reducer</span>(<span class=\"params\">action</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;ADD&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;<span class=\"attr\">data</span>:store.<span class=\"property\">currentState</span>.<span class=\"property\">data</span>+<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">            <span class=\"attr\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> store.<span class=\"property\">state</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">subscribe</span>(<span class=\"params\">l</span>)&#123;</span><br><span class=\"line\">        store.<span class=\"property\">listeners</span>.<span class=\"title function_\">push</span>(l)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">getSnapshot</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> store.<span class=\"property\">currentState</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(<span class=\"params\">action</span>) &#123;</span><br><span class=\"line\">        store.<span class=\"property\">currentState</span> = store.<span class=\"title function_\">reducer</span>(action)</span><br><span class=\"line\">        store.<span class=\"property\">listeners</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">l</span>=&gt;</span><span class=\"title function_\">l</span>())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> action;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用useSyncExternalStore创建state\"><a href=\"#使用useSyncExternalStore创建state\" class=\"headerlink\" title=\"使用useSyncExternalStore创建state\"></a>使用useSyncExternalStore创建state</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;useSyncExternalStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Demo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state = <span class=\"title function_\">useSyncExternalStore</span>(store.<span class=\"property\">subscribe</span>, <span class=\"function\">()=&gt;</span>store.<span class=\"title function_\">getSnapshot</span>().<span class=\"property\">data</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#x27;p-100&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>count:&#123;state&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>store.dispatch(&#123;type:&#x27;ADD&#x27;&#125;)&#125;&gt;add+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Demo</span></span><br></pre></td></tr></table></figure>\n\n<p><code>useSyncExternalStore</code>会执行<code>store.subscribe</code>，并传入一个函数，当store中状态发生变更时，执行这个函数，便可以触发组件的更新。</p>\n<p>效果如下：</p>\n<p><img src=\"/../imgs/90f63a48a6cc42b7aedab51da67cf398.png\" alt=\"syncStore.gif\"></p>\n"},{"title":"React中使用UMEditor","date":"2019-12-30T16:00:00.000Z","_content":"\n最近项目中需要使用富文本编辑器，参考了运营小姐姐日常使用平台上的编辑器，最后考虑采用百度的UMEditor。因为轻量，功能和配置简单，没有很多定制化的功能，所以没采用UEditor。不过我后续会出一篇文章将UEditor的二次开发。\n\numeditor的引入\n-----------\n\n### 组件设计\n\n首先看一下组件大致的内容：  \n1.组件props：  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb1e4235b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n2.组件关键的成员属性：  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb1fabe1f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n3.简单的render:  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb2058558~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n4.UMEditor的实例化  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb20a18f3~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \nUMEditor源码里需要改动的主要就是图片的请求了，配置中的imgUrl我传的是一个方法，这个方法中请求后台并返回Promise<{url:string}>\n\n### 源码修改\n\n源码修改两个文件  \nimage.js中两处更改  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfd3e142f5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")\n\n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfd787ad81~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \nautoupload.js中一处修改  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfdeb77fa6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")\n\nUMEditor的源码存放在dll目录下，打包时会被webpack拷贝道相应的目录下，UMEDITOR\\_HOME\\_URL和这个目录路径保持一致  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfdedd31e6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")\n\numeditor的依赖处理\n-------------\n\n### 文件合并\n\n由于依赖文件过多，我们使用gulp合并一下  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e005ec6e2d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \ncore文件夹下的依赖合并为core.min.js,其他plugin，ui，addapter也一样合并为相应的min.js  \n原本由editor\\_api.js引入依赖的，现在我们自己写个方法引入。\n\n### 依赖加载\n\n组件中定义需要引入的文件，这是一个二维数组，同级的文件按顺序引入，不同级别的可以并发请求，比如：\\['/third-party/jquery.min.js', '/third-party/template.min.js'\\]中的两个文件同时请求，但是保证它们都load完再请求后面的文件  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e00b71d6eb~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")\n\n加载的时候使用SyncRequire方法  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e00ce73838~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")\n\n### 使用一步迭代器实现可控加载\n\n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e00f5fb948~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \nloadDep负责文件加载，具体如下：  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e031d28570~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \nSyncRequire内部维护一个异步迭代器，迭代的对象是每一个文件的加载。最后使用for await进行异步迭代  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e0346a17e1~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n如果是一个文件路径数组，则说明这个数组中的文件可以同时使用loadDep加载，如果是一个文件路径字符串，则说明这个文件加载完才可以加载后面的文件。loaders具体实现如下  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e035e1c019~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")\n\n好了，有了这个SyncRequire方法，就可以既同时又顺序加载我们的外部js或者css文件了，最后可以在控制台中验证效果  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e039342268~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")","source":"_posts/React中使用UMEditor.md","raw":"---\n title: \"React中使用UMEditor\"\n date: 2019-12-31\n tags: [React.js]\n categories: [前端笔记]\n---\n\n最近项目中需要使用富文本编辑器，参考了运营小姐姐日常使用平台上的编辑器，最后考虑采用百度的UMEditor。因为轻量，功能和配置简单，没有很多定制化的功能，所以没采用UEditor。不过我后续会出一篇文章将UEditor的二次开发。\n\numeditor的引入\n-----------\n\n### 组件设计\n\n首先看一下组件大致的内容：  \n1.组件props：  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb1e4235b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n2.组件关键的成员属性：  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb1fabe1f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n3.简单的render:  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb2058558~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n4.UMEditor的实例化  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb20a18f3~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \nUMEditor源码里需要改动的主要就是图片的请求了，配置中的imgUrl我传的是一个方法，这个方法中请求后台并返回Promise<{url:string}>\n\n### 源码修改\n\n源码修改两个文件  \nimage.js中两处更改  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfd3e142f5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")\n\n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfd787ad81~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \nautoupload.js中一处修改  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfdeb77fa6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")\n\nUMEditor的源码存放在dll目录下，打包时会被webpack拷贝道相应的目录下，UMEDITOR\\_HOME\\_URL和这个目录路径保持一致  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfdedd31e6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")\n\numeditor的依赖处理\n-------------\n\n### 文件合并\n\n由于依赖文件过多，我们使用gulp合并一下  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e005ec6e2d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \ncore文件夹下的依赖合并为core.min.js,其他plugin，ui，addapter也一样合并为相应的min.js  \n原本由editor\\_api.js引入依赖的，现在我们自己写个方法引入。\n\n### 依赖加载\n\n组件中定义需要引入的文件，这是一个二维数组，同级的文件按顺序引入，不同级别的可以并发请求，比如：\\['/third-party/jquery.min.js', '/third-party/template.min.js'\\]中的两个文件同时请求，但是保证它们都load完再请求后面的文件  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e00b71d6eb~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")\n\n加载的时候使用SyncRequire方法  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e00ce73838~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")\n\n### 使用一步迭代器实现可控加载\n\n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e00f5fb948~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \nloadDep负责文件加载，具体如下：  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e031d28570~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \nSyncRequire内部维护一个异步迭代器，迭代的对象是每一个文件的加载。最后使用for await进行异步迭代  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e0346a17e1~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n如果是一个文件路径数组，则说明这个数组中的文件可以同时使用loadDep加载，如果是一个文件路径字符串，则说明这个文件加载完才可以加载后面的文件。loaders具体实现如下  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e035e1c019~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")\n\n好了，有了这个SyncRequire方法，就可以既同时又顺序加载我们的外部js或者css文件了，最后可以在控制台中验证效果  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e039342268~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")","slug":"React中使用UMEditor","published":1,"updated":"2024-04-04T15:27:03.694Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhn001whajfdc22hpb7","content":"<p>最近项目中需要使用富文本编辑器，参考了运营小姐姐日常使用平台上的编辑器，最后考虑采用百度的UMEditor。因为轻量，功能和配置简单，没有很多定制化的功能，所以没采用UEditor。不过我后续会出一篇文章将UEditor的二次开发。</p>\n<h2 id=\"umeditor的引入\"><a href=\"#umeditor的引入\" class=\"headerlink\" title=\"umeditor的引入\"></a>umeditor的引入</h2><h3 id=\"组件设计\"><a href=\"#组件设计\" class=\"headerlink\" title=\"组件设计\"></a>组件设计</h3><p>首先看一下组件大致的内容：<br>1.组件props：<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb1e4235b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>2.组件关键的成员属性：<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb1fabe1f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>3.简单的render:<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb2058558~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>4.UMEditor的实例化<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb20a18f3~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>UMEditor源码里需要改动的主要就是图片的请求了，配置中的imgUrl我传的是一个方法，这个方法中请求后台并返回Promise&lt;{url:string}&gt;</p>\n<h3 id=\"源码修改\"><a href=\"#源码修改\" class=\"headerlink\" title=\"源码修改\"></a>源码修改</h3><p>源码修改两个文件<br>image.js中两处更改<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfd3e142f5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfd787ad81~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>autoupload.js中一处修改<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfdeb77fa6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n<p>UMEditor的源码存放在dll目录下，打包时会被webpack拷贝道相应的目录下，UMEDITOR_HOME_URL和这个目录路径保持一致<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfdedd31e6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n<h2 id=\"umeditor的依赖处理\"><a href=\"#umeditor的依赖处理\" class=\"headerlink\" title=\"umeditor的依赖处理\"></a>umeditor的依赖处理</h2><h3 id=\"文件合并\"><a href=\"#文件合并\" class=\"headerlink\" title=\"文件合并\"></a>文件合并</h3><p>由于依赖文件过多，我们使用gulp合并一下<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e005ec6e2d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>core文件夹下的依赖合并为core.min.js,其他plugin，ui，addapter也一样合并为相应的min.js<br>原本由editor_api.js引入依赖的，现在我们自己写个方法引入。</p>\n<h3 id=\"依赖加载\"><a href=\"#依赖加载\" class=\"headerlink\" title=\"依赖加载\"></a>依赖加载</h3><p>组件中定义需要引入的文件，这是一个二维数组，同级的文件按顺序引入，不同级别的可以并发请求，比如：[‘&#x2F;third-party&#x2F;jquery.min.js’, ‘&#x2F;third-party&#x2F;template.min.js’]中的两个文件同时请求，但是保证它们都load完再请求后面的文件<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e00b71d6eb~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n<p>加载的时候使用SyncRequire方法<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e00ce73838~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n<h3 id=\"使用一步迭代器实现可控加载\"><a href=\"#使用一步迭代器实现可控加载\" class=\"headerlink\" title=\"使用一步迭代器实现可控加载\"></a>使用一步迭代器实现可控加载</h3><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e00f5fb948~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>loadDep负责文件加载，具体如下：<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e031d28570~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>SyncRequire内部维护一个异步迭代器，迭代的对象是每一个文件的加载。最后使用for await进行异步迭代<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e0346a17e1~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>如果是一个文件路径数组，则说明这个数组中的文件可以同时使用loadDep加载，如果是一个文件路径字符串，则说明这个文件加载完才可以加载后面的文件。loaders具体实现如下<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e035e1c019~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n<p>好了，有了这个SyncRequire方法，就可以既同时又顺序加载我们的外部js或者css文件了，最后可以在控制台中验证效果<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e039342268~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n","length":944,"excerpt":"","more":"<p>最近项目中需要使用富文本编辑器，参考了运营小姐姐日常使用平台上的编辑器，最后考虑采用百度的UMEditor。因为轻量，功能和配置简单，没有很多定制化的功能，所以没采用UEditor。不过我后续会出一篇文章将UEditor的二次开发。</p>\n<h2 id=\"umeditor的引入\"><a href=\"#umeditor的引入\" class=\"headerlink\" title=\"umeditor的引入\"></a>umeditor的引入</h2><h3 id=\"组件设计\"><a href=\"#组件设计\" class=\"headerlink\" title=\"组件设计\"></a>组件设计</h3><p>首先看一下组件大致的内容：<br>1.组件props：<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb1e4235b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>2.组件关键的成员属性：<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb1fabe1f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>3.简单的render:<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb2058558~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>4.UMEditor的实例化<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfb20a18f3~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>UMEditor源码里需要改动的主要就是图片的请求了，配置中的imgUrl我传的是一个方法，这个方法中请求后台并返回Promise&lt;{url:string}&gt;</p>\n<h3 id=\"源码修改\"><a href=\"#源码修改\" class=\"headerlink\" title=\"源码修改\"></a>源码修改</h3><p>源码修改两个文件<br>image.js中两处更改<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfd3e142f5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfd787ad81~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>autoupload.js中一处修改<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfdeb77fa6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n<p>UMEditor的源码存放在dll目录下，打包时会被webpack拷贝道相应的目录下，UMEDITOR_HOME_URL和这个目录路径保持一致<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5dfdedd31e6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n<h2 id=\"umeditor的依赖处理\"><a href=\"#umeditor的依赖处理\" class=\"headerlink\" title=\"umeditor的依赖处理\"></a>umeditor的依赖处理</h2><h3 id=\"文件合并\"><a href=\"#文件合并\" class=\"headerlink\" title=\"文件合并\"></a>文件合并</h3><p>由于依赖文件过多，我们使用gulp合并一下<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e005ec6e2d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>core文件夹下的依赖合并为core.min.js,其他plugin，ui，addapter也一样合并为相应的min.js<br>原本由editor_api.js引入依赖的，现在我们自己写个方法引入。</p>\n<h3 id=\"依赖加载\"><a href=\"#依赖加载\" class=\"headerlink\" title=\"依赖加载\"></a>依赖加载</h3><p>组件中定义需要引入的文件，这是一个二维数组，同级的文件按顺序引入，不同级别的可以并发请求，比如：[‘&#x2F;third-party&#x2F;jquery.min.js’, ‘&#x2F;third-party&#x2F;template.min.js’]中的两个文件同时请求，但是保证它们都load完再请求后面的文件<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e00b71d6eb~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n<p>加载的时候使用SyncRequire方法<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e00ce73838~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n<h3 id=\"使用一步迭代器实现可控加载\"><a href=\"#使用一步迭代器实现可控加载\" class=\"headerlink\" title=\"使用一步迭代器实现可控加载\"></a>使用一步迭代器实现可控加载</h3><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e00f5fb948~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>loadDep负责文件加载，具体如下：<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e031d28570~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>SyncRequire内部维护一个异步迭代器，迭代的对象是每一个文件的加载。最后使用for await进行异步迭代<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e0346a17e1~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>如果是一个文件路径数组，则说明这个数组中的文件可以同时使用loadDep加载，如果是一个文件路径字符串，则说明这个文件加载完才可以加载后面的文件。loaders具体实现如下<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e035e1c019~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n<p>好了，有了这个SyncRequire方法，就可以既同时又顺序加载我们的外部js或者css文件了，最后可以在控制台中验证效果<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5e039342268~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n"},{"title":"Redux5源码解析: applyMiddleware——源码初探","date":"2022-01-18T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第2天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nRedux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。\n\napplyMiddleware\n---------------\n\nRedux中的核心api`createStore`可以支持三个参数:`createStore(reducer, [preloadedState], [enhancer])`，第三个参数是store增强器，而Redux自带的唯一个`enhancer`便是`applyMiddleware`,因此在解析`createStore`之前，先来看一看`applyMiddleware`\n\n### 源码实现\n\n```js\nfunction applyMiddleware(\n  ...middlewares\n) {\n  return (createStore) =>(\n      reducer,\n      preloadedState\n    ) => {\n      const store = createStore(reducer, preloadedState)\n      let dispatch = () => {\n        throw new Error(...)\n      }\n\n      const middlewareAPI = {\n        getState: store.getState,\n        dispatch: (action, ...args) => dispatch(action, ...args)\n      }\n      const chain = middlewares.map(middleware => middleware(middlewareAPI))\n      dispatch = compose(...chain)(store.dispatch)\n\n      return {\n        ...store,\n        dispatch\n      }\n    }\n}\n\n```\n\n从源码可以看出，`applyMiddleware`的参数，即每一个中间件都是一个函数，并且这些函数都被`compose`组合了起来。这些中间件函数的类型定于如下\n\n```typescript\nexport interface Middleware<\n  _DispatchExt = {}, \n  S = any,\n  D extends Dispatch = Dispatch\n> {\n  (api: MiddlewareAPI<D, S>): (\n    next: D\n  ) => (action: D extends Dispatch<infer A> ? A : never) => any\n}\n```\n\n这些中间件函数，接收的参数是`getState`(虽然也有dispatch，但其实不可用),返回的也是一个函数：`(next)=>(action)=>any`，先称它为fn吧。`chain`数组中的每个成员都是这样的一个fn。\n\nfn函数能通过闭包获取到`getState`，因此可以记录state的快照。而`next`参数其实是一个`dispatch`(初始是`store.dispatch`，之后是前一个fn返回的(action)=>any。这样就巧妙的实现了一个**洋葱圈**)这些fn函数又被`compose`组合为一个新的`dispatch`,从`applyMiddleware`中返回出来，成为store增加的dispatch。\n\n因此当store调用`dispatch`的时候，fn可以通过`action`拿到`dispatch`的参数，通过`getState`获取前后的state，实现自己的中间件逻辑。\n\n#### 举个例子\n\n以官网的log插件为例，可以更好地理解源码的运行过程。\n\n```js\nimport { createStore, applyMiddleware } from 'redux'\nimport todos from './reducers'\nfunction logger({ getState }) {\n    return next => action => {\n        console.log('will dispatch', action)\n\n        const returnValue = next(action)\n        console.log('state after dispatch', getState())\n\n        return returnValue\n    }\n}\n\nconst store = createStore(todos, ['Use Redux'], applyMiddleware(logger))\n\nstore.dispatch({\n    type: 'ADD_TODO',\n    text: 'Understand the middleware'\n})\n// will dispatch: { type: 'ADD_TODO', text: 'Understand the middleware' }\n// state after dispatch: [ 'Use Redux', 'Understand the middleware' ]\n```\n\n### 未完待续\n\n本文浅尝applyMiddleware的源码，梳理其中几个函数的关系。但applyMiddleware的独特魅力在于以极少的代码便实现了一个洋葱圈模型。\n\n下一篇将解剖**洋葱圈**，深入探究其实现原理。","source":"_posts/Redux5源码解析  applyMiddleware——源码初探.md","raw":"---\n title: \"Redux5源码解析: applyMiddleware——源码初探\"\n date: 2022-01-19\n tags: [前端,Redux]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第2天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nRedux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。\n\napplyMiddleware\n---------------\n\nRedux中的核心api`createStore`可以支持三个参数:`createStore(reducer, [preloadedState], [enhancer])`，第三个参数是store增强器，而Redux自带的唯一个`enhancer`便是`applyMiddleware`,因此在解析`createStore`之前，先来看一看`applyMiddleware`\n\n### 源码实现\n\n```js\nfunction applyMiddleware(\n  ...middlewares\n) {\n  return (createStore) =>(\n      reducer,\n      preloadedState\n    ) => {\n      const store = createStore(reducer, preloadedState)\n      let dispatch = () => {\n        throw new Error(...)\n      }\n\n      const middlewareAPI = {\n        getState: store.getState,\n        dispatch: (action, ...args) => dispatch(action, ...args)\n      }\n      const chain = middlewares.map(middleware => middleware(middlewareAPI))\n      dispatch = compose(...chain)(store.dispatch)\n\n      return {\n        ...store,\n        dispatch\n      }\n    }\n}\n\n```\n\n从源码可以看出，`applyMiddleware`的参数，即每一个中间件都是一个函数，并且这些函数都被`compose`组合了起来。这些中间件函数的类型定于如下\n\n```typescript\nexport interface Middleware<\n  _DispatchExt = {}, \n  S = any,\n  D extends Dispatch = Dispatch\n> {\n  (api: MiddlewareAPI<D, S>): (\n    next: D\n  ) => (action: D extends Dispatch<infer A> ? A : never) => any\n}\n```\n\n这些中间件函数，接收的参数是`getState`(虽然也有dispatch，但其实不可用),返回的也是一个函数：`(next)=>(action)=>any`，先称它为fn吧。`chain`数组中的每个成员都是这样的一个fn。\n\nfn函数能通过闭包获取到`getState`，因此可以记录state的快照。而`next`参数其实是一个`dispatch`(初始是`store.dispatch`，之后是前一个fn返回的(action)=>any。这样就巧妙的实现了一个**洋葱圈**)这些fn函数又被`compose`组合为一个新的`dispatch`,从`applyMiddleware`中返回出来，成为store增加的dispatch。\n\n因此当store调用`dispatch`的时候，fn可以通过`action`拿到`dispatch`的参数，通过`getState`获取前后的state，实现自己的中间件逻辑。\n\n#### 举个例子\n\n以官网的log插件为例，可以更好地理解源码的运行过程。\n\n```js\nimport { createStore, applyMiddleware } from 'redux'\nimport todos from './reducers'\nfunction logger({ getState }) {\n    return next => action => {\n        console.log('will dispatch', action)\n\n        const returnValue = next(action)\n        console.log('state after dispatch', getState())\n\n        return returnValue\n    }\n}\n\nconst store = createStore(todos, ['Use Redux'], applyMiddleware(logger))\n\nstore.dispatch({\n    type: 'ADD_TODO',\n    text: 'Understand the middleware'\n})\n// will dispatch: { type: 'ADD_TODO', text: 'Understand the middleware' }\n// state after dispatch: [ 'Use Redux', 'Understand the middleware' ]\n```\n\n### 未完待续\n\n本文浅尝applyMiddleware的源码，梳理其中几个函数的关系。但applyMiddleware的独特魅力在于以极少的代码便实现了一个洋葱圈模型。\n\n下一篇将解剖**洋葱圈**，深入探究其实现原理。","slug":"Redux5源码解析  applyMiddleware——源码初探","published":1,"updated":"2024-04-04T15:27:03.712Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhn0020hajf29bfb2ml","content":"<p>「这是我参与2022首次更文挑战的第2天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>Redux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。</p>\n<h2 id=\"applyMiddleware\"><a href=\"#applyMiddleware\" class=\"headerlink\" title=\"applyMiddleware\"></a>applyMiddleware</h2><p>Redux中的核心api<code>createStore</code>可以支持三个参数:<code>createStore(reducer, [preloadedState], [enhancer])</code>，第三个参数是store增强器，而Redux自带的唯一个<code>enhancer</code>便是<code>applyMiddleware</code>,因此在解析<code>createStore</code>之前，先来看一看<code>applyMiddleware</code></p>\n<h3 id=\"源码实现\"><a href=\"#源码实现\" class=\"headerlink\" title=\"源码实现\"></a>源码实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">applyMiddleware</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  ...middlewares</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">createStore</span>) =&gt;</span><span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      reducer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      preloadedState</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer, preloadedState)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> <span class=\"title function_\">dispatch</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(...)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">        <span class=\"attr\">getState</span>: store.<span class=\"property\">getState</span>,</span><br><span class=\"line\">        <span class=\"attr\">dispatch</span>: <span class=\"function\">(<span class=\"params\">action, ...args</span>) =&gt;</span> <span class=\"title function_\">dispatch</span>(action, ...args)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> chain = middlewares.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> <span class=\"title function_\">middleware</span>(middlewareAPI))</span><br><span class=\"line\">      dispatch = <span class=\"title function_\">compose</span>(...chain)(store.<span class=\"property\">dispatch</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...store,</span><br><span class=\"line\">        dispatch</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>从源码可以看出，<code>applyMiddleware</code>的参数，即每一个中间件都是一个函数，并且这些函数都被<code>compose</code>组合了起来。这些中间件函数的类型定于如下</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Middleware</span>&lt;</span><br><span class=\"line\">  _DispatchExt = &#123;&#125;, </span><br><span class=\"line\">  S = <span class=\"built_in\">any</span>,</span><br><span class=\"line\">  D <span class=\"keyword\">extends</span> <span class=\"title class_\">Dispatch</span> = <span class=\"title class_\">Dispatch</span></span><br><span class=\"line\">&gt; &#123;</span><br><span class=\"line\">  (<span class=\"attr\">api</span>: <span class=\"title class_\">MiddlewareAPI</span>&lt;D, S&gt;): <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    next: D</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  </span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">action: D <span class=\"keyword\">extends</span> Dispatch&lt;infer A&gt; ? A : <span class=\"built_in\">never</span></span>) =&gt;</span> <span class=\"built_in\">any</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些中间件函数，接收的参数是<code>getState</code>(虽然也有dispatch，但其实不可用),返回的也是一个函数：<code>(next)=&gt;(action)=&gt;any</code>，先称它为fn吧。<code>chain</code>数组中的每个成员都是这样的一个fn。</p>\n<p>fn函数能通过闭包获取到<code>getState</code>，因此可以记录state的快照。而<code>next</code>参数其实是一个<code>dispatch</code>(初始是<code>store.dispatch</code>，之后是前一个fn返回的(action)&#x3D;&gt;any。这样就巧妙的实现了一个<strong>洋葱圈</strong>)这些fn函数又被<code>compose</code>组合为一个新的<code>dispatch</code>,从<code>applyMiddleware</code>中返回出来，成为store增加的dispatch。</p>\n<p>因此当store调用<code>dispatch</code>的时候，fn可以通过<code>action</code>拿到<code>dispatch</code>的参数，通过<code>getState</code>获取前后的state，实现自己的中间件逻辑。</p>\n<h4 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h4><p>以官网的log插件为例，可以更好地理解源码的运行过程。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, applyMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> todos <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./reducers&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logger</span>(<span class=\"params\">&#123; getState &#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> <span class=\"function\"><span class=\"params\">action</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;will dispatch&#x27;</span>, action)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> returnValue = <span class=\"title function_\">next</span>(action)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;state after dispatch&#x27;</span>, <span class=\"title function_\">getState</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(todos, [<span class=\"string\">&#x27;Use Redux&#x27;</span>], <span class=\"title function_\">applyMiddleware</span>(logger))</span><br><span class=\"line\"></span><br><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;ADD_TODO&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Understand the middleware&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// will dispatch: &#123; type: &#x27;ADD_TODO&#x27;, text: &#x27;Understand the middleware&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// state after dispatch: [ &#x27;Use Redux&#x27;, &#x27;Understand the middleware&#x27; ]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h3><p>本文浅尝applyMiddleware的源码，梳理其中几个函数的关系。但applyMiddleware的独特魅力在于以极少的代码便实现了一个洋葱圈模型。</p>\n<p>下一篇将解剖<strong>洋葱圈</strong>，深入探究其实现原理。</p>\n","length":2320,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第2天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>Redux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。</p>\n<h2 id=\"applyMiddleware\"><a href=\"#applyMiddleware\" class=\"headerlink\" title=\"applyMiddleware\"></a>applyMiddleware</h2><p>Redux中的核心api<code>createStore</code>可以支持三个参数:<code>createStore(reducer, [preloadedState], [enhancer])</code>，第三个参数是store增强器，而Redux自带的唯一个<code>enhancer</code>便是<code>applyMiddleware</code>,因此在解析<code>createStore</code>之前，先来看一看<code>applyMiddleware</code></p>\n<h3 id=\"源码实现\"><a href=\"#源码实现\" class=\"headerlink\" title=\"源码实现\"></a>源码实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">applyMiddleware</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  ...middlewares</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">createStore</span>) =&gt;</span><span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      reducer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      preloadedState</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer, preloadedState)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> <span class=\"title function_\">dispatch</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(...)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">        <span class=\"attr\">getState</span>: store.<span class=\"property\">getState</span>,</span><br><span class=\"line\">        <span class=\"attr\">dispatch</span>: <span class=\"function\">(<span class=\"params\">action, ...args</span>) =&gt;</span> <span class=\"title function_\">dispatch</span>(action, ...args)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> chain = middlewares.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> <span class=\"title function_\">middleware</span>(middlewareAPI))</span><br><span class=\"line\">      dispatch = <span class=\"title function_\">compose</span>(...chain)(store.<span class=\"property\">dispatch</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...store,</span><br><span class=\"line\">        dispatch</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>从源码可以看出，<code>applyMiddleware</code>的参数，即每一个中间件都是一个函数，并且这些函数都被<code>compose</code>组合了起来。这些中间件函数的类型定于如下</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Middleware</span>&lt;</span><br><span class=\"line\">  _DispatchExt = &#123;&#125;, </span><br><span class=\"line\">  S = <span class=\"built_in\">any</span>,</span><br><span class=\"line\">  D <span class=\"keyword\">extends</span> <span class=\"title class_\">Dispatch</span> = <span class=\"title class_\">Dispatch</span></span><br><span class=\"line\">&gt; &#123;</span><br><span class=\"line\">  (<span class=\"attr\">api</span>: <span class=\"title class_\">MiddlewareAPI</span>&lt;D, S&gt;): <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    next: D</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  </span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">action: D <span class=\"keyword\">extends</span> Dispatch&lt;infer A&gt; ? A : <span class=\"built_in\">never</span></span>) =&gt;</span> <span class=\"built_in\">any</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些中间件函数，接收的参数是<code>getState</code>(虽然也有dispatch，但其实不可用),返回的也是一个函数：<code>(next)=&gt;(action)=&gt;any</code>，先称它为fn吧。<code>chain</code>数组中的每个成员都是这样的一个fn。</p>\n<p>fn函数能通过闭包获取到<code>getState</code>，因此可以记录state的快照。而<code>next</code>参数其实是一个<code>dispatch</code>(初始是<code>store.dispatch</code>，之后是前一个fn返回的(action)&#x3D;&gt;any。这样就巧妙的实现了一个<strong>洋葱圈</strong>)这些fn函数又被<code>compose</code>组合为一个新的<code>dispatch</code>,从<code>applyMiddleware</code>中返回出来，成为store增加的dispatch。</p>\n<p>因此当store调用<code>dispatch</code>的时候，fn可以通过<code>action</code>拿到<code>dispatch</code>的参数，通过<code>getState</code>获取前后的state，实现自己的中间件逻辑。</p>\n<h4 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h4><p>以官网的log插件为例，可以更好地理解源码的运行过程。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, applyMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> todos <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./reducers&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logger</span>(<span class=\"params\">&#123; getState &#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> <span class=\"function\"><span class=\"params\">action</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;will dispatch&#x27;</span>, action)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> returnValue = <span class=\"title function_\">next</span>(action)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;state after dispatch&#x27;</span>, <span class=\"title function_\">getState</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(todos, [<span class=\"string\">&#x27;Use Redux&#x27;</span>], <span class=\"title function_\">applyMiddleware</span>(logger))</span><br><span class=\"line\"></span><br><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;ADD_TODO&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Understand the middleware&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// will dispatch: &#123; type: &#x27;ADD_TODO&#x27;, text: &#x27;Understand the middleware&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// state after dispatch: [ &#x27;Use Redux&#x27;, &#x27;Understand the middleware&#x27; ]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h3><p>本文浅尝applyMiddleware的源码，梳理其中几个函数的关系。但applyMiddleware的独特魅力在于以极少的代码便实现了一个洋葱圈模型。</p>\n<p>下一篇将解剖<strong>洋葱圈</strong>，深入探究其实现原理。</p>\n"},{"title":"Redux5源码解析: applyMiddleware——解剖“洋葱圈”","date":"2022-01-19T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第3天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nRedux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。\n\napplyMiddleware的洋葱圈\n-------------------\n\napplyMiddleware的洋葱圈设计得很巧妙，代码量虽然不多，但是各种匿名函数弯弯绕绕逻辑却不少。\n\n下面的例子中写了两个中间件`middleware1`和`middleware2`，它们返回的函数分别为`m1_1`和`m2_1`，这两个函数再返回的函数分别为`m1_2`和`m2_2`。\n\n```js\nimport { createStore, applyMiddleware } from \"redux\";\n\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case \"ADD_TODO\":\n      return state.concat([action.text]);\n    default:\n      return state;\n  }\n}\n\nfunction middleware2和middleware1，打印*middleware2 init start*和*middleware2 init start*({ getState }) {\n  console.log(\"middleware1 init start\");\n  return function m1_1 (next) {\n    console.log(\"middleware1 init finish\");\n    return function m1_2(action) {\n      console.log(\"middleware1\", \"will dispatch\");\n      const returnValue = next(action);\n      console.log(\"middleware1\", \" after dispatch\", getState());\n      return returnValue;\n    };\n  };\n}\nfunction middleware2({ getState }) {\n  console.log(\"middleware2 init start\");\n  return function m2_1(next)  {\n    console.log(\"middleware2 init finish\");\n    return function m2_2 (action) {\n      console.log(\"middleware2\", \"will dispatch\");\n      const returnValue = next(action);\n      console.log(\"middleware2\", \" after dispatch\", getState());\n      return returnValue;\n    };\n  };\n}\nconst store = createStore(\n  todos,\n  [\"Use Redux\"],\n  applyMiddleware(middleware2, middleware1)\n);\n\n```\n\n这里将中间件的执行分为两个阶段：init和dispatch\n\n### 初始化阶段\n\n`createStore`中会执行中间件的初始化，**从左往右开始，从右往左结束**\n\n![image.png](../imgs/a42f3e72cd64454e94cd03b2bce634fe.png)\n\n### dispatch阶段\n\nstore的`dispatch`调用会触发中间件进入dispatch阶段，顺序也是**从左往右开始，从右往左结束**\n\n```js\nstore.dispatch({\n  type: \"ADD_TODO\",\n  text: \"Understand the middleware\",\n});\n```\n\n![image.png](../imgs/32d120de176346f1829c177e1c43fd3e.png)\n\n### 解剖洋葱圈的实现\n\napplyMiddleware返回的是一个函数，这个函数在createStore的时候执行，并触发中间件的init。\n\n```js\n const middlewareAPI = {\n    getState: store.getState,\n    dispatch: (action, ...args) => dispatch(action, ...args)\n  }\n  const chain = middlewares.map(middleware => middleware(middlewareAPI))\n```\n\n这一步会从右往左,分别调用middleware2和middleware1，打印_middleware2 init start_和_middleware1 init start_。这一步执行完成后，`chain`中的成员是`m2_1`和`m1_1`\n\n紧接着就是compose:\n\n```scss\n  dispatch = compose(...chain)(store.dispatch)\n```\n\n这一步会从右往左执行，调用`m1_1`和`m2_1`，分别打印_middleware1 init finish_和_middleware2 init finish_\n\n**这里的dispatch其实就是`m2_2`，而`m2_2`中调用的`next`是`m1_2`**,因此会从`m2_2`开始调用，从`m1_2`开始结束，实现了dispatch阶段的洋葱圈模型。","source":"_posts/Redux5源码解析  applyMiddleware——解剖“洋葱圈”.md","raw":"---\n title: \"Redux5源码解析: applyMiddleware——解剖“洋葱圈”\"\n date: 2022-01-20\n tags: [前端]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第3天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nRedux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。\n\napplyMiddleware的洋葱圈\n-------------------\n\napplyMiddleware的洋葱圈设计得很巧妙，代码量虽然不多，但是各种匿名函数弯弯绕绕逻辑却不少。\n\n下面的例子中写了两个中间件`middleware1`和`middleware2`，它们返回的函数分别为`m1_1`和`m2_1`，这两个函数再返回的函数分别为`m1_2`和`m2_2`。\n\n```js\nimport { createStore, applyMiddleware } from \"redux\";\n\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case \"ADD_TODO\":\n      return state.concat([action.text]);\n    default:\n      return state;\n  }\n}\n\nfunction middleware2和middleware1，打印*middleware2 init start*和*middleware2 init start*({ getState }) {\n  console.log(\"middleware1 init start\");\n  return function m1_1 (next) {\n    console.log(\"middleware1 init finish\");\n    return function m1_2(action) {\n      console.log(\"middleware1\", \"will dispatch\");\n      const returnValue = next(action);\n      console.log(\"middleware1\", \" after dispatch\", getState());\n      return returnValue;\n    };\n  };\n}\nfunction middleware2({ getState }) {\n  console.log(\"middleware2 init start\");\n  return function m2_1(next)  {\n    console.log(\"middleware2 init finish\");\n    return function m2_2 (action) {\n      console.log(\"middleware2\", \"will dispatch\");\n      const returnValue = next(action);\n      console.log(\"middleware2\", \" after dispatch\", getState());\n      return returnValue;\n    };\n  };\n}\nconst store = createStore(\n  todos,\n  [\"Use Redux\"],\n  applyMiddleware(middleware2, middleware1)\n);\n\n```\n\n这里将中间件的执行分为两个阶段：init和dispatch\n\n### 初始化阶段\n\n`createStore`中会执行中间件的初始化，**从左往右开始，从右往左结束**\n\n![image.png](../imgs/a42f3e72cd64454e94cd03b2bce634fe.png)\n\n### dispatch阶段\n\nstore的`dispatch`调用会触发中间件进入dispatch阶段，顺序也是**从左往右开始，从右往左结束**\n\n```js\nstore.dispatch({\n  type: \"ADD_TODO\",\n  text: \"Understand the middleware\",\n});\n```\n\n![image.png](../imgs/32d120de176346f1829c177e1c43fd3e.png)\n\n### 解剖洋葱圈的实现\n\napplyMiddleware返回的是一个函数，这个函数在createStore的时候执行，并触发中间件的init。\n\n```js\n const middlewareAPI = {\n    getState: store.getState,\n    dispatch: (action, ...args) => dispatch(action, ...args)\n  }\n  const chain = middlewares.map(middleware => middleware(middlewareAPI))\n```\n\n这一步会从右往左,分别调用middleware2和middleware1，打印_middleware2 init start_和_middleware1 init start_。这一步执行完成后，`chain`中的成员是`m2_1`和`m1_1`\n\n紧接着就是compose:\n\n```scss\n  dispatch = compose(...chain)(store.dispatch)\n```\n\n这一步会从右往左执行，调用`m1_1`和`m2_1`，分别打印_middleware1 init finish_和_middleware2 init finish_\n\n**这里的dispatch其实就是`m2_2`，而`m2_2`中调用的`next`是`m1_2`**,因此会从`m2_2`开始调用，从`m1_2`开始结束，实现了dispatch阶段的洋葱圈模型。","slug":"Redux5源码解析  applyMiddleware——解剖“洋葱圈”","published":1,"updated":"2024-04-04T15:27:03.703Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhn0023hajf2yccfgq0","content":"<p>「这是我参与2022首次更文挑战的第3天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>Redux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。</p>\n<h2 id=\"applyMiddleware的洋葱圈\"><a href=\"#applyMiddleware的洋葱圈\" class=\"headerlink\" title=\"applyMiddleware的洋葱圈\"></a>applyMiddleware的洋葱圈</h2><p>applyMiddleware的洋葱圈设计得很巧妙，代码量虽然不多，但是各种匿名函数弯弯绕绕逻辑却不少。</p>\n<p>下面的例子中写了两个中间件<code>middleware1</code>和<code>middleware2</code>，它们返回的函数分别为<code>m1_1</code>和<code>m2_1</code>，这两个函数再返回的函数分别为<code>m1_2</code>和<code>m2_2</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, applyMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">todos</span>(<span class=\"params\">state = [], action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;ADD_TODO&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.<span class=\"title function_\">concat</span>([action.<span class=\"property\">text</span>]);</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> middleware2和middleware1，打印*middleware2 init start*和*middleware2 init start*(&#123; getState &#125;) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware1 init start&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">m1_1</span> (next) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware1 init finish&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">m1_2</span>(<span class=\"params\">action</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware1&quot;</span>, <span class=\"string\">&quot;will dispatch&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> returnValue = <span class=\"title function_\">next</span>(action);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware1&quot;</span>, <span class=\"string\">&quot; after dispatch&quot;</span>, <span class=\"title function_\">getState</span>());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">middleware2</span>(<span class=\"params\">&#123; getState &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware2 init start&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">m2_1</span>(<span class=\"params\">next</span>)  &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware2 init finish&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">m2_2</span> (action) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware2&quot;</span>, <span class=\"string\">&quot;will dispatch&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> returnValue = <span class=\"title function_\">next</span>(action);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware2&quot;</span>, <span class=\"string\">&quot; after dispatch&quot;</span>, <span class=\"title function_\">getState</span>());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(</span><br><span class=\"line\">  todos,</span><br><span class=\"line\">  [<span class=\"string\">&quot;Use Redux&quot;</span>],</span><br><span class=\"line\">  <span class=\"title function_\">applyMiddleware</span>(middleware2, middleware1)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里将中间件的执行分为两个阶段：init和dispatch</p>\n<h3 id=\"初始化阶段\"><a href=\"#初始化阶段\" class=\"headerlink\" title=\"初始化阶段\"></a>初始化阶段</h3><p><code>createStore</code>中会执行中间件的初始化，<strong>从左往右开始，从右往左结束</strong></p>\n<p><img src=\"/../imgs/a42f3e72cd64454e94cd03b2bce634fe.png\" alt=\"image.png\"></p>\n<h3 id=\"dispatch阶段\"><a href=\"#dispatch阶段\" class=\"headerlink\" title=\"dispatch阶段\"></a>dispatch阶段</h3><p>store的<code>dispatch</code>调用会触发中间件进入dispatch阶段，顺序也是<strong>从左往右开始，从右往左结束</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;ADD_TODO&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">text</span>: <span class=\"string\">&quot;Understand the middleware&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/32d120de176346f1829c177e1c43fd3e.png\" alt=\"image.png\"></p>\n<h3 id=\"解剖洋葱圈的实现\"><a href=\"#解剖洋葱圈的实现\" class=\"headerlink\" title=\"解剖洋葱圈的实现\"></a>解剖洋葱圈的实现</h3><p>applyMiddleware返回的是一个函数，这个函数在createStore的时候执行，并触发中间件的init。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">   <span class=\"attr\">getState</span>: store.<span class=\"property\">getState</span>,</span><br><span class=\"line\">   <span class=\"attr\">dispatch</span>: <span class=\"function\">(<span class=\"params\">action, ...args</span>) =&gt;</span> <span class=\"title function_\">dispatch</span>(action, ...args)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> chain = middlewares.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> <span class=\"title function_\">middleware</span>(middlewareAPI))</span><br></pre></td></tr></table></figure>\n\n<p>这一步会从右往左,分别调用middleware2和middleware1，打印_middleware2 init start_和_middleware1 init start_。这一步执行完成后，<code>chain</code>中的成员是<code>m2_1</code>和<code>m1_1</code></p>\n<p>紧接着就是compose:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch = <span class=\"built_in\">compose</span>(...chain)(store.dispatch)</span><br></pre></td></tr></table></figure>\n\n<p>这一步会从右往左执行，调用<code>m1_1</code>和<code>m2_1</code>，分别打印_middleware1 init finish_和_middleware2 init finish_</p>\n<p><strong>这里的dispatch其实就是<code>m2_2</code>，而<code>m2_2</code>中调用的<code>next</code>是<code>m1_2</code></strong>,因此会从<code>m2_2</code>开始调用，从<code>m1_2</code>开始结束，实现了dispatch阶段的洋葱圈模型。</p>\n","length":2322,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第3天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>Redux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。</p>\n<h2 id=\"applyMiddleware的洋葱圈\"><a href=\"#applyMiddleware的洋葱圈\" class=\"headerlink\" title=\"applyMiddleware的洋葱圈\"></a>applyMiddleware的洋葱圈</h2><p>applyMiddleware的洋葱圈设计得很巧妙，代码量虽然不多，但是各种匿名函数弯弯绕绕逻辑却不少。</p>\n<p>下面的例子中写了两个中间件<code>middleware1</code>和<code>middleware2</code>，它们返回的函数分别为<code>m1_1</code>和<code>m2_1</code>，这两个函数再返回的函数分别为<code>m1_2</code>和<code>m2_2</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, applyMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">todos</span>(<span class=\"params\">state = [], action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;ADD_TODO&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.<span class=\"title function_\">concat</span>([action.<span class=\"property\">text</span>]);</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> middleware2和middleware1，打印*middleware2 init start*和*middleware2 init start*(&#123; getState &#125;) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware1 init start&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">m1_1</span> (next) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware1 init finish&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">m1_2</span>(<span class=\"params\">action</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware1&quot;</span>, <span class=\"string\">&quot;will dispatch&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> returnValue = <span class=\"title function_\">next</span>(action);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware1&quot;</span>, <span class=\"string\">&quot; after dispatch&quot;</span>, <span class=\"title function_\">getState</span>());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">middleware2</span>(<span class=\"params\">&#123; getState &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware2 init start&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">m2_1</span>(<span class=\"params\">next</span>)  &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware2 init finish&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">m2_2</span> (action) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware2&quot;</span>, <span class=\"string\">&quot;will dispatch&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> returnValue = <span class=\"title function_\">next</span>(action);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;middleware2&quot;</span>, <span class=\"string\">&quot; after dispatch&quot;</span>, <span class=\"title function_\">getState</span>());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(</span><br><span class=\"line\">  todos,</span><br><span class=\"line\">  [<span class=\"string\">&quot;Use Redux&quot;</span>],</span><br><span class=\"line\">  <span class=\"title function_\">applyMiddleware</span>(middleware2, middleware1)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里将中间件的执行分为两个阶段：init和dispatch</p>\n<h3 id=\"初始化阶段\"><a href=\"#初始化阶段\" class=\"headerlink\" title=\"初始化阶段\"></a>初始化阶段</h3><p><code>createStore</code>中会执行中间件的初始化，<strong>从左往右开始，从右往左结束</strong></p>\n<p><img src=\"/../imgs/a42f3e72cd64454e94cd03b2bce634fe.png\" alt=\"image.png\"></p>\n<h3 id=\"dispatch阶段\"><a href=\"#dispatch阶段\" class=\"headerlink\" title=\"dispatch阶段\"></a>dispatch阶段</h3><p>store的<code>dispatch</code>调用会触发中间件进入dispatch阶段，顺序也是<strong>从左往右开始，从右往左结束</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;ADD_TODO&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">text</span>: <span class=\"string\">&quot;Understand the middleware&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/32d120de176346f1829c177e1c43fd3e.png\" alt=\"image.png\"></p>\n<h3 id=\"解剖洋葱圈的实现\"><a href=\"#解剖洋葱圈的实现\" class=\"headerlink\" title=\"解剖洋葱圈的实现\"></a>解剖洋葱圈的实现</h3><p>applyMiddleware返回的是一个函数，这个函数在createStore的时候执行，并触发中间件的init。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">   <span class=\"attr\">getState</span>: store.<span class=\"property\">getState</span>,</span><br><span class=\"line\">   <span class=\"attr\">dispatch</span>: <span class=\"function\">(<span class=\"params\">action, ...args</span>) =&gt;</span> <span class=\"title function_\">dispatch</span>(action, ...args)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> chain = middlewares.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> <span class=\"title function_\">middleware</span>(middlewareAPI))</span><br></pre></td></tr></table></figure>\n\n<p>这一步会从右往左,分别调用middleware2和middleware1，打印_middleware2 init start_和_middleware1 init start_。这一步执行完成后，<code>chain</code>中的成员是<code>m2_1</code>和<code>m1_1</code></p>\n<p>紧接着就是compose:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch = <span class=\"built_in\">compose</span>(...chain)(store.dispatch)</span><br></pre></td></tr></table></figure>\n\n<p>这一步会从右往左执行，调用<code>m1_1</code>和<code>m2_1</code>，分别打印_middleware1 init finish_和_middleware2 init finish_</p>\n<p><strong>这里的dispatch其实就是<code>m2_2</code>，而<code>m2_2</code>中调用的<code>next</code>是<code>m1_2</code></strong>,因此会从<code>m2_2</code>开始调用，从<code>m1_2</code>开始结束，实现了dispatch阶段的洋葱圈模型。</p>\n"},{"title":"Redux5源码解析: compose","date":"2022-01-17T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第1天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nRedux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。\n\ncompose\n-------\n\n这是Redux中我最喜欢的一个api，虽然当初刚上手Redux的时候始终无法get其中的含义，但一看源码便瞬间明白了。\n\n### 用法\n\n```js\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport DevTools from './containers/DevTools'\nimport reducer from '../reducers'\n\nconst store = createStore(\n    reducer,\n    compose(applyMiddleware(thunk), DevTools.instrument())\n)\n```\n\n在Redux中，这个函数常常用来增强store，比如通过[`applyMiddleware`](https://redux.js.org%2Fapi%2Fapplymiddleware \"https://redux.js.org/api/applymiddleware\")增加中间件。\n\n但是compose的本意是组装，和store增强并没有关系，这是理解这个api的一个误区。真正理解这个api可以直接看源码。\n\n### 源码实现\n\n```javascript\nexport default function compose(...funcs: Function[]) {\n  if (funcs.length === 0) {\n    // infer the argument type so it is usable in inference down the line\n    return <T>(arg: T) => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce(\n    (a, b) =>\n      (...args: any) =>\n        a(b(...args))\n  )\n}\n\n```\n\ncompose的源码很简单：\n\n如果传入多个函数参数，`funcs`数组会通过`reduce`组装为一个函数，并返回。而这个函数执行的效果便是将这些函数从右往左依次执行，并将返回值作为下一个函数的参数。\n\n### 举个例子\n\n假设我们有一下三个函数\n\n```lua\nfunction double(arg) {\n  return arg*2\n}\nfunction triple(arg) {\n  return arg*3\n}\nfunction fourfold(arg) {\n  return arg*4\n}\n```\n\n现在需要将他们依次执行，并获得返回值，我们可以这么写\n\n```ini\nvar a2 = double(1);\nvar a3 = triple(a2);\nvar a4 = fourfold(a3)\n```\n\n或者\n\n```less\nvar a4 = fourfold(triple(double(1)))\n```\n\n这两种写法，前一种易读但冗余；后一种简洁但增加了耦合性：如果其中一个函数需要改成其他的实现，改起来就会比较麻烦。\n\n而如果用compose：\n\n```scss\ncompose(fourfold,triple,double)(1)\n```\n\n不仅简洁易读，而且函数的组装变得更灵活。","source":"_posts/Redux5源码解析  compose.md","raw":"---\n title: \"Redux5源码解析: compose\"\n date: 2022-01-18\n tags: [前端]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第1天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nRedux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。\n\ncompose\n-------\n\n这是Redux中我最喜欢的一个api，虽然当初刚上手Redux的时候始终无法get其中的含义，但一看源码便瞬间明白了。\n\n### 用法\n\n```js\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport DevTools from './containers/DevTools'\nimport reducer from '../reducers'\n\nconst store = createStore(\n    reducer,\n    compose(applyMiddleware(thunk), DevTools.instrument())\n)\n```\n\n在Redux中，这个函数常常用来增强store，比如通过[`applyMiddleware`](https://redux.js.org%2Fapi%2Fapplymiddleware \"https://redux.js.org/api/applymiddleware\")增加中间件。\n\n但是compose的本意是组装，和store增强并没有关系，这是理解这个api的一个误区。真正理解这个api可以直接看源码。\n\n### 源码实现\n\n```javascript\nexport default function compose(...funcs: Function[]) {\n  if (funcs.length === 0) {\n    // infer the argument type so it is usable in inference down the line\n    return <T>(arg: T) => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce(\n    (a, b) =>\n      (...args: any) =>\n        a(b(...args))\n  )\n}\n\n```\n\ncompose的源码很简单：\n\n如果传入多个函数参数，`funcs`数组会通过`reduce`组装为一个函数，并返回。而这个函数执行的效果便是将这些函数从右往左依次执行，并将返回值作为下一个函数的参数。\n\n### 举个例子\n\n假设我们有一下三个函数\n\n```lua\nfunction double(arg) {\n  return arg*2\n}\nfunction triple(arg) {\n  return arg*3\n}\nfunction fourfold(arg) {\n  return arg*4\n}\n```\n\n现在需要将他们依次执行，并获得返回值，我们可以这么写\n\n```ini\nvar a2 = double(1);\nvar a3 = triple(a2);\nvar a4 = fourfold(a3)\n```\n\n或者\n\n```less\nvar a4 = fourfold(triple(double(1)))\n```\n\n这两种写法，前一种易读但冗余；后一种简洁但增加了耦合性：如果其中一个函数需要改成其他的实现，改起来就会比较麻烦。\n\n而如果用compose：\n\n```scss\ncompose(fourfold,triple,double)(1)\n```\n\n不仅简洁易读，而且函数的组装变得更灵活。","slug":"Redux5源码解析  compose","published":1,"updated":"2024-04-04T15:27:03.719Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lho0026hajfhcalcg34","content":"<p>「这是我参与2022首次更文挑战的第1天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>Redux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。</p>\n<h2 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a>compose</h2><p>这是Redux中我最喜欢的一个api，虽然当初刚上手Redux的时候始终无法get其中的含义，但一看源码便瞬间明白了。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> thunk <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux-thunk&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">DevTools</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./containers/DevTools&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../reducers&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(</span><br><span class=\"line\">    reducer,</span><br><span class=\"line\">    <span class=\"title function_\">compose</span>(<span class=\"title function_\">applyMiddleware</span>(thunk), <span class=\"title class_\">DevTools</span>.<span class=\"title function_\">instrument</span>())</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>在Redux中，这个函数常常用来增强store，比如通过<a href=\"https://redux.js.org%2Fapi%2Fapplymiddleware\" title=\"https://redux.js.org/api/applymiddleware\"><code>applyMiddleware</code></a>增加中间件。</p>\n<p>但是compose的本意是组装，和store增强并没有关系，这是理解这个api的一个误区。真正理解这个api可以直接看源码。</p>\n<h3 id=\"源码实现\"><a href=\"#源码实现\" class=\"headerlink\" title=\"源码实现\"></a>源码实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">compose</span>(<span class=\"params\">...funcs: <span class=\"built_in\">Function</span>[]</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// infer the argument type so it is usable in inference down the line</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;T&gt;<span class=\"function\">(<span class=\"params\">arg: T</span>) =&gt;</span> arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcs.<span class=\"title function_\">reduce</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span></span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">...args: any</span>) =&gt;</span></span><br><span class=\"line\">        <span class=\"title function_\">a</span>(<span class=\"title function_\">b</span>(...args))</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>compose的源码很简单：</p>\n<p>如果传入多个函数参数，<code>funcs</code>数组会通过<code>reduce</code>组装为一个函数，并返回。而这个函数执行的效果便是将这些函数从右往左依次执行，并将返回值作为下一个函数的参数。</p>\n<h3 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h3><p>假设我们有一下三个函数</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">double</span><span class=\"params\">(arg)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">arg</span>*<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">triple</span><span class=\"params\">(arg)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">arg</span>*<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fourfold</span><span class=\"params\">(arg)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">arg</span>*<span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在需要将他们依次执行，并获得返回值，我们可以这么写</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"attr\">a2</span> = double(<span class=\"number\">1</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">var <span class=\"attr\">a3</span> = triple(a2)<span class=\"comment\">;</span></span><br><span class=\"line\">var <span class=\"attr\">a4</span> = fourfold(a3)</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a4</span> = <span class=\"selector-tag\">fourfold</span>(<span class=\"built_in\">triple</span>(<span class=\"built_in\">double</span>(<span class=\"number\">1</span>)))</span><br></pre></td></tr></table></figure>\n\n<p>这两种写法，前一种易读但冗余；后一种简洁但增加了耦合性：如果其中一个函数需要改成其他的实现，改起来就会比较麻烦。</p>\n<p>而如果用compose：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">compose</span>(fourfold,triple,double)(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>不仅简洁易读，而且函数的组装变得更灵活。</p>\n","length":1384,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第1天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>Redux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。</p>\n<h2 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a>compose</h2><p>这是Redux中我最喜欢的一个api，虽然当初刚上手Redux的时候始终无法get其中的含义，但一看源码便瞬间明白了。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> thunk <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux-thunk&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">DevTools</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./containers/DevTools&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../reducers&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(</span><br><span class=\"line\">    reducer,</span><br><span class=\"line\">    <span class=\"title function_\">compose</span>(<span class=\"title function_\">applyMiddleware</span>(thunk), <span class=\"title class_\">DevTools</span>.<span class=\"title function_\">instrument</span>())</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>在Redux中，这个函数常常用来增强store，比如通过<a href=\"https://redux.js.org%2Fapi%2Fapplymiddleware\" title=\"https://redux.js.org/api/applymiddleware\"><code>applyMiddleware</code></a>增加中间件。</p>\n<p>但是compose的本意是组装，和store增强并没有关系，这是理解这个api的一个误区。真正理解这个api可以直接看源码。</p>\n<h3 id=\"源码实现\"><a href=\"#源码实现\" class=\"headerlink\" title=\"源码实现\"></a>源码实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">compose</span>(<span class=\"params\">...funcs: <span class=\"built_in\">Function</span>[]</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// infer the argument type so it is usable in inference down the line</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;T&gt;<span class=\"function\">(<span class=\"params\">arg: T</span>) =&gt;</span> arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcs.<span class=\"title function_\">reduce</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span></span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">...args: any</span>) =&gt;</span></span><br><span class=\"line\">        <span class=\"title function_\">a</span>(<span class=\"title function_\">b</span>(...args))</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>compose的源码很简单：</p>\n<p>如果传入多个函数参数，<code>funcs</code>数组会通过<code>reduce</code>组装为一个函数，并返回。而这个函数执行的效果便是将这些函数从右往左依次执行，并将返回值作为下一个函数的参数。</p>\n<h3 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h3><p>假设我们有一下三个函数</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">double</span><span class=\"params\">(arg)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">arg</span>*<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">triple</span><span class=\"params\">(arg)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">arg</span>*<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fourfold</span><span class=\"params\">(arg)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">arg</span>*<span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在需要将他们依次执行，并获得返回值，我们可以这么写</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"attr\">a2</span> = double(<span class=\"number\">1</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">var <span class=\"attr\">a3</span> = triple(a2)<span class=\"comment\">;</span></span><br><span class=\"line\">var <span class=\"attr\">a4</span> = fourfold(a3)</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a4</span> = <span class=\"selector-tag\">fourfold</span>(<span class=\"built_in\">triple</span>(<span class=\"built_in\">double</span>(<span class=\"number\">1</span>)))</span><br></pre></td></tr></table></figure>\n\n<p>这两种写法，前一种易读但冗余；后一种简洁但增加了耦合性：如果其中一个函数需要改成其他的实现，改起来就会比较麻烦。</p>\n<p>而如果用compose：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">compose</span>(fourfold,triple,double)(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>不仅简洁易读，而且函数的组装变得更灵活。</p>\n"},{"title":"Redux5源码解析：store与reducer","date":"2022-01-20T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第4天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nRedux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。\n\nstore\n-----\n\n`createStore`用来创建store，可以接收三个参数： `createStore(reducer, [preloadedState], [enhancer])`\n\npreloadedState是初始state，enhancer是中间件\n\n源码如下：\n\n```js\nfunction createStore(\n  reducer,\n  preloadedState?,\n  enhancer?\n){\n      if (typeof enhancer !== 'undefined') {\n\n        return enhancer(createStore)(\n          reducer,\n          preloadedState\n        )\n      }\n     ...\n     const store = {\n        dispatch: dispatch as Dispatch<A>,\n        subscribe,\n        getState,\n        replaceReducer,\n        [$$observable]: observable\n    }\n    return store\n\n}\n```\n\nstore就是一个由dispatch、subscribe、 getState和 replaceReducer组成的对象\n\n### getState与currentState\n\nRedux将state维护在currentState变量中，并提供getState获取state，禁止直接获取\n\n```js\n let currentState = preloadedState \n ...\n function getState() {\n    if (isDispatching) {\n      throw new Error(/*dispatching时禁止读取 */)\n    }\n\n    return currentState \n }\n\n```\n\n### reducer、 dispatch与subscribe\n\ndispatch的时候会将state与action交给reducer处理，并将currentState更新问reducer返回的state。之后调用通过subscribe注册的listener\n\n```js\nlet currentReducer = reducer\nfunction subscribe(listener) {\n   \n    let isSubscribed = true\n\n    ensureCanMutateNextListeners()\n    nextListeners.push(listener)\n\n    return function unsubscribe() { ...}\n }\n\nfunction dispatch(action: A) {\n    \n    try {\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n      isDispatching = false\n    }\n\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i]\n      listener()\n    }\n\n    return action\n  }\n```\n\n### 其他属性\n\n*   `replaceReducer`:支持动态更换reducer\n*   `[$$observable]: observable`可以将Redux与其他observable/reactive的lib搭配\n\nreducer\n-------\n\nreducer是一个接收action和state，并返回一个新的state的函数。除了createStore，与之相关的另一个顶层api是`combineReducers`。虽然Redux不支持多store,但通过这个api，我们能够以namespace切分state。\n\n用法如下：\n\n```js\n// reducers/todos.js\nexport default function todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([action.text])\n    default:\n      return state\n  }\n}\n// reducers/counter.js\nexport default function counter(state = 0, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1\n    case 'DECREMENT':\n      return state - 1\n    default:\n      return state#### `reducers/index.js`\n  }\n}\n// reducers/index.js\nimport { combineReducers } from 'redux'\nimport todos from './todos'\nimport counter from './counter'\n\nexport default combineReducers({\n  todos,\n  counter\n})\n// App.js\nimport { createStore } from 'redux'\nimport reducer from './reducers/index'\n\nconst store = createStore(reducer)\nconsole.log(store.getState())\n// {\n// counter: 0,\n// todos: []\n// }\n```\n\n### 核心源码\n\n```js\nexport default function combineReducers(reducers: ReducersMapObject) {\n  ...\n  return function combination(\n    state: StateFromReducersMapObject<typeof reducers> = {},\n    action: AnyAction\n  ) {\n    let hasChanged = false\n    const nextState: StateFromReducersMapObject<typeof reducers> = {}\n    // 这里调用了所有的reducer\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i]\n      const reducer = finalReducers[key]\n      const previousStateForKey = state[key]\n      const nextStateForKey = reducer(previousStateForKey, action)\n     \n      nextState[key] = nextStateForKey\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    hasChanged =\n      hasChanged || finalReducerKeys.length !== Object.keys(state).length\n    return hasChanged ? nextState : state\n  }\n}\n\n```\n\n**从源码看出这里有个坑：**\n\n当dispatch的时候，Redux并不能判断应该由哪个reducer执行，因此一股脑让所有的reducer都执行了一遍。通过判断返回的state与原本的state是否相同，确定是返回原先的state还是新的state。这样可以避免触发多余的listener。\n\n**因此reducer中如果没有action匹配，那么务必要`return state`,返回原本的state,而不能返回一个对象字面量或新的state**。\n\nbindActionCreators\n------------------\n\n这个api用来简化dispatch和action，可以理解为柯里化。\n\n比如组件需要进行这样一个调用：\n\n```js\ndispatch({\n    type: 'REMOVE_TODO',\n    id\n})\n```\n\n那么这个组件既要能够获取到dispatch，又要知道action的类型，但这些往往都不是子组件应该关心的。\n\n这时候就可以使用bindActionCreators，将action和dispatch封装起来。\n\n```js\nconst TodoActionCreators = {\n     removeTodo(id) {\n          return {\n                type: 'REMOVE_TODO',\n                id\n          }\n    }\n}\n const { removeTodo } = useMemo(\n    () => bindActionCreators(TodoActionCreators, dispatch),\n    [dispatch]\n  )\n```\n\n### 核心源码\n\n```js\nfunction bindActionCreator<A extends AnyAction = AnyAction>(\n  actionCreator: ActionCreator<A>,\n  dispatch: Dispatch\n) {\n  return function (this: any, ...args: any[]) {\n      //核心源码就这一句\n    return dispatch(actionCreator.apply(this, args))\n  }\n}\n\nexport default function bindActionCreators(\n  actionCreators: ActionCreator<any> | ActionCreatorsMapObject,\n  dispatch: Dispatch\n) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch)\n  }\n\n  const boundActionCreators: ActionCreatorsMapObject = {}\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)\n    }\n  }\n  return boundActionCreators\n}\n\n```\n\n里面的核心就一行`dispatch(actionCreator.apply(this, args))`。\n\n### react-redux\n\nRedux本身只提供了store的创建和管理，后续系列将从react-redux源码看它与react是如何结合的。\n\n未完待续~","source":"_posts/Redux5源码解析：store与reducer.md","raw":"---\n title: \"Redux5源码解析：store与reducer\"\n date: 2022-01-21\n tags: [前端]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第4天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nRedux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。\n\nstore\n-----\n\n`createStore`用来创建store，可以接收三个参数： `createStore(reducer, [preloadedState], [enhancer])`\n\npreloadedState是初始state，enhancer是中间件\n\n源码如下：\n\n```js\nfunction createStore(\n  reducer,\n  preloadedState?,\n  enhancer?\n){\n      if (typeof enhancer !== 'undefined') {\n\n        return enhancer(createStore)(\n          reducer,\n          preloadedState\n        )\n      }\n     ...\n     const store = {\n        dispatch: dispatch as Dispatch<A>,\n        subscribe,\n        getState,\n        replaceReducer,\n        [$$observable]: observable\n    }\n    return store\n\n}\n```\n\nstore就是一个由dispatch、subscribe、 getState和 replaceReducer组成的对象\n\n### getState与currentState\n\nRedux将state维护在currentState变量中，并提供getState获取state，禁止直接获取\n\n```js\n let currentState = preloadedState \n ...\n function getState() {\n    if (isDispatching) {\n      throw new Error(/*dispatching时禁止读取 */)\n    }\n\n    return currentState \n }\n\n```\n\n### reducer、 dispatch与subscribe\n\ndispatch的时候会将state与action交给reducer处理，并将currentState更新问reducer返回的state。之后调用通过subscribe注册的listener\n\n```js\nlet currentReducer = reducer\nfunction subscribe(listener) {\n   \n    let isSubscribed = true\n\n    ensureCanMutateNextListeners()\n    nextListeners.push(listener)\n\n    return function unsubscribe() { ...}\n }\n\nfunction dispatch(action: A) {\n    \n    try {\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n      isDispatching = false\n    }\n\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i]\n      listener()\n    }\n\n    return action\n  }\n```\n\n### 其他属性\n\n*   `replaceReducer`:支持动态更换reducer\n*   `[$$observable]: observable`可以将Redux与其他observable/reactive的lib搭配\n\nreducer\n-------\n\nreducer是一个接收action和state，并返回一个新的state的函数。除了createStore，与之相关的另一个顶层api是`combineReducers`。虽然Redux不支持多store,但通过这个api，我们能够以namespace切分state。\n\n用法如下：\n\n```js\n// reducers/todos.js\nexport default function todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([action.text])\n    default:\n      return state\n  }\n}\n// reducers/counter.js\nexport default function counter(state = 0, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1\n    case 'DECREMENT':\n      return state - 1\n    default:\n      return state#### `reducers/index.js`\n  }\n}\n// reducers/index.js\nimport { combineReducers } from 'redux'\nimport todos from './todos'\nimport counter from './counter'\n\nexport default combineReducers({\n  todos,\n  counter\n})\n// App.js\nimport { createStore } from 'redux'\nimport reducer from './reducers/index'\n\nconst store = createStore(reducer)\nconsole.log(store.getState())\n// {\n// counter: 0,\n// todos: []\n// }\n```\n\n### 核心源码\n\n```js\nexport default function combineReducers(reducers: ReducersMapObject) {\n  ...\n  return function combination(\n    state: StateFromReducersMapObject<typeof reducers> = {},\n    action: AnyAction\n  ) {\n    let hasChanged = false\n    const nextState: StateFromReducersMapObject<typeof reducers> = {}\n    // 这里调用了所有的reducer\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i]\n      const reducer = finalReducers[key]\n      const previousStateForKey = state[key]\n      const nextStateForKey = reducer(previousStateForKey, action)\n     \n      nextState[key] = nextStateForKey\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    hasChanged =\n      hasChanged || finalReducerKeys.length !== Object.keys(state).length\n    return hasChanged ? nextState : state\n  }\n}\n\n```\n\n**从源码看出这里有个坑：**\n\n当dispatch的时候，Redux并不能判断应该由哪个reducer执行，因此一股脑让所有的reducer都执行了一遍。通过判断返回的state与原本的state是否相同，确定是返回原先的state还是新的state。这样可以避免触发多余的listener。\n\n**因此reducer中如果没有action匹配，那么务必要`return state`,返回原本的state,而不能返回一个对象字面量或新的state**。\n\nbindActionCreators\n------------------\n\n这个api用来简化dispatch和action，可以理解为柯里化。\n\n比如组件需要进行这样一个调用：\n\n```js\ndispatch({\n    type: 'REMOVE_TODO',\n    id\n})\n```\n\n那么这个组件既要能够获取到dispatch，又要知道action的类型，但这些往往都不是子组件应该关心的。\n\n这时候就可以使用bindActionCreators，将action和dispatch封装起来。\n\n```js\nconst TodoActionCreators = {\n     removeTodo(id) {\n          return {\n                type: 'REMOVE_TODO',\n                id\n          }\n    }\n}\n const { removeTodo } = useMemo(\n    () => bindActionCreators(TodoActionCreators, dispatch),\n    [dispatch]\n  )\n```\n\n### 核心源码\n\n```js\nfunction bindActionCreator<A extends AnyAction = AnyAction>(\n  actionCreator: ActionCreator<A>,\n  dispatch: Dispatch\n) {\n  return function (this: any, ...args: any[]) {\n      //核心源码就这一句\n    return dispatch(actionCreator.apply(this, args))\n  }\n}\n\nexport default function bindActionCreators(\n  actionCreators: ActionCreator<any> | ActionCreatorsMapObject,\n  dispatch: Dispatch\n) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch)\n  }\n\n  const boundActionCreators: ActionCreatorsMapObject = {}\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)\n    }\n  }\n  return boundActionCreators\n}\n\n```\n\n里面的核心就一行`dispatch(actionCreator.apply(this, args))`。\n\n### react-redux\n\nRedux本身只提供了store的创建和管理，后续系列将从react-redux源码看它与react是如何结合的。\n\n未完待续~","slug":"Redux5源码解析：store与reducer","published":1,"updated":"2024-04-04T15:27:03.727Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lho002ahajfgz1gae4c","content":"<p>「这是我参与2022首次更文挑战的第4天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>Redux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。</p>\n<h2 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h2><p><code>createStore</code>用来创建store，可以接收三个参数： <code>createStore(reducer, [preloadedState], [enhancer])</code></p>\n<p>preloadedState是初始state，enhancer是中间件</p>\n<p>源码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createStore</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  reducer,</span></span><br><span class=\"line\"><span class=\"params\">  preloadedState?,</span></span><br><span class=\"line\"><span class=\"params\">  enhancer?</span></span><br><span class=\"line\"><span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">enhancer</span>(createStore)(</span><br><span class=\"line\">          reducer,</span><br><span class=\"line\">          preloadedState</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">     <span class=\"keyword\">const</span> store = &#123;</span><br><span class=\"line\">        <span class=\"attr\">dispatch</span>: dispatch <span class=\"keyword\">as</span> <span class=\"title class_\">Dispatch</span>&lt;A&gt;,</span><br><span class=\"line\">        subscribe,</span><br><span class=\"line\">        getState,</span><br><span class=\"line\">        replaceReducer,</span><br><span class=\"line\">        [$$observable]: observable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> store</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>store就是一个由dispatch、subscribe、 getState和 replaceReducer组成的对象</p>\n<h3 id=\"getState与currentState\"><a href=\"#getState与currentState\" class=\"headerlink\" title=\"getState与currentState\"></a>getState与currentState</h3><p>Redux将state维护在currentState变量中，并提供getState获取state，禁止直接获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> currentState = preloadedState </span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getState</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"comment\">/*dispatching时禁止读取 */</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> currentState </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reducer、-dispatch与subscribe\"><a href=\"#reducer、-dispatch与subscribe\" class=\"headerlink\" title=\"reducer、 dispatch与subscribe\"></a>reducer、 dispatch与subscribe</h3><p>dispatch的时候会将state与action交给reducer处理，并将currentState更新问reducer返回的state。之后调用通过subscribe注册的listener</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> currentReducer = reducer</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">subscribe</span>(<span class=\"params\">listener</span>) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">ensureCanMutateNextListeners</span>()</span><br><span class=\"line\">    nextListeners.<span class=\"title function_\">push</span>(listener)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unsubscribe</span>(<span class=\"params\"></span>) &#123; ...&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dispatch</span>(<span class=\"params\">action: A</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">true</span></span><br><span class=\"line\">      currentState = <span class=\"title function_\">currentReducer</span>(currentState, action)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> listeners = (currentListeners = nextListeners)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listener = listeners[i]</span><br><span class=\"line\">      <span class=\"title function_\">listener</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> action</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他属性\"><a href=\"#其他属性\" class=\"headerlink\" title=\"其他属性\"></a>其他属性</h3><ul>\n<li><code>replaceReducer</code>:支持动态更换reducer</li>\n<li><code>[$$observable]: observable</code>可以将Redux与其他observable&#x2F;reactive的lib搭配</li>\n</ul>\n<h2 id=\"reducer\"><a href=\"#reducer\" class=\"headerlink\" title=\"reducer\"></a>reducer</h2><p>reducer是一个接收action和state，并返回一个新的state的函数。除了createStore，与之相关的另一个顶层api是<code>combineReducers</code>。虽然Redux不支持多store,但通过这个api，我们能够以namespace切分state。</p>\n<p>用法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reducers/todos.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">todos</span>(<span class=\"params\">state = [], action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;ADD_TODO&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.<span class=\"title function_\">concat</span>([action.<span class=\"property\">text</span>])</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// reducers/counter.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;INCREMENT&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;DECREMENT&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state#### <span class=\"string\">`reducers/index.js`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// reducers/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> todos <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./todos&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> counter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./counter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">combineReducers</span>(&#123;</span><br><span class=\"line\">  todos,</span><br><span class=\"line\">  counter</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// App.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./reducers/index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// counter: 0,</span></span><br><span class=\"line\"><span class=\"comment\">// todos: []</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心源码\"><a href=\"#核心源码\" class=\"headerlink\" title=\"核心源码\"></a>核心源码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">combineReducers</span>(<span class=\"params\">reducers: ReducersMapObject</span>) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">combination</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    state: StateFromReducersMapObject&lt;<span class=\"keyword\">typeof</span> reducers&gt; = &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"params\">    action: AnyAction</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasChanged = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">nextState</span>: <span class=\"title class_\">StateFromReducersMapObject</span>&lt;<span class=\"keyword\">typeof</span> reducers&gt; = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这里调用了所有的reducer</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; finalReducerKeys.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> key = finalReducerKeys[i]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> reducer = finalReducers[key]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> previousStateForKey = state[key]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextStateForKey = <span class=\"title function_\">reducer</span>(previousStateForKey, action)</span><br><span class=\"line\">     </span><br><span class=\"line\">      nextState[key] = nextStateForKey</span><br><span class=\"line\">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hasChanged =</span><br><span class=\"line\">      hasChanged || finalReducerKeys.<span class=\"property\">length</span> !== <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(state).<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasChanged ? nextState : state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>从源码看出这里有个坑：</strong></p>\n<p>当dispatch的时候，Redux并不能判断应该由哪个reducer执行，因此一股脑让所有的reducer都执行了一遍。通过判断返回的state与原本的state是否相同，确定是返回原先的state还是新的state。这样可以避免触发多余的listener。</p>\n<p><strong>因此reducer中如果没有action匹配，那么务必要<code>return state</code>,返回原本的state,而不能返回一个对象字面量或新的state</strong>。</p>\n<h2 id=\"bindActionCreators\"><a href=\"#bindActionCreators\" class=\"headerlink\" title=\"bindActionCreators\"></a>bindActionCreators</h2><p>这个api用来简化dispatch和action，可以理解为柯里化。</p>\n<p>比如组件需要进行这样一个调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">dispatch</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;REMOVE_TODO&#x27;</span>,</span><br><span class=\"line\">    id</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>那么这个组件既要能够获取到dispatch，又要知道action的类型，但这些往往都不是子组件应该关心的。</p>\n<p>这时候就可以使用bindActionCreators，将action和dispatch封装起来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TodoActionCreators</span> = &#123;</span><br><span class=\"line\">     <span class=\"title function_\">removeTodo</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">&#x27;REMOVE_TODO&#x27;</span>,</span><br><span class=\"line\">                id</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> &#123; removeTodo &#125; = <span class=\"title function_\">useMemo</span>(</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> <span class=\"title function_\">bindActionCreators</span>(<span class=\"title class_\">TodoActionCreators</span>, dispatch),</span><br><span class=\"line\">    [dispatch]</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心源码-1\"><a href=\"#核心源码-1\" class=\"headerlink\" title=\"核心源码\"></a>核心源码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> bindActionCreator&lt;A <span class=\"keyword\">extends</span> <span class=\"title class_\">AnyAction</span> = <span class=\"title class_\">AnyAction</span>&gt;(</span><br><span class=\"line\">  <span class=\"attr\">actionCreator</span>: <span class=\"title class_\">ActionCreator</span>&lt;A&gt;,</span><br><span class=\"line\">  <span class=\"attr\">dispatch</span>: <span class=\"title class_\">Dispatch</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">this</span>: any, ...args: any[]</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//核心源码就这一句</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">dispatch</span>(actionCreator.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bindActionCreators</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  actionCreators: ActionCreator&lt;any&gt; | ActionCreatorsMapObject,</span></span><br><span class=\"line\"><span class=\"params\">  dispatch: Dispatch</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">bindActionCreator</span>(actionCreators, dispatch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">boundActionCreators</span>: <span class=\"title class_\">ActionCreatorsMapObject</span> = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> actionCreators) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> actionCreator = actionCreators[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreator === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      boundActionCreators[key] = <span class=\"title function_\">bindActionCreator</span>(actionCreator, dispatch)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> boundActionCreators</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>里面的核心就一行<code>dispatch(actionCreator.apply(this, args))</code>。</p>\n<h3 id=\"react-redux\"><a href=\"#react-redux\" class=\"headerlink\" title=\"react-redux\"></a>react-redux</h3><p>Redux本身只提供了store的创建和管理，后续系列将从react-redux源码看它与react是如何结合的。</p>\n<p>未完待续~</p>\n","length":4999,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第4天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>Redux可以说是一个典型的小而精的lib，源码量及api数量都不多，但设计却十分巧妙。本系列将深入Redux5源码，探究其实现与设计。</p>\n<h2 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h2><p><code>createStore</code>用来创建store，可以接收三个参数： <code>createStore(reducer, [preloadedState], [enhancer])</code></p>\n<p>preloadedState是初始state，enhancer是中间件</p>\n<p>源码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createStore</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  reducer,</span></span><br><span class=\"line\"><span class=\"params\">  preloadedState?,</span></span><br><span class=\"line\"><span class=\"params\">  enhancer?</span></span><br><span class=\"line\"><span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">enhancer</span>(createStore)(</span><br><span class=\"line\">          reducer,</span><br><span class=\"line\">          preloadedState</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">     <span class=\"keyword\">const</span> store = &#123;</span><br><span class=\"line\">        <span class=\"attr\">dispatch</span>: dispatch <span class=\"keyword\">as</span> <span class=\"title class_\">Dispatch</span>&lt;A&gt;,</span><br><span class=\"line\">        subscribe,</span><br><span class=\"line\">        getState,</span><br><span class=\"line\">        replaceReducer,</span><br><span class=\"line\">        [$$observable]: observable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> store</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>store就是一个由dispatch、subscribe、 getState和 replaceReducer组成的对象</p>\n<h3 id=\"getState与currentState\"><a href=\"#getState与currentState\" class=\"headerlink\" title=\"getState与currentState\"></a>getState与currentState</h3><p>Redux将state维护在currentState变量中，并提供getState获取state，禁止直接获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> currentState = preloadedState </span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getState</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"comment\">/*dispatching时禁止读取 */</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> currentState </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reducer、-dispatch与subscribe\"><a href=\"#reducer、-dispatch与subscribe\" class=\"headerlink\" title=\"reducer、 dispatch与subscribe\"></a>reducer、 dispatch与subscribe</h3><p>dispatch的时候会将state与action交给reducer处理，并将currentState更新问reducer返回的state。之后调用通过subscribe注册的listener</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> currentReducer = reducer</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">subscribe</span>(<span class=\"params\">listener</span>) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">ensureCanMutateNextListeners</span>()</span><br><span class=\"line\">    nextListeners.<span class=\"title function_\">push</span>(listener)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unsubscribe</span>(<span class=\"params\"></span>) &#123; ...&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dispatch</span>(<span class=\"params\">action: A</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">true</span></span><br><span class=\"line\">      currentState = <span class=\"title function_\">currentReducer</span>(currentState, action)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> listeners = (currentListeners = nextListeners)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listener = listeners[i]</span><br><span class=\"line\">      <span class=\"title function_\">listener</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> action</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他属性\"><a href=\"#其他属性\" class=\"headerlink\" title=\"其他属性\"></a>其他属性</h3><ul>\n<li><code>replaceReducer</code>:支持动态更换reducer</li>\n<li><code>[$$observable]: observable</code>可以将Redux与其他observable&#x2F;reactive的lib搭配</li>\n</ul>\n<h2 id=\"reducer\"><a href=\"#reducer\" class=\"headerlink\" title=\"reducer\"></a>reducer</h2><p>reducer是一个接收action和state，并返回一个新的state的函数。除了createStore，与之相关的另一个顶层api是<code>combineReducers</code>。虽然Redux不支持多store,但通过这个api，我们能够以namespace切分state。</p>\n<p>用法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reducers/todos.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">todos</span>(<span class=\"params\">state = [], action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;ADD_TODO&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.<span class=\"title function_\">concat</span>([action.<span class=\"property\">text</span>])</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// reducers/counter.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;INCREMENT&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;DECREMENT&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state#### <span class=\"string\">`reducers/index.js`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// reducers/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> todos <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./todos&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> counter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./counter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">combineReducers</span>(&#123;</span><br><span class=\"line\">  todos,</span><br><span class=\"line\">  counter</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// App.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./reducers/index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// counter: 0,</span></span><br><span class=\"line\"><span class=\"comment\">// todos: []</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心源码\"><a href=\"#核心源码\" class=\"headerlink\" title=\"核心源码\"></a>核心源码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">combineReducers</span>(<span class=\"params\">reducers: ReducersMapObject</span>) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">combination</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    state: StateFromReducersMapObject&lt;<span class=\"keyword\">typeof</span> reducers&gt; = &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"params\">    action: AnyAction</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasChanged = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">nextState</span>: <span class=\"title class_\">StateFromReducersMapObject</span>&lt;<span class=\"keyword\">typeof</span> reducers&gt; = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这里调用了所有的reducer</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; finalReducerKeys.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> key = finalReducerKeys[i]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> reducer = finalReducers[key]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> previousStateForKey = state[key]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextStateForKey = <span class=\"title function_\">reducer</span>(previousStateForKey, action)</span><br><span class=\"line\">     </span><br><span class=\"line\">      nextState[key] = nextStateForKey</span><br><span class=\"line\">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hasChanged =</span><br><span class=\"line\">      hasChanged || finalReducerKeys.<span class=\"property\">length</span> !== <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(state).<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasChanged ? nextState : state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>从源码看出这里有个坑：</strong></p>\n<p>当dispatch的时候，Redux并不能判断应该由哪个reducer执行，因此一股脑让所有的reducer都执行了一遍。通过判断返回的state与原本的state是否相同，确定是返回原先的state还是新的state。这样可以避免触发多余的listener。</p>\n<p><strong>因此reducer中如果没有action匹配，那么务必要<code>return state</code>,返回原本的state,而不能返回一个对象字面量或新的state</strong>。</p>\n<h2 id=\"bindActionCreators\"><a href=\"#bindActionCreators\" class=\"headerlink\" title=\"bindActionCreators\"></a>bindActionCreators</h2><p>这个api用来简化dispatch和action，可以理解为柯里化。</p>\n<p>比如组件需要进行这样一个调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">dispatch</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;REMOVE_TODO&#x27;</span>,</span><br><span class=\"line\">    id</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>那么这个组件既要能够获取到dispatch，又要知道action的类型，但这些往往都不是子组件应该关心的。</p>\n<p>这时候就可以使用bindActionCreators，将action和dispatch封装起来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TodoActionCreators</span> = &#123;</span><br><span class=\"line\">     <span class=\"title function_\">removeTodo</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">&#x27;REMOVE_TODO&#x27;</span>,</span><br><span class=\"line\">                id</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> &#123; removeTodo &#125; = <span class=\"title function_\">useMemo</span>(</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> <span class=\"title function_\">bindActionCreators</span>(<span class=\"title class_\">TodoActionCreators</span>, dispatch),</span><br><span class=\"line\">    [dispatch]</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心源码-1\"><a href=\"#核心源码-1\" class=\"headerlink\" title=\"核心源码\"></a>核心源码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> bindActionCreator&lt;A <span class=\"keyword\">extends</span> <span class=\"title class_\">AnyAction</span> = <span class=\"title class_\">AnyAction</span>&gt;(</span><br><span class=\"line\">  <span class=\"attr\">actionCreator</span>: <span class=\"title class_\">ActionCreator</span>&lt;A&gt;,</span><br><span class=\"line\">  <span class=\"attr\">dispatch</span>: <span class=\"title class_\">Dispatch</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">this</span>: any, ...args: any[]</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//核心源码就这一句</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">dispatch</span>(actionCreator.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bindActionCreators</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  actionCreators: ActionCreator&lt;any&gt; | ActionCreatorsMapObject,</span></span><br><span class=\"line\"><span class=\"params\">  dispatch: Dispatch</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">bindActionCreator</span>(actionCreators, dispatch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">boundActionCreators</span>: <span class=\"title class_\">ActionCreatorsMapObject</span> = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> actionCreators) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> actionCreator = actionCreators[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreator === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      boundActionCreators[key] = <span class=\"title function_\">bindActionCreator</span>(actionCreator, dispatch)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> boundActionCreators</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>里面的核心就一行<code>dispatch(actionCreator.apply(this, args))</code>。</p>\n<h3 id=\"react-redux\"><a href=\"#react-redux\" class=\"headerlink\" title=\"react-redux\"></a>react-redux</h3><p>Redux本身只提供了store的创建和管理，后续系列将从react-redux源码看它与react是如何结合的。</p>\n<p>未完待续~</p>\n"},{"title":"TypeORM 快速入门","date":"2022-02-13T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第19天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\nTypeORM 是一个ORM框架。ORM(Object–relational mapping) 是指对象关系映射，是一种将某种编程语言中的对象转换为其他不兼容系统中的数据。ORM最常见使用便是对象与数据库表之间的转换。\n\n通常一个ORM框架会有这些能力：\n\n*   定义实体类\n*   连接数据库\n*   能够根据实体类结构生成表结构，或者能够根据表结构生成实体对象\n*   生成curd代码或减少curd代码的编写\n\n本文介绍Node.js中最常用的ORM框架——TypeORM。\n\n初始化项目\n-----\n\nTypeORM提供了很多方便的命令，因此首先全局安装typeorm\n\n```\nnpm install typeorm -g\n```\n\ntypeorm 的init命令可以快速创建一个项目：\n\n```css\ntypeorm init --name typeorm-demo1 --database mysql\n```\n\n如果使用docker，可以加上`--docker`参数\n\n```csharp\ntypeorm init --docker\n```\n\n这会生成docker-compose.yml文件：\n\n![image.png](../imgs/3209f6a93a2248ca9199a589e075ee45.png)\n\n### 目录结构\n\n使用init命令初始化的项目具有如下结构：\n\n```go\n├── src              // TypeScript 代码\n│   ├── entity       // 存储实体（数据库模型）的位置\n│   │   └── User.ts  // 示例 entity\n│   ├── migration    // 存储迁移的目录\n│   └── index.ts     // 程序执行主文件\n├── .gitignore       // gitignore文件\n├── ormconfig.json   // ORM和数据库连接配置\n├── package.json     // node module 依赖\n├── README.md        // 简单的 readme 文件\n└── tsconfig.json    // TypeScript 编译选项\n```\n\n其中ormconfig.json文件定义了数据库连接的配置信息：\n\n![image.png](../imgs/f1f6b49c0a334c908a0b12e0c1066146.png)\n\n创建实体\n----\n\n一个实体类往往对应数据库中的一张表。我们可以使用`entity:create`命令创建一个实体类\n\n```lua\ntypeorm entity:create -n Teacher\n```\n\ntypeorm会在配置文件中`entitiesDir`定义的位置生成一个空Entity。\n\n```ts\nimport {Entity} from \"typeorm\";\n\n@Entity()\nexport class Teacher {\n\n}\n\n```\n\n### 声明表列@Column\n\n假设Teacher类具有如下属性：\n\n```typescript\nexport class Teacher {\n\n    id: number;\n\n    name: string;\n\n    age: number;\n\n    course:string;\n}\n\n```\n\n我们需要使用`@Column`将这些属性映射到数据库表的列：\n\n```ts\n@Entity()\nexport class Teacher {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column()\n    name: string;\n    @Column()\n    age: number;\n    @Column()\n    course:string;\n}\n```\n\n#### 列的数据类型\n\n数据库中的列类型是根据你使用的属性类型推断的，例如： `number`将被转换为`integer`，`string`将转换为`varchar`,但也可以手动指定：\n\n```less\n @Column({ type: 'varchar', length: 10, nullable: false, unique: true })\n @Column(\"double\")\n @Column(\"text\")\n```\n\n#### 主键字段\n\n每个实体类都必须有一个主键字段，主键字段使用`@PrimaryGeneratedColumn()`装饰\n\n#### 自动生成的字段\n\n如果主键是自动生成的，可以使用`@PrimaryGeneratedColumn()`\n\n同步数据库\n-----\n\n`createConnection`可以连接数据库，并根据Entity创建响应的表：\n\n```ini\ncreateConnection().then(async connection => {\n\n    ...\n}).catch(error => console.log(error));\n```\n\n`createConnection`可以手动传入数据库连接配置，但如果不传，会读取配置文件ormconfig.json中的内容。\n\nworkbench连接数据库后可以看到已经自动生成了表:\n\n![image.png](../imgs/0ed8b2854ce743ab80151ebbb15385ec.png)\n\n### 使用cli同步数据库\n\n`schema:sync`可以同步数据库结构，但是在ts项目中不能直接运行`typeorm schema:sync`。\n\n首先在package.json中增加script：\n\n```json\n\"typeorm\": \"ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js\"\n```\n\n然后就可以执行\n\n```bash\nyarn typeorm schema:sync\n```","source":"_posts/TypeORM 快速入门.md","raw":"---\n title: \"TypeORM 快速入门\"\n date: 2022-02-14\n tags: [Node.js]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第19天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\nTypeORM 是一个ORM框架。ORM(Object–relational mapping) 是指对象关系映射，是一种将某种编程语言中的对象转换为其他不兼容系统中的数据。ORM最常见使用便是对象与数据库表之间的转换。\n\n通常一个ORM框架会有这些能力：\n\n*   定义实体类\n*   连接数据库\n*   能够根据实体类结构生成表结构，或者能够根据表结构生成实体对象\n*   生成curd代码或减少curd代码的编写\n\n本文介绍Node.js中最常用的ORM框架——TypeORM。\n\n初始化项目\n-----\n\nTypeORM提供了很多方便的命令，因此首先全局安装typeorm\n\n```\nnpm install typeorm -g\n```\n\ntypeorm 的init命令可以快速创建一个项目：\n\n```css\ntypeorm init --name typeorm-demo1 --database mysql\n```\n\n如果使用docker，可以加上`--docker`参数\n\n```csharp\ntypeorm init --docker\n```\n\n这会生成docker-compose.yml文件：\n\n![image.png](../imgs/3209f6a93a2248ca9199a589e075ee45.png)\n\n### 目录结构\n\n使用init命令初始化的项目具有如下结构：\n\n```go\n├── src              // TypeScript 代码\n│   ├── entity       // 存储实体（数据库模型）的位置\n│   │   └── User.ts  // 示例 entity\n│   ├── migration    // 存储迁移的目录\n│   └── index.ts     // 程序执行主文件\n├── .gitignore       // gitignore文件\n├── ormconfig.json   // ORM和数据库连接配置\n├── package.json     // node module 依赖\n├── README.md        // 简单的 readme 文件\n└── tsconfig.json    // TypeScript 编译选项\n```\n\n其中ormconfig.json文件定义了数据库连接的配置信息：\n\n![image.png](../imgs/f1f6b49c0a334c908a0b12e0c1066146.png)\n\n创建实体\n----\n\n一个实体类往往对应数据库中的一张表。我们可以使用`entity:create`命令创建一个实体类\n\n```lua\ntypeorm entity:create -n Teacher\n```\n\ntypeorm会在配置文件中`entitiesDir`定义的位置生成一个空Entity。\n\n```ts\nimport {Entity} from \"typeorm\";\n\n@Entity()\nexport class Teacher {\n\n}\n\n```\n\n### 声明表列@Column\n\n假设Teacher类具有如下属性：\n\n```typescript\nexport class Teacher {\n\n    id: number;\n\n    name: string;\n\n    age: number;\n\n    course:string;\n}\n\n```\n\n我们需要使用`@Column`将这些属性映射到数据库表的列：\n\n```ts\n@Entity()\nexport class Teacher {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column()\n    name: string;\n    @Column()\n    age: number;\n    @Column()\n    course:string;\n}\n```\n\n#### 列的数据类型\n\n数据库中的列类型是根据你使用的属性类型推断的，例如： `number`将被转换为`integer`，`string`将转换为`varchar`,但也可以手动指定：\n\n```less\n @Column({ type: 'varchar', length: 10, nullable: false, unique: true })\n @Column(\"double\")\n @Column(\"text\")\n```\n\n#### 主键字段\n\n每个实体类都必须有一个主键字段，主键字段使用`@PrimaryGeneratedColumn()`装饰\n\n#### 自动生成的字段\n\n如果主键是自动生成的，可以使用`@PrimaryGeneratedColumn()`\n\n同步数据库\n-----\n\n`createConnection`可以连接数据库，并根据Entity创建响应的表：\n\n```ini\ncreateConnection().then(async connection => {\n\n    ...\n}).catch(error => console.log(error));\n```\n\n`createConnection`可以手动传入数据库连接配置，但如果不传，会读取配置文件ormconfig.json中的内容。\n\nworkbench连接数据库后可以看到已经自动生成了表:\n\n![image.png](../imgs/0ed8b2854ce743ab80151ebbb15385ec.png)\n\n### 使用cli同步数据库\n\n`schema:sync`可以同步数据库结构，但是在ts项目中不能直接运行`typeorm schema:sync`。\n\n首先在package.json中增加script：\n\n```json\n\"typeorm\": \"ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js\"\n```\n\n然后就可以执行\n\n```bash\nyarn typeorm schema:sync\n```","slug":"TypeORM 快速入门","published":1,"updated":"2024-04-04T15:27:03.770Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lho002dhajf7iqu812a","content":"<p>「这是我参与2022首次更文挑战的第19天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>TypeORM 是一个ORM框架。ORM(Object–relational mapping) 是指对象关系映射，是一种将某种编程语言中的对象转换为其他不兼容系统中的数据。ORM最常见使用便是对象与数据库表之间的转换。</p>\n<p>通常一个ORM框架会有这些能力：</p>\n<ul>\n<li>定义实体类</li>\n<li>连接数据库</li>\n<li>能够根据实体类结构生成表结构，或者能够根据表结构生成实体对象</li>\n<li>生成curd代码或减少curd代码的编写</li>\n</ul>\n<p>本文介绍Node.js中最常用的ORM框架——TypeORM。</p>\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><p>TypeORM提供了很多方便的命令，因此首先全局安装typeorm</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install typeorm -g</span><br></pre></td></tr></table></figure>\n\n<p>typeorm 的init命令可以快速创建一个项目：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeorm init <span class=\"attr\">--name</span> typeorm-demo1 <span class=\"attr\">--database</span> mysql</span><br></pre></td></tr></table></figure>\n\n<p>如果使用docker，可以加上<code>--docker</code>参数</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeorm <span class=\"keyword\">init</span> --docker</span><br></pre></td></tr></table></figure>\n\n<p>这会生成docker-compose.yml文件：</p>\n<p><img src=\"/../imgs/3209f6a93a2248ca9199a589e075ee45.png\" alt=\"image.png\"></p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><p>使用init命令初始化的项目具有如下结构：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── src              <span class=\"comment\">// TypeScript 代码</span></span><br><span class=\"line\">│   ├── entity       <span class=\"comment\">// 存储实体（数据库模型）的位置</span></span><br><span class=\"line\">│   │   └── User.ts  <span class=\"comment\">// 示例 entity</span></span><br><span class=\"line\">│   ├── migration    <span class=\"comment\">// 存储迁移的目录</span></span><br><span class=\"line\">│   └── index.ts     <span class=\"comment\">// 程序执行主文件</span></span><br><span class=\"line\">├── .gitignore       <span class=\"comment\">// gitignore文件</span></span><br><span class=\"line\">├── ormconfig.json   <span class=\"comment\">// ORM和数据库连接配置</span></span><br><span class=\"line\">├── <span class=\"keyword\">package</span>.json     <span class=\"comment\">// node module 依赖</span></span><br><span class=\"line\">├── README.md        <span class=\"comment\">// 简单的 readme 文件</span></span><br><span class=\"line\">└── tsconfig.json    <span class=\"comment\">// TypeScript 编译选项</span></span><br></pre></td></tr></table></figure>\n\n<p>其中ormconfig.json文件定义了数据库连接的配置信息：</p>\n<p><img src=\"/../imgs/f1f6b49c0a334c908a0b12e0c1066146.png\" alt=\"image.png\"></p>\n<h2 id=\"创建实体\"><a href=\"#创建实体\" class=\"headerlink\" title=\"创建实体\"></a>创建实体</h2><p>一个实体类往往对应数据库中的一张表。我们可以使用<code>entity:create</code>命令创建一个实体类</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeorm entity:<span class=\"built_in\">create</span> -n Teacher</span><br></pre></td></tr></table></figure>\n\n<p>typeorm会在配置文件中<code>entitiesDir</code>定义的位置生成一个空Entity。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Entity</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;typeorm&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"声明表列-Column\"><a href=\"#声明表列-Column\" class=\"headerlink\" title=\"声明表列@Column\"></a>声明表列@Column</h3><p>假设Teacher类具有如下属性：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">course</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们需要使用<code>@Column</code>将这些属性映射到数据库表的列：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryGeneratedColumn</span>()</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>()</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>()</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>()</span><br><span class=\"line\">    <span class=\"attr\">course</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列的数据类型\"><a href=\"#列的数据类型\" class=\"headerlink\" title=\"列的数据类型\"></a>列的数据类型</h4><p>数据库中的列类型是根据你使用的属性类型推断的，例如： <code>number</code>将被转换为<code>integer</code>，<code>string</code>将转换为<code>varchar</code>,但也可以手动指定：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Column</span>(&#123; <span class=\"attribute\">type</span>: <span class=\"string\">&#x27;varchar&#x27;</span>, <span class=\"attribute\">length</span>: <span class=\"number\">10</span>, <span class=\"attribute\">nullable</span>: false, <span class=\"attribute\">unique</span>: true &#125;)</span><br><span class=\"line\"><span class=\"variable\">@Column</span>(<span class=\"string\">&quot;double&quot;</span>)</span><br><span class=\"line\"><span class=\"variable\">@Column</span>(<span class=\"string\">&quot;text&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"主键字段\"><a href=\"#主键字段\" class=\"headerlink\" title=\"主键字段\"></a>主键字段</h4><p>每个实体类都必须有一个主键字段，主键字段使用<code>@PrimaryGeneratedColumn()</code>装饰</p>\n<h4 id=\"自动生成的字段\"><a href=\"#自动生成的字段\" class=\"headerlink\" title=\"自动生成的字段\"></a>自动生成的字段</h4><p>如果主键是自动生成的，可以使用<code>@PrimaryGeneratedColumn()</code></p>\n<h2 id=\"同步数据库\"><a href=\"#同步数据库\" class=\"headerlink\" title=\"同步数据库\"></a>同步数据库</h2><p><code>createConnection</code>可以连接数据库，并根据Entity创建响应的表：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createConnection().then(async <span class=\"attr\">connection</span> =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;).catch(<span class=\"attr\">error</span> =&gt; console.log(error))<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>createConnection</code>可以手动传入数据库连接配置，但如果不传，会读取配置文件ormconfig.json中的内容。</p>\n<p>workbench连接数据库后可以看到已经自动生成了表:</p>\n<p><img src=\"/../imgs/0ed8b2854ce743ab80151ebbb15385ec.png\" alt=\"image.png\"></p>\n<h3 id=\"使用cli同步数据库\"><a href=\"#使用cli同步数据库\" class=\"headerlink\" title=\"使用cli同步数据库\"></a>使用cli同步数据库</h3><p><code>schema:sync</code>可以同步数据库结构，但是在ts项目中不能直接运行<code>typeorm schema:sync</code>。</p>\n<p>首先在package.json中增加script：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;typeorm&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后就可以执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn typeorm schema:<span class=\"built_in\">sync</span></span><br></pre></td></tr></table></figure>","length":2052,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第19天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>TypeORM 是一个ORM框架。ORM(Object–relational mapping) 是指对象关系映射，是一种将某种编程语言中的对象转换为其他不兼容系统中的数据。ORM最常见使用便是对象与数据库表之间的转换。</p>\n<p>通常一个ORM框架会有这些能力：</p>\n<ul>\n<li>定义实体类</li>\n<li>连接数据库</li>\n<li>能够根据实体类结构生成表结构，或者能够根据表结构生成实体对象</li>\n<li>生成curd代码或减少curd代码的编写</li>\n</ul>\n<p>本文介绍Node.js中最常用的ORM框架——TypeORM。</p>\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><p>TypeORM提供了很多方便的命令，因此首先全局安装typeorm</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install typeorm -g</span><br></pre></td></tr></table></figure>\n\n<p>typeorm 的init命令可以快速创建一个项目：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeorm init <span class=\"attr\">--name</span> typeorm-demo1 <span class=\"attr\">--database</span> mysql</span><br></pre></td></tr></table></figure>\n\n<p>如果使用docker，可以加上<code>--docker</code>参数</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeorm <span class=\"keyword\">init</span> --docker</span><br></pre></td></tr></table></figure>\n\n<p>这会生成docker-compose.yml文件：</p>\n<p><img src=\"/../imgs/3209f6a93a2248ca9199a589e075ee45.png\" alt=\"image.png\"></p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><p>使用init命令初始化的项目具有如下结构：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── src              <span class=\"comment\">// TypeScript 代码</span></span><br><span class=\"line\">│   ├── entity       <span class=\"comment\">// 存储实体（数据库模型）的位置</span></span><br><span class=\"line\">│   │   └── User.ts  <span class=\"comment\">// 示例 entity</span></span><br><span class=\"line\">│   ├── migration    <span class=\"comment\">// 存储迁移的目录</span></span><br><span class=\"line\">│   └── index.ts     <span class=\"comment\">// 程序执行主文件</span></span><br><span class=\"line\">├── .gitignore       <span class=\"comment\">// gitignore文件</span></span><br><span class=\"line\">├── ormconfig.json   <span class=\"comment\">// ORM和数据库连接配置</span></span><br><span class=\"line\">├── <span class=\"keyword\">package</span>.json     <span class=\"comment\">// node module 依赖</span></span><br><span class=\"line\">├── README.md        <span class=\"comment\">// 简单的 readme 文件</span></span><br><span class=\"line\">└── tsconfig.json    <span class=\"comment\">// TypeScript 编译选项</span></span><br></pre></td></tr></table></figure>\n\n<p>其中ormconfig.json文件定义了数据库连接的配置信息：</p>\n<p><img src=\"/../imgs/f1f6b49c0a334c908a0b12e0c1066146.png\" alt=\"image.png\"></p>\n<h2 id=\"创建实体\"><a href=\"#创建实体\" class=\"headerlink\" title=\"创建实体\"></a>创建实体</h2><p>一个实体类往往对应数据库中的一张表。我们可以使用<code>entity:create</code>命令创建一个实体类</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeorm entity:<span class=\"built_in\">create</span> -n Teacher</span><br></pre></td></tr></table></figure>\n\n<p>typeorm会在配置文件中<code>entitiesDir</code>定义的位置生成一个空Entity。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Entity</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;typeorm&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"声明表列-Column\"><a href=\"#声明表列-Column\" class=\"headerlink\" title=\"声明表列@Column\"></a>声明表列@Column</h3><p>假设Teacher类具有如下属性：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">course</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们需要使用<code>@Column</code>将这些属性映射到数据库表的列：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryGeneratedColumn</span>()</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>()</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>()</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>()</span><br><span class=\"line\">    <span class=\"attr\">course</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列的数据类型\"><a href=\"#列的数据类型\" class=\"headerlink\" title=\"列的数据类型\"></a>列的数据类型</h4><p>数据库中的列类型是根据你使用的属性类型推断的，例如： <code>number</code>将被转换为<code>integer</code>，<code>string</code>将转换为<code>varchar</code>,但也可以手动指定：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Column</span>(&#123; <span class=\"attribute\">type</span>: <span class=\"string\">&#x27;varchar&#x27;</span>, <span class=\"attribute\">length</span>: <span class=\"number\">10</span>, <span class=\"attribute\">nullable</span>: false, <span class=\"attribute\">unique</span>: true &#125;)</span><br><span class=\"line\"><span class=\"variable\">@Column</span>(<span class=\"string\">&quot;double&quot;</span>)</span><br><span class=\"line\"><span class=\"variable\">@Column</span>(<span class=\"string\">&quot;text&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"主键字段\"><a href=\"#主键字段\" class=\"headerlink\" title=\"主键字段\"></a>主键字段</h4><p>每个实体类都必须有一个主键字段，主键字段使用<code>@PrimaryGeneratedColumn()</code>装饰</p>\n<h4 id=\"自动生成的字段\"><a href=\"#自动生成的字段\" class=\"headerlink\" title=\"自动生成的字段\"></a>自动生成的字段</h4><p>如果主键是自动生成的，可以使用<code>@PrimaryGeneratedColumn()</code></p>\n<h2 id=\"同步数据库\"><a href=\"#同步数据库\" class=\"headerlink\" title=\"同步数据库\"></a>同步数据库</h2><p><code>createConnection</code>可以连接数据库，并根据Entity创建响应的表：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createConnection().then(async <span class=\"attr\">connection</span> =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;).catch(<span class=\"attr\">error</span> =&gt; console.log(error))<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>createConnection</code>可以手动传入数据库连接配置，但如果不传，会读取配置文件ormconfig.json中的内容。</p>\n<p>workbench连接数据库后可以看到已经自动生成了表:</p>\n<p><img src=\"/../imgs/0ed8b2854ce743ab80151ebbb15385ec.png\" alt=\"image.png\"></p>\n<h3 id=\"使用cli同步数据库\"><a href=\"#使用cli同步数据库\" class=\"headerlink\" title=\"使用cli同步数据库\"></a>使用cli同步数据库</h3><p><code>schema:sync</code>可以同步数据库结构，但是在ts项目中不能直接运行<code>typeorm schema:sync</code>。</p>\n<p>首先在package.json中增加script：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;typeorm&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后就可以执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn typeorm schema:<span class=\"built_in\">sync</span></span><br></pre></td></tr></table></figure>"},{"title":"TypeORM之增删改查","date":"2022-02-14T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第20天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nActive Record 与 Data Mapper\n---------------------------\n\nTypeORM中有两个模式： Active Record 和 Data Mapper，这两个模式的区别在于查询的方式。\n\n### Active Record\n\nActive Record可以通过模型访问数据库：\n\n```ts\nconst user = new User();\nuser.firstName = \"Timber\";\n// 保存\nawait user.save();\n\n// 删除\nawait user.remove();\n\n// 查询\nconst users = await User.find({ skip: 2, take: 5 });\nconst timber = await User.findOne({ firstName: \"Timber\", lastName: \"Saw\" });\n```\n\n要使用Active Record，entity 必须要继承BaseEntity\n\n```ts\nimport { BaseEntity, Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n\n@Entity()\nexport class User extends BaseEntity {\n    ...\n  \n}\n```\n\nBaseEntity具有Repository中大部分的方法，无论是实例还是实体类，都可以方便地进行增删改查。如果需要增加自定义的增删改查方法，可以在实体类中增加一个静态方法，使用QueryBuilder：\n\n```ts\n@Entity()\nexport class User extends BaseEntity {\n  ...\n  static findByName(firstName: string, lastName: string) {\n    return this.createQueryBuilder(\"user\")\n      .where(\"user.firstName = :firstName\", { firstName })\n      .andWhere(\"user.lastName = :lastName\", { lastName })\n      .getMany();\n  }\n}\n\nconst timber = await User.findByName(\"Timber\", \"Saw\");\n```\n\n### Data Mapper\n\nData Mapper模式下需要通过Repository进行增删改查，entity类不需要继承BaseEntity\n\n```ts\n// 获取Repository\nconst userRepository = connection.getRepository(User);\n\n// 保存\nconst user = new User();\nuser.firstName = \"Timber\";\nawait userRepository.save(user);\n\n// 删除\nawait userRepository.remove(user);\n\n// 查询\nconst users = await userRepository.find({ skip: 2, take: 5 });\nconst timber = await userRepository.findOne({ firstName: \"Timber\", lastName: \"Saw\" });\n```\n\n如果需要扩展Repository,可以自定义一个类继承Repository：\n\n```ts\nimport { EntityRepository, Repository } from \"typeorm\";\nimport { User } from \"../entity/User\";\n\n@EntityRepository()\nexport class UserRepository extends Repository<User> {\n  findByName(firstName: string, lastName: string) {\n    return this.createQueryBuilder(\"user\")\n      .where(\"user.firstName = :firstName\", { firstName })\n      .andWhere(\"user.lastName = :lastName\", { lastName })\n      .getMany();\n  }\n}\n\nconst userRepository = connection.getCustomRepository(UserRepository);\nconst timber = await userRepository.findByName(\"Timber\", \"Saw\");\n```\n\n使用QueryBuilder增删改查\n------------------\n\nQueryBuilder可以帮助我们以更便捷的方式构建SQL语句：\n\n```ts\nconst firstUser = await connection\n  .getRepository(User)\n  .createQueryBuilder(\"user\")\n  .where(\"user.id = :id\", { id: 1 })\n  .getOne();\n```\n\n上面的代码可以返回一条user记录，相当于\n\n```vbnet\nSELECT\n    user.id as userId,\n    user.firstName as userFirstName,\n    user.lastName as userLastName\nFROM users user\nWHERE user.id = 1\n```\n\n### 创建QueryBuilder\n\n可以使用connection、entity manager和repository创建QueryBuilder：\n\n```ts\nimport { getConnection,getManager,getRepository } from \"typeorm\";\ngetConnection().createQueryBuilder()...\ngetManager().createQueryBuilder(User, \"user\")...\ngetRepository(User).createQueryBuilder(\"user\")...\n```\n\n### 使用QueryBuilder\n\nQueryBuilder实例具有增删改查方法，分别对应insert/delete/update/select\n\n```ts\ncreateQueryBuilder().insert().into(User).values([...])\ncreateQueryBuilder().delete().from(User).where(...)\ncreateQueryBuilder().update(User).set(...)\ncreateQueryBuilder().select(\"user\").from(User, \"user\")\n```\n\n#### QueryBuilder的常用api\n\n*   别名 创建QueryBuilder可以传入一个参数：`createQueryBuilder(\"user\")`，这个参数表示对表设置别名user，之后where语句中可以使用该别名：`.where(\"user.name = :name\", { name: \"Timber\" });`\n*   表达式和参数 QueryBuilder支持多种表达式，如where，having，group by，order by，limit，offset:\n\n```ts\ncreateQueryBuilder(\"user\").where(\"user.name = :name\", { name: \"Timber\" });\ncreateQueryBuilder(\"user\").offset(10);\n...\n```\n\n上面`.where(\"user.name = :name\", { name: \"Timber\" })`等价于\n\n```bash\n.where(\"user.name = :name\")\n.setParameter(\"name\", \"Timber\")\n```\n\n使用这种方式传参可以避免SQL注入。\n\n*   联合查询 QueryBuilder支持联合查询，比如`createQueryBuilder(\"user\").leftJoinAndSelect()`","source":"_posts/TypeORM之增删改查.md","raw":"---\n title: \"TypeORM之增删改查\"\n date: 2022-02-15\n tags: [Node.js]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第20天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nActive Record 与 Data Mapper\n---------------------------\n\nTypeORM中有两个模式： Active Record 和 Data Mapper，这两个模式的区别在于查询的方式。\n\n### Active Record\n\nActive Record可以通过模型访问数据库：\n\n```ts\nconst user = new User();\nuser.firstName = \"Timber\";\n// 保存\nawait user.save();\n\n// 删除\nawait user.remove();\n\n// 查询\nconst users = await User.find({ skip: 2, take: 5 });\nconst timber = await User.findOne({ firstName: \"Timber\", lastName: \"Saw\" });\n```\n\n要使用Active Record，entity 必须要继承BaseEntity\n\n```ts\nimport { BaseEntity, Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n\n@Entity()\nexport class User extends BaseEntity {\n    ...\n  \n}\n```\n\nBaseEntity具有Repository中大部分的方法，无论是实例还是实体类，都可以方便地进行增删改查。如果需要增加自定义的增删改查方法，可以在实体类中增加一个静态方法，使用QueryBuilder：\n\n```ts\n@Entity()\nexport class User extends BaseEntity {\n  ...\n  static findByName(firstName: string, lastName: string) {\n    return this.createQueryBuilder(\"user\")\n      .where(\"user.firstName = :firstName\", { firstName })\n      .andWhere(\"user.lastName = :lastName\", { lastName })\n      .getMany();\n  }\n}\n\nconst timber = await User.findByName(\"Timber\", \"Saw\");\n```\n\n### Data Mapper\n\nData Mapper模式下需要通过Repository进行增删改查，entity类不需要继承BaseEntity\n\n```ts\n// 获取Repository\nconst userRepository = connection.getRepository(User);\n\n// 保存\nconst user = new User();\nuser.firstName = \"Timber\";\nawait userRepository.save(user);\n\n// 删除\nawait userRepository.remove(user);\n\n// 查询\nconst users = await userRepository.find({ skip: 2, take: 5 });\nconst timber = await userRepository.findOne({ firstName: \"Timber\", lastName: \"Saw\" });\n```\n\n如果需要扩展Repository,可以自定义一个类继承Repository：\n\n```ts\nimport { EntityRepository, Repository } from \"typeorm\";\nimport { User } from \"../entity/User\";\n\n@EntityRepository()\nexport class UserRepository extends Repository<User> {\n  findByName(firstName: string, lastName: string) {\n    return this.createQueryBuilder(\"user\")\n      .where(\"user.firstName = :firstName\", { firstName })\n      .andWhere(\"user.lastName = :lastName\", { lastName })\n      .getMany();\n  }\n}\n\nconst userRepository = connection.getCustomRepository(UserRepository);\nconst timber = await userRepository.findByName(\"Timber\", \"Saw\");\n```\n\n使用QueryBuilder增删改查\n------------------\n\nQueryBuilder可以帮助我们以更便捷的方式构建SQL语句：\n\n```ts\nconst firstUser = await connection\n  .getRepository(User)\n  .createQueryBuilder(\"user\")\n  .where(\"user.id = :id\", { id: 1 })\n  .getOne();\n```\n\n上面的代码可以返回一条user记录，相当于\n\n```vbnet\nSELECT\n    user.id as userId,\n    user.firstName as userFirstName,\n    user.lastName as userLastName\nFROM users user\nWHERE user.id = 1\n```\n\n### 创建QueryBuilder\n\n可以使用connection、entity manager和repository创建QueryBuilder：\n\n```ts\nimport { getConnection,getManager,getRepository } from \"typeorm\";\ngetConnection().createQueryBuilder()...\ngetManager().createQueryBuilder(User, \"user\")...\ngetRepository(User).createQueryBuilder(\"user\")...\n```\n\n### 使用QueryBuilder\n\nQueryBuilder实例具有增删改查方法，分别对应insert/delete/update/select\n\n```ts\ncreateQueryBuilder().insert().into(User).values([...])\ncreateQueryBuilder().delete().from(User).where(...)\ncreateQueryBuilder().update(User).set(...)\ncreateQueryBuilder().select(\"user\").from(User, \"user\")\n```\n\n#### QueryBuilder的常用api\n\n*   别名 创建QueryBuilder可以传入一个参数：`createQueryBuilder(\"user\")`，这个参数表示对表设置别名user，之后where语句中可以使用该别名：`.where(\"user.name = :name\", { name: \"Timber\" });`\n*   表达式和参数 QueryBuilder支持多种表达式，如where，having，group by，order by，limit，offset:\n\n```ts\ncreateQueryBuilder(\"user\").where(\"user.name = :name\", { name: \"Timber\" });\ncreateQueryBuilder(\"user\").offset(10);\n...\n```\n\n上面`.where(\"user.name = :name\", { name: \"Timber\" })`等价于\n\n```bash\n.where(\"user.name = :name\")\n.setParameter(\"name\", \"Timber\")\n```\n\n使用这种方式传参可以避免SQL注入。\n\n*   联合查询 QueryBuilder支持联合查询，比如`createQueryBuilder(\"user\").leftJoinAndSelect()`","slug":"TypeORM之增删改查","published":1,"updated":"2024-04-04T15:27:03.778Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lho002hhajfg5jb2cps","content":"<p>「这是我参与2022首次更文挑战的第20天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"Active-Record-与-Data-Mapper\"><a href=\"#Active-Record-与-Data-Mapper\" class=\"headerlink\" title=\"Active Record 与 Data Mapper\"></a>Active Record 与 Data Mapper</h2><p>TypeORM中有两个模式： Active Record 和 Data Mapper，这两个模式的区别在于查询的方式。</p>\n<h3 id=\"Active-Record\"><a href=\"#Active-Record\" class=\"headerlink\" title=\"Active Record\"></a>Active Record</h3><p>Active Record可以通过模型访问数据库：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">user.<span class=\"property\">firstName</span> = <span class=\"string\">&quot;Timber&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 保存</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> user.<span class=\"title function_\">save</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> user.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> <span class=\"title class_\">User</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">skip</span>: <span class=\"number\">2</span>, <span class=\"attr\">take</span>: <span class=\"number\">5</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timber = <span class=\"keyword\">await</span> <span class=\"title class_\">User</span>.<span class=\"title function_\">findOne</span>(&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&quot;Timber&quot;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&quot;Saw&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>要使用Active Record，entity 必须要继承BaseEntity</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BaseEntity</span>, <span class=\"title class_\">Entity</span>, <span class=\"title class_\">PrimaryGeneratedColumn</span>, <span class=\"title class_\">Column</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;typeorm&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">BaseEntity</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>BaseEntity具有Repository中大部分的方法，无论是实例还是实体类，都可以方便地进行增删改查。如果需要增加自定义的增删改查方法，可以在实体类中增加一个静态方法，使用QueryBuilder：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">BaseEntity</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">findByName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, lastName: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">createQueryBuilder</span>(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">where</span>(<span class=\"string\">&quot;user.firstName = :firstName&quot;</span>, &#123; firstName &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">andWhere</span>(<span class=\"string\">&quot;user.lastName = :lastName&quot;</span>, &#123; lastName &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">getMany</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> timber = <span class=\"keyword\">await</span> <span class=\"title class_\">User</span>.<span class=\"title function_\">findByName</span>(<span class=\"string\">&quot;Timber&quot;</span>, <span class=\"string\">&quot;Saw&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Data-Mapper\"><a href=\"#Data-Mapper\" class=\"headerlink\" title=\"Data Mapper\"></a>Data Mapper</h3><p>Data Mapper模式下需要通过Repository进行增删改查，entity类不需要继承BaseEntity</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取Repository</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> userRepository = connection.<span class=\"title function_\">getRepository</span>(<span class=\"title class_\">User</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保存</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">user.<span class=\"property\">firstName</span> = <span class=\"string\">&quot;Timber&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">await</span> userRepository.<span class=\"title function_\">save</span>(user);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> userRepository.<span class=\"title function_\">remove</span>(user);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> userRepository.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">skip</span>: <span class=\"number\">2</span>, <span class=\"attr\">take</span>: <span class=\"number\">5</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timber = <span class=\"keyword\">await</span> userRepository.<span class=\"title function_\">findOne</span>(&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&quot;Timber&quot;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&quot;Saw&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果需要扩展Repository,可以自定义一个类继承Repository：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">EntityRepository</span>, <span class=\"title class_\">Repository</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;typeorm&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">User</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../entity/User&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EntityRepository</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Repository</span>&lt;<span class=\"title class_\">User</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">findByName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, lastName: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">createQueryBuilder</span>(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">where</span>(<span class=\"string\">&quot;user.firstName = :firstName&quot;</span>, &#123; firstName &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">andWhere</span>(<span class=\"string\">&quot;user.lastName = :lastName&quot;</span>, &#123; lastName &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">getMany</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userRepository = connection.<span class=\"title function_\">getCustomRepository</span>(<span class=\"title class_\">UserRepository</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timber = <span class=\"keyword\">await</span> userRepository.<span class=\"title function_\">findByName</span>(<span class=\"string\">&quot;Timber&quot;</span>, <span class=\"string\">&quot;Saw&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用QueryBuilder增删改查\"><a href=\"#使用QueryBuilder增删改查\" class=\"headerlink\" title=\"使用QueryBuilder增删改查\"></a>使用QueryBuilder增删改查</h2><p>QueryBuilder可以帮助我们以更便捷的方式构建SQL语句：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> firstUser = <span class=\"keyword\">await</span> connection</span><br><span class=\"line\">  .<span class=\"title function_\">getRepository</span>(<span class=\"title class_\">User</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">createQueryBuilder</span>(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">where</span>(<span class=\"string\">&quot;user.id = :id&quot;</span>, &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">getOne</span>();</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码可以返回一条user记录，相当于</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    user.id <span class=\"keyword\">as</span> userId,</span><br><span class=\"line\">    user.firstName <span class=\"keyword\">as</span> userFirstName,</span><br><span class=\"line\">    user.lastName <span class=\"keyword\">as</span> userLastName</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users user</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> user.id = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建QueryBuilder\"><a href=\"#创建QueryBuilder\" class=\"headerlink\" title=\"创建QueryBuilder\"></a>创建QueryBuilder</h3><p>可以使用connection、entity manager和repository创建QueryBuilder：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getConnection,getManager,getRepository &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;typeorm&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">getConnection</span>().<span class=\"title function_\">createQueryBuilder</span>()...</span><br><span class=\"line\"><span class=\"title function_\">getManager</span>().<span class=\"title function_\">createQueryBuilder</span>(<span class=\"title class_\">User</span>, <span class=\"string\">&quot;user&quot;</span>)...</span><br><span class=\"line\"><span class=\"title function_\">getRepository</span>(<span class=\"title class_\">User</span>).<span class=\"title function_\">createQueryBuilder</span>(<span class=\"string\">&quot;user&quot;</span>)...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用QueryBuilder\"><a href=\"#使用QueryBuilder\" class=\"headerlink\" title=\"使用QueryBuilder\"></a>使用QueryBuilder</h3><p>QueryBuilder实例具有增删改查方法，分别对应insert&#x2F;delete&#x2F;update&#x2F;select</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">createQueryBuilder</span>().<span class=\"title function_\">insert</span>().<span class=\"title function_\">into</span>(<span class=\"title class_\">User</span>).<span class=\"title function_\">values</span>([...])</span><br><span class=\"line\"><span class=\"title function_\">createQueryBuilder</span>().<span class=\"title function_\">delete</span>().<span class=\"title function_\">from</span>(<span class=\"title class_\">User</span>).<span class=\"title function_\">where</span>(...)</span><br><span class=\"line\"><span class=\"title function_\">createQueryBuilder</span>().<span class=\"title function_\">update</span>(<span class=\"title class_\">User</span>).<span class=\"title function_\">set</span>(...)</span><br><span class=\"line\"><span class=\"title function_\">createQueryBuilder</span>().<span class=\"title function_\">select</span>(<span class=\"string\">&quot;user&quot;</span>).<span class=\"title function_\">from</span>(<span class=\"title class_\">User</span>, <span class=\"string\">&quot;user&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"QueryBuilder的常用api\"><a href=\"#QueryBuilder的常用api\" class=\"headerlink\" title=\"QueryBuilder的常用api\"></a>QueryBuilder的常用api</h4><ul>\n<li>别名 创建QueryBuilder可以传入一个参数：<code>createQueryBuilder(&quot;user&quot;)</code>，这个参数表示对表设置别名user，之后where语句中可以使用该别名：<code>.where(&quot;user.name = :name&quot;, &#123; name: &quot;Timber&quot; &#125;);</code></li>\n<li>表达式和参数 QueryBuilder支持多种表达式，如where，having，group by，order by，limit，offset:</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">createQueryBuilder</span>(<span class=\"string\">&quot;user&quot;</span>).<span class=\"title function_\">where</span>(<span class=\"string\">&quot;user.name = :name&quot;</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Timber&quot;</span> &#125;);</span><br><span class=\"line\"><span class=\"title function_\">createQueryBuilder</span>(<span class=\"string\">&quot;user&quot;</span>).<span class=\"title function_\">offset</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>上面<code>.where(&quot;user.name = :name&quot;, &#123; name: &quot;Timber&quot; &#125;)</code>等价于</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"built_in\">where</span>(<span class=\"string\">&quot;user.name = :name&quot;</span>)</span><br><span class=\"line\">.setParameter(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Timber&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>使用这种方式传参可以避免SQL注入。</p>\n<ul>\n<li>联合查询 QueryBuilder支持联合查询，比如<code>createQueryBuilder(&quot;user&quot;).leftJoinAndSelect()</code></li>\n</ul>\n","length":3841,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第20天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"Active-Record-与-Data-Mapper\"><a href=\"#Active-Record-与-Data-Mapper\" class=\"headerlink\" title=\"Active Record 与 Data Mapper\"></a>Active Record 与 Data Mapper</h2><p>TypeORM中有两个模式： Active Record 和 Data Mapper，这两个模式的区别在于查询的方式。</p>\n<h3 id=\"Active-Record\"><a href=\"#Active-Record\" class=\"headerlink\" title=\"Active Record\"></a>Active Record</h3><p>Active Record可以通过模型访问数据库：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">user.<span class=\"property\">firstName</span> = <span class=\"string\">&quot;Timber&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 保存</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> user.<span class=\"title function_\">save</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> user.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> <span class=\"title class_\">User</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">skip</span>: <span class=\"number\">2</span>, <span class=\"attr\">take</span>: <span class=\"number\">5</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timber = <span class=\"keyword\">await</span> <span class=\"title class_\">User</span>.<span class=\"title function_\">findOne</span>(&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&quot;Timber&quot;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&quot;Saw&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>要使用Active Record，entity 必须要继承BaseEntity</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BaseEntity</span>, <span class=\"title class_\">Entity</span>, <span class=\"title class_\">PrimaryGeneratedColumn</span>, <span class=\"title class_\">Column</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;typeorm&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">BaseEntity</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>BaseEntity具有Repository中大部分的方法，无论是实例还是实体类，都可以方便地进行增删改查。如果需要增加自定义的增删改查方法，可以在实体类中增加一个静态方法，使用QueryBuilder：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">BaseEntity</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">findByName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, lastName: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">createQueryBuilder</span>(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">where</span>(<span class=\"string\">&quot;user.firstName = :firstName&quot;</span>, &#123; firstName &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">andWhere</span>(<span class=\"string\">&quot;user.lastName = :lastName&quot;</span>, &#123; lastName &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">getMany</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> timber = <span class=\"keyword\">await</span> <span class=\"title class_\">User</span>.<span class=\"title function_\">findByName</span>(<span class=\"string\">&quot;Timber&quot;</span>, <span class=\"string\">&quot;Saw&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Data-Mapper\"><a href=\"#Data-Mapper\" class=\"headerlink\" title=\"Data Mapper\"></a>Data Mapper</h3><p>Data Mapper模式下需要通过Repository进行增删改查，entity类不需要继承BaseEntity</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取Repository</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> userRepository = connection.<span class=\"title function_\">getRepository</span>(<span class=\"title class_\">User</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保存</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">user.<span class=\"property\">firstName</span> = <span class=\"string\">&quot;Timber&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">await</span> userRepository.<span class=\"title function_\">save</span>(user);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> userRepository.<span class=\"title function_\">remove</span>(user);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> userRepository.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">skip</span>: <span class=\"number\">2</span>, <span class=\"attr\">take</span>: <span class=\"number\">5</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timber = <span class=\"keyword\">await</span> userRepository.<span class=\"title function_\">findOne</span>(&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&quot;Timber&quot;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&quot;Saw&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果需要扩展Repository,可以自定义一个类继承Repository：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">EntityRepository</span>, <span class=\"title class_\">Repository</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;typeorm&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">User</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../entity/User&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EntityRepository</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Repository</span>&lt;<span class=\"title class_\">User</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">findByName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, lastName: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">createQueryBuilder</span>(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">where</span>(<span class=\"string\">&quot;user.firstName = :firstName&quot;</span>, &#123; firstName &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">andWhere</span>(<span class=\"string\">&quot;user.lastName = :lastName&quot;</span>, &#123; lastName &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">getMany</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userRepository = connection.<span class=\"title function_\">getCustomRepository</span>(<span class=\"title class_\">UserRepository</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timber = <span class=\"keyword\">await</span> userRepository.<span class=\"title function_\">findByName</span>(<span class=\"string\">&quot;Timber&quot;</span>, <span class=\"string\">&quot;Saw&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用QueryBuilder增删改查\"><a href=\"#使用QueryBuilder增删改查\" class=\"headerlink\" title=\"使用QueryBuilder增删改查\"></a>使用QueryBuilder增删改查</h2><p>QueryBuilder可以帮助我们以更便捷的方式构建SQL语句：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> firstUser = <span class=\"keyword\">await</span> connection</span><br><span class=\"line\">  .<span class=\"title function_\">getRepository</span>(<span class=\"title class_\">User</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">createQueryBuilder</span>(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">where</span>(<span class=\"string\">&quot;user.id = :id&quot;</span>, &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">getOne</span>();</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码可以返回一条user记录，相当于</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    user.id <span class=\"keyword\">as</span> userId,</span><br><span class=\"line\">    user.firstName <span class=\"keyword\">as</span> userFirstName,</span><br><span class=\"line\">    user.lastName <span class=\"keyword\">as</span> userLastName</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users user</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> user.id = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建QueryBuilder\"><a href=\"#创建QueryBuilder\" class=\"headerlink\" title=\"创建QueryBuilder\"></a>创建QueryBuilder</h3><p>可以使用connection、entity manager和repository创建QueryBuilder：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getConnection,getManager,getRepository &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;typeorm&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">getConnection</span>().<span class=\"title function_\">createQueryBuilder</span>()...</span><br><span class=\"line\"><span class=\"title function_\">getManager</span>().<span class=\"title function_\">createQueryBuilder</span>(<span class=\"title class_\">User</span>, <span class=\"string\">&quot;user&quot;</span>)...</span><br><span class=\"line\"><span class=\"title function_\">getRepository</span>(<span class=\"title class_\">User</span>).<span class=\"title function_\">createQueryBuilder</span>(<span class=\"string\">&quot;user&quot;</span>)...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用QueryBuilder\"><a href=\"#使用QueryBuilder\" class=\"headerlink\" title=\"使用QueryBuilder\"></a>使用QueryBuilder</h3><p>QueryBuilder实例具有增删改查方法，分别对应insert&#x2F;delete&#x2F;update&#x2F;select</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">createQueryBuilder</span>().<span class=\"title function_\">insert</span>().<span class=\"title function_\">into</span>(<span class=\"title class_\">User</span>).<span class=\"title function_\">values</span>([...])</span><br><span class=\"line\"><span class=\"title function_\">createQueryBuilder</span>().<span class=\"title function_\">delete</span>().<span class=\"title function_\">from</span>(<span class=\"title class_\">User</span>).<span class=\"title function_\">where</span>(...)</span><br><span class=\"line\"><span class=\"title function_\">createQueryBuilder</span>().<span class=\"title function_\">update</span>(<span class=\"title class_\">User</span>).<span class=\"title function_\">set</span>(...)</span><br><span class=\"line\"><span class=\"title function_\">createQueryBuilder</span>().<span class=\"title function_\">select</span>(<span class=\"string\">&quot;user&quot;</span>).<span class=\"title function_\">from</span>(<span class=\"title class_\">User</span>, <span class=\"string\">&quot;user&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"QueryBuilder的常用api\"><a href=\"#QueryBuilder的常用api\" class=\"headerlink\" title=\"QueryBuilder的常用api\"></a>QueryBuilder的常用api</h4><ul>\n<li>别名 创建QueryBuilder可以传入一个参数：<code>createQueryBuilder(&quot;user&quot;)</code>，这个参数表示对表设置别名user，之后where语句中可以使用该别名：<code>.where(&quot;user.name = :name&quot;, &#123; name: &quot;Timber&quot; &#125;);</code></li>\n<li>表达式和参数 QueryBuilder支持多种表达式，如where，having，group by，order by，limit，offset:</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">createQueryBuilder</span>(<span class=\"string\">&quot;user&quot;</span>).<span class=\"title function_\">where</span>(<span class=\"string\">&quot;user.name = :name&quot;</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Timber&quot;</span> &#125;);</span><br><span class=\"line\"><span class=\"title function_\">createQueryBuilder</span>(<span class=\"string\">&quot;user&quot;</span>).<span class=\"title function_\">offset</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>上面<code>.where(&quot;user.name = :name&quot;, &#123; name: &quot;Timber&quot; &#125;)</code>等价于</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"built_in\">where</span>(<span class=\"string\">&quot;user.name = :name&quot;</span>)</span><br><span class=\"line\">.setParameter(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Timber&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>使用这种方式传参可以避免SQL注入。</p>\n<ul>\n<li>联合查询 QueryBuilder支持联合查询，比如<code>createQueryBuilder(&quot;user&quot;).leftJoinAndSelect()</code></li>\n</ul>\n"},{"title":"TypeScript4中的短路运算符","date":"2021-01-09T16:00:00.000Z","_content":"\n```less\na ||= b\n// 相当于: a = a || b\n\na &&= b\n// 相当于: a = a && b\n\na ??= b\n// 相当于: a = a ?? b\t\n// 相当于: a = a !== null && a !== undefined ? a : b\n\n\n```","source":"_posts/TypeScript4中的短路运算符.md","raw":"---\n title: \"TypeScript4中的短路运算符\"\n date: 2021-01-10\n tags: [TypeScript]\n categories: \n---\n\n```less\na ||= b\n// 相当于: a = a || b\n\na &&= b\n// 相当于: a = a && b\n\na ??= b\n// 相当于: a = a ?? b\t\n// 相当于: a = a !== null && a !== undefined ? a : b\n\n\n```","slug":"TypeScript4中的短路运算符","published":1,"updated":"2024-04-04T15:27:03.786Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lho002khajf0ek06jiu","content":"<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> ||= <span class=\"selector-tag\">b</span></span><br><span class=\"line\"><span class=\"comment\">// 相当于: a = a || b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">&amp;</span>= <span class=\"selector-tag\">b</span></span><br><span class=\"line\"><span class=\"comment\">// 相当于: a = a &amp;&amp; b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> ??= <span class=\"selector-tag\">b</span></span><br><span class=\"line\"><span class=\"comment\">// 相当于: a = a ?? b\t</span></span><br><span class=\"line\"><span class=\"comment\">// 相当于: a = a !== null &amp;&amp; a !== undefined ? a : b</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","length":123,"excerpt":"","more":"<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> ||= <span class=\"selector-tag\">b</span></span><br><span class=\"line\"><span class=\"comment\">// 相当于: a = a || b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">&amp;</span>= <span class=\"selector-tag\">b</span></span><br><span class=\"line\"><span class=\"comment\">// 相当于: a = a &amp;&amp; b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> ??= <span class=\"selector-tag\">b</span></span><br><span class=\"line\"><span class=\"comment\">// 相当于: a = a ?? b\t</span></span><br><span class=\"line\"><span class=\"comment\">// 相当于: a = a !== null &amp;&amp; a !== undefined ? a : b</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"UML快速入门——活动图","date":"2022-02-21T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第26天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n活动图\n---\n\n活动图是描述过程逻辑、业务流程和工作流的技术。在许多地方，它们扮演的角色类似于流程图，但和流程图表示法之间的首要区别是它们支持并行行为。\n\n下面是一个活动图的示例：\n\n![image.png](../imgs/4a38234af23e42f1bd98c2c2397c3dc1.png)\n\n### 活动图的主要要素\n\n*   初始节点 初始节点用![image.png](../imgs/69bd0195c4084280966f95ae944744c2.png)表示，表示活动的开始。\n*   分叉和合流 分叉和合并都以![image.png](../imgs/f5ebeffe23104624bd7cea053bad1fa2.png)表示，分叉有一个输入流和若干个输出的流，合流又称结合，它则有若干个输入流和一个输出流。\n\n分叉并不是逻辑判断造成的分支，分叉的两个流在顺序上是无关的，或者是并行的。比如上图中，填写订单（fill order）和寄送发票（send invoice）是两个无关顺序的事件，可以先处理任意一件后再处理另一件。\n\n如果有分叉而没有合流，说明这个活动只要任意分叉到达重点就结束。\n\n合流旁边可以标注条件（结合规格）：\n\n![image.png](../imgs/4a95dd017a6a4efa8f4abb4382afda1c.png)\n\n这是一个饮料贩卖机，只有选择了投币并选择了饮料，且投币超过饮料的价格时才会继续往下（这里投币和选择没有先后关系）\n\n*   分支和合并 判断也成为分支，有一个输入流和若干个互斥的输出流。 ![image.png](../imgs/52350b7339754e268c6d51be4abbbd53.png)而合并有若干个输入流和一个输出流，它代表判断造成的条件分支的结束。\n    \n*   动作 ![image.png](../imgs/270ab36fdc864158b7d47e8f5ebc4759.png)表示动作，动作可以实现为类的方法，或者拆解为子活动。\n    \n\n当我们需要拆解一个动作的时候，可以在动作内增加一个耙子符号。![image.png](../imgs/cedbde566e724fbc9aeb58746042da1b.png)\n\n子活动需要标注出活动名称，即该动作的名称：\n\n![image.png](../imgs/37ecaffba91e468f88930691a18d37e1.png)\n\n### 流的结束\n\n流的结束用![image.png](../imgs/07c0a274944f470ba6d20b5df8a62c3f.png)表示，它只是结束特定的流，流结束后活动的其他部分依然可以继续。 ![image.png](../imgs/f7ba852d33624024aa23082379214dbd.png)\n\n### 分区和泳道\n\n上面的活动图可以看出发生了什么，或者说做了什么，但是看不出这些活动由谁负责。如果需要由哪些类负责这些动作，可以使用分区。\n\n![image.png](../imgs/661fa47033d847afb2b799732ff39033.png)\n\n上图是一维分区，也成为泳道，UML 2.x中可以使用二维分区。\n\n### 信号\n\n前面的例子中动作的开始往往由上游动作触发，或者由活动触发。但动作也可能由信号触发。 ![image.png](../imgs/a88f793d5035421bae5bf09dc91d0444.png) 上面这个例子中就没有合流，两条信号流在竞赛，第一个到达终点的将结束活动并终止其他流。","source":"_posts/UML快速入门——活动图.md","raw":"---\n title: \"UML快速入门——活动图\"\n date: 2022-02-22\n tags: [架构,UML]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第26天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n活动图\n---\n\n活动图是描述过程逻辑、业务流程和工作流的技术。在许多地方，它们扮演的角色类似于流程图，但和流程图表示法之间的首要区别是它们支持并行行为。\n\n下面是一个活动图的示例：\n\n![image.png](../imgs/4a38234af23e42f1bd98c2c2397c3dc1.png)\n\n### 活动图的主要要素\n\n*   初始节点 初始节点用![image.png](../imgs/69bd0195c4084280966f95ae944744c2.png)表示，表示活动的开始。\n*   分叉和合流 分叉和合并都以![image.png](../imgs/f5ebeffe23104624bd7cea053bad1fa2.png)表示，分叉有一个输入流和若干个输出的流，合流又称结合，它则有若干个输入流和一个输出流。\n\n分叉并不是逻辑判断造成的分支，分叉的两个流在顺序上是无关的，或者是并行的。比如上图中，填写订单（fill order）和寄送发票（send invoice）是两个无关顺序的事件，可以先处理任意一件后再处理另一件。\n\n如果有分叉而没有合流，说明这个活动只要任意分叉到达重点就结束。\n\n合流旁边可以标注条件（结合规格）：\n\n![image.png](../imgs/4a95dd017a6a4efa8f4abb4382afda1c.png)\n\n这是一个饮料贩卖机，只有选择了投币并选择了饮料，且投币超过饮料的价格时才会继续往下（这里投币和选择没有先后关系）\n\n*   分支和合并 判断也成为分支，有一个输入流和若干个互斥的输出流。 ![image.png](../imgs/52350b7339754e268c6d51be4abbbd53.png)而合并有若干个输入流和一个输出流，它代表判断造成的条件分支的结束。\n    \n*   动作 ![image.png](../imgs/270ab36fdc864158b7d47e8f5ebc4759.png)表示动作，动作可以实现为类的方法，或者拆解为子活动。\n    \n\n当我们需要拆解一个动作的时候，可以在动作内增加一个耙子符号。![image.png](../imgs/cedbde566e724fbc9aeb58746042da1b.png)\n\n子活动需要标注出活动名称，即该动作的名称：\n\n![image.png](../imgs/37ecaffba91e468f88930691a18d37e1.png)\n\n### 流的结束\n\n流的结束用![image.png](../imgs/07c0a274944f470ba6d20b5df8a62c3f.png)表示，它只是结束特定的流，流结束后活动的其他部分依然可以继续。 ![image.png](../imgs/f7ba852d33624024aa23082379214dbd.png)\n\n### 分区和泳道\n\n上面的活动图可以看出发生了什么，或者说做了什么，但是看不出这些活动由谁负责。如果需要由哪些类负责这些动作，可以使用分区。\n\n![image.png](../imgs/661fa47033d847afb2b799732ff39033.png)\n\n上图是一维分区，也成为泳道，UML 2.x中可以使用二维分区。\n\n### 信号\n\n前面的例子中动作的开始往往由上游动作触发，或者由活动触发。但动作也可能由信号触发。 ![image.png](../imgs/a88f793d5035421bae5bf09dc91d0444.png) 上面这个例子中就没有合流，两条信号流在竞赛，第一个到达终点的将结束活动并终止其他流。","slug":"UML快速入门——活动图","published":1,"updated":"2024-04-04T15:27:03.805Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhp002ohajfbfi4al4v","content":"<p>「这是我参与2022首次更文挑战的第26天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"活动图\"><a href=\"#活动图\" class=\"headerlink\" title=\"活动图\"></a>活动图</h2><p>活动图是描述过程逻辑、业务流程和工作流的技术。在许多地方，它们扮演的角色类似于流程图，但和流程图表示法之间的首要区别是它们支持并行行为。</p>\n<p>下面是一个活动图的示例：</p>\n<p><img src=\"/../imgs/4a38234af23e42f1bd98c2c2397c3dc1.png\" alt=\"image.png\"></p>\n<h3 id=\"活动图的主要要素\"><a href=\"#活动图的主要要素\" class=\"headerlink\" title=\"活动图的主要要素\"></a>活动图的主要要素</h3><ul>\n<li>初始节点 初始节点用<img src=\"/../imgs/69bd0195c4084280966f95ae944744c2.png\" alt=\"image.png\">表示，表示活动的开始。</li>\n<li>分叉和合流 分叉和合并都以<img src=\"/../imgs/f5ebeffe23104624bd7cea053bad1fa2.png\" alt=\"image.png\">表示，分叉有一个输入流和若干个输出的流，合流又称结合，它则有若干个输入流和一个输出流。</li>\n</ul>\n<p>分叉并不是逻辑判断造成的分支，分叉的两个流在顺序上是无关的，或者是并行的。比如上图中，填写订单（fill order）和寄送发票（send invoice）是两个无关顺序的事件，可以先处理任意一件后再处理另一件。</p>\n<p>如果有分叉而没有合流，说明这个活动只要任意分叉到达重点就结束。</p>\n<p>合流旁边可以标注条件（结合规格）：</p>\n<p><img src=\"/../imgs/4a95dd017a6a4efa8f4abb4382afda1c.png\" alt=\"image.png\"></p>\n<p>这是一个饮料贩卖机，只有选择了投币并选择了饮料，且投币超过饮料的价格时才会继续往下（这里投币和选择没有先后关系）</p>\n<ul>\n<li><p>分支和合并 判断也成为分支，有一个输入流和若干个互斥的输出流。 <img src=\"/../imgs/52350b7339754e268c6d51be4abbbd53.png\" alt=\"image.png\">而合并有若干个输入流和一个输出流，它代表判断造成的条件分支的结束。</p>\n</li>\n<li><p>动作 <img src=\"/../imgs/270ab36fdc864158b7d47e8f5ebc4759.png\" alt=\"image.png\">表示动作，动作可以实现为类的方法，或者拆解为子活动。</p>\n</li>\n</ul>\n<p>当我们需要拆解一个动作的时候，可以在动作内增加一个耙子符号。<img src=\"/../imgs/cedbde566e724fbc9aeb58746042da1b.png\" alt=\"image.png\"></p>\n<p>子活动需要标注出活动名称，即该动作的名称：</p>\n<p><img src=\"/../imgs/37ecaffba91e468f88930691a18d37e1.png\" alt=\"image.png\"></p>\n<h3 id=\"流的结束\"><a href=\"#流的结束\" class=\"headerlink\" title=\"流的结束\"></a>流的结束</h3><p>流的结束用<img src=\"/../imgs/07c0a274944f470ba6d20b5df8a62c3f.png\" alt=\"image.png\">表示，它只是结束特定的流，流结束后活动的其他部分依然可以继续。 <img src=\"/../imgs/f7ba852d33624024aa23082379214dbd.png\" alt=\"image.png\"></p>\n<h3 id=\"分区和泳道\"><a href=\"#分区和泳道\" class=\"headerlink\" title=\"分区和泳道\"></a>分区和泳道</h3><p>上面的活动图可以看出发生了什么，或者说做了什么，但是看不出这些活动由谁负责。如果需要由哪些类负责这些动作，可以使用分区。</p>\n<p><img src=\"/../imgs/661fa47033d847afb2b799732ff39033.png\" alt=\"image.png\"></p>\n<p>上图是一维分区，也成为泳道，UML 2.x中可以使用二维分区。</p>\n<h3 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h3><p>前面的例子中动作的开始往往由上游动作触发，或者由活动触发。但动作也可能由信号触发。 <img src=\"/../imgs/a88f793d5035421bae5bf09dc91d0444.png\" alt=\"image.png\"> 上面这个例子中就没有合流，两条信号流在竞赛，第一个到达终点的将结束活动并终止其他流。</p>\n","length":776,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第26天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"活动图\"><a href=\"#活动图\" class=\"headerlink\" title=\"活动图\"></a>活动图</h2><p>活动图是描述过程逻辑、业务流程和工作流的技术。在许多地方，它们扮演的角色类似于流程图，但和流程图表示法之间的首要区别是它们支持并行行为。</p>\n<p>下面是一个活动图的示例：</p>\n<p><img src=\"/../imgs/4a38234af23e42f1bd98c2c2397c3dc1.png\" alt=\"image.png\"></p>\n<h3 id=\"活动图的主要要素\"><a href=\"#活动图的主要要素\" class=\"headerlink\" title=\"活动图的主要要素\"></a>活动图的主要要素</h3><ul>\n<li>初始节点 初始节点用<img src=\"/../imgs/69bd0195c4084280966f95ae944744c2.png\" alt=\"image.png\">表示，表示活动的开始。</li>\n<li>分叉和合流 分叉和合并都以<img src=\"/../imgs/f5ebeffe23104624bd7cea053bad1fa2.png\" alt=\"image.png\">表示，分叉有一个输入流和若干个输出的流，合流又称结合，它则有若干个输入流和一个输出流。</li>\n</ul>\n<p>分叉并不是逻辑判断造成的分支，分叉的两个流在顺序上是无关的，或者是并行的。比如上图中，填写订单（fill order）和寄送发票（send invoice）是两个无关顺序的事件，可以先处理任意一件后再处理另一件。</p>\n<p>如果有分叉而没有合流，说明这个活动只要任意分叉到达重点就结束。</p>\n<p>合流旁边可以标注条件（结合规格）：</p>\n<p><img src=\"/../imgs/4a95dd017a6a4efa8f4abb4382afda1c.png\" alt=\"image.png\"></p>\n<p>这是一个饮料贩卖机，只有选择了投币并选择了饮料，且投币超过饮料的价格时才会继续往下（这里投币和选择没有先后关系）</p>\n<ul>\n<li><p>分支和合并 判断也成为分支，有一个输入流和若干个互斥的输出流。 <img src=\"/../imgs/52350b7339754e268c6d51be4abbbd53.png\" alt=\"image.png\">而合并有若干个输入流和一个输出流，它代表判断造成的条件分支的结束。</p>\n</li>\n<li><p>动作 <img src=\"/../imgs/270ab36fdc864158b7d47e8f5ebc4759.png\" alt=\"image.png\">表示动作，动作可以实现为类的方法，或者拆解为子活动。</p>\n</li>\n</ul>\n<p>当我们需要拆解一个动作的时候，可以在动作内增加一个耙子符号。<img src=\"/../imgs/cedbde566e724fbc9aeb58746042da1b.png\" alt=\"image.png\"></p>\n<p>子活动需要标注出活动名称，即该动作的名称：</p>\n<p><img src=\"/../imgs/37ecaffba91e468f88930691a18d37e1.png\" alt=\"image.png\"></p>\n<h3 id=\"流的结束\"><a href=\"#流的结束\" class=\"headerlink\" title=\"流的结束\"></a>流的结束</h3><p>流的结束用<img src=\"/../imgs/07c0a274944f470ba6d20b5df8a62c3f.png\" alt=\"image.png\">表示，它只是结束特定的流，流结束后活动的其他部分依然可以继续。 <img src=\"/../imgs/f7ba852d33624024aa23082379214dbd.png\" alt=\"image.png\"></p>\n<h3 id=\"分区和泳道\"><a href=\"#分区和泳道\" class=\"headerlink\" title=\"分区和泳道\"></a>分区和泳道</h3><p>上面的活动图可以看出发生了什么，或者说做了什么，但是看不出这些活动由谁负责。如果需要由哪些类负责这些动作，可以使用分区。</p>\n<p><img src=\"/../imgs/661fa47033d847afb2b799732ff39033.png\" alt=\"image.png\"></p>\n<p>上图是一维分区，也成为泳道，UML 2.x中可以使用二维分区。</p>\n<h3 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h3><p>前面的例子中动作的开始往往由上游动作触发，或者由活动触发。但动作也可能由信号触发。 <img src=\"/../imgs/a88f793d5035421bae5bf09dc91d0444.png\" alt=\"image.png\"> 上面这个例子中就没有合流，两条信号流在竞赛，第一个到达终点的将结束活动并终止其他流。</p>\n"},{"title":"UML快速入门——类图基础","date":"2022-02-18T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第23天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nUML介绍\n-----\n\n统一建模语言（UML）是一组图形表示法。\n\n20世纪80年代，随着面向对象编程思想的流程，出现了不少面向对象图形的建模语言，这些语言往往大同小异，但是一些关键图形表示方法的区别往往会产生很大的误解，这种混乱的现象持续了很久，直到1997年UML 1.0的出现。\n\n下图展示了UML的官方图形分类：\n\n![image.png](../imgs/2bd6fecf240e4212a15e1aba62e459a7.png)\n\n好的图形经常可以帮助沟通设计思想，也能帮助你理解软件系统或业务流程。即便我们不会画这些设计图，但至少也要能看懂别人画的图。\n\n类图\n--\n\n类图（class diagram）描述系统中的对象类型，以及存在于它们之间的各种静态关系。类图也展示类的性质和操作，以及应用于对象连接方式的约束。\n\n下面是一个简单的类图： ![image.png](../imgs/0cf569ef6ff246ac8494992e2768b814.png)\n\n### 属性\n\n属性可以用一行代码来描述： `visibility name : type multiplicity = default {property-string}`\n\n*   visibility:可访问行。 `+`表示public，`-`表示private，另外还有`～`（default）和`＃`（protected），这两个在js中没有，不过其他语言比如java中可能用到。\n*   name：属性名\n*   type：类型\n*   multiplicity：多重性，`1`表示对1，`0..1`表示0或1可选，`*`表示0或多\n*   default：默认值\n*   {property-string}：属性的附加性质，比如`readonly`等 ![image.png](../imgs/2eb00def85fa432d97392428410ab592.png)\n\n#### 方法\n\n属性不仅仅是成员变量，也可能是方法：`visibility name : (parameter-list) = return-type {property-string}`，比如:\n\n```uml\n+ blanceOn (date:Date) : Money\n```\n\n#### 派生属性\n\n前端可能会经常遇到派生属性，或者称之为computed。可以标记一个`/`并添加注释。\n\n![image.png](../imgs/a30fe3ee74af45c1adf9ca78fac1f150.png)\n\n#### 静态属性\n\n类不仅有成员属性，还可能有静态static属性，UML中以下划线表示\n\n![image.png](../imgs/e98140601dec461ca4b95b58c730f66f.png)\n\n未完待续\n----\n\n上面讲了类图一些基础的表示方法，下一篇将介绍类图的关联、依赖、接口、抽象类、多态、枚举等其他场景下的表示方法。","source":"_posts/UML快速入门——类图基础.md","raw":"---\n title: \"UML快速入门——类图基础\"\n date: 2022-02-19\n tags: [架构]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第23天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\nUML介绍\n-----\n\n统一建模语言（UML）是一组图形表示法。\n\n20世纪80年代，随着面向对象编程思想的流程，出现了不少面向对象图形的建模语言，这些语言往往大同小异，但是一些关键图形表示方法的区别往往会产生很大的误解，这种混乱的现象持续了很久，直到1997年UML 1.0的出现。\n\n下图展示了UML的官方图形分类：\n\n![image.png](../imgs/2bd6fecf240e4212a15e1aba62e459a7.png)\n\n好的图形经常可以帮助沟通设计思想，也能帮助你理解软件系统或业务流程。即便我们不会画这些设计图，但至少也要能看懂别人画的图。\n\n类图\n--\n\n类图（class diagram）描述系统中的对象类型，以及存在于它们之间的各种静态关系。类图也展示类的性质和操作，以及应用于对象连接方式的约束。\n\n下面是一个简单的类图： ![image.png](../imgs/0cf569ef6ff246ac8494992e2768b814.png)\n\n### 属性\n\n属性可以用一行代码来描述： `visibility name : type multiplicity = default {property-string}`\n\n*   visibility:可访问行。 `+`表示public，`-`表示private，另外还有`～`（default）和`＃`（protected），这两个在js中没有，不过其他语言比如java中可能用到。\n*   name：属性名\n*   type：类型\n*   multiplicity：多重性，`1`表示对1，`0..1`表示0或1可选，`*`表示0或多\n*   default：默认值\n*   {property-string}：属性的附加性质，比如`readonly`等 ![image.png](../imgs/2eb00def85fa432d97392428410ab592.png)\n\n#### 方法\n\n属性不仅仅是成员变量，也可能是方法：`visibility name : (parameter-list) = return-type {property-string}`，比如:\n\n```uml\n+ blanceOn (date:Date) : Money\n```\n\n#### 派生属性\n\n前端可能会经常遇到派生属性，或者称之为computed。可以标记一个`/`并添加注释。\n\n![image.png](../imgs/a30fe3ee74af45c1adf9ca78fac1f150.png)\n\n#### 静态属性\n\n类不仅有成员属性，还可能有静态static属性，UML中以下划线表示\n\n![image.png](../imgs/e98140601dec461ca4b95b58c730f66f.png)\n\n未完待续\n----\n\n上面讲了类图一些基础的表示方法，下一篇将介绍类图的关联、依赖、接口、抽象类、多态、枚举等其他场景下的表示方法。","slug":"UML快速入门——类图基础","published":1,"updated":"2024-04-04T15:27:03.813Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhp002rhajfefz0a0ko","content":"<p>「这是我参与2022首次更文挑战的第23天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"UML介绍\"><a href=\"#UML介绍\" class=\"headerlink\" title=\"UML介绍\"></a>UML介绍</h2><p>统一建模语言（UML）是一组图形表示法。</p>\n<p>20世纪80年代，随着面向对象编程思想的流程，出现了不少面向对象图形的建模语言，这些语言往往大同小异，但是一些关键图形表示方法的区别往往会产生很大的误解，这种混乱的现象持续了很久，直到1997年UML 1.0的出现。</p>\n<p>下图展示了UML的官方图形分类：</p>\n<p><img src=\"/../imgs/2bd6fecf240e4212a15e1aba62e459a7.png\" alt=\"image.png\"></p>\n<p>好的图形经常可以帮助沟通设计思想，也能帮助你理解软件系统或业务流程。即便我们不会画这些设计图，但至少也要能看懂别人画的图。</p>\n<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p>类图（class diagram）描述系统中的对象类型，以及存在于它们之间的各种静态关系。类图也展示类的性质和操作，以及应用于对象连接方式的约束。</p>\n<p>下面是一个简单的类图： <img src=\"/../imgs/0cf569ef6ff246ac8494992e2768b814.png\" alt=\"image.png\"></p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>属性可以用一行代码来描述： <code>visibility name : type multiplicity = default &#123;property-string&#125;</code></p>\n<ul>\n<li>visibility:可访问行。 <code>+</code>表示public，<code>-</code>表示private，另外还有<code>～</code>（default）和<code>＃</code>（protected），这两个在js中没有，不过其他语言比如java中可能用到。</li>\n<li>name：属性名</li>\n<li>type：类型</li>\n<li>multiplicity：多重性，<code>1</code>表示对1，<code>0..1</code>表示0或1可选，<code>*</code>表示0或多</li>\n<li>default：默认值</li>\n<li>{property-string}：属性的附加性质，比如<code>readonly</code>等 <img src=\"/../imgs/2eb00def85fa432d97392428410ab592.png\" alt=\"image.png\"></li>\n</ul>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p>属性不仅仅是成员变量，也可能是方法：<code>visibility name : (parameter-list) = return-type &#123;property-string&#125;</code>，比如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ blanceOn (date:Date) : Money</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"派生属性\"><a href=\"#派生属性\" class=\"headerlink\" title=\"派生属性\"></a>派生属性</h4><p>前端可能会经常遇到派生属性，或者称之为computed。可以标记一个<code>/</code>并添加注释。</p>\n<p><img src=\"/../imgs/a30fe3ee74af45c1adf9ca78fac1f150.png\" alt=\"image.png\"></p>\n<h4 id=\"静态属性\"><a href=\"#静态属性\" class=\"headerlink\" title=\"静态属性\"></a>静态属性</h4><p>类不仅有成员属性，还可能有静态static属性，UML中以下划线表示</p>\n<p><img src=\"/../imgs/e98140601dec461ca4b95b58c730f66f.png\" alt=\"image.png\"></p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>上面讲了类图一些基础的表示方法，下一篇将介绍类图的关联、依赖、接口、抽象类、多态、枚举等其他场景下的表示方法。</p>\n","length":875,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第23天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"UML介绍\"><a href=\"#UML介绍\" class=\"headerlink\" title=\"UML介绍\"></a>UML介绍</h2><p>统一建模语言（UML）是一组图形表示法。</p>\n<p>20世纪80年代，随着面向对象编程思想的流程，出现了不少面向对象图形的建模语言，这些语言往往大同小异，但是一些关键图形表示方法的区别往往会产生很大的误解，这种混乱的现象持续了很久，直到1997年UML 1.0的出现。</p>\n<p>下图展示了UML的官方图形分类：</p>\n<p><img src=\"/../imgs/2bd6fecf240e4212a15e1aba62e459a7.png\" alt=\"image.png\"></p>\n<p>好的图形经常可以帮助沟通设计思想，也能帮助你理解软件系统或业务流程。即便我们不会画这些设计图，但至少也要能看懂别人画的图。</p>\n<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p>类图（class diagram）描述系统中的对象类型，以及存在于它们之间的各种静态关系。类图也展示类的性质和操作，以及应用于对象连接方式的约束。</p>\n<p>下面是一个简单的类图： <img src=\"/../imgs/0cf569ef6ff246ac8494992e2768b814.png\" alt=\"image.png\"></p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>属性可以用一行代码来描述： <code>visibility name : type multiplicity = default &#123;property-string&#125;</code></p>\n<ul>\n<li>visibility:可访问行。 <code>+</code>表示public，<code>-</code>表示private，另外还有<code>～</code>（default）和<code>＃</code>（protected），这两个在js中没有，不过其他语言比如java中可能用到。</li>\n<li>name：属性名</li>\n<li>type：类型</li>\n<li>multiplicity：多重性，<code>1</code>表示对1，<code>0..1</code>表示0或1可选，<code>*</code>表示0或多</li>\n<li>default：默认值</li>\n<li>{property-string}：属性的附加性质，比如<code>readonly</code>等 <img src=\"/../imgs/2eb00def85fa432d97392428410ab592.png\" alt=\"image.png\"></li>\n</ul>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p>属性不仅仅是成员变量，也可能是方法：<code>visibility name : (parameter-list) = return-type &#123;property-string&#125;</code>，比如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ blanceOn (date:Date) : Money</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"派生属性\"><a href=\"#派生属性\" class=\"headerlink\" title=\"派生属性\"></a>派生属性</h4><p>前端可能会经常遇到派生属性，或者称之为computed。可以标记一个<code>/</code>并添加注释。</p>\n<p><img src=\"/../imgs/a30fe3ee74af45c1adf9ca78fac1f150.png\" alt=\"image.png\"></p>\n<h4 id=\"静态属性\"><a href=\"#静态属性\" class=\"headerlink\" title=\"静态属性\"></a>静态属性</h4><p>类不仅有成员属性，还可能有静态static属性，UML中以下划线表示</p>\n<p><img src=\"/../imgs/e98140601dec461ca4b95b58c730f66f.png\" alt=\"image.png\"></p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>上面讲了类图一些基础的表示方法，下一篇将介绍类图的关联、依赖、接口、抽象类、多态、枚举等其他场景下的表示方法。</p>\n"},{"title":"UML快速入门——类图进阶","date":"2022-02-19T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第24天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n类图\n--\n\n前文介绍了最基本的类图，下面介绍多种场景下的类图表示方法。\n\n### 关联\n\n类图描述属性时，还有一种表示方式——关联。\n\n以关联的方式表示订单类中的属性：\n\n![image.png](../imgs/5b0a81f603a74a308024c7f56ffb4ba5.png)\n\n关联能够更清晰的表示多重性，适合表示一些重要的类。另外类与类之间也可以以这种箭头形式表示他们的关联关系。\n\n#### 双向关联\n\n关联可以是双向的，如下图： ![image.png](../imgs/fe6f3b7830174af792016fe55c80246d.png) 这张图表示`Car`有个属性`owner`，对应0或1个`Person`。`Person`有个属性`cars`，对应0或多个`Car`。（当然这个属性也可能不叫cars，但习惯上会把这个属性命名为cars）\n\n#### 限定关联\n\n限定关联比较少见，它的图形是： ![image.png](../imgs/80f00eaaeaad4fe582d2b84708c8cccd.png) 从这个图里可以看到，在一个Order中，对每个Product都可能有1个OrderLine，但并不表示Order一定有一个Product的属性，它暗示的是Order获取OrderLine，需要一个Product的参数，那么Order可能有一下方法：\n\n```ts\nclass Order {\n    \n    getLineItem(aProduct:Product): OrderLine {}\n    addLineItem(amount:number, forProduct: Product): void {}\n}\n```\n\n### 注释\n\n有些时候可能需要一些注释说明： ![image.png](../imgs/6ec7d114aa1248869f6a08e87ee57878.png)\n\n注释还可以用`--`表示，比如下图就以注释来说明类的责任：\n\n![image.png](../imgs/d642f69551e74e95b50d02aacc6e3148.png)\n\n### 聚合和组合\n\nUML没有定义聚合的含义，因此聚合并不常见：\n\n![image.png](../imgs/f5ea49d308974526bb0f7708ed122536.png)\n\n组合表示某个类是另一个类的组件，但是它有个限制，拥有者类只有一个属性的类型是这个组件类 ![image.png](../imgs/22c8527da1d441afa6df86d050d08c09.png)\n\n上图表示多边形Polygon有一个points属性，对应3个及以上Point，它们的排列是有序的，且没有其他的Point类型的属性。Circle类有1个center属性，类型是Point。\n\n### 多态\n\n面向对象语言中有多态的概念，它在UML中的表示方法如下：\n\n![image.png](../imgs/902d670f367a43bd9847e3e14eae3c0b.png)\n\n### 接口和抽象类\n\n![image.png](../imgs/bc2df772897746ab890b3fe9890677fb.png)\n\n### 枚举\n\n当需要表示枚举时，需要加上`«enumeration»`\n\n![1645364708(1).png](../imgs/286bc40bf9dc4c60b5f38b9bf17ca7f7.png)","source":"_posts/UML快速入门——类图进阶.md","raw":"---\n title: \"UML快速入门——类图进阶\"\n date: 2022-02-20\n tags: [架构,UML]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第24天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n类图\n--\n\n前文介绍了最基本的类图，下面介绍多种场景下的类图表示方法。\n\n### 关联\n\n类图描述属性时，还有一种表示方式——关联。\n\n以关联的方式表示订单类中的属性：\n\n![image.png](../imgs/5b0a81f603a74a308024c7f56ffb4ba5.png)\n\n关联能够更清晰的表示多重性，适合表示一些重要的类。另外类与类之间也可以以这种箭头形式表示他们的关联关系。\n\n#### 双向关联\n\n关联可以是双向的，如下图： ![image.png](../imgs/fe6f3b7830174af792016fe55c80246d.png) 这张图表示`Car`有个属性`owner`，对应0或1个`Person`。`Person`有个属性`cars`，对应0或多个`Car`。（当然这个属性也可能不叫cars，但习惯上会把这个属性命名为cars）\n\n#### 限定关联\n\n限定关联比较少见，它的图形是： ![image.png](../imgs/80f00eaaeaad4fe582d2b84708c8cccd.png) 从这个图里可以看到，在一个Order中，对每个Product都可能有1个OrderLine，但并不表示Order一定有一个Product的属性，它暗示的是Order获取OrderLine，需要一个Product的参数，那么Order可能有一下方法：\n\n```ts\nclass Order {\n    \n    getLineItem(aProduct:Product): OrderLine {}\n    addLineItem(amount:number, forProduct: Product): void {}\n}\n```\n\n### 注释\n\n有些时候可能需要一些注释说明： ![image.png](../imgs/6ec7d114aa1248869f6a08e87ee57878.png)\n\n注释还可以用`--`表示，比如下图就以注释来说明类的责任：\n\n![image.png](../imgs/d642f69551e74e95b50d02aacc6e3148.png)\n\n### 聚合和组合\n\nUML没有定义聚合的含义，因此聚合并不常见：\n\n![image.png](../imgs/f5ea49d308974526bb0f7708ed122536.png)\n\n组合表示某个类是另一个类的组件，但是它有个限制，拥有者类只有一个属性的类型是这个组件类 ![image.png](../imgs/22c8527da1d441afa6df86d050d08c09.png)\n\n上图表示多边形Polygon有一个points属性，对应3个及以上Point，它们的排列是有序的，且没有其他的Point类型的属性。Circle类有1个center属性，类型是Point。\n\n### 多态\n\n面向对象语言中有多态的概念，它在UML中的表示方法如下：\n\n![image.png](../imgs/902d670f367a43bd9847e3e14eae3c0b.png)\n\n### 接口和抽象类\n\n![image.png](../imgs/bc2df772897746ab890b3fe9890677fb.png)\n\n### 枚举\n\n当需要表示枚举时，需要加上`«enumeration»`\n\n![1645364708(1).png](../imgs/286bc40bf9dc4c60b5f38b9bf17ca7f7.png)","slug":"UML快速入门——类图进阶","published":1,"updated":"2024-04-04T15:27:03.823Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhp002vhajfectn4v8y","content":"<p>「这是我参与2022首次更文挑战的第24天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p>前文介绍了最基本的类图，下面介绍多种场景下的类图表示方法。</p>\n<h3 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h3><p>类图描述属性时，还有一种表示方式——关联。</p>\n<p>以关联的方式表示订单类中的属性：</p>\n<p><img src=\"/../imgs/5b0a81f603a74a308024c7f56ffb4ba5.png\" alt=\"image.png\"></p>\n<p>关联能够更清晰的表示多重性，适合表示一些重要的类。另外类与类之间也可以以这种箭头形式表示他们的关联关系。</p>\n<h4 id=\"双向关联\"><a href=\"#双向关联\" class=\"headerlink\" title=\"双向关联\"></a>双向关联</h4><p>关联可以是双向的，如下图： <img src=\"/../imgs/fe6f3b7830174af792016fe55c80246d.png\" alt=\"image.png\"> 这张图表示<code>Car</code>有个属性<code>owner</code>，对应0或1个<code>Person</code>。<code>Person</code>有个属性<code>cars</code>，对应0或多个<code>Car</code>。（当然这个属性也可能不叫cars，但习惯上会把这个属性命名为cars）</p>\n<h4 id=\"限定关联\"><a href=\"#限定关联\" class=\"headerlink\" title=\"限定关联\"></a>限定关联</h4><p>限定关联比较少见，它的图形是： <img src=\"/../imgs/80f00eaaeaad4fe582d2b84708c8cccd.png\" alt=\"image.png\"> 从这个图里可以看到，在一个Order中，对每个Product都可能有1个OrderLine，但并不表示Order一定有一个Product的属性，它暗示的是Order获取OrderLine，需要一个Product的参数，那么Order可能有一下方法：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Order</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">getLineItem</span>(<span class=\"attr\">aProduct</span>:<span class=\"title class_\">Product</span>): <span class=\"title class_\">OrderLine</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"title function_\">addLineItem</span>(<span class=\"attr\">amount</span>:<span class=\"built_in\">number</span>, <span class=\"attr\">forProduct</span>: <span class=\"title class_\">Product</span>): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>有些时候可能需要一些注释说明： <img src=\"/../imgs/6ec7d114aa1248869f6a08e87ee57878.png\" alt=\"image.png\"></p>\n<p>注释还可以用<code>--</code>表示，比如下图就以注释来说明类的责任：</p>\n<p><img src=\"/../imgs/d642f69551e74e95b50d02aacc6e3148.png\" alt=\"image.png\"></p>\n<h3 id=\"聚合和组合\"><a href=\"#聚合和组合\" class=\"headerlink\" title=\"聚合和组合\"></a>聚合和组合</h3><p>UML没有定义聚合的含义，因此聚合并不常见：</p>\n<p><img src=\"/../imgs/f5ea49d308974526bb0f7708ed122536.png\" alt=\"image.png\"></p>\n<p>组合表示某个类是另一个类的组件，但是它有个限制，拥有者类只有一个属性的类型是这个组件类 <img src=\"/../imgs/22c8527da1d441afa6df86d050d08c09.png\" alt=\"image.png\"></p>\n<p>上图表示多边形Polygon有一个points属性，对应3个及以上Point，它们的排列是有序的，且没有其他的Point类型的属性。Circle类有1个center属性，类型是Point。</p>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>面向对象语言中有多态的概念，它在UML中的表示方法如下：</p>\n<p><img src=\"/../imgs/902d670f367a43bd9847e3e14eae3c0b.png\" alt=\"image.png\"></p>\n<h3 id=\"接口和抽象类\"><a href=\"#接口和抽象类\" class=\"headerlink\" title=\"接口和抽象类\"></a>接口和抽象类</h3><p><img src=\"/../imgs/bc2df772897746ab890b3fe9890677fb.png\" alt=\"image.png\"></p>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p>当需要表示枚举时，需要加上<code>«enumeration»</code></p>\n<p><img src=\"/../imgs/286bc40bf9dc4c60b5f38b9bf17ca7f7.png\" alt=\"1645364708(1).png\"></p>\n","length":825,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第24天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p>前文介绍了最基本的类图，下面介绍多种场景下的类图表示方法。</p>\n<h3 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h3><p>类图描述属性时，还有一种表示方式——关联。</p>\n<p>以关联的方式表示订单类中的属性：</p>\n<p><img src=\"/../imgs/5b0a81f603a74a308024c7f56ffb4ba5.png\" alt=\"image.png\"></p>\n<p>关联能够更清晰的表示多重性，适合表示一些重要的类。另外类与类之间也可以以这种箭头形式表示他们的关联关系。</p>\n<h4 id=\"双向关联\"><a href=\"#双向关联\" class=\"headerlink\" title=\"双向关联\"></a>双向关联</h4><p>关联可以是双向的，如下图： <img src=\"/../imgs/fe6f3b7830174af792016fe55c80246d.png\" alt=\"image.png\"> 这张图表示<code>Car</code>有个属性<code>owner</code>，对应0或1个<code>Person</code>。<code>Person</code>有个属性<code>cars</code>，对应0或多个<code>Car</code>。（当然这个属性也可能不叫cars，但习惯上会把这个属性命名为cars）</p>\n<h4 id=\"限定关联\"><a href=\"#限定关联\" class=\"headerlink\" title=\"限定关联\"></a>限定关联</h4><p>限定关联比较少见，它的图形是： <img src=\"/../imgs/80f00eaaeaad4fe582d2b84708c8cccd.png\" alt=\"image.png\"> 从这个图里可以看到，在一个Order中，对每个Product都可能有1个OrderLine，但并不表示Order一定有一个Product的属性，它暗示的是Order获取OrderLine，需要一个Product的参数，那么Order可能有一下方法：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Order</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">getLineItem</span>(<span class=\"attr\">aProduct</span>:<span class=\"title class_\">Product</span>): <span class=\"title class_\">OrderLine</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"title function_\">addLineItem</span>(<span class=\"attr\">amount</span>:<span class=\"built_in\">number</span>, <span class=\"attr\">forProduct</span>: <span class=\"title class_\">Product</span>): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>有些时候可能需要一些注释说明： <img src=\"/../imgs/6ec7d114aa1248869f6a08e87ee57878.png\" alt=\"image.png\"></p>\n<p>注释还可以用<code>--</code>表示，比如下图就以注释来说明类的责任：</p>\n<p><img src=\"/../imgs/d642f69551e74e95b50d02aacc6e3148.png\" alt=\"image.png\"></p>\n<h3 id=\"聚合和组合\"><a href=\"#聚合和组合\" class=\"headerlink\" title=\"聚合和组合\"></a>聚合和组合</h3><p>UML没有定义聚合的含义，因此聚合并不常见：</p>\n<p><img src=\"/../imgs/f5ea49d308974526bb0f7708ed122536.png\" alt=\"image.png\"></p>\n<p>组合表示某个类是另一个类的组件，但是它有个限制，拥有者类只有一个属性的类型是这个组件类 <img src=\"/../imgs/22c8527da1d441afa6df86d050d08c09.png\" alt=\"image.png\"></p>\n<p>上图表示多边形Polygon有一个points属性，对应3个及以上Point，它们的排列是有序的，且没有其他的Point类型的属性。Circle类有1个center属性，类型是Point。</p>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>面向对象语言中有多态的概念，它在UML中的表示方法如下：</p>\n<p><img src=\"/../imgs/902d670f367a43bd9847e3e14eae3c0b.png\" alt=\"image.png\"></p>\n<h3 id=\"接口和抽象类\"><a href=\"#接口和抽象类\" class=\"headerlink\" title=\"接口和抽象类\"></a>接口和抽象类</h3><p><img src=\"/../imgs/bc2df772897746ab890b3fe9890677fb.png\" alt=\"image.png\"></p>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p>当需要表示枚举时，需要加上<code>«enumeration»</code></p>\n<p><img src=\"/../imgs/286bc40bf9dc4c60b5f38b9bf17ca7f7.png\" alt=\"1645364708(1).png\"></p>\n"},{"title":"UML快速入门——顺序图和通信图","date":"2022-02-20T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第25天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n交互图\n---\n\nUML中交互图是顺序图和通信图的统称，这两种图都可以表示类似的交互，其中顺序图具有更丰富的符号标记，但是通信图也有其独特的功能，尤其适用于在墙上画草图。\n\n顺序图\n---\n\n顺序图是最常见的交互图。\n\n### 生命线框\n\n顺序图以生命线框表示参与者，生命线框图包括框图之下的垂直延伸线。\n\n### 消息\n\n在垂直生命线之间，用带实心箭头（同步消息）的实线并附以消息表达式的方式表示对象间的每个消息，生命线自上而下表示时间顺序。 ![image.png](../imgs/a7739d7ba24a40dda484ee0823b99f4e.png)\n\n#### 消息的返回\n\n可以在活动条末端使用应答（或返回）消息线表示消息的返回。 ![image.png](../imgs/14c0aaf10ecf4fa8948b749f56399177.png)\n\n#### 发给自己的消息\n\n可以使用嵌套的活动条表示对象发送给自身的消息 ![image.png](../imgs/5d28b35a63a94d68a8962c1baa5a6418.png)\n\n### 实例的创建和销毁\n\n下图的虚线部分表示实例的创建，消息名称中的create不是必需的 ![image.png](../imgs/89bd18d28389452c962cd3384ac18434.png) 在某些情况下，需要显式地表示对象的销毁，可以用大X表示。 ![image.png](../imgs/e5730d7a315d4863b7ac568223aeefdc.png)\n\n### 循环和条件\n\nUML中可以用图框表示条件和循环。\n\n#### 循环\n\nloop表示条件为真的循环片段，也可以用loop(n)强调循环的次数，表示for循环时，还可以以loop(i,1,10)强调起点和终点。 ![image.png](../imgs/ab523cf7253e43bfb13334615183db2c.png)\n\n##### 迭代集合\n\nloop还可以用来表示迭代集合，比如Set、Map、Array等类型对象。 ![image.png](../imgs/658415d364934e01a794eb8c1642a252.png) 上面这种表示还有更简洁的形式： ![image.png](../imgs/050011baf7694e6f8e029d617274b4c5.png)\n\n#### 条件\n\nopt表示条件为真时执行的代码 ![image.png](../imgs/4ad9b45c288243cc871d388a9e4ee02c.png) 在绘制草图时可以用这种方式简写，它是UML 1.x中的表示方法。 ![image.png](../imgs/03a48de8e5e14bfa86aace25630fe9f0.png)\n\n#### 互斥\n\nalt可以用来表示代码中的if else，表示互斥的条件 ![image.png](../imgs/607c8312c8c041f98238c8207f7d6486.png)\n\n#### 嵌套\n\n图框是可以嵌套的： ![image.png](../imgs/9a9e3fecab1a430099f67a25ecf96322.png)\n\n### 关联\n\n可以使用两种图框来创建交互图的关联。\n\n在整个顺序图周围放置图框，并加上sd标记和诸如AuthenticateUser这样的名称。\n\n标记为ref的图框称为引用，该引用指另一个已命名顺序图。所指的顺序图是实际的交互具体值。 ![image.png](../imgs/d0497dc61b2a4607abca4bef7bcc1291.png)\n\n### 发送给类方法(static)的消息\n\n当和类的static方法通信时，可以对class增加metaclass标记： ![image.png](../imgs/6de6c2ae614f4716af6c0ba282fb0e8f.png)\n\n### 同步和异步\n\nUML利用刺形箭头消息表示异步调用；常规同步（阻塞）调用用实心箭头表示 这种箭头上的区别是细微的。在墙上画UML草图时，通常使用刺形箭头表示同步调用，因为这样对绘制来说更为简便。因此，在阅读UML交互图时，不要假设箭头的形状的正确的！\n\n通信图\n---\n\n通信图是另一种交互图，比顺序图更简约，特别适合我们绘制草图。\n\n### 链和消息\n\n链是连接两个对象的路径，它指明了对象间某种可能的导航和可见性，消息会延此链流转。\n\n所有消息都会沿一条线路传输，就像一条允许双向消息传输的线路一样。 ![image.png](../imgs/ca28f113fdbf4f3a8803fcff7e67687e.png)\n\n#### 传给自己的消息\n\n对象可以向自身发送消息。在这种情况下可以使用到自身的链来表示 ![image.png](../imgs/bbc47e5ba90344129027b9cf69933a11.png)\n\n#### 消息的顺序\n\n消息的顺序使用顺序编号来表示 ![image.png](../imgs/21e20e18c0224cfeaebd4a03966d320a.png)\n\n### 条件和循环\n\n通信图中表示条件和循环的方式和顺序图类似。\n\n可以在顺序编号后使用带有方括号的条件子句来表示有条件消息，下图表示只有在子句为真时才发送该消息。 ![image.png](../imgs/b2cffc1c128c453aa87bcc8c436b5edb.png) 下面示例表示了带有互斥条件路径的顺序编号，示例暗示了在msg1之后可能执行1a或1b。 ![image.png](../imgs/d55d28b03e5345b0a6d0b4e16968694a.png) 下面是迭代的例子，如果迭代子句对建模者而言并不重要，则可以使用“\\*”对其简化。 ![image.png](../imgs/2cac1920e79d41f692a0a3690999cdbb.png) 对集合的所有成员进行迭代的常见算法是给每个成员发送相同的消息。UML中并没有明确的规定，但是我们可以用下面两个方式来表示： ![image.png](../imgs/4b2e4540dcc440fc95a8bb27c35ece17.png)","source":"_posts/UML快速入门——顺序图和通信图.md","raw":"---\n title: \"UML快速入门——顺序图和通信图\"\n date: 2022-02-21\n tags: [架构,UML]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第25天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n交互图\n---\n\nUML中交互图是顺序图和通信图的统称，这两种图都可以表示类似的交互，其中顺序图具有更丰富的符号标记，但是通信图也有其独特的功能，尤其适用于在墙上画草图。\n\n顺序图\n---\n\n顺序图是最常见的交互图。\n\n### 生命线框\n\n顺序图以生命线框表示参与者，生命线框图包括框图之下的垂直延伸线。\n\n### 消息\n\n在垂直生命线之间，用带实心箭头（同步消息）的实线并附以消息表达式的方式表示对象间的每个消息，生命线自上而下表示时间顺序。 ![image.png](../imgs/a7739d7ba24a40dda484ee0823b99f4e.png)\n\n#### 消息的返回\n\n可以在活动条末端使用应答（或返回）消息线表示消息的返回。 ![image.png](../imgs/14c0aaf10ecf4fa8948b749f56399177.png)\n\n#### 发给自己的消息\n\n可以使用嵌套的活动条表示对象发送给自身的消息 ![image.png](../imgs/5d28b35a63a94d68a8962c1baa5a6418.png)\n\n### 实例的创建和销毁\n\n下图的虚线部分表示实例的创建，消息名称中的create不是必需的 ![image.png](../imgs/89bd18d28389452c962cd3384ac18434.png) 在某些情况下，需要显式地表示对象的销毁，可以用大X表示。 ![image.png](../imgs/e5730d7a315d4863b7ac568223aeefdc.png)\n\n### 循环和条件\n\nUML中可以用图框表示条件和循环。\n\n#### 循环\n\nloop表示条件为真的循环片段，也可以用loop(n)强调循环的次数，表示for循环时，还可以以loop(i,1,10)强调起点和终点。 ![image.png](../imgs/ab523cf7253e43bfb13334615183db2c.png)\n\n##### 迭代集合\n\nloop还可以用来表示迭代集合，比如Set、Map、Array等类型对象。 ![image.png](../imgs/658415d364934e01a794eb8c1642a252.png) 上面这种表示还有更简洁的形式： ![image.png](../imgs/050011baf7694e6f8e029d617274b4c5.png)\n\n#### 条件\n\nopt表示条件为真时执行的代码 ![image.png](../imgs/4ad9b45c288243cc871d388a9e4ee02c.png) 在绘制草图时可以用这种方式简写，它是UML 1.x中的表示方法。 ![image.png](../imgs/03a48de8e5e14bfa86aace25630fe9f0.png)\n\n#### 互斥\n\nalt可以用来表示代码中的if else，表示互斥的条件 ![image.png](../imgs/607c8312c8c041f98238c8207f7d6486.png)\n\n#### 嵌套\n\n图框是可以嵌套的： ![image.png](../imgs/9a9e3fecab1a430099f67a25ecf96322.png)\n\n### 关联\n\n可以使用两种图框来创建交互图的关联。\n\n在整个顺序图周围放置图框，并加上sd标记和诸如AuthenticateUser这样的名称。\n\n标记为ref的图框称为引用，该引用指另一个已命名顺序图。所指的顺序图是实际的交互具体值。 ![image.png](../imgs/d0497dc61b2a4607abca4bef7bcc1291.png)\n\n### 发送给类方法(static)的消息\n\n当和类的static方法通信时，可以对class增加metaclass标记： ![image.png](../imgs/6de6c2ae614f4716af6c0ba282fb0e8f.png)\n\n### 同步和异步\n\nUML利用刺形箭头消息表示异步调用；常规同步（阻塞）调用用实心箭头表示 这种箭头上的区别是细微的。在墙上画UML草图时，通常使用刺形箭头表示同步调用，因为这样对绘制来说更为简便。因此，在阅读UML交互图时，不要假设箭头的形状的正确的！\n\n通信图\n---\n\n通信图是另一种交互图，比顺序图更简约，特别适合我们绘制草图。\n\n### 链和消息\n\n链是连接两个对象的路径，它指明了对象间某种可能的导航和可见性，消息会延此链流转。\n\n所有消息都会沿一条线路传输，就像一条允许双向消息传输的线路一样。 ![image.png](../imgs/ca28f113fdbf4f3a8803fcff7e67687e.png)\n\n#### 传给自己的消息\n\n对象可以向自身发送消息。在这种情况下可以使用到自身的链来表示 ![image.png](../imgs/bbc47e5ba90344129027b9cf69933a11.png)\n\n#### 消息的顺序\n\n消息的顺序使用顺序编号来表示 ![image.png](../imgs/21e20e18c0224cfeaebd4a03966d320a.png)\n\n### 条件和循环\n\n通信图中表示条件和循环的方式和顺序图类似。\n\n可以在顺序编号后使用带有方括号的条件子句来表示有条件消息，下图表示只有在子句为真时才发送该消息。 ![image.png](../imgs/b2cffc1c128c453aa87bcc8c436b5edb.png) 下面示例表示了带有互斥条件路径的顺序编号，示例暗示了在msg1之后可能执行1a或1b。 ![image.png](../imgs/d55d28b03e5345b0a6d0b4e16968694a.png) 下面是迭代的例子，如果迭代子句对建模者而言并不重要，则可以使用“\\*”对其简化。 ![image.png](../imgs/2cac1920e79d41f692a0a3690999cdbb.png) 对集合的所有成员进行迭代的常见算法是给每个成员发送相同的消息。UML中并没有明确的规定，但是我们可以用下面两个方式来表示： ![image.png](../imgs/4b2e4540dcc440fc95a8bb27c35ece17.png)","slug":"UML快速入门——顺序图和通信图","published":1,"updated":"2024-04-04T15:27:03.832Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhp002yhajf826gak3b","content":"<p>「这是我参与2022首次更文挑战的第25天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"交互图\"><a href=\"#交互图\" class=\"headerlink\" title=\"交互图\"></a>交互图</h2><p>UML中交互图是顺序图和通信图的统称，这两种图都可以表示类似的交互，其中顺序图具有更丰富的符号标记，但是通信图也有其独特的功能，尤其适用于在墙上画草图。</p>\n<h2 id=\"顺序图\"><a href=\"#顺序图\" class=\"headerlink\" title=\"顺序图\"></a>顺序图</h2><p>顺序图是最常见的交互图。</p>\n<h3 id=\"生命线框\"><a href=\"#生命线框\" class=\"headerlink\" title=\"生命线框\"></a>生命线框</h3><p>顺序图以生命线框表示参与者，生命线框图包括框图之下的垂直延伸线。</p>\n<h3 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h3><p>在垂直生命线之间，用带实心箭头（同步消息）的实线并附以消息表达式的方式表示对象间的每个消息，生命线自上而下表示时间顺序。 <img src=\"/../imgs/a7739d7ba24a40dda484ee0823b99f4e.png\" alt=\"image.png\"></p>\n<h4 id=\"消息的返回\"><a href=\"#消息的返回\" class=\"headerlink\" title=\"消息的返回\"></a>消息的返回</h4><p>可以在活动条末端使用应答（或返回）消息线表示消息的返回。 <img src=\"/../imgs/14c0aaf10ecf4fa8948b749f56399177.png\" alt=\"image.png\"></p>\n<h4 id=\"发给自己的消息\"><a href=\"#发给自己的消息\" class=\"headerlink\" title=\"发给自己的消息\"></a>发给自己的消息</h4><p>可以使用嵌套的活动条表示对象发送给自身的消息 <img src=\"/../imgs/5d28b35a63a94d68a8962c1baa5a6418.png\" alt=\"image.png\"></p>\n<h3 id=\"实例的创建和销毁\"><a href=\"#实例的创建和销毁\" class=\"headerlink\" title=\"实例的创建和销毁\"></a>实例的创建和销毁</h3><p>下图的虚线部分表示实例的创建，消息名称中的create不是必需的 <img src=\"/../imgs/89bd18d28389452c962cd3384ac18434.png\" alt=\"image.png\"> 在某些情况下，需要显式地表示对象的销毁，可以用大X表示。 <img src=\"/../imgs/e5730d7a315d4863b7ac568223aeefdc.png\" alt=\"image.png\"></p>\n<h3 id=\"循环和条件\"><a href=\"#循环和条件\" class=\"headerlink\" title=\"循环和条件\"></a>循环和条件</h3><p>UML中可以用图框表示条件和循环。</p>\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><p>loop表示条件为真的循环片段，也可以用loop(n)强调循环的次数，表示for循环时，还可以以loop(i,1,10)强调起点和终点。 <img src=\"/../imgs/ab523cf7253e43bfb13334615183db2c.png\" alt=\"image.png\"></p>\n<h5 id=\"迭代集合\"><a href=\"#迭代集合\" class=\"headerlink\" title=\"迭代集合\"></a>迭代集合</h5><p>loop还可以用来表示迭代集合，比如Set、Map、Array等类型对象。 <img src=\"/../imgs/658415d364934e01a794eb8c1642a252.png\" alt=\"image.png\"> 上面这种表示还有更简洁的形式： <img src=\"/../imgs/050011baf7694e6f8e029d617274b4c5.png\" alt=\"image.png\"></p>\n<h4 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h4><p>opt表示条件为真时执行的代码 <img src=\"/../imgs/4ad9b45c288243cc871d388a9e4ee02c.png\" alt=\"image.png\"> 在绘制草图时可以用这种方式简写，它是UML 1.x中的表示方法。 <img src=\"/../imgs/03a48de8e5e14bfa86aace25630fe9f0.png\" alt=\"image.png\"></p>\n<h4 id=\"互斥\"><a href=\"#互斥\" class=\"headerlink\" title=\"互斥\"></a>互斥</h4><p>alt可以用来表示代码中的if else，表示互斥的条件 <img src=\"/../imgs/607c8312c8c041f98238c8207f7d6486.png\" alt=\"image.png\"></p>\n<h4 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h4><p>图框是可以嵌套的： <img src=\"/../imgs/9a9e3fecab1a430099f67a25ecf96322.png\" alt=\"image.png\"></p>\n<h3 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h3><p>可以使用两种图框来创建交互图的关联。</p>\n<p>在整个顺序图周围放置图框，并加上sd标记和诸如AuthenticateUser这样的名称。</p>\n<p>标记为ref的图框称为引用，该引用指另一个已命名顺序图。所指的顺序图是实际的交互具体值。 <img src=\"/../imgs/d0497dc61b2a4607abca4bef7bcc1291.png\" alt=\"image.png\"></p>\n<h3 id=\"发送给类方法-static-的消息\"><a href=\"#发送给类方法-static-的消息\" class=\"headerlink\" title=\"发送给类方法(static)的消息\"></a>发送给类方法(static)的消息</h3><p>当和类的static方法通信时，可以对class增加metaclass标记： <img src=\"/../imgs/6de6c2ae614f4716af6c0ba282fb0e8f.png\" alt=\"image.png\"></p>\n<h3 id=\"同步和异步\"><a href=\"#同步和异步\" class=\"headerlink\" title=\"同步和异步\"></a>同步和异步</h3><p>UML利用刺形箭头消息表示异步调用；常规同步（阻塞）调用用实心箭头表示 这种箭头上的区别是细微的。在墙上画UML草图时，通常使用刺形箭头表示同步调用，因为这样对绘制来说更为简便。因此，在阅读UML交互图时，不要假设箭头的形状的正确的！</p>\n<h2 id=\"通信图\"><a href=\"#通信图\" class=\"headerlink\" title=\"通信图\"></a>通信图</h2><p>通信图是另一种交互图，比顺序图更简约，特别适合我们绘制草图。</p>\n<h3 id=\"链和消息\"><a href=\"#链和消息\" class=\"headerlink\" title=\"链和消息\"></a>链和消息</h3><p>链是连接两个对象的路径，它指明了对象间某种可能的导航和可见性，消息会延此链流转。</p>\n<p>所有消息都会沿一条线路传输，就像一条允许双向消息传输的线路一样。 <img src=\"/../imgs/ca28f113fdbf4f3a8803fcff7e67687e.png\" alt=\"image.png\"></p>\n<h4 id=\"传给自己的消息\"><a href=\"#传给自己的消息\" class=\"headerlink\" title=\"传给自己的消息\"></a>传给自己的消息</h4><p>对象可以向自身发送消息。在这种情况下可以使用到自身的链来表示 <img src=\"/../imgs/bbc47e5ba90344129027b9cf69933a11.png\" alt=\"image.png\"></p>\n<h4 id=\"消息的顺序\"><a href=\"#消息的顺序\" class=\"headerlink\" title=\"消息的顺序\"></a>消息的顺序</h4><p>消息的顺序使用顺序编号来表示 <img src=\"/../imgs/21e20e18c0224cfeaebd4a03966d320a.png\" alt=\"image.png\"></p>\n<h3 id=\"条件和循环\"><a href=\"#条件和循环\" class=\"headerlink\" title=\"条件和循环\"></a>条件和循环</h3><p>通信图中表示条件和循环的方式和顺序图类似。</p>\n<p>可以在顺序编号后使用带有方括号的条件子句来表示有条件消息，下图表示只有在子句为真时才发送该消息。 <img src=\"/../imgs/b2cffc1c128c453aa87bcc8c436b5edb.png\" alt=\"image.png\"> 下面示例表示了带有互斥条件路径的顺序编号，示例暗示了在msg1之后可能执行1a或1b。 <img src=\"/../imgs/d55d28b03e5345b0a6d0b4e16968694a.png\" alt=\"image.png\"> 下面是迭代的例子，如果迭代子句对建模者而言并不重要，则可以使用“*”对其简化。 <img src=\"/../imgs/2cac1920e79d41f692a0a3690999cdbb.png\" alt=\"image.png\"> 对集合的所有成员进行迭代的常见算法是给每个成员发送相同的消息。UML中并没有明确的规定，但是我们可以用下面两个方式来表示： <img src=\"/../imgs/4b2e4540dcc440fc95a8bb27c35ece17.png\" alt=\"image.png\"></p>\n","length":1265,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第25天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"交互图\"><a href=\"#交互图\" class=\"headerlink\" title=\"交互图\"></a>交互图</h2><p>UML中交互图是顺序图和通信图的统称，这两种图都可以表示类似的交互，其中顺序图具有更丰富的符号标记，但是通信图也有其独特的功能，尤其适用于在墙上画草图。</p>\n<h2 id=\"顺序图\"><a href=\"#顺序图\" class=\"headerlink\" title=\"顺序图\"></a>顺序图</h2><p>顺序图是最常见的交互图。</p>\n<h3 id=\"生命线框\"><a href=\"#生命线框\" class=\"headerlink\" title=\"生命线框\"></a>生命线框</h3><p>顺序图以生命线框表示参与者，生命线框图包括框图之下的垂直延伸线。</p>\n<h3 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h3><p>在垂直生命线之间，用带实心箭头（同步消息）的实线并附以消息表达式的方式表示对象间的每个消息，生命线自上而下表示时间顺序。 <img src=\"/../imgs/a7739d7ba24a40dda484ee0823b99f4e.png\" alt=\"image.png\"></p>\n<h4 id=\"消息的返回\"><a href=\"#消息的返回\" class=\"headerlink\" title=\"消息的返回\"></a>消息的返回</h4><p>可以在活动条末端使用应答（或返回）消息线表示消息的返回。 <img src=\"/../imgs/14c0aaf10ecf4fa8948b749f56399177.png\" alt=\"image.png\"></p>\n<h4 id=\"发给自己的消息\"><a href=\"#发给自己的消息\" class=\"headerlink\" title=\"发给自己的消息\"></a>发给自己的消息</h4><p>可以使用嵌套的活动条表示对象发送给自身的消息 <img src=\"/../imgs/5d28b35a63a94d68a8962c1baa5a6418.png\" alt=\"image.png\"></p>\n<h3 id=\"实例的创建和销毁\"><a href=\"#实例的创建和销毁\" class=\"headerlink\" title=\"实例的创建和销毁\"></a>实例的创建和销毁</h3><p>下图的虚线部分表示实例的创建，消息名称中的create不是必需的 <img src=\"/../imgs/89bd18d28389452c962cd3384ac18434.png\" alt=\"image.png\"> 在某些情况下，需要显式地表示对象的销毁，可以用大X表示。 <img src=\"/../imgs/e5730d7a315d4863b7ac568223aeefdc.png\" alt=\"image.png\"></p>\n<h3 id=\"循环和条件\"><a href=\"#循环和条件\" class=\"headerlink\" title=\"循环和条件\"></a>循环和条件</h3><p>UML中可以用图框表示条件和循环。</p>\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><p>loop表示条件为真的循环片段，也可以用loop(n)强调循环的次数，表示for循环时，还可以以loop(i,1,10)强调起点和终点。 <img src=\"/../imgs/ab523cf7253e43bfb13334615183db2c.png\" alt=\"image.png\"></p>\n<h5 id=\"迭代集合\"><a href=\"#迭代集合\" class=\"headerlink\" title=\"迭代集合\"></a>迭代集合</h5><p>loop还可以用来表示迭代集合，比如Set、Map、Array等类型对象。 <img src=\"/../imgs/658415d364934e01a794eb8c1642a252.png\" alt=\"image.png\"> 上面这种表示还有更简洁的形式： <img src=\"/../imgs/050011baf7694e6f8e029d617274b4c5.png\" alt=\"image.png\"></p>\n<h4 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h4><p>opt表示条件为真时执行的代码 <img src=\"/../imgs/4ad9b45c288243cc871d388a9e4ee02c.png\" alt=\"image.png\"> 在绘制草图时可以用这种方式简写，它是UML 1.x中的表示方法。 <img src=\"/../imgs/03a48de8e5e14bfa86aace25630fe9f0.png\" alt=\"image.png\"></p>\n<h4 id=\"互斥\"><a href=\"#互斥\" class=\"headerlink\" title=\"互斥\"></a>互斥</h4><p>alt可以用来表示代码中的if else，表示互斥的条件 <img src=\"/../imgs/607c8312c8c041f98238c8207f7d6486.png\" alt=\"image.png\"></p>\n<h4 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h4><p>图框是可以嵌套的： <img src=\"/../imgs/9a9e3fecab1a430099f67a25ecf96322.png\" alt=\"image.png\"></p>\n<h3 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h3><p>可以使用两种图框来创建交互图的关联。</p>\n<p>在整个顺序图周围放置图框，并加上sd标记和诸如AuthenticateUser这样的名称。</p>\n<p>标记为ref的图框称为引用，该引用指另一个已命名顺序图。所指的顺序图是实际的交互具体值。 <img src=\"/../imgs/d0497dc61b2a4607abca4bef7bcc1291.png\" alt=\"image.png\"></p>\n<h3 id=\"发送给类方法-static-的消息\"><a href=\"#发送给类方法-static-的消息\" class=\"headerlink\" title=\"发送给类方法(static)的消息\"></a>发送给类方法(static)的消息</h3><p>当和类的static方法通信时，可以对class增加metaclass标记： <img src=\"/../imgs/6de6c2ae614f4716af6c0ba282fb0e8f.png\" alt=\"image.png\"></p>\n<h3 id=\"同步和异步\"><a href=\"#同步和异步\" class=\"headerlink\" title=\"同步和异步\"></a>同步和异步</h3><p>UML利用刺形箭头消息表示异步调用；常规同步（阻塞）调用用实心箭头表示 这种箭头上的区别是细微的。在墙上画UML草图时，通常使用刺形箭头表示同步调用，因为这样对绘制来说更为简便。因此，在阅读UML交互图时，不要假设箭头的形状的正确的！</p>\n<h2 id=\"通信图\"><a href=\"#通信图\" class=\"headerlink\" title=\"通信图\"></a>通信图</h2><p>通信图是另一种交互图，比顺序图更简约，特别适合我们绘制草图。</p>\n<h3 id=\"链和消息\"><a href=\"#链和消息\" class=\"headerlink\" title=\"链和消息\"></a>链和消息</h3><p>链是连接两个对象的路径，它指明了对象间某种可能的导航和可见性，消息会延此链流转。</p>\n<p>所有消息都会沿一条线路传输，就像一条允许双向消息传输的线路一样。 <img src=\"/../imgs/ca28f113fdbf4f3a8803fcff7e67687e.png\" alt=\"image.png\"></p>\n<h4 id=\"传给自己的消息\"><a href=\"#传给自己的消息\" class=\"headerlink\" title=\"传给自己的消息\"></a>传给自己的消息</h4><p>对象可以向自身发送消息。在这种情况下可以使用到自身的链来表示 <img src=\"/../imgs/bbc47e5ba90344129027b9cf69933a11.png\" alt=\"image.png\"></p>\n<h4 id=\"消息的顺序\"><a href=\"#消息的顺序\" class=\"headerlink\" title=\"消息的顺序\"></a>消息的顺序</h4><p>消息的顺序使用顺序编号来表示 <img src=\"/../imgs/21e20e18c0224cfeaebd4a03966d320a.png\" alt=\"image.png\"></p>\n<h3 id=\"条件和循环\"><a href=\"#条件和循环\" class=\"headerlink\" title=\"条件和循环\"></a>条件和循环</h3><p>通信图中表示条件和循环的方式和顺序图类似。</p>\n<p>可以在顺序编号后使用带有方括号的条件子句来表示有条件消息，下图表示只有在子句为真时才发送该消息。 <img src=\"/../imgs/b2cffc1c128c453aa87bcc8c436b5edb.png\" alt=\"image.png\"> 下面示例表示了带有互斥条件路径的顺序编号，示例暗示了在msg1之后可能执行1a或1b。 <img src=\"/../imgs/d55d28b03e5345b0a6d0b4e16968694a.png\" alt=\"image.png\"> 下面是迭代的例子，如果迭代子句对建模者而言并不重要，则可以使用“*”对其简化。 <img src=\"/../imgs/2cac1920e79d41f692a0a3690999cdbb.png\" alt=\"image.png\"> 对集合的所有成员进行迭代的常见算法是给每个成员发送相同的消息。UML中并没有明确的规定，但是我们可以用下面两个方式来表示： <img src=\"/../imgs/4b2e4540dcc440fc95a8bb27c35ece17.png\" alt=\"image.png\"></p>\n"},{"title":"asnyc/await的并行","date":"2019-01-23T16:00:00.000Z","_content":"\n一直以为es7里面的async和await可以用来简化串行异步代码，而没有想到还能并行。  \n说到底，这俩货不过是promise的语法糖，await的作用只是串行解析promise。  \n通常我们这样写：\n\n```\nfunction asyncAwaitFn(str) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(str)\n        }, 1000);\n    })\n}\nconst parallel = async () => { //并行执行\n    console.time('parallel')\n    const parallelOne = await asyncAwaitFn('1');\n    const parallelTwo = await asyncAwaitFn('2')\n    console.log(parallelOne) //1\n    console.log(parallelTwo) //2\n    console.timeEnd('parallel') //2003.509033203125ms\n}\nparallel()\n```\n\n这是串行，显然最后的执行时间应该大于2000ms。\n\n但如果换一种写法：\n\n```\nfunction asyncAwaitFn(str) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(str)\n        }, 1000);\n    })\n}\nconst parallel = async () => { //并行执行\n    console.time('parallel')\n    const parallelOne = asyncAwaitFn('1');\n    const parallelTwo = asyncAwaitFn('2')\n    console.log(await parallelOne) //1\n    console.log(await parallelTwo) //2\n    console.timeEnd('parallel') //1001.87255859375ms\n}\nparallel()\n```\n\n最后执行时间只要1000ms，显然是并行了。\n\n**不过严谨来说，这依然是promise本身的并行罢了。**","source":"_posts/asnyc await的并行.md","raw":"---\n title: \"asnyc/await的并行\"\n date: 2019-01-24\n tags: [ECMAScript 6]\n categories: \n---\n\n一直以为es7里面的async和await可以用来简化串行异步代码，而没有想到还能并行。  \n说到底，这俩货不过是promise的语法糖，await的作用只是串行解析promise。  \n通常我们这样写：\n\n```\nfunction asyncAwaitFn(str) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(str)\n        }, 1000);\n    })\n}\nconst parallel = async () => { //并行执行\n    console.time('parallel')\n    const parallelOne = await asyncAwaitFn('1');\n    const parallelTwo = await asyncAwaitFn('2')\n    console.log(parallelOne) //1\n    console.log(parallelTwo) //2\n    console.timeEnd('parallel') //2003.509033203125ms\n}\nparallel()\n```\n\n这是串行，显然最后的执行时间应该大于2000ms。\n\n但如果换一种写法：\n\n```\nfunction asyncAwaitFn(str) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(str)\n        }, 1000);\n    })\n}\nconst parallel = async () => { //并行执行\n    console.time('parallel')\n    const parallelOne = asyncAwaitFn('1');\n    const parallelTwo = asyncAwaitFn('2')\n    console.log(await parallelOne) //1\n    console.log(await parallelTwo) //2\n    console.timeEnd('parallel') //1001.87255859375ms\n}\nparallel()\n```\n\n最后执行时间只要1000ms，显然是并行了。\n\n**不过严谨来说，这依然是promise本身的并行罢了。**","slug":"asnyc await的并行","published":1,"updated":"2024-04-04T15:27:03.499Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhp0032hajf0ism0tcj","content":"<p>一直以为es7里面的async和await可以用来简化串行异步代码，而没有想到还能并行。<br>说到底，这俩货不过是promise的语法糖，await的作用只是串行解析promise。<br>通常我们这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function asyncAwaitFn(str) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            resolve(str)</span><br><span class=\"line\">        &#125;, 1000);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const parallel = async () =&gt; &#123; //并行执行</span><br><span class=\"line\">    console.time(&#x27;parallel&#x27;)</span><br><span class=\"line\">    const parallelOne = await asyncAwaitFn(&#x27;1&#x27;);</span><br><span class=\"line\">    const parallelTwo = await asyncAwaitFn(&#x27;2&#x27;)</span><br><span class=\"line\">    console.log(parallelOne) //1</span><br><span class=\"line\">    console.log(parallelTwo) //2</span><br><span class=\"line\">    console.timeEnd(&#x27;parallel&#x27;) //2003.509033203125ms</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">parallel()</span><br></pre></td></tr></table></figure>\n\n<p>这是串行，显然最后的执行时间应该大于2000ms。</p>\n<p>但如果换一种写法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function asyncAwaitFn(str) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            resolve(str)</span><br><span class=\"line\">        &#125;, 1000);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const parallel = async () =&gt; &#123; //并行执行</span><br><span class=\"line\">    console.time(&#x27;parallel&#x27;)</span><br><span class=\"line\">    const parallelOne = asyncAwaitFn(&#x27;1&#x27;);</span><br><span class=\"line\">    const parallelTwo = asyncAwaitFn(&#x27;2&#x27;)</span><br><span class=\"line\">    console.log(await parallelOne) //1</span><br><span class=\"line\">    console.log(await parallelTwo) //2</span><br><span class=\"line\">    console.timeEnd(&#x27;parallel&#x27;) //1001.87255859375ms</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">parallel()</span><br></pre></td></tr></table></figure>\n\n<p>最后执行时间只要1000ms，显然是并行了。</p>\n<p><strong>不过严谨来说，这依然是promise本身的并行罢了。</strong></p>\n","length":1095,"excerpt":"","more":"<p>一直以为es7里面的async和await可以用来简化串行异步代码，而没有想到还能并行。<br>说到底，这俩货不过是promise的语法糖，await的作用只是串行解析promise。<br>通常我们这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function asyncAwaitFn(str) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            resolve(str)</span><br><span class=\"line\">        &#125;, 1000);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const parallel = async () =&gt; &#123; //并行执行</span><br><span class=\"line\">    console.time(&#x27;parallel&#x27;)</span><br><span class=\"line\">    const parallelOne = await asyncAwaitFn(&#x27;1&#x27;);</span><br><span class=\"line\">    const parallelTwo = await asyncAwaitFn(&#x27;2&#x27;)</span><br><span class=\"line\">    console.log(parallelOne) //1</span><br><span class=\"line\">    console.log(parallelTwo) //2</span><br><span class=\"line\">    console.timeEnd(&#x27;parallel&#x27;) //2003.509033203125ms</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">parallel()</span><br></pre></td></tr></table></figure>\n\n<p>这是串行，显然最后的执行时间应该大于2000ms。</p>\n<p>但如果换一种写法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function asyncAwaitFn(str) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            resolve(str)</span><br><span class=\"line\">        &#125;, 1000);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const parallel = async () =&gt; &#123; //并行执行</span><br><span class=\"line\">    console.time(&#x27;parallel&#x27;)</span><br><span class=\"line\">    const parallelOne = asyncAwaitFn(&#x27;1&#x27;);</span><br><span class=\"line\">    const parallelTwo = asyncAwaitFn(&#x27;2&#x27;)</span><br><span class=\"line\">    console.log(await parallelOne) //1</span><br><span class=\"line\">    console.log(await parallelTwo) //2</span><br><span class=\"line\">    console.timeEnd(&#x27;parallel&#x27;) //1001.87255859375ms</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">parallel()</span><br></pre></td></tr></table></figure>\n\n<p>最后执行时间只要1000ms，显然是并行了。</p>\n<p><strong>不过严谨来说，这依然是promise本身的并行罢了。</strong></p>\n"},{"title":"eslint + typescript 配置参考","date":"2021-04-17T16:00:00.000Z","_content":"\n```bash\nnpm i eslint eslint-plugin-react @typescript-eslint/parser @typescript-eslint/eslint-plugin\n\n```\n\n.eslintrc.js\n\n```css\nmodule.exports = {\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    project: './tsconfig.json',\n  },\n  plugins: ['@typescript-eslint'],\n  extends: [\n    'plugin:react/recommended',\n    'plugin:@typescript-eslint/recommended',\n  ],\n  rules:  {\n    // Overwrite rules specified from the extended configs e.g. \n    // \"@typescript-eslint/explicit-function-return-type\": \"off\",\n  }\n}\n```\n\nvscode: settings.json\n\n```json\n\"eslint.validate\":  [\n  \"javascript\",\n  \"javascriptreact\",\n  {\"language\":  \"typescript\",  \"autoFix\":  true  },\n  {\"language\":  \"typescriptreact\",  \"autoFix\":  true  }\n],\n```","source":"_posts/eslint + typescript 配置参考.md","raw":"---\n title: \"eslint + typescript 配置参考\"\n date: 2021-04-18\n tags: [TypeScript]\n categories: [前端笔记]\n---\n\n```bash\nnpm i eslint eslint-plugin-react @typescript-eslint/parser @typescript-eslint/eslint-plugin\n\n```\n\n.eslintrc.js\n\n```css\nmodule.exports = {\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    project: './tsconfig.json',\n  },\n  plugins: ['@typescript-eslint'],\n  extends: [\n    'plugin:react/recommended',\n    'plugin:@typescript-eslint/recommended',\n  ],\n  rules:  {\n    // Overwrite rules specified from the extended configs e.g. \n    // \"@typescript-eslint/explicit-function-return-type\": \"off\",\n  }\n}\n```\n\nvscode: settings.json\n\n```json\n\"eslint.validate\":  [\n  \"javascript\",\n  \"javascriptreact\",\n  {\"language\":  \"typescript\",  \"autoFix\":  true  },\n  {\"language\":  \"typescriptreact\",  \"autoFix\":  true  }\n],\n```","slug":"eslint + typescript 配置参考","published":1,"updated":"2024-04-04T15:27:03.539Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhq0035hajf663mefe4","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint eslint-plugin-react @typescript-eslint/parser @typescript-eslint/eslint-plugin</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>.eslintrc.js</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module<span class=\"selector-class\">.exports</span> = &#123;</span><br><span class=\"line\">  parser: <span class=\"string\">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class=\"line\">  parserOptions: &#123;</span><br><span class=\"line\">    project: <span class=\"string\">&#x27;./tsconfig.json&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [<span class=\"string\">&#x27;@typescript-eslint&#x27;</span>],</span><br><span class=\"line\">  extends: [</span><br><span class=\"line\">    <span class=\"string\">&#x27;plugin:react/recommended&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  rules:  &#123;</span><br><span class=\"line\">    // Overwrite rules specified <span class=\"selector-tag\">from</span> the extended configs e<span class=\"selector-class\">.g</span>. </span><br><span class=\"line\">    // &quot;<span class=\"keyword\">@typescript-eslint</span>/explicit-function-return-type&quot;: <span class=\"string\">&quot;off&quot;</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>vscode: settings.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;eslint.validate&quot;</span><span class=\"punctuation\">:</span>  <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"string\">&quot;javascript&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;javascriptreact&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;language&quot;</span><span class=\"punctuation\">:</span>  <span class=\"string\">&quot;typescript&quot;</span><span class=\"punctuation\">,</span>  <span class=\"attr\">&quot;autoFix&quot;</span><span class=\"punctuation\">:</span>  <span class=\"literal\"><span class=\"keyword\">true</span></span>  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;language&quot;</span><span class=\"punctuation\">:</span>  <span class=\"string\">&quot;typescriptreact&quot;</span><span class=\"punctuation\">,</span>  <span class=\"attr\">&quot;autoFix&quot;</span><span class=\"punctuation\">:</span>  <span class=\"literal\"><span class=\"keyword\">true</span></span>  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>","length":817,"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint eslint-plugin-react @typescript-eslint/parser @typescript-eslint/eslint-plugin</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>.eslintrc.js</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module<span class=\"selector-class\">.exports</span> = &#123;</span><br><span class=\"line\">  parser: <span class=\"string\">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class=\"line\">  parserOptions: &#123;</span><br><span class=\"line\">    project: <span class=\"string\">&#x27;./tsconfig.json&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [<span class=\"string\">&#x27;@typescript-eslint&#x27;</span>],</span><br><span class=\"line\">  extends: [</span><br><span class=\"line\">    <span class=\"string\">&#x27;plugin:react/recommended&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  rules:  &#123;</span><br><span class=\"line\">    // Overwrite rules specified <span class=\"selector-tag\">from</span> the extended configs e<span class=\"selector-class\">.g</span>. </span><br><span class=\"line\">    // &quot;<span class=\"keyword\">@typescript-eslint</span>/explicit-function-return-type&quot;: <span class=\"string\">&quot;off&quot;</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>vscode: settings.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;eslint.validate&quot;</span><span class=\"punctuation\">:</span>  <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"string\">&quot;javascript&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;javascriptreact&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;language&quot;</span><span class=\"punctuation\">:</span>  <span class=\"string\">&quot;typescript&quot;</span><span class=\"punctuation\">,</span>  <span class=\"attr\">&quot;autoFix&quot;</span><span class=\"punctuation\">:</span>  <span class=\"literal\"><span class=\"keyword\">true</span></span>  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;language&quot;</span><span class=\"punctuation\">:</span>  <span class=\"string\">&quot;typescriptreact&quot;</span><span class=\"punctuation\">,</span>  <span class=\"attr\">&quot;autoFix&quot;</span><span class=\"punctuation\">:</span>  <span class=\"literal\"><span class=\"keyword\">true</span></span>  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue2源码解析：从nextTick与异步更新说起","date":"2021-11-21T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第22天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\nVue为什么要设计nextTick\n-----------------\n\nvue或react这种框架，最大的性能消耗来自于diff计算，而修改data数据，或者setState,这些触发更新的操作，都意味着一次diff的计算，如果没有任何的优化，频繁地进行数据的修改，很容易造成页面的卡顿。\n\n因此，两个框架都不约而同地设计了更新合并。曾有一阵子，react中关于setState是同步还是异步的面试题几乎成为了一道必问的问题，而vue中nextTick相关的面试题也屡见不鲜。\n\n本期将从nextTick开始，探究Vue中如何进行更新合并。\n\nnextTick做了什么\n------------\n\n```js\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    timerFunc()\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n\n```\n\nnextTick接收一个函数参数，并且将这个函数放入了`callbacks`，之后调用了 `timerFunc()`,前者是一个空数组，后者其实就是一个微任务。\n\n```javascript\nconst callbacks = []\n...\nlet timerFunc\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n  }\n}\n```\n\n`timerFunc`会调用`flushCallbacks`,这个函数会浅拷贝`callbacks`，并依次执行里面的函数\n\n```ini\nfunction flushCallbacks () {\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]()\n  }\n}\n```\n\n因此nextTick其实就是将回调函数放入在当前EventLoop的微任务队列。\n\n那为什么要这么设计呢？\n\n> 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。\n\n我们可以推测，**修改数据和dom的更新是异步的**，因此要获取更新后的dom，也需要等待异步。那么这个异步是如何实现的呢？\n\n我们先来看Vue从beforeCreate到created做了什么。\n\nVue init执行顺序\n------------\n\n\\_init\n\ncallHook(vm, 'created')\n\ninitLifecycle\n\ninitEvents\n\ninitRender\n\ncallHook(vm, 'beforeCreate')\n\ninitInjections\n\ninitProvide\n\ninitState\n\ndefineReactive\n\nobserve(data, true)\n\nob = new Observer(value)\n\nthis.walk(value)\n\nnew Vue()\n\n这里需要关注的是initState中的defineReactive\n\n### defineReactive\n\n这个方法里进行了大家熟知的`Object.defineProperty`操作：\n\n```ts\nexport function defineReactive (\n  obj: Object, key: string,val: any,customSetter?: ?Function,shallow?: boolean\n) {\n    ...\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n     ...\n    },\n    set: function reactiveSetter (newVal) {\n      ...\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify()\n    }\n  })\n}\n```\n\nVue更新执行顺序\n---------\n\n修改data数据后，触发这里的set，set进行了数据的更改，然后调用了`dep.notify()`\n\n```css\nnotify () {\n    const subs = this.subs.slice()\n    if (process.env.NODE_ENV !== 'production' && !config.async) {\n      subs.sort((a, b) => a.id - b.id)\n    }\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n```\n\n这些subs便是一个个Watcher，经过依赖收集，这些watcher会被加入subs数组\n\n```ts\n class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n}\n```\n\n### Watcher\n\nwatcher有一个重要的成员vm，代表的是组件实例，它的update调用的是`queueWatcher`\n\n```ts\nclass Watcher {\n    vm: Component;\n    ...\n    update () {\n        ...\n         queueWatcher(this)\n  }\n}\n```\n\n### queueWatcher\n\n```tsx\nfunction queueWatcher (watcher: Watcher) {\n  const id = watcher.id\n  if (has[id] == null) {\n    has[id] = true\n    if (!flushing) {\n      queue.push(watcher)\n    } else {\n      let i = queue.length - 1\n      while (i > index && queue[i].id > watcher.id) {\n        i--\n      }\n      queue.splice(i + 1, 0, watcher)\n    }\n    // queue the flush\n    if (!waiting) {\n        ...\n      nextTick(flushSchedulerQueue)\n    }\n  }\n}\n```\n\n在最后又遇到了`nextTick`，可以看到从这里开始了异步更新。\n\n异步更新的得与失\n--------\n\n要做性能优化就必定要做更新合并，要做更新合并，首要的问题是如何确定更新已经结束了？\n\n异步更新的思路是认为：对data的修改是在宏任务队列中完成的，当进入微任务队列时，这些修改操作必定已经完成了，接下来只要一次性完成更新即可。\n\n这种设计思路清晰，代码也比较简单，缺点是会造成数据和dom的不一致（毕竟数据改完后，dom还得等微任务后才会更新完），因此不得不借助nextTick\n\n那么有没有同步更新完成更新合并呢？有，比如React16\n\n点击后修改数据，并触发更新：\n\n进入更新生命周期\n\n根据这个新state执行一次性更新\n\n合并多次setState生成的副本得到完整的state\n\n委托事件\n\n执行console.log(state)\n\n执行setState data1\n\n得到state副本，开启更新流程\n\n执行setState data1\n\n得到state副本，已在更新流程中\n\nonClick\n\nconsole.log(state)\n\nsetState data1\n\nsetState data2\n\n触发onClick\n\n同步的方式下，state和dom是保持统一的，dom不更新，state也不变。\n\n但也有几个缺点，比如反直觉，setState的命名与逻辑不一致了，还不如叫`requestStateChange`。另外状态的修改，必须是在能够监控到的地方发生，比如说生命周期，自定义的委托事件。\n\n当然这两种设计都能达到更新合并这一主要目标，只有取舍，没有好坏。\n\nVue是如何收集依赖的？\n------------\n\n当然再回到上面，有一个问题还没有解释：subs数组是何时放入了watcher。后续文章将从这个问题继续解析源码。","source":"_posts/Vue2源码解析：从nextTick与异步更新说起.md","raw":"---\n title: \"Vue2源码解析：从nextTick与异步更新说起\"\n date: 2021-11-22\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第22天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\nVue为什么要设计nextTick\n-----------------\n\nvue或react这种框架，最大的性能消耗来自于diff计算，而修改data数据，或者setState,这些触发更新的操作，都意味着一次diff的计算，如果没有任何的优化，频繁地进行数据的修改，很容易造成页面的卡顿。\n\n因此，两个框架都不约而同地设计了更新合并。曾有一阵子，react中关于setState是同步还是异步的面试题几乎成为了一道必问的问题，而vue中nextTick相关的面试题也屡见不鲜。\n\n本期将从nextTick开始，探究Vue中如何进行更新合并。\n\nnextTick做了什么\n------------\n\n```js\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    timerFunc()\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n\n```\n\nnextTick接收一个函数参数，并且将这个函数放入了`callbacks`，之后调用了 `timerFunc()`,前者是一个空数组，后者其实就是一个微任务。\n\n```javascript\nconst callbacks = []\n...\nlet timerFunc\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n  }\n}\n```\n\n`timerFunc`会调用`flushCallbacks`,这个函数会浅拷贝`callbacks`，并依次执行里面的函数\n\n```ini\nfunction flushCallbacks () {\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]()\n  }\n}\n```\n\n因此nextTick其实就是将回调函数放入在当前EventLoop的微任务队列。\n\n那为什么要这么设计呢？\n\n> 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。\n\n我们可以推测，**修改数据和dom的更新是异步的**，因此要获取更新后的dom，也需要等待异步。那么这个异步是如何实现的呢？\n\n我们先来看Vue从beforeCreate到created做了什么。\n\nVue init执行顺序\n------------\n\n\\_init\n\ncallHook(vm, 'created')\n\ninitLifecycle\n\ninitEvents\n\ninitRender\n\ncallHook(vm, 'beforeCreate')\n\ninitInjections\n\ninitProvide\n\ninitState\n\ndefineReactive\n\nobserve(data, true)\n\nob = new Observer(value)\n\nthis.walk(value)\n\nnew Vue()\n\n这里需要关注的是initState中的defineReactive\n\n### defineReactive\n\n这个方法里进行了大家熟知的`Object.defineProperty`操作：\n\n```ts\nexport function defineReactive (\n  obj: Object, key: string,val: any,customSetter?: ?Function,shallow?: boolean\n) {\n    ...\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n     ...\n    },\n    set: function reactiveSetter (newVal) {\n      ...\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify()\n    }\n  })\n}\n```\n\nVue更新执行顺序\n---------\n\n修改data数据后，触发这里的set，set进行了数据的更改，然后调用了`dep.notify()`\n\n```css\nnotify () {\n    const subs = this.subs.slice()\n    if (process.env.NODE_ENV !== 'production' && !config.async) {\n      subs.sort((a, b) => a.id - b.id)\n    }\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n```\n\n这些subs便是一个个Watcher，经过依赖收集，这些watcher会被加入subs数组\n\n```ts\n class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n}\n```\n\n### Watcher\n\nwatcher有一个重要的成员vm，代表的是组件实例，它的update调用的是`queueWatcher`\n\n```ts\nclass Watcher {\n    vm: Component;\n    ...\n    update () {\n        ...\n         queueWatcher(this)\n  }\n}\n```\n\n### queueWatcher\n\n```tsx\nfunction queueWatcher (watcher: Watcher) {\n  const id = watcher.id\n  if (has[id] == null) {\n    has[id] = true\n    if (!flushing) {\n      queue.push(watcher)\n    } else {\n      let i = queue.length - 1\n      while (i > index && queue[i].id > watcher.id) {\n        i--\n      }\n      queue.splice(i + 1, 0, watcher)\n    }\n    // queue the flush\n    if (!waiting) {\n        ...\n      nextTick(flushSchedulerQueue)\n    }\n  }\n}\n```\n\n在最后又遇到了`nextTick`，可以看到从这里开始了异步更新。\n\n异步更新的得与失\n--------\n\n要做性能优化就必定要做更新合并，要做更新合并，首要的问题是如何确定更新已经结束了？\n\n异步更新的思路是认为：对data的修改是在宏任务队列中完成的，当进入微任务队列时，这些修改操作必定已经完成了，接下来只要一次性完成更新即可。\n\n这种设计思路清晰，代码也比较简单，缺点是会造成数据和dom的不一致（毕竟数据改完后，dom还得等微任务后才会更新完），因此不得不借助nextTick\n\n那么有没有同步更新完成更新合并呢？有，比如React16\n\n点击后修改数据，并触发更新：\n\n进入更新生命周期\n\n根据这个新state执行一次性更新\n\n合并多次setState生成的副本得到完整的state\n\n委托事件\n\n执行console.log(state)\n\n执行setState data1\n\n得到state副本，开启更新流程\n\n执行setState data1\n\n得到state副本，已在更新流程中\n\nonClick\n\nconsole.log(state)\n\nsetState data1\n\nsetState data2\n\n触发onClick\n\n同步的方式下，state和dom是保持统一的，dom不更新，state也不变。\n\n但也有几个缺点，比如反直觉，setState的命名与逻辑不一致了，还不如叫`requestStateChange`。另外状态的修改，必须是在能够监控到的地方发生，比如说生命周期，自定义的委托事件。\n\n当然这两种设计都能达到更新合并这一主要目标，只有取舍，没有好坏。\n\nVue是如何收集依赖的？\n------------\n\n当然再回到上面，有一个问题还没有解释：subs数组是何时放入了watcher。后续文章将从这个问题继续解析源码。","slug":"Vue2源码解析：从nextTick与异步更新说起","published":1,"updated":"2024-04-04T15:27:03.849Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhq0039hajf2dzyh0d1","content":"<p>这是我参与11月更文挑战的第22天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"Vue为什么要设计nextTick\"><a href=\"#Vue为什么要设计nextTick\" class=\"headerlink\" title=\"Vue为什么要设计nextTick\"></a>Vue为什么要设计nextTick</h2><p>vue或react这种框架，最大的性能消耗来自于diff计算，而修改data数据，或者setState,这些触发更新的操作，都意味着一次diff的计算，如果没有任何的优化，频繁地进行数据的修改，很容易造成页面的卡顿。</p>\n<p>因此，两个框架都不约而同地设计了更新合并。曾有一阵子，react中关于setState是同步还是异步的面试题几乎成为了一道必问的问题，而vue中nextTick相关的面试题也屡见不鲜。</p>\n<p>本期将从nextTick开始，探究Vue中如何进行更新合并。</p>\n<h2 id=\"nextTick做了什么\"><a href=\"#nextTick做了什么\" class=\"headerlink\" title=\"nextTick做了什么\"></a>nextTick做了什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">nextTick</span> (cb?: <span class=\"title class_\">Function</span>, ctx?: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve</span><br><span class=\"line\">  callbacks.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.<span class=\"title function_\">call</span>(ctx)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">_resolve</span>(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"title function_\">timerFunc</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      _resolve = resolve</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>nextTick接收一个函数参数，并且将这个函数放入了<code>callbacks</code>，之后调用了 <code>timerFunc()</code>,前者是一个空数组，后者其实就是一个微任务。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callbacks = []</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">let</span> timerFunc</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(<span class=\"title class_\">Promise</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.<span class=\"title function_\">then</span>(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>timerFunc</code>会调用<code>flushCallbacks</code>,这个函数会浅拷贝<code>callbacks</code>，并依次执行里面的函数</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function flushCallbacks () &#123;</span><br><span class=\"line\">  <span class=\"attr\">pending</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  const <span class=\"attr\">copies</span> = callbacks.slice(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"attr\">callbacks.length</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  for (let <span class=\"attr\">i</span> = <span class=\"number\">0</span><span class=\"comment\">; i &lt; copies.length; i++) &#123;</span></span><br><span class=\"line\">    copies<span class=\"section\">[i]</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此nextTick其实就是将回调函数放入在当前EventLoop的微任务队列。</p>\n<p>那为什么要这么设计呢？</p>\n<blockquote>\n<p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>\n</blockquote>\n<p>我们可以推测，<strong>修改数据和dom的更新是异步的</strong>，因此要获取更新后的dom，也需要等待异步。那么这个异步是如何实现的呢？</p>\n<p>我们先来看Vue从beforeCreate到created做了什么。</p>\n<h2 id=\"Vue-init执行顺序\"><a href=\"#Vue-init执行顺序\" class=\"headerlink\" title=\"Vue init执行顺序\"></a>Vue init执行顺序</h2><p>_init</p>\n<p>callHook(vm, ‘created’)</p>\n<p>initLifecycle</p>\n<p>initEvents</p>\n<p>initRender</p>\n<p>callHook(vm, ‘beforeCreate’)</p>\n<p>initInjections</p>\n<p>initProvide</p>\n<p>initState</p>\n<p>defineReactive</p>\n<p>observe(data, true)</p>\n<p>ob &#x3D; new Observer(value)</p>\n<p>this.walk(value)</p>\n<p>new Vue()</p>\n<p>这里需要关注的是initState中的defineReactive</p>\n<h3 id=\"defineReactive\"><a href=\"#defineReactive\" class=\"headerlink\" title=\"defineReactive\"></a>defineReactive</h3><p>这个方法里进行了大家熟知的<code>Object.defineProperty</code>操作：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span> (</span><br><span class=\"line\">  <span class=\"attr\">obj</span>: <span class=\"title class_\">Object</span>, <span class=\"attr\">key</span>: <span class=\"built_in\">string</span>,<span class=\"attr\">val</span>: <span class=\"built_in\">any</span>,customSetter?: ?<span class=\"title class_\">Function</span>,shallow?: <span class=\"built_in\">boolean</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, key, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveGetter</span> () &#123;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span> (newVal) &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">        setter.<span class=\"title function_\">call</span>(obj, newVal)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; <span class=\"title function_\">observe</span>(newVal)</span><br><span class=\"line\">      dep.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue更新执行顺序\"><a href=\"#Vue更新执行顺序\" class=\"headerlink\" title=\"Vue更新执行顺序\"></a>Vue更新执行顺序</h2><p>修改data数据后，触发这里的set，set进行了数据的更改，然后调用了<code>dep.notify()</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">notify () &#123;</span><br><span class=\"line\">    const subs = this<span class=\"selector-class\">.subs</span><span class=\"selector-class\">.slice</span>()</span><br><span class=\"line\">    if (process<span class=\"selector-class\">.env</span><span class=\"selector-class\">.NODE_ENV</span> !== &#x27;production&#x27; &amp;&amp; !config<span class=\"selector-class\">.async</span>) &#123;</span><br><span class=\"line\">      subs<span class=\"selector-class\">.sort</span>((<span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">b</span>) =&gt; <span class=\"selector-tag\">a</span><span class=\"selector-class\">.id</span> - <span class=\"selector-tag\">b</span><span class=\"selector-class\">.id</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (let <span class=\"selector-tag\">i</span> = <span class=\"number\">0</span>, l = subs<span class=\"selector-class\">.length</span>; <span class=\"selector-tag\">i</span> &lt; l; <span class=\"selector-tag\">i</span>++) &#123;</span><br><span class=\"line\">      subs<span class=\"selector-attr\">[i]</span><span class=\"selector-class\">.update</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些subs便是一个个Watcher，经过依赖收集，这些watcher会被加入subs数组</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"attr\">target</span>: ?<span class=\"title class_\">Watcher</span>;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">subs</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Watcher</span>&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h3><p>watcher有一个重要的成员vm，代表的是组件实例，它的update调用的是<code>queueWatcher</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Watcher</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    update () &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">         <span class=\"title function_\">queueWatcher</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"queueWatcher\"><a href=\"#queueWatcher\" class=\"headerlink\" title=\"queueWatcher\"></a>queueWatcher</h3><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">queueWatcher</span> (<span class=\"attr\">watcher</span>: <span class=\"title class_\">Watcher</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = watcher.<span class=\"property\">id</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (has[id] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    has[id] = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flushing) &#123;</span><br><span class=\"line\">      queue.<span class=\"title function_\">push</span>(watcher)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = queue.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &gt; index &amp;&amp; queue[i].<span class=\"property\">id</span> &gt; watcher.<span class=\"property\">id</span>) &#123;</span><br><span class=\"line\">        i--</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      queue.<span class=\"title function_\">splice</span>(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, watcher)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// queue the flush</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!waiting) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      <span class=\"title function_\">nextTick</span>(flushSchedulerQueue)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在最后又遇到了<code>nextTick</code>，可以看到从这里开始了异步更新。</p>\n<h2 id=\"异步更新的得与失\"><a href=\"#异步更新的得与失\" class=\"headerlink\" title=\"异步更新的得与失\"></a>异步更新的得与失</h2><p>要做性能优化就必定要做更新合并，要做更新合并，首要的问题是如何确定更新已经结束了？</p>\n<p>异步更新的思路是认为：对data的修改是在宏任务队列中完成的，当进入微任务队列时，这些修改操作必定已经完成了，接下来只要一次性完成更新即可。</p>\n<p>这种设计思路清晰，代码也比较简单，缺点是会造成数据和dom的不一致（毕竟数据改完后，dom还得等微任务后才会更新完），因此不得不借助nextTick</p>\n<p>那么有没有同步更新完成更新合并呢？有，比如React16</p>\n<p>点击后修改数据，并触发更新：</p>\n<p>进入更新生命周期</p>\n<p>根据这个新state执行一次性更新</p>\n<p>合并多次setState生成的副本得到完整的state</p>\n<p>委托事件</p>\n<p>执行console.log(state)</p>\n<p>执行setState data1</p>\n<p>得到state副本，开启更新流程</p>\n<p>执行setState data1</p>\n<p>得到state副本，已在更新流程中</p>\n<p>onClick</p>\n<p>console.log(state)</p>\n<p>setState data1</p>\n<p>setState data2</p>\n<p>触发onClick</p>\n<p>同步的方式下，state和dom是保持统一的，dom不更新，state也不变。</p>\n<p>但也有几个缺点，比如反直觉，setState的命名与逻辑不一致了，还不如叫<code>requestStateChange</code>。另外状态的修改，必须是在能够监控到的地方发生，比如说生命周期，自定义的委托事件。</p>\n<p>当然这两种设计都能达到更新合并这一主要目标，只有取舍，没有好坏。</p>\n<h2 id=\"Vue是如何收集依赖的？\"><a href=\"#Vue是如何收集依赖的？\" class=\"headerlink\" title=\"Vue是如何收集依赖的？\"></a>Vue是如何收集依赖的？</h2><p>当然再回到上面，有一个问题还没有解释：subs数组是何时放入了watcher。后续文章将从这个问题继续解析源码。</p>\n","length":3860,"excerpt":"","more":"<p>这是我参与11月更文挑战的第22天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"Vue为什么要设计nextTick\"><a href=\"#Vue为什么要设计nextTick\" class=\"headerlink\" title=\"Vue为什么要设计nextTick\"></a>Vue为什么要设计nextTick</h2><p>vue或react这种框架，最大的性能消耗来自于diff计算，而修改data数据，或者setState,这些触发更新的操作，都意味着一次diff的计算，如果没有任何的优化，频繁地进行数据的修改，很容易造成页面的卡顿。</p>\n<p>因此，两个框架都不约而同地设计了更新合并。曾有一阵子，react中关于setState是同步还是异步的面试题几乎成为了一道必问的问题，而vue中nextTick相关的面试题也屡见不鲜。</p>\n<p>本期将从nextTick开始，探究Vue中如何进行更新合并。</p>\n<h2 id=\"nextTick做了什么\"><a href=\"#nextTick做了什么\" class=\"headerlink\" title=\"nextTick做了什么\"></a>nextTick做了什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">nextTick</span> (cb?: <span class=\"title class_\">Function</span>, ctx?: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve</span><br><span class=\"line\">  callbacks.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.<span class=\"title function_\">call</span>(ctx)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">_resolve</span>(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"title function_\">timerFunc</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      _resolve = resolve</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>nextTick接收一个函数参数，并且将这个函数放入了<code>callbacks</code>，之后调用了 <code>timerFunc()</code>,前者是一个空数组，后者其实就是一个微任务。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callbacks = []</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">let</span> timerFunc</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(<span class=\"title class_\">Promise</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.<span class=\"title function_\">then</span>(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>timerFunc</code>会调用<code>flushCallbacks</code>,这个函数会浅拷贝<code>callbacks</code>，并依次执行里面的函数</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function flushCallbacks () &#123;</span><br><span class=\"line\">  <span class=\"attr\">pending</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  const <span class=\"attr\">copies</span> = callbacks.slice(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"attr\">callbacks.length</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  for (let <span class=\"attr\">i</span> = <span class=\"number\">0</span><span class=\"comment\">; i &lt; copies.length; i++) &#123;</span></span><br><span class=\"line\">    copies<span class=\"section\">[i]</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此nextTick其实就是将回调函数放入在当前EventLoop的微任务队列。</p>\n<p>那为什么要这么设计呢？</p>\n<blockquote>\n<p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>\n</blockquote>\n<p>我们可以推测，<strong>修改数据和dom的更新是异步的</strong>，因此要获取更新后的dom，也需要等待异步。那么这个异步是如何实现的呢？</p>\n<p>我们先来看Vue从beforeCreate到created做了什么。</p>\n<h2 id=\"Vue-init执行顺序\"><a href=\"#Vue-init执行顺序\" class=\"headerlink\" title=\"Vue init执行顺序\"></a>Vue init执行顺序</h2><p>_init</p>\n<p>callHook(vm, ‘created’)</p>\n<p>initLifecycle</p>\n<p>initEvents</p>\n<p>initRender</p>\n<p>callHook(vm, ‘beforeCreate’)</p>\n<p>initInjections</p>\n<p>initProvide</p>\n<p>initState</p>\n<p>defineReactive</p>\n<p>observe(data, true)</p>\n<p>ob &#x3D; new Observer(value)</p>\n<p>this.walk(value)</p>\n<p>new Vue()</p>\n<p>这里需要关注的是initState中的defineReactive</p>\n<h3 id=\"defineReactive\"><a href=\"#defineReactive\" class=\"headerlink\" title=\"defineReactive\"></a>defineReactive</h3><p>这个方法里进行了大家熟知的<code>Object.defineProperty</code>操作：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span> (</span><br><span class=\"line\">  <span class=\"attr\">obj</span>: <span class=\"title class_\">Object</span>, <span class=\"attr\">key</span>: <span class=\"built_in\">string</span>,<span class=\"attr\">val</span>: <span class=\"built_in\">any</span>,customSetter?: ?<span class=\"title class_\">Function</span>,shallow?: <span class=\"built_in\">boolean</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, key, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveGetter</span> () &#123;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span> (newVal) &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">        setter.<span class=\"title function_\">call</span>(obj, newVal)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; <span class=\"title function_\">observe</span>(newVal)</span><br><span class=\"line\">      dep.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue更新执行顺序\"><a href=\"#Vue更新执行顺序\" class=\"headerlink\" title=\"Vue更新执行顺序\"></a>Vue更新执行顺序</h2><p>修改data数据后，触发这里的set，set进行了数据的更改，然后调用了<code>dep.notify()</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">notify () &#123;</span><br><span class=\"line\">    const subs = this<span class=\"selector-class\">.subs</span><span class=\"selector-class\">.slice</span>()</span><br><span class=\"line\">    if (process<span class=\"selector-class\">.env</span><span class=\"selector-class\">.NODE_ENV</span> !== &#x27;production&#x27; &amp;&amp; !config<span class=\"selector-class\">.async</span>) &#123;</span><br><span class=\"line\">      subs<span class=\"selector-class\">.sort</span>((<span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">b</span>) =&gt; <span class=\"selector-tag\">a</span><span class=\"selector-class\">.id</span> - <span class=\"selector-tag\">b</span><span class=\"selector-class\">.id</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (let <span class=\"selector-tag\">i</span> = <span class=\"number\">0</span>, l = subs<span class=\"selector-class\">.length</span>; <span class=\"selector-tag\">i</span> &lt; l; <span class=\"selector-tag\">i</span>++) &#123;</span><br><span class=\"line\">      subs<span class=\"selector-attr\">[i]</span><span class=\"selector-class\">.update</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些subs便是一个个Watcher，经过依赖收集，这些watcher会被加入subs数组</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"attr\">target</span>: ?<span class=\"title class_\">Watcher</span>;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">subs</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Watcher</span>&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h3><p>watcher有一个重要的成员vm，代表的是组件实例，它的update调用的是<code>queueWatcher</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Watcher</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    update () &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">         <span class=\"title function_\">queueWatcher</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"queueWatcher\"><a href=\"#queueWatcher\" class=\"headerlink\" title=\"queueWatcher\"></a>queueWatcher</h3><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">queueWatcher</span> (<span class=\"attr\">watcher</span>: <span class=\"title class_\">Watcher</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = watcher.<span class=\"property\">id</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (has[id] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    has[id] = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flushing) &#123;</span><br><span class=\"line\">      queue.<span class=\"title function_\">push</span>(watcher)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = queue.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &gt; index &amp;&amp; queue[i].<span class=\"property\">id</span> &gt; watcher.<span class=\"property\">id</span>) &#123;</span><br><span class=\"line\">        i--</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      queue.<span class=\"title function_\">splice</span>(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, watcher)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// queue the flush</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!waiting) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      <span class=\"title function_\">nextTick</span>(flushSchedulerQueue)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在最后又遇到了<code>nextTick</code>，可以看到从这里开始了异步更新。</p>\n<h2 id=\"异步更新的得与失\"><a href=\"#异步更新的得与失\" class=\"headerlink\" title=\"异步更新的得与失\"></a>异步更新的得与失</h2><p>要做性能优化就必定要做更新合并，要做更新合并，首要的问题是如何确定更新已经结束了？</p>\n<p>异步更新的思路是认为：对data的修改是在宏任务队列中完成的，当进入微任务队列时，这些修改操作必定已经完成了，接下来只要一次性完成更新即可。</p>\n<p>这种设计思路清晰，代码也比较简单，缺点是会造成数据和dom的不一致（毕竟数据改完后，dom还得等微任务后才会更新完），因此不得不借助nextTick</p>\n<p>那么有没有同步更新完成更新合并呢？有，比如React16</p>\n<p>点击后修改数据，并触发更新：</p>\n<p>进入更新生命周期</p>\n<p>根据这个新state执行一次性更新</p>\n<p>合并多次setState生成的副本得到完整的state</p>\n<p>委托事件</p>\n<p>执行console.log(state)</p>\n<p>执行setState data1</p>\n<p>得到state副本，开启更新流程</p>\n<p>执行setState data1</p>\n<p>得到state副本，已在更新流程中</p>\n<p>onClick</p>\n<p>console.log(state)</p>\n<p>setState data1</p>\n<p>setState data2</p>\n<p>触发onClick</p>\n<p>同步的方式下，state和dom是保持统一的，dom不更新，state也不变。</p>\n<p>但也有几个缺点，比如反直觉，setState的命名与逻辑不一致了，还不如叫<code>requestStateChange</code>。另外状态的修改，必须是在能够监控到的地方发生，比如说生命周期，自定义的委托事件。</p>\n<p>当然这两种设计都能达到更新合并这一主要目标，只有取舍，没有好坏。</p>\n<h2 id=\"Vue是如何收集依赖的？\"><a href=\"#Vue是如何收集依赖的？\" class=\"headerlink\" title=\"Vue是如何收集依赖的？\"></a>Vue是如何收集依赖的？</h2><p>当然再回到上面，有一个问题还没有解释：subs数组是何时放入了watcher。后续文章将从这个问题继续解析源码。</p>\n"},{"title":"nodejs对项目下所有空文件夹创建gitkeep","date":"2019-12-30T16:00:00.000Z","_content":"\n项目/框架初始化时可能需要保留一些空文件，这时候就需要批量新增gitkeep\n\n```\nconst fs = require('fs')\nconst baseurl = 'D:/test'\nconst ignoreDir = ['.git', '.vscode', 'node_modules']\naddGitkeep(baseurl)\nfunction addGitkeep(url) {\n    fs.readdir(url, {withFileTypes: true}, (err, files) => {\n        err && console.log(err)\n        //该目录下没有文件\n        if (!files.length) {\n            return fs.writeFile(url + '/.gitkeep', null, err => {\n                err && console.log(err)\n            })\n        }\n        files.forEach(dirent => {\n            if (!ignoreDir.includes(dirent.name) && dirent.isDirectory()) {\n                addGitkeep(url + '/' + dirent.name)\n            }\n        })\n    })\n}\n```","source":"_posts/nodejs对项目下所有空文件夹创建gitkeep.md","raw":"---\n title: \"nodejs对项目下所有空文件夹创建gitkeep\"\n date: 2019-12-31\n tags: [Node.js]\n categories: \n---\n\n项目/框架初始化时可能需要保留一些空文件，这时候就需要批量新增gitkeep\n\n```\nconst fs = require('fs')\nconst baseurl = 'D:/test'\nconst ignoreDir = ['.git', '.vscode', 'node_modules']\naddGitkeep(baseurl)\nfunction addGitkeep(url) {\n    fs.readdir(url, {withFileTypes: true}, (err, files) => {\n        err && console.log(err)\n        //该目录下没有文件\n        if (!files.length) {\n            return fs.writeFile(url + '/.gitkeep', null, err => {\n                err && console.log(err)\n            })\n        }\n        files.forEach(dirent => {\n            if (!ignoreDir.includes(dirent.name) && dirent.isDirectory()) {\n                addGitkeep(url + '/' + dirent.name)\n            }\n        })\n    })\n}\n```","slug":"nodejs对项目下所有空文件夹创建gitkeep","published":1,"updated":"2024-04-04T15:27:03.594Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhq003chajfbboa04io","content":"<p>项目&#x2F;框架初始化时可能需要保留一些空文件，这时候就需要批量新增gitkeep</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&#x27;fs&#x27;)</span><br><span class=\"line\">const baseurl = &#x27;D:/test&#x27;</span><br><span class=\"line\">const ignoreDir = [&#x27;.git&#x27;, &#x27;.vscode&#x27;, &#x27;node_modules&#x27;]</span><br><span class=\"line\">addGitkeep(baseurl)</span><br><span class=\"line\">function addGitkeep(url) &#123;</span><br><span class=\"line\">    fs.readdir(url, &#123;withFileTypes: true&#125;, (err, files) =&gt; &#123;</span><br><span class=\"line\">        err &amp;&amp; console.log(err)</span><br><span class=\"line\">        //该目录下没有文件</span><br><span class=\"line\">        if (!files.length) &#123;</span><br><span class=\"line\">            return fs.writeFile(url + &#x27;/.gitkeep&#x27;, null, err =&gt; &#123;</span><br><span class=\"line\">                err &amp;&amp; console.log(err)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        files.forEach(dirent =&gt; &#123;</span><br><span class=\"line\">            if (!ignoreDir.includes(dirent.name) &amp;&amp; dirent.isDirectory()) &#123;</span><br><span class=\"line\">                addGitkeep(url + &#x27;/&#x27; + dirent.name)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","length":669,"excerpt":"","more":"<p>项目&#x2F;框架初始化时可能需要保留一些空文件，这时候就需要批量新增gitkeep</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&#x27;fs&#x27;)</span><br><span class=\"line\">const baseurl = &#x27;D:/test&#x27;</span><br><span class=\"line\">const ignoreDir = [&#x27;.git&#x27;, &#x27;.vscode&#x27;, &#x27;node_modules&#x27;]</span><br><span class=\"line\">addGitkeep(baseurl)</span><br><span class=\"line\">function addGitkeep(url) &#123;</span><br><span class=\"line\">    fs.readdir(url, &#123;withFileTypes: true&#125;, (err, files) =&gt; &#123;</span><br><span class=\"line\">        err &amp;&amp; console.log(err)</span><br><span class=\"line\">        //该目录下没有文件</span><br><span class=\"line\">        if (!files.length) &#123;</span><br><span class=\"line\">            return fs.writeFile(url + &#x27;/.gitkeep&#x27;, null, err =&gt; &#123;</span><br><span class=\"line\">                err &amp;&amp; console.log(err)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        files.forEach(dirent =&gt; &#123;</span><br><span class=\"line\">            if (!ignoreDir.includes(dirent.name) &amp;&amp; dirent.isDirectory()) &#123;</span><br><span class=\"line\">                addGitkeep(url + &#x27;/&#x27; + dirent.name)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"tailwind使用指南——常见问题和实践建议","date":"2021-08-17T16:00:00.000Z","_content":"\nvscode @apply 报红：unknownAtRules\n-------------------------------\n\n![image.png](../imgs/7fdde6d3d1044fed90b9d23aba1e6765.png)\n\n1.  关闭vscode和vetur的css校验 .vscode/settings.json\n\n```json\n{\n    \"less.validate\": false,\n  \"scss.validate\": false,\n  \"css.validate\": false,\n  \"vetur.validation.style\": false,\n}\n```\n\n2.  使用stylelint校验css规则配置\n\n*   vscode安装stylelint插件\n*   `npm i stylelint stylelint-config-prettier stylelint-config-standard stylelint-scss`\n*   根目录下新建stylelint.config.js\n\n```java\nconst tailwindAt = ['tailwind', 'apply', 'variants', 'responsive', 'screen', 'layer'];\nmodule.exports = {\n  extends: ['stylelint-config-recommended', 'stylelint-config-prettier'],\n  plugins: ['stylelint-scss'],\n  ignoreFiles: ['node_modules/**', 'dist/**'],\n  rules: {\n    'at-rule-no-unknown': null,\n    'scss/at-rule-no-unknown': [\n      true,\n      {\n        ignoreAtRules: tailwindAt,\n      },\n    ],\n    'selector-max-id': null,\n    'selector-class-pattern': null,\n    'declaration-block-trailing-semicolon': null,\n    'no-descending-specificity': null,\n    'no-irregular-whitespace': null,\n    'no-invalid-position-at-import-rule': null,\n    'declaration-block-no-duplicate-custom-properties': null,\n    'no-duplicate-selectors': null,\n    // ::v-deep\n    'selector-pseudo-element-no-unknown': null\n  },\n};\n\n```\n\ntailwind的base、utilities、components区别\n------------------------------------\n\n虽然都是全局原子级样式，但有语义上的区别，并且这个区别也很重要。 base自带的是全局的reset样式，  \nutilities自带的是各种功能样式，tailwind中基本都是功能样式,  \ncomponents自带的只有.container  \n@tailwind base 会引入@layer base和addBase中增加的样式 @tailwind utilities和components也同理\n\n配置tailwind应当遵守这些语义差别\n\n与scss的边界和配合\n-----------\n\n很多项目只用tailwind配置和组合它的原子样式就够了，但是scss中的mixin等特性在某些场景下依然是无法代替的，比如：\n\n```css\n@mixin ellipsis($line: 2, $line-height: 1.2) {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: $line;\n  line-height: $line-height;\n}\n```\n\n实践中建议对变量的定义，比如间距、颜色、字号交给tailwind，对于函数的定义交给scss  \ntailwind的变量+scss的mixin配合style-resources-loader还是非常舒服的\n\n```css\n .btn {\n        width: 126px;\n        height: 56px;\n        line-height: 56px;\n        padding: 0;\n        border: 0;\n        right: -33px;\n        @include fix-border-1(theme('textColor[tip]'), 12px);\n      }\n```\n\n另外推荐安装Color Highlight 插件，在js中也可以看出颜色效果\n\n![image.png](../imgs/76f87b5543964d0f95c43cb948a0aaa9.png)","source":"_posts/tailwind使用指南——常见问题和实践建议.md","raw":"---\n title: \"tailwind使用指南——常见问题和实践建议\"\n date: 2021-08-18\n tags: [CSS,前端]\n categories: [前端笔记]\n---\n\nvscode @apply 报红：unknownAtRules\n-------------------------------\n\n![image.png](../imgs/7fdde6d3d1044fed90b9d23aba1e6765.png)\n\n1.  关闭vscode和vetur的css校验 .vscode/settings.json\n\n```json\n{\n    \"less.validate\": false,\n  \"scss.validate\": false,\n  \"css.validate\": false,\n  \"vetur.validation.style\": false,\n}\n```\n\n2.  使用stylelint校验css规则配置\n\n*   vscode安装stylelint插件\n*   `npm i stylelint stylelint-config-prettier stylelint-config-standard stylelint-scss`\n*   根目录下新建stylelint.config.js\n\n```java\nconst tailwindAt = ['tailwind', 'apply', 'variants', 'responsive', 'screen', 'layer'];\nmodule.exports = {\n  extends: ['stylelint-config-recommended', 'stylelint-config-prettier'],\n  plugins: ['stylelint-scss'],\n  ignoreFiles: ['node_modules/**', 'dist/**'],\n  rules: {\n    'at-rule-no-unknown': null,\n    'scss/at-rule-no-unknown': [\n      true,\n      {\n        ignoreAtRules: tailwindAt,\n      },\n    ],\n    'selector-max-id': null,\n    'selector-class-pattern': null,\n    'declaration-block-trailing-semicolon': null,\n    'no-descending-specificity': null,\n    'no-irregular-whitespace': null,\n    'no-invalid-position-at-import-rule': null,\n    'declaration-block-no-duplicate-custom-properties': null,\n    'no-duplicate-selectors': null,\n    // ::v-deep\n    'selector-pseudo-element-no-unknown': null\n  },\n};\n\n```\n\ntailwind的base、utilities、components区别\n------------------------------------\n\n虽然都是全局原子级样式，但有语义上的区别，并且这个区别也很重要。 base自带的是全局的reset样式，  \nutilities自带的是各种功能样式，tailwind中基本都是功能样式,  \ncomponents自带的只有.container  \n@tailwind base 会引入@layer base和addBase中增加的样式 @tailwind utilities和components也同理\n\n配置tailwind应当遵守这些语义差别\n\n与scss的边界和配合\n-----------\n\n很多项目只用tailwind配置和组合它的原子样式就够了，但是scss中的mixin等特性在某些场景下依然是无法代替的，比如：\n\n```css\n@mixin ellipsis($line: 2, $line-height: 1.2) {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: $line;\n  line-height: $line-height;\n}\n```\n\n实践中建议对变量的定义，比如间距、颜色、字号交给tailwind，对于函数的定义交给scss  \ntailwind的变量+scss的mixin配合style-resources-loader还是非常舒服的\n\n```css\n .btn {\n        width: 126px;\n        height: 56px;\n        line-height: 56px;\n        padding: 0;\n        border: 0;\n        right: -33px;\n        @include fix-border-1(theme('textColor[tip]'), 12px);\n      }\n```\n\n另外推荐安装Color Highlight 插件，在js中也可以看出颜色效果\n\n![image.png](../imgs/76f87b5543964d0f95c43cb948a0aaa9.png)","slug":"tailwind使用指南——常见问题和实践建议","published":1,"updated":"2024-04-04T15:27:03.735Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhq003ghajfflys6b4a","content":"<h2 id=\"vscode-apply-报红：unknownAtRules\"><a href=\"#vscode-apply-报红：unknownAtRules\" class=\"headerlink\" title=\"vscode @apply 报红：unknownAtRules\"></a>vscode @apply 报红：unknownAtRules</h2><p><img src=\"/../imgs/7fdde6d3d1044fed90b9d23aba1e6765.png\" alt=\"image.png\"></p>\n<ol>\n<li>关闭vscode和vetur的css校验 .vscode&#x2F;settings.json</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;less.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scss.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;css.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.validation.style&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用stylelint校验css规则配置</li>\n</ol>\n<ul>\n<li>vscode安装stylelint插件</li>\n<li><code>npm i stylelint stylelint-config-prettier stylelint-config-standard stylelint-scss</code></li>\n<li>根目录下新建stylelint.config.js</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">tailwindAt</span> <span class=\"operator\">=</span> [<span class=\"string\">&#x27;tailwind&#x27;</span>, <span class=\"string\">&#x27;apply&#x27;</span>, <span class=\"string\">&#x27;variants&#x27;</span>, <span class=\"string\">&#x27;responsive&#x27;</span>, <span class=\"string\">&#x27;screen&#x27;</span>, <span class=\"string\">&#x27;layer&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">module</span>.<span class=\"keyword\">exports</span> = &#123;</span><br><span class=\"line\">  extends: [<span class=\"string\">&#x27;stylelint-config-recommended&#x27;</span>, <span class=\"string\">&#x27;stylelint-config-prettier&#x27;</span>],</span><br><span class=\"line\">  plugins: [<span class=\"string\">&#x27;stylelint-scss&#x27;</span>],</span><br><span class=\"line\">  ignoreFiles: [<span class=\"string\">&#x27;node_modules/**&#x27;</span>, <span class=\"string\">&#x27;dist/**&#x27;</span>],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;at-rule-no-unknown&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;scss/at-rule-no-unknown&#x27;</span>: [</span><br><span class=\"line\">      <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        ignoreAtRules: tailwindAt,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&#x27;selector-max-id&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;selector-class-pattern&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;declaration-block-trailing-semicolon&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;no-descending-specificity&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;no-irregular-whitespace&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;no-invalid-position-at-import-rule&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;declaration-block-no-duplicate-custom-properties&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;no-duplicate-selectors&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// ::v-deep</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;selector-pseudo-element-no-unknown&#x27;</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tailwind的base、utilities、components区别\"><a href=\"#tailwind的base、utilities、components区别\" class=\"headerlink\" title=\"tailwind的base、utilities、components区别\"></a>tailwind的base、utilities、components区别</h2><p>虽然都是全局原子级样式，但有语义上的区别，并且这个区别也很重要。 base自带的是全局的reset样式，<br>utilities自带的是各种功能样式，tailwind中基本都是功能样式,<br>components自带的只有.container<br>@tailwind base 会引入@layer base和addBase中增加的样式 @tailwind utilities和components也同理</p>\n<p>配置tailwind应当遵守这些语义差别</p>\n<h2 id=\"与scss的边界和配合\"><a href=\"#与scss的边界和配合\" class=\"headerlink\" title=\"与scss的边界和配合\"></a>与scss的边界和配合</h2><p>很多项目只用tailwind配置和组合它的原子样式就够了，但是scss中的mixin等特性在某些场景下依然是无法代替的，比如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> ellipsis($<span class=\"attribute\">line</span>: <span class=\"number\">2</span>, $<span class=\"attribute\">line-height</span>: <span class=\"number\">1.2</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">  -webkit-box-orient: vertical;</span><br><span class=\"line\">  -webkit-line-clamp: $line;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: $line-height;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实践中建议对变量的定义，比如间距、颜色、字号交给tailwind，对于函数的定义交给scss<br>tailwind的变量+scss的mixin配合style-resources-loader还是非常舒服的</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">       <span class=\"attribute\">width</span>: <span class=\"number\">126px</span>;</span><br><span class=\"line\">       <span class=\"attribute\">height</span>: <span class=\"number\">56px</span>;</span><br><span class=\"line\">       <span class=\"attribute\">line-height</span>: <span class=\"number\">56px</span>;</span><br><span class=\"line\">       <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"attribute\">right</span>: -<span class=\"number\">33px</span>;</span><br><span class=\"line\">       <span class=\"keyword\">@include</span> fix-border-<span class=\"number\">1</span>(theme(<span class=\"string\">&#x27;textColor[tip]&#x27;</span>), <span class=\"number\">12px</span>);</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外推荐安装Color Highlight 插件，在js中也可以看出颜色效果</p>\n<p><img src=\"/../imgs/76f87b5543964d0f95c43cb948a0aaa9.png\" alt=\"image.png\"></p>\n","length":2140,"excerpt":"","more":"<h2 id=\"vscode-apply-报红：unknownAtRules\"><a href=\"#vscode-apply-报红：unknownAtRules\" class=\"headerlink\" title=\"vscode @apply 报红：unknownAtRules\"></a>vscode @apply 报红：unknownAtRules</h2><p><img src=\"/../imgs/7fdde6d3d1044fed90b9d23aba1e6765.png\" alt=\"image.png\"></p>\n<ol>\n<li>关闭vscode和vetur的css校验 .vscode&#x2F;settings.json</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;less.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scss.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;css.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.validation.style&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用stylelint校验css规则配置</li>\n</ol>\n<ul>\n<li>vscode安装stylelint插件</li>\n<li><code>npm i stylelint stylelint-config-prettier stylelint-config-standard stylelint-scss</code></li>\n<li>根目录下新建stylelint.config.js</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">tailwindAt</span> <span class=\"operator\">=</span> [<span class=\"string\">&#x27;tailwind&#x27;</span>, <span class=\"string\">&#x27;apply&#x27;</span>, <span class=\"string\">&#x27;variants&#x27;</span>, <span class=\"string\">&#x27;responsive&#x27;</span>, <span class=\"string\">&#x27;screen&#x27;</span>, <span class=\"string\">&#x27;layer&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">module</span>.<span class=\"keyword\">exports</span> = &#123;</span><br><span class=\"line\">  extends: [<span class=\"string\">&#x27;stylelint-config-recommended&#x27;</span>, <span class=\"string\">&#x27;stylelint-config-prettier&#x27;</span>],</span><br><span class=\"line\">  plugins: [<span class=\"string\">&#x27;stylelint-scss&#x27;</span>],</span><br><span class=\"line\">  ignoreFiles: [<span class=\"string\">&#x27;node_modules/**&#x27;</span>, <span class=\"string\">&#x27;dist/**&#x27;</span>],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;at-rule-no-unknown&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;scss/at-rule-no-unknown&#x27;</span>: [</span><br><span class=\"line\">      <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        ignoreAtRules: tailwindAt,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&#x27;selector-max-id&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;selector-class-pattern&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;declaration-block-trailing-semicolon&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;no-descending-specificity&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;no-irregular-whitespace&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;no-invalid-position-at-import-rule&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;declaration-block-no-duplicate-custom-properties&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;no-duplicate-selectors&#x27;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// ::v-deep</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;selector-pseudo-element-no-unknown&#x27;</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tailwind的base、utilities、components区别\"><a href=\"#tailwind的base、utilities、components区别\" class=\"headerlink\" title=\"tailwind的base、utilities、components区别\"></a>tailwind的base、utilities、components区别</h2><p>虽然都是全局原子级样式，但有语义上的区别，并且这个区别也很重要。 base自带的是全局的reset样式，<br>utilities自带的是各种功能样式，tailwind中基本都是功能样式,<br>components自带的只有.container<br>@tailwind base 会引入@layer base和addBase中增加的样式 @tailwind utilities和components也同理</p>\n<p>配置tailwind应当遵守这些语义差别</p>\n<h2 id=\"与scss的边界和配合\"><a href=\"#与scss的边界和配合\" class=\"headerlink\" title=\"与scss的边界和配合\"></a>与scss的边界和配合</h2><p>很多项目只用tailwind配置和组合它的原子样式就够了，但是scss中的mixin等特性在某些场景下依然是无法代替的，比如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> ellipsis($<span class=\"attribute\">line</span>: <span class=\"number\">2</span>, $<span class=\"attribute\">line-height</span>: <span class=\"number\">1.2</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">  -webkit-box-orient: vertical;</span><br><span class=\"line\">  -webkit-line-clamp: $line;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: $line-height;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实践中建议对变量的定义，比如间距、颜色、字号交给tailwind，对于函数的定义交给scss<br>tailwind的变量+scss的mixin配合style-resources-loader还是非常舒服的</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">       <span class=\"attribute\">width</span>: <span class=\"number\">126px</span>;</span><br><span class=\"line\">       <span class=\"attribute\">height</span>: <span class=\"number\">56px</span>;</span><br><span class=\"line\">       <span class=\"attribute\">line-height</span>: <span class=\"number\">56px</span>;</span><br><span class=\"line\">       <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"attribute\">right</span>: -<span class=\"number\">33px</span>;</span><br><span class=\"line\">       <span class=\"keyword\">@include</span> fix-border-<span class=\"number\">1</span>(theme(<span class=\"string\">&#x27;textColor[tip]&#x27;</span>), <span class=\"number\">12px</span>);</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外推荐安装Color Highlight 插件，在js中也可以看出颜色效果</p>\n<p><img src=\"/../imgs/76f87b5543964d0f95c43cb948a0aaa9.png\" alt=\"image.png\"></p>\n"},{"title":"tailwind使用指南——老项目迁移","date":"2021-08-18T16:00:00.000Z","_content":"\ntailwind的特点在于灵活,改造老项目也很方便，改造老项目主要有以下几种场景：\n\ninline style\n------------\n\n使用class 替换\n\n```diff\n- <span style=\"color: red\">*</span>\n+ <span class=\"text-danger\">*</span>\n```\n\n单样式的class\n---------\n\n使用class替换\n\n```diff\n- <span class=\"s-amount\">￥{{ totalAmount }} </span>\n+ <span class=\"text-danger\">￥{{ totalAmount }} </span>\n- .s-amount {\n-   color: #fb9716;\n- }\n```\n\n复杂样式的class\n----------\n\n使用@apply\n\n```diff\n.tag-status-error {\n    @extend .tag-status;\n    background: rgba(250, 58, 26, 0.12);\n-   color: #fa3a1a;\n+   @apply text-danger\n}\n```\n\ncss或scss函数，需要使用变量\n-----------------\n\ncss的内置函数，或者搭配scss的mixin时\n\n```diff\n.btn-filter-picker-confirm {\n    width: 375px;\n    height: 98px;\n-   background: linear-gradient(270deg, #8898ff 0%, #2e42c7 100%);\n+   background: linear-gradient(270deg, theme(colors.blue-100) 0%, theme(colors.blue-200) 100%);\n    font-size: 32px;\n    font-weight: 400;\n    line-height: 45px;\n  }\n.btn {\n    width: 126px;\n    height: 56px;\n    line-height: 56px;\n    border: 0;\n    right: -33px;\n-   @include fix-border-1(#ccc, 12px)\n+   @include fix-border-1(theme('textColor[tip]'), 12px);\n}\n```\n\n第三方组件需要接受tailwind定义的变量时\n-----------------------\n\n抽离主题变量为variables.js\n\n```ini\nconst textColor = { basic: '#333333'}\nmodule.exports = {\n  textColor,\n}\n\n```\n\ntailwind.config.js导入variables中的数据进行配置\n\n```ini\nconst styleConfig = require('./src/styles/variables.js')\nmodule.exports = {\n    ...\n    theme: {\n        ...styleConfig\n    }\n    ...\n}\n```\n\n项目中可以引入,放入全局状态中，比如vue可以通过provide/inject\n\n```javascript\nconst styleConfig = require('@/view/styles/variables');\nexport default {\n    name: 'App',\n    provide() {\n        return {\n            colors:styleConfig.colors\n            textColor:styleConfig.textColor\n        }\n    }\n}\n```\n\n```diff\n<van-icon \n    name=\"warning\"\n-    color=\"#2E42C7\"\n+    :color=\"textColor.primary\" \n    class=\"little-icon box-36 mr-16\" \n />\n ...\n export default {\n+     inject: ['textColor'],\n }\n```","source":"_posts/tailwind使用指南——老项目迁移.md","raw":"---\n title: \"tailwind使用指南——老项目迁移\"\n date: 2021-08-19\n tags: [CSS,前端]\n categories: [前端笔记]\n---\n\ntailwind的特点在于灵活,改造老项目也很方便，改造老项目主要有以下几种场景：\n\ninline style\n------------\n\n使用class 替换\n\n```diff\n- <span style=\"color: red\">*</span>\n+ <span class=\"text-danger\">*</span>\n```\n\n单样式的class\n---------\n\n使用class替换\n\n```diff\n- <span class=\"s-amount\">￥{{ totalAmount }} </span>\n+ <span class=\"text-danger\">￥{{ totalAmount }} </span>\n- .s-amount {\n-   color: #fb9716;\n- }\n```\n\n复杂样式的class\n----------\n\n使用@apply\n\n```diff\n.tag-status-error {\n    @extend .tag-status;\n    background: rgba(250, 58, 26, 0.12);\n-   color: #fa3a1a;\n+   @apply text-danger\n}\n```\n\ncss或scss函数，需要使用变量\n-----------------\n\ncss的内置函数，或者搭配scss的mixin时\n\n```diff\n.btn-filter-picker-confirm {\n    width: 375px;\n    height: 98px;\n-   background: linear-gradient(270deg, #8898ff 0%, #2e42c7 100%);\n+   background: linear-gradient(270deg, theme(colors.blue-100) 0%, theme(colors.blue-200) 100%);\n    font-size: 32px;\n    font-weight: 400;\n    line-height: 45px;\n  }\n.btn {\n    width: 126px;\n    height: 56px;\n    line-height: 56px;\n    border: 0;\n    right: -33px;\n-   @include fix-border-1(#ccc, 12px)\n+   @include fix-border-1(theme('textColor[tip]'), 12px);\n}\n```\n\n第三方组件需要接受tailwind定义的变量时\n-----------------------\n\n抽离主题变量为variables.js\n\n```ini\nconst textColor = { basic: '#333333'}\nmodule.exports = {\n  textColor,\n}\n\n```\n\ntailwind.config.js导入variables中的数据进行配置\n\n```ini\nconst styleConfig = require('./src/styles/variables.js')\nmodule.exports = {\n    ...\n    theme: {\n        ...styleConfig\n    }\n    ...\n}\n```\n\n项目中可以引入,放入全局状态中，比如vue可以通过provide/inject\n\n```javascript\nconst styleConfig = require('@/view/styles/variables');\nexport default {\n    name: 'App',\n    provide() {\n        return {\n            colors:styleConfig.colors\n            textColor:styleConfig.textColor\n        }\n    }\n}\n```\n\n```diff\n<van-icon \n    name=\"warning\"\n-    color=\"#2E42C7\"\n+    :color=\"textColor.primary\" \n    class=\"little-icon box-36 mr-16\" \n />\n ...\n export default {\n+     inject: ['textColor'],\n }\n```","slug":"tailwind使用指南——老项目迁移","published":1,"updated":"2024-04-04T15:27:03.744Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhr003jhajf6i3ihamw","content":"<p>tailwind的特点在于灵活,改造老项目也很方便，改造老项目主要有以下几种场景：</p>\n<h2 id=\"inline-style\"><a href=\"#inline-style\" class=\"headerlink\" title=\"inline style\"></a>inline style</h2><p>使用class 替换</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- &lt;span style=&quot;color: red&quot;&gt;*&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+ &lt;span class=&quot;text-danger&quot;&gt;*&lt;/span&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单样式的class\"><a href=\"#单样式的class\" class=\"headerlink\" title=\"单样式的class\"></a>单样式的class</h2><p>使用class替换</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- &lt;span class=&quot;s-amount&quot;&gt;￥&#123;&#123; totalAmount &#125;&#125; &lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+ &lt;span class=&quot;text-danger&quot;&gt;￥&#123;&#123; totalAmount &#125;&#125; &lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">- .s-amount &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-   color: #fb9716;</span></span><br><span class=\"line\"><span class=\"deletion\">- &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂样式的class\"><a href=\"#复杂样式的class\" class=\"headerlink\" title=\"复杂样式的class\"></a>复杂样式的class</h2><p>使用@apply</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.tag-status-error &#123;</span><br><span class=\"line\">    @extend .tag-status;</span><br><span class=\"line\">    background: rgba(250, 58, 26, 0.12);</span><br><span class=\"line\"><span class=\"deletion\">-   color: #fa3a1a;</span></span><br><span class=\"line\"><span class=\"addition\">+   @apply text-danger</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"css或scss函数，需要使用变量\"><a href=\"#css或scss函数，需要使用变量\" class=\"headerlink\" title=\"css或scss函数，需要使用变量\"></a>css或scss函数，需要使用变量</h2><p>css的内置函数，或者搭配scss的mixin时</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.btn-filter-picker-confirm &#123;</span><br><span class=\"line\">    width: 375px;</span><br><span class=\"line\">    height: 98px;</span><br><span class=\"line\"><span class=\"deletion\">-   background: linear-gradient(270deg, #8898ff 0%, #2e42c7 100%);</span></span><br><span class=\"line\"><span class=\"addition\">+   background: linear-gradient(270deg, theme(colors.blue-100) 0%, theme(colors.blue-200) 100%);</span></span><br><span class=\"line\">    font-size: 32px;</span><br><span class=\"line\">    font-weight: 400;</span><br><span class=\"line\">    line-height: 45px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">.btn &#123;</span><br><span class=\"line\">    width: 126px;</span><br><span class=\"line\">    height: 56px;</span><br><span class=\"line\">    line-height: 56px;</span><br><span class=\"line\">    border: 0;</span><br><span class=\"line\">    right: -33px;</span><br><span class=\"line\"><span class=\"deletion\">-   @include fix-border-1(#ccc, 12px)</span></span><br><span class=\"line\"><span class=\"addition\">+   @include fix-border-1(theme(&#x27;textColor[tip]&#x27;), 12px);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三方组件需要接受tailwind定义的变量时\"><a href=\"#第三方组件需要接受tailwind定义的变量时\" class=\"headerlink\" title=\"第三方组件需要接受tailwind定义的变量时\"></a>第三方组件需要接受tailwind定义的变量时</h2><p>抽离主题变量为variables.js</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">textColor</span> = &#123; basic: <span class=\"string\">&#x27;#333333&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"attr\">module.exports</span> = &#123;</span><br><span class=\"line\">  textColor,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>tailwind.config.js导入variables中的数据进行配置</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">styleConfig</span> = require(<span class=\"string\">&#x27;./src/styles/variables.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"attr\">module.exports</span> = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    theme: &#123;</span><br><span class=\"line\">        ...styleConfig</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>项目中可以引入,放入全局状态中，比如vue可以通过provide&#x2F;inject</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> styleConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@/view/styles/variables&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;App&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">provide</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">colors</span>:styleConfig.<span class=\"property\">colors</span></span><br><span class=\"line\">            <span class=\"attr\">textColor</span>:styleConfig.<span class=\"property\">textColor</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;van-icon </span><br><span class=\"line\">    name=&quot;warning&quot;</span><br><span class=\"line\"><span class=\"deletion\">-    color=&quot;#2E42C7&quot;</span></span><br><span class=\"line\"><span class=\"addition\">+    :color=&quot;textColor.primary&quot; </span></span><br><span class=\"line\">    class=&quot;little-icon box-36 mr-16&quot; </span><br><span class=\"line\"> /&gt;</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> export default &#123;</span><br><span class=\"line\"><span class=\"addition\">+     inject: [&#x27;textColor&#x27;],</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>","length":1828,"excerpt":"","more":"<p>tailwind的特点在于灵活,改造老项目也很方便，改造老项目主要有以下几种场景：</p>\n<h2 id=\"inline-style\"><a href=\"#inline-style\" class=\"headerlink\" title=\"inline style\"></a>inline style</h2><p>使用class 替换</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- &lt;span style=&quot;color: red&quot;&gt;*&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+ &lt;span class=&quot;text-danger&quot;&gt;*&lt;/span&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单样式的class\"><a href=\"#单样式的class\" class=\"headerlink\" title=\"单样式的class\"></a>单样式的class</h2><p>使用class替换</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- &lt;span class=&quot;s-amount&quot;&gt;￥&#123;&#123; totalAmount &#125;&#125; &lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+ &lt;span class=&quot;text-danger&quot;&gt;￥&#123;&#123; totalAmount &#125;&#125; &lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">- .s-amount &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-   color: #fb9716;</span></span><br><span class=\"line\"><span class=\"deletion\">- &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂样式的class\"><a href=\"#复杂样式的class\" class=\"headerlink\" title=\"复杂样式的class\"></a>复杂样式的class</h2><p>使用@apply</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.tag-status-error &#123;</span><br><span class=\"line\">    @extend .tag-status;</span><br><span class=\"line\">    background: rgba(250, 58, 26, 0.12);</span><br><span class=\"line\"><span class=\"deletion\">-   color: #fa3a1a;</span></span><br><span class=\"line\"><span class=\"addition\">+   @apply text-danger</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"css或scss函数，需要使用变量\"><a href=\"#css或scss函数，需要使用变量\" class=\"headerlink\" title=\"css或scss函数，需要使用变量\"></a>css或scss函数，需要使用变量</h2><p>css的内置函数，或者搭配scss的mixin时</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.btn-filter-picker-confirm &#123;</span><br><span class=\"line\">    width: 375px;</span><br><span class=\"line\">    height: 98px;</span><br><span class=\"line\"><span class=\"deletion\">-   background: linear-gradient(270deg, #8898ff 0%, #2e42c7 100%);</span></span><br><span class=\"line\"><span class=\"addition\">+   background: linear-gradient(270deg, theme(colors.blue-100) 0%, theme(colors.blue-200) 100%);</span></span><br><span class=\"line\">    font-size: 32px;</span><br><span class=\"line\">    font-weight: 400;</span><br><span class=\"line\">    line-height: 45px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">.btn &#123;</span><br><span class=\"line\">    width: 126px;</span><br><span class=\"line\">    height: 56px;</span><br><span class=\"line\">    line-height: 56px;</span><br><span class=\"line\">    border: 0;</span><br><span class=\"line\">    right: -33px;</span><br><span class=\"line\"><span class=\"deletion\">-   @include fix-border-1(#ccc, 12px)</span></span><br><span class=\"line\"><span class=\"addition\">+   @include fix-border-1(theme(&#x27;textColor[tip]&#x27;), 12px);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三方组件需要接受tailwind定义的变量时\"><a href=\"#第三方组件需要接受tailwind定义的变量时\" class=\"headerlink\" title=\"第三方组件需要接受tailwind定义的变量时\"></a>第三方组件需要接受tailwind定义的变量时</h2><p>抽离主题变量为variables.js</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">textColor</span> = &#123; basic: <span class=\"string\">&#x27;#333333&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"attr\">module.exports</span> = &#123;</span><br><span class=\"line\">  textColor,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>tailwind.config.js导入variables中的数据进行配置</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">styleConfig</span> = require(<span class=\"string\">&#x27;./src/styles/variables.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"attr\">module.exports</span> = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    theme: &#123;</span><br><span class=\"line\">        ...styleConfig</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>项目中可以引入,放入全局状态中，比如vue可以通过provide&#x2F;inject</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> styleConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@/view/styles/variables&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;App&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">provide</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">colors</span>:styleConfig.<span class=\"property\">colors</span></span><br><span class=\"line\">            <span class=\"attr\">textColor</span>:styleConfig.<span class=\"property\">textColor</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;van-icon </span><br><span class=\"line\">    name=&quot;warning&quot;</span><br><span class=\"line\"><span class=\"deletion\">-    color=&quot;#2E42C7&quot;</span></span><br><span class=\"line\"><span class=\"addition\">+    :color=&quot;textColor.primary&quot; </span></span><br><span class=\"line\">    class=&quot;little-icon box-36 mr-16&quot; </span><br><span class=\"line\"> /&gt;</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> export default &#123;</span><br><span class=\"line\"><span class=\"addition\">+     inject: [&#x27;textColor&#x27;],</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>"},{"title":"tailwind使用指南——起步","date":"2021-08-15T16:00:00.000Z","_content":"\n没有人能逃出tailwind真香定理。\n\n认识篇\n---\n\nTailwind CSS 是一个功能类优先的 CSS 框架，它集成了诸如 `flex`, `pt-4`, `text-center` 和 `rotate-90` 这样的的类，它们能直接在脚本标记语言中组合起来，构建出任何设计。  \n可以将tailwind理解为原子+组合,也可以理解为bootstrap+(less+scss+stylus+...)\n\nwhy tailwind\n------------\n\n*   组合 和bootstrap原子级样式的理念很相似，但是bs在移动端的开发体验不佳。  \n    tailwind提供了非常方便的api进行原子样式的组合：\n\n```arduino\n.btn {\n  @apply w-400 h-64 border-0 bg-primary text-white rounded-sm text-center m-auto;\n  line-height: 64px;\n}\n```\n\n*   tree shake tailwind在打包时可以将没有应用到的原子样式删除掉\n*   插件支持，开发体验好\n\n![image.png](../imgs/a6d3f98c7b4548f09e762d86df162d37.png)\n\n*   便于ui标准落地和样式维护 配置文件中维护各种样式标准，今后变更间距、主题颜色只要在这里修改。  \n    这里的定义既是variables，又是原子样式。相比scss中的定义变量、函数、逐个生成样式的方式要便捷不少。 ![image.png](../imgs/8f3f8dbd4a4e4a80802e449f0caaca28.png)\n\n实践篇\n---\n\n### 工具\n\n1.  vscode插件 [Tailwind CSS IntelliSense](https://marketplace.visualstudio.com%2Fitems%3FitemName%3Dbradlc.vscode-tailwindcss \"https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss\")\n    \n2.  vscode setting.json配置,为了能够应用@apply这些api而不导致csslint报错，需要先将自带的校验关闭，vue需要关闭vetur的校验\n    \n\n```json\n{\n \"less.validate\": false,\n  \"scss.validate\": false,\n  \"css.validate\": false,\n  \"vetur.validation.style\": false,\n  \"tailwindCSS.rootFontSize\": 37.5,// 单位px，根节点字号，用于提示\n}\n```\n\n3.  安装stylelint,并在根目录配置.stylelintrc.json `yarn add stylelint stylelint-config-standard`,\n\n```json\n{\n  \"extends\": [\n    \"stylelint-config-recommended\"\n  ],\n  \"rules\": {\n    \"at-rule-no-unknown\": [\n      true,\n      {\n        \"ignoreAtRules\": [\n          \"tailwind\",\n          \"apply\",\n          \"variants\",\n          \"responsive\",\n          \"screen\",\n          \"layer\"\n        ]\n      }\n    ],\n    \"declaration-block-trailing-semicolon\": null,\n    \"no-descending-specificity\": null,\n    \"no-irregular-whitespace\": null,\n    \"no-invalid-position-at-import-rule\": null,\n    \"declaration-block-no-duplicate-custom-properties\": null\n  }\n}\n```\n\n### 起步\n\n*   安装 tailwind依赖postcss8,但目前大多数项目还是用的postcss7，因此用这个方式安装： `yarn add tailwindcss@npm:@tailwindcss/postcss7-compat @tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9`\n*   生成配置文件 `npx tailwindcss init`\n*   postcss配置\n\n```yaml\nmodule.exports = ()=>{\nreturn {\n    plugins: {\n      tailwindcss: {},\n      autoprefixer: {},\n      \"postcss-pxtorem\": {\n        rootValue: 75, // 750的设计稿，根节点10vw，根据设计稿设置\n        unitPrecision: 6,\n        propList: [\"*\"],\n      },\n    },\n  };\n}\n```\n\n使用\n--\n\nmain.js引入样式文件 `import \"tailwindcss/tailwind.css\"`  \n以上配置完成后就可以使用它自带的原子样式， ![image.png](../imgs/ffaffd3f6eb24adbb8e63baf1a852f93.png) 以及`@apply`等api","source":"_posts/tailwind使用指南——起步.md","raw":"---\n title: \"tailwind使用指南——起步\"\n date: 2021-08-16\n tags: [CSS]\n categories: [前端笔记]\n---\n\n没有人能逃出tailwind真香定理。\n\n认识篇\n---\n\nTailwind CSS 是一个功能类优先的 CSS 框架，它集成了诸如 `flex`, `pt-4`, `text-center` 和 `rotate-90` 这样的的类，它们能直接在脚本标记语言中组合起来，构建出任何设计。  \n可以将tailwind理解为原子+组合,也可以理解为bootstrap+(less+scss+stylus+...)\n\nwhy tailwind\n------------\n\n*   组合 和bootstrap原子级样式的理念很相似，但是bs在移动端的开发体验不佳。  \n    tailwind提供了非常方便的api进行原子样式的组合：\n\n```arduino\n.btn {\n  @apply w-400 h-64 border-0 bg-primary text-white rounded-sm text-center m-auto;\n  line-height: 64px;\n}\n```\n\n*   tree shake tailwind在打包时可以将没有应用到的原子样式删除掉\n*   插件支持，开发体验好\n\n![image.png](../imgs/a6d3f98c7b4548f09e762d86df162d37.png)\n\n*   便于ui标准落地和样式维护 配置文件中维护各种样式标准，今后变更间距、主题颜色只要在这里修改。  \n    这里的定义既是variables，又是原子样式。相比scss中的定义变量、函数、逐个生成样式的方式要便捷不少。 ![image.png](../imgs/8f3f8dbd4a4e4a80802e449f0caaca28.png)\n\n实践篇\n---\n\n### 工具\n\n1.  vscode插件 [Tailwind CSS IntelliSense](https://marketplace.visualstudio.com%2Fitems%3FitemName%3Dbradlc.vscode-tailwindcss \"https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss\")\n    \n2.  vscode setting.json配置,为了能够应用@apply这些api而不导致csslint报错，需要先将自带的校验关闭，vue需要关闭vetur的校验\n    \n\n```json\n{\n \"less.validate\": false,\n  \"scss.validate\": false,\n  \"css.validate\": false,\n  \"vetur.validation.style\": false,\n  \"tailwindCSS.rootFontSize\": 37.5,// 单位px，根节点字号，用于提示\n}\n```\n\n3.  安装stylelint,并在根目录配置.stylelintrc.json `yarn add stylelint stylelint-config-standard`,\n\n```json\n{\n  \"extends\": [\n    \"stylelint-config-recommended\"\n  ],\n  \"rules\": {\n    \"at-rule-no-unknown\": [\n      true,\n      {\n        \"ignoreAtRules\": [\n          \"tailwind\",\n          \"apply\",\n          \"variants\",\n          \"responsive\",\n          \"screen\",\n          \"layer\"\n        ]\n      }\n    ],\n    \"declaration-block-trailing-semicolon\": null,\n    \"no-descending-specificity\": null,\n    \"no-irregular-whitespace\": null,\n    \"no-invalid-position-at-import-rule\": null,\n    \"declaration-block-no-duplicate-custom-properties\": null\n  }\n}\n```\n\n### 起步\n\n*   安装 tailwind依赖postcss8,但目前大多数项目还是用的postcss7，因此用这个方式安装： `yarn add tailwindcss@npm:@tailwindcss/postcss7-compat @tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9`\n*   生成配置文件 `npx tailwindcss init`\n*   postcss配置\n\n```yaml\nmodule.exports = ()=>{\nreturn {\n    plugins: {\n      tailwindcss: {},\n      autoprefixer: {},\n      \"postcss-pxtorem\": {\n        rootValue: 75, // 750的设计稿，根节点10vw，根据设计稿设置\n        unitPrecision: 6,\n        propList: [\"*\"],\n      },\n    },\n  };\n}\n```\n\n使用\n--\n\nmain.js引入样式文件 `import \"tailwindcss/tailwind.css\"`  \n以上配置完成后就可以使用它自带的原子样式， ![image.png](../imgs/ffaffd3f6eb24adbb8e63baf1a852f93.png) 以及`@apply`等api","slug":"tailwind使用指南——起步","published":1,"updated":"2024-04-04T15:27:03.761Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhs003nhajf7qlj4ysc","content":"<p>没有人能逃出tailwind真香定理。</p>\n<h2 id=\"认识篇\"><a href=\"#认识篇\" class=\"headerlink\" title=\"认识篇\"></a>认识篇</h2><p>Tailwind CSS 是一个功能类优先的 CSS 框架，它集成了诸如 <code>flex</code>, <code>pt-4</code>, <code>text-center</code> 和 <code>rotate-90</code> 这样的的类，它们能直接在脚本标记语言中组合起来，构建出任何设计。<br>可以将tailwind理解为原子+组合,也可以理解为bootstrap+(less+scss+stylus+…)</p>\n<h2 id=\"why-tailwind\"><a href=\"#why-tailwind\" class=\"headerlink\" title=\"why tailwind\"></a>why tailwind</h2><ul>\n<li>组合 和bootstrap原子级样式的理念很相似，但是bs在移动端的开发体验不佳。<br>tailwind提供了非常方便的api进行原子样式的组合：</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.btn &#123;</span><br><span class=\"line\">  @apply w<span class=\"number\">-400</span> h<span class=\"number\">-64</span> border<span class=\"number\">-0</span> bg-primary text-white rounded-sm text-center m-<span class=\"keyword\">auto</span>;</span><br><span class=\"line\">  line-height: <span class=\"number\">64</span>px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tree shake tailwind在打包时可以将没有应用到的原子样式删除掉</li>\n<li>插件支持，开发体验好</li>\n</ul>\n<p><img src=\"/../imgs/a6d3f98c7b4548f09e762d86df162d37.png\" alt=\"image.png\"></p>\n<ul>\n<li>便于ui标准落地和样式维护 配置文件中维护各种样式标准，今后变更间距、主题颜色只要在这里修改。<br>这里的定义既是variables，又是原子样式。相比scss中的定义变量、函数、逐个生成样式的方式要便捷不少。 <img src=\"/../imgs/8f3f8dbd4a4e4a80802e449f0caaca28.png\" alt=\"image.png\"></li>\n</ul>\n<h2 id=\"实践篇\"><a href=\"#实践篇\" class=\"headerlink\" title=\"实践篇\"></a>实践篇</h2><h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><ol>\n<li><p>vscode插件 <a href=\"https://marketplace.visualstudio.com%2Fitems%3FitemName%3Dbradlc.vscode-tailwindcss\" title=\"https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss\">Tailwind CSS IntelliSense</a></p>\n</li>\n<li><p>vscode setting.json配置,为了能够应用@apply这些api而不导致csslint报错，需要先将自带的校验关闭，vue需要关闭vetur的校验</p>\n</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"> <span class=\"attr\">&quot;less.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scss.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;css.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.validation.style&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tailwindCSS.rootFontSize&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">37.5</span><span class=\"punctuation\">,</span><span class=\"comment\">// 单位px，根节点字号，用于提示</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装stylelint,并在根目录配置.stylelintrc.json <code>yarn add stylelint stylelint-config-standard</code>,</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;stylelint-config-recommended&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;at-rule-no-unknown&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ignoreAtRules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;tailwind&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;apply&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;variants&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;responsive&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;screen&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;layer&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;declaration-block-trailing-semicolon&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;no-descending-specificity&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;no-irregular-whitespace&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;no-invalid-position-at-import-rule&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;declaration-block-no-duplicate-custom-properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><ul>\n<li>安装 tailwind依赖postcss8,但目前大多数项目还是用的postcss7，因此用这个方式安装： <code>yarn add tailwindcss@npm:@tailwindcss/postcss7-compat @tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9</code></li>\n<li>生成配置文件 <code>npx tailwindcss init</code></li>\n<li>postcss配置</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">module.exports</span> <span class=\"string\">=</span> <span class=\"string\">()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">plugins:</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">tailwindcss:</span> &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">autoprefixer:</span> &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;postcss-pxtorem&quot;:</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">rootValue:</span> <span class=\"number\">75</span>, <span class=\"string\">//</span> <span class=\"number\">750</span><span class=\"string\">的设计稿，根节点10vw，根据设计稿设置</span></span><br><span class=\"line\">        <span class=\"attr\">unitPrecision:</span> <span class=\"number\">6</span>,</span><br><span class=\"line\">        <span class=\"attr\">propList:</span> [<span class=\"string\">&quot;*&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;<span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>main.js引入样式文件 <code>import &quot;tailwindcss/tailwind.css&quot;</code><br>以上配置完成后就可以使用它自带的原子样式， <img src=\"/../imgs/ffaffd3f6eb24adbb8e63baf1a852f93.png\" alt=\"image.png\"> 以及<code>@apply</code>等api</p>\n","length":2058,"excerpt":"","more":"<p>没有人能逃出tailwind真香定理。</p>\n<h2 id=\"认识篇\"><a href=\"#认识篇\" class=\"headerlink\" title=\"认识篇\"></a>认识篇</h2><p>Tailwind CSS 是一个功能类优先的 CSS 框架，它集成了诸如 <code>flex</code>, <code>pt-4</code>, <code>text-center</code> 和 <code>rotate-90</code> 这样的的类，它们能直接在脚本标记语言中组合起来，构建出任何设计。<br>可以将tailwind理解为原子+组合,也可以理解为bootstrap+(less+scss+stylus+…)</p>\n<h2 id=\"why-tailwind\"><a href=\"#why-tailwind\" class=\"headerlink\" title=\"why tailwind\"></a>why tailwind</h2><ul>\n<li>组合 和bootstrap原子级样式的理念很相似，但是bs在移动端的开发体验不佳。<br>tailwind提供了非常方便的api进行原子样式的组合：</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.btn &#123;</span><br><span class=\"line\">  @apply w<span class=\"number\">-400</span> h<span class=\"number\">-64</span> border<span class=\"number\">-0</span> bg-primary text-white rounded-sm text-center m-<span class=\"keyword\">auto</span>;</span><br><span class=\"line\">  line-height: <span class=\"number\">64</span>px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tree shake tailwind在打包时可以将没有应用到的原子样式删除掉</li>\n<li>插件支持，开发体验好</li>\n</ul>\n<p><img src=\"/../imgs/a6d3f98c7b4548f09e762d86df162d37.png\" alt=\"image.png\"></p>\n<ul>\n<li>便于ui标准落地和样式维护 配置文件中维护各种样式标准，今后变更间距、主题颜色只要在这里修改。<br>这里的定义既是variables，又是原子样式。相比scss中的定义变量、函数、逐个生成样式的方式要便捷不少。 <img src=\"/../imgs/8f3f8dbd4a4e4a80802e449f0caaca28.png\" alt=\"image.png\"></li>\n</ul>\n<h2 id=\"实践篇\"><a href=\"#实践篇\" class=\"headerlink\" title=\"实践篇\"></a>实践篇</h2><h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><ol>\n<li><p>vscode插件 <a href=\"https://marketplace.visualstudio.com%2Fitems%3FitemName%3Dbradlc.vscode-tailwindcss\" title=\"https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss\">Tailwind CSS IntelliSense</a></p>\n</li>\n<li><p>vscode setting.json配置,为了能够应用@apply这些api而不导致csslint报错，需要先将自带的校验关闭，vue需要关闭vetur的校验</p>\n</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"> <span class=\"attr\">&quot;less.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scss.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;css.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.validation.style&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tailwindCSS.rootFontSize&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">37.5</span><span class=\"punctuation\">,</span><span class=\"comment\">// 单位px，根节点字号，用于提示</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装stylelint,并在根目录配置.stylelintrc.json <code>yarn add stylelint stylelint-config-standard</code>,</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;stylelint-config-recommended&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;at-rule-no-unknown&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ignoreAtRules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;tailwind&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;apply&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;variants&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;responsive&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;screen&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;layer&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;declaration-block-trailing-semicolon&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;no-descending-specificity&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;no-irregular-whitespace&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;no-invalid-position-at-import-rule&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;declaration-block-no-duplicate-custom-properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><ul>\n<li>安装 tailwind依赖postcss8,但目前大多数项目还是用的postcss7，因此用这个方式安装： <code>yarn add tailwindcss@npm:@tailwindcss/postcss7-compat @tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9</code></li>\n<li>生成配置文件 <code>npx tailwindcss init</code></li>\n<li>postcss配置</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">module.exports</span> <span class=\"string\">=</span> <span class=\"string\">()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">plugins:</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">tailwindcss:</span> &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">autoprefixer:</span> &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;postcss-pxtorem&quot;:</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">rootValue:</span> <span class=\"number\">75</span>, <span class=\"string\">//</span> <span class=\"number\">750</span><span class=\"string\">的设计稿，根节点10vw，根据设计稿设置</span></span><br><span class=\"line\">        <span class=\"attr\">unitPrecision:</span> <span class=\"number\">6</span>,</span><br><span class=\"line\">        <span class=\"attr\">propList:</span> [<span class=\"string\">&quot;*&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;<span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>main.js引入样式文件 <code>import &quot;tailwindcss/tailwind.css&quot;</code><br>以上配置完成后就可以使用它自带的原子样式， <img src=\"/../imgs/ffaffd3f6eb24adbb8e63baf1a852f93.png\" alt=\"image.png\"> 以及<code>@apply</code>等api</p>\n"},{"title":"tailwind使用指南——配置","date":"2021-08-15T16:00:00.000Z","_content":"\n配置篇\n---\n\n通过tailwind.config.js可以进行自定义主题配置\n\n![image.png](../imgs/fc8e8a6100d64734be18b899a8d23dc2.png)\n\n### purge\n\n仅在production环境下生效，用于删除没有使用的样式\n\n### darkMode\n\n为颜色类样式生成dark变体（dark前缀的原子样式）\n\n### theme\n\n自定义主题\n\n*   spacing\n\n```css\nconst spacings = [0, 8, 10, 12, 16, 20, 32, 40, 56, 64, 96, 128, 240, 480];\n...\n{\n    theme:{\n        spacing: {\n          px: '1px',\n          ...spacings.reduce((pre, cur) => { pre[cur] = cur + 'px'; return pre }, {})\n        },\n    }\n}\n\n```\n\n默认情况下，间距比例会被 `padding`、 `margin`、 `width`、 `height`、 `maxHeight`、 `gap`、 `inset`、 `space` 和 `translate` 。\n\n![image.png](../imgs/40637a4f03594f4fb273c6a39ca04b62.png)\n\n*   width、heights 很多情况下，w和h的设置与spacing的分级是不一样的，因此有必要为他们单独设置\n\n```ini\nconst widths = [44, 240, 400, 480];\nconst heights = [200, 300];\n...\n{\n...\n    theme: {\n        width: {\n          ...widths.reduce((pre, cur) => { pre[cur] = cur + 'px'; return pre }, {})\n        },\n        heights: {\n          ...heights.reduce((pre, cur) => { pre[cur] = cur + 'px'; return pre }, {})\n        },\n    }\n}\n  \n```\n\n*   colors 一般情况下，颜色也是需要修改的\n\n![image.png](../imgs/c83d1f4b443f480f8c579f6ad5651e88.png)\n\n默认情况下，这些颜色会被所有颜色驱动的功能类自动共享，如 `textColor`、`backgroundColor`、`borderColor` 等。  \n\n这个配置生成类似下面的样式\n\n![image.png](../imgs/584137cb90ef45a98d2887a4fe5579e8.png)\n\n*   fontSize 推荐配置一个数组，第一位是字号，第二位是行高\n\n```css\nconst fontSizes = [0, 36, 40, 48, 56, 64]; \n...\n{\n    theme: {\n        fontSize: {\n          //字号和行高，12号字体1行高\n          sm: [\"24px\", \"24px\"], //最小12，12一下不能保证\n          base: [\"28px\", \"40px\"],\n          lg: [\"32px\", \"48px\"], // 以上三种为项目中主要字号，不以数字命名，其他特殊字号以数字命名\n          ...fontSizes.reduce((pre, cur) => {\n            pre[cur] = [cur + \"px\", 1];\n            return pre;\n          }, {}),\n        },\n    }\n}\n```\n\n*   extend:不覆盖原有样式 上面配置的colors等都会覆盖掉原来的配置，通常文字的颜色与其他填充颜色有很多重叠，因此可以在继承colors的基础上，单独为某些用途的文字单独配置颜色\n\n![image.png](../imgs/d5a73937beb048adb64124aa285ec196.png)\n\n### plugins\n\n当需要新增一些自定义样式时就可以使用这个api，比如设置基础样式（Preflight）、组件样式等\n\n![image.png](../imgs/0903e080715f42c49aa2e3dc4be85594.png)\n\n### 变体\n\n变体可以理解为某些场景下的前缀，比如hover、focus,当然也可以根据文档配置自定义变体\n\n![image.png](../imgs/18409a0a70274ab69df4664311f0aa93.png) （需要注意当变体使用transform时，必须设置transform）\n\n在css中自定义样式\n----------\n\n除了在tailwind.config.js中进行样式的扩展，还支持在css中使用函数与指令进行扩展，写法更简单\n\n### @layer\n\n添加基础样式，与plugins的addBase,addComponents等价\n\n```less\n@layer base {\n  h1 {\n    @apply text-2xl;\n  }\n  h2 {\n    @apply text-xl;\n  }\n}\n```\n\n```less\n@layer components {\n  .btn-blue {\n    @apply bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded;\n  }\n}\n```\n\n### @variants、@screen、@responsive\n\n这三个都是为你的自定义样式增加一些额外功能，比如focus等某些变体、媒体查询的某个断电、生成对应的一系列列响应式样式","source":"_posts/tailwind使用指南——配置.md","raw":"---\n title: \"tailwind使用指南——配置\"\n date: 2021-08-16\n tags: [CSS]\n categories: [前端笔记]\n---\n\n配置篇\n---\n\n通过tailwind.config.js可以进行自定义主题配置\n\n![image.png](../imgs/fc8e8a6100d64734be18b899a8d23dc2.png)\n\n### purge\n\n仅在production环境下生效，用于删除没有使用的样式\n\n### darkMode\n\n为颜色类样式生成dark变体（dark前缀的原子样式）\n\n### theme\n\n自定义主题\n\n*   spacing\n\n```css\nconst spacings = [0, 8, 10, 12, 16, 20, 32, 40, 56, 64, 96, 128, 240, 480];\n...\n{\n    theme:{\n        spacing: {\n          px: '1px',\n          ...spacings.reduce((pre, cur) => { pre[cur] = cur + 'px'; return pre }, {})\n        },\n    }\n}\n\n```\n\n默认情况下，间距比例会被 `padding`、 `margin`、 `width`、 `height`、 `maxHeight`、 `gap`、 `inset`、 `space` 和 `translate` 。\n\n![image.png](../imgs/40637a4f03594f4fb273c6a39ca04b62.png)\n\n*   width、heights 很多情况下，w和h的设置与spacing的分级是不一样的，因此有必要为他们单独设置\n\n```ini\nconst widths = [44, 240, 400, 480];\nconst heights = [200, 300];\n...\n{\n...\n    theme: {\n        width: {\n          ...widths.reduce((pre, cur) => { pre[cur] = cur + 'px'; return pre }, {})\n        },\n        heights: {\n          ...heights.reduce((pre, cur) => { pre[cur] = cur + 'px'; return pre }, {})\n        },\n    }\n}\n  \n```\n\n*   colors 一般情况下，颜色也是需要修改的\n\n![image.png](../imgs/c83d1f4b443f480f8c579f6ad5651e88.png)\n\n默认情况下，这些颜色会被所有颜色驱动的功能类自动共享，如 `textColor`、`backgroundColor`、`borderColor` 等。  \n\n这个配置生成类似下面的样式\n\n![image.png](../imgs/584137cb90ef45a98d2887a4fe5579e8.png)\n\n*   fontSize 推荐配置一个数组，第一位是字号，第二位是行高\n\n```css\nconst fontSizes = [0, 36, 40, 48, 56, 64]; \n...\n{\n    theme: {\n        fontSize: {\n          //字号和行高，12号字体1行高\n          sm: [\"24px\", \"24px\"], //最小12，12一下不能保证\n          base: [\"28px\", \"40px\"],\n          lg: [\"32px\", \"48px\"], // 以上三种为项目中主要字号，不以数字命名，其他特殊字号以数字命名\n          ...fontSizes.reduce((pre, cur) => {\n            pre[cur] = [cur + \"px\", 1];\n            return pre;\n          }, {}),\n        },\n    }\n}\n```\n\n*   extend:不覆盖原有样式 上面配置的colors等都会覆盖掉原来的配置，通常文字的颜色与其他填充颜色有很多重叠，因此可以在继承colors的基础上，单独为某些用途的文字单独配置颜色\n\n![image.png](../imgs/d5a73937beb048adb64124aa285ec196.png)\n\n### plugins\n\n当需要新增一些自定义样式时就可以使用这个api，比如设置基础样式（Preflight）、组件样式等\n\n![image.png](../imgs/0903e080715f42c49aa2e3dc4be85594.png)\n\n### 变体\n\n变体可以理解为某些场景下的前缀，比如hover、focus,当然也可以根据文档配置自定义变体\n\n![image.png](../imgs/18409a0a70274ab69df4664311f0aa93.png) （需要注意当变体使用transform时，必须设置transform）\n\n在css中自定义样式\n----------\n\n除了在tailwind.config.js中进行样式的扩展，还支持在css中使用函数与指令进行扩展，写法更简单\n\n### @layer\n\n添加基础样式，与plugins的addBase,addComponents等价\n\n```less\n@layer base {\n  h1 {\n    @apply text-2xl;\n  }\n  h2 {\n    @apply text-xl;\n  }\n}\n```\n\n```less\n@layer components {\n  .btn-blue {\n    @apply bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded;\n  }\n}\n```\n\n### @variants、@screen、@responsive\n\n这三个都是为你的自定义样式增加一些额外功能，比如focus等某些变体、媒体查询的某个断电、生成对应的一系列列响应式样式","slug":"tailwind使用指南——配置","published":1,"updated":"2024-04-04T15:27:03.752Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhs003qhajf19tp5e5b","content":"<h2 id=\"配置篇\"><a href=\"#配置篇\" class=\"headerlink\" title=\"配置篇\"></a>配置篇</h2><p>通过tailwind.config.js可以进行自定义主题配置</p>\n<p><img src=\"/../imgs/fc8e8a6100d64734be18b899a8d23dc2.png\" alt=\"image.png\"></p>\n<h3 id=\"purge\"><a href=\"#purge\" class=\"headerlink\" title=\"purge\"></a>purge</h3><p>仅在production环境下生效，用于删除没有使用的样式</p>\n<h3 id=\"darkMode\"><a href=\"#darkMode\" class=\"headerlink\" title=\"darkMode\"></a>darkMode</h3><p>为颜色类样式生成dark变体（dark前缀的原子样式）</p>\n<h3 id=\"theme\"><a href=\"#theme\" class=\"headerlink\" title=\"theme\"></a>theme</h3><p>自定义主题</p>\n<ul>\n<li>spacing</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const spacings = <span class=\"selector-attr\">[0, 8, 10, 12, 16, 20, 32, 40, 56, 64, 96, 128, 240, 480]</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    theme:&#123;</span><br><span class=\"line\">        spacing: &#123;</span><br><span class=\"line\">          px: <span class=\"string\">&#x27;1px&#x27;</span>,</span><br><span class=\"line\">          ...spacings.<span class=\"built_in\">reduce</span>((pre, cur) =&gt; &#123; pre<span class=\"selector-attr\">[cur]</span> = cur + &#x27;px&#x27;; return pre &#125;, &#123;&#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，间距比例会被 <code>padding</code>、 <code>margin</code>、 <code>width</code>、 <code>height</code>、 <code>maxHeight</code>、 <code>gap</code>、 <code>inset</code>、 <code>space</code> 和 <code>translate</code> 。</p>\n<p><img src=\"/../imgs/40637a4f03594f4fb273c6a39ca04b62.png\" alt=\"image.png\"></p>\n<ul>\n<li>width、heights 很多情况下，w和h的设置与spacing的分级是不一样的，因此有必要为他们单独设置</li>\n</ul>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">widths</span> = [<span class=\"number\">44</span>, <span class=\"number\">240</span>, <span class=\"number\">400</span>, <span class=\"number\">480</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">const <span class=\"attr\">heights</span> = [<span class=\"number\">200</span>, <span class=\"number\">300</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    theme: &#123;</span><br><span class=\"line\">        width: &#123;</span><br><span class=\"line\">          ...widths.reduce((pre, cur) =&gt; &#123; pre<span class=\"section\">[cur]</span> = cur + &#x27;px&#x27;<span class=\"comment\">; return pre &#125;, &#123;&#125;)</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        heights: &#123;</span><br><span class=\"line\">          ...heights.reduce((pre, cur) =&gt; &#123; pre<span class=\"section\">[cur]</span> = cur + &#x27;px&#x27;<span class=\"comment\">; return pre &#125;, &#123;&#125;)</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>colors 一般情况下，颜色也是需要修改的</li>\n</ul>\n<p><img src=\"/../imgs/c83d1f4b443f480f8c579f6ad5651e88.png\" alt=\"image.png\"></p>\n<p>默认情况下，这些颜色会被所有颜色驱动的功能类自动共享，如 <code>textColor</code>、<code>backgroundColor</code>、<code>borderColor</code> 等。  </p>\n<p>这个配置生成类似下面的样式</p>\n<p><img src=\"/../imgs/584137cb90ef45a98d2887a4fe5579e8.png\" alt=\"image.png\"></p>\n<ul>\n<li>fontSize 推荐配置一个数组，第一位是字号，第二位是行高</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fontSizes = <span class=\"selector-attr\">[0, 36, 40, 48, 56, 64]</span>; </span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    theme: &#123;</span><br><span class=\"line\">        fontSize: &#123;</span><br><span class=\"line\">          //字号和行高，<span class=\"number\">12</span>号字体<span class=\"number\">1</span>行高</span><br><span class=\"line\">          sm: [<span class=\"string\">&quot;24px&quot;</span>, <span class=\"string\">&quot;24px&quot;</span>], //最小<span class=\"number\">12</span>，<span class=\"number\">12</span>一下不能保证</span><br><span class=\"line\">          base: [<span class=\"string\">&quot;28px&quot;</span>, <span class=\"string\">&quot;40px&quot;</span>],</span><br><span class=\"line\">          lg: [<span class=\"string\">&quot;32px&quot;</span>, <span class=\"string\">&quot;48px&quot;</span>], // 以上三种为项目中主要字号，不以数字命名，其他特殊字号以数字命名</span><br><span class=\"line\">          ...fontSizes.<span class=\"built_in\">reduce</span>((pre, cur) =&gt; &#123;</span><br><span class=\"line\">            pre<span class=\"selector-attr\">[cur]</span> = <span class=\"selector-attr\">[cur + <span class=\"string\">&quot;px&quot;</span>, 1]</span>;</span><br><span class=\"line\">            return pre;</span><br><span class=\"line\">          &#125;, &#123;&#125;),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>extend:不覆盖原有样式 上面配置的colors等都会覆盖掉原来的配置，通常文字的颜色与其他填充颜色有很多重叠，因此可以在继承colors的基础上，单独为某些用途的文字单独配置颜色</li>\n</ul>\n<p><img src=\"/../imgs/d5a73937beb048adb64124aa285ec196.png\" alt=\"image.png\"></p>\n<h3 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h3><p>当需要新增一些自定义样式时就可以使用这个api，比如设置基础样式（Preflight）、组件样式等</p>\n<p><img src=\"/../imgs/0903e080715f42c49aa2e3dc4be85594.png\" alt=\"image.png\"></p>\n<h3 id=\"变体\"><a href=\"#变体\" class=\"headerlink\" title=\"变体\"></a>变体</h3><p>变体可以理解为某些场景下的前缀，比如hover、focus,当然也可以根据文档配置自定义变体</p>\n<p><img src=\"/../imgs/18409a0a70274ab69df4664311f0aa93.png\" alt=\"image.png\"> （需要注意当变体使用transform时，必须设置transform）</p>\n<h2 id=\"在css中自定义样式\"><a href=\"#在css中自定义样式\" class=\"headerlink\" title=\"在css中自定义样式\"></a>在css中自定义样式</h2><p>除了在tailwind.config.js中进行样式的扩展，还支持在css中使用函数与指令进行扩展，写法更简单</p>\n<h3 id=\"layer\"><a href=\"#layer\" class=\"headerlink\" title=\"@layer\"></a>@layer</h3><p>添加基础样式，与plugins的addBase,addComponents等价</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@layer</span> base &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">@apply</span> text-<span class=\"number\">2</span>xl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  h2 &#123;</span><br><span class=\"line\">    <span class=\"variable\">@apply</span> text-xl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@layer</span> components &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.btn-blue</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">@apply</span> bg-blue-<span class=\"number\">500</span> <span class=\"attribute\">hover</span>:bg-blue-<span class=\"number\">700</span> text-white font-bold py-<span class=\"number\">2</span> px-<span class=\"number\">4</span> rounded;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"variants、-screen、-responsive\"><a href=\"#variants、-screen、-responsive\" class=\"headerlink\" title=\"@variants、@screen、@responsive\"></a>@variants、@screen、@responsive</h3><p>这三个都是为你的自定义样式增加一些额外功能，比如focus等某些变体、媒体查询的某个断电、生成对应的一系列列响应式样式</p>\n","length":1996,"excerpt":"","more":"<h2 id=\"配置篇\"><a href=\"#配置篇\" class=\"headerlink\" title=\"配置篇\"></a>配置篇</h2><p>通过tailwind.config.js可以进行自定义主题配置</p>\n<p><img src=\"/../imgs/fc8e8a6100d64734be18b899a8d23dc2.png\" alt=\"image.png\"></p>\n<h3 id=\"purge\"><a href=\"#purge\" class=\"headerlink\" title=\"purge\"></a>purge</h3><p>仅在production环境下生效，用于删除没有使用的样式</p>\n<h3 id=\"darkMode\"><a href=\"#darkMode\" class=\"headerlink\" title=\"darkMode\"></a>darkMode</h3><p>为颜色类样式生成dark变体（dark前缀的原子样式）</p>\n<h3 id=\"theme\"><a href=\"#theme\" class=\"headerlink\" title=\"theme\"></a>theme</h3><p>自定义主题</p>\n<ul>\n<li>spacing</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const spacings = <span class=\"selector-attr\">[0, 8, 10, 12, 16, 20, 32, 40, 56, 64, 96, 128, 240, 480]</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    theme:&#123;</span><br><span class=\"line\">        spacing: &#123;</span><br><span class=\"line\">          px: <span class=\"string\">&#x27;1px&#x27;</span>,</span><br><span class=\"line\">          ...spacings.<span class=\"built_in\">reduce</span>((pre, cur) =&gt; &#123; pre<span class=\"selector-attr\">[cur]</span> = cur + &#x27;px&#x27;; return pre &#125;, &#123;&#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，间距比例会被 <code>padding</code>、 <code>margin</code>、 <code>width</code>、 <code>height</code>、 <code>maxHeight</code>、 <code>gap</code>、 <code>inset</code>、 <code>space</code> 和 <code>translate</code> 。</p>\n<p><img src=\"/../imgs/40637a4f03594f4fb273c6a39ca04b62.png\" alt=\"image.png\"></p>\n<ul>\n<li>width、heights 很多情况下，w和h的设置与spacing的分级是不一样的，因此有必要为他们单独设置</li>\n</ul>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">widths</span> = [<span class=\"number\">44</span>, <span class=\"number\">240</span>, <span class=\"number\">400</span>, <span class=\"number\">480</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">const <span class=\"attr\">heights</span> = [<span class=\"number\">200</span>, <span class=\"number\">300</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    theme: &#123;</span><br><span class=\"line\">        width: &#123;</span><br><span class=\"line\">          ...widths.reduce((pre, cur) =&gt; &#123; pre<span class=\"section\">[cur]</span> = cur + &#x27;px&#x27;<span class=\"comment\">; return pre &#125;, &#123;&#125;)</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        heights: &#123;</span><br><span class=\"line\">          ...heights.reduce((pre, cur) =&gt; &#123; pre<span class=\"section\">[cur]</span> = cur + &#x27;px&#x27;<span class=\"comment\">; return pre &#125;, &#123;&#125;)</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>colors 一般情况下，颜色也是需要修改的</li>\n</ul>\n<p><img src=\"/../imgs/c83d1f4b443f480f8c579f6ad5651e88.png\" alt=\"image.png\"></p>\n<p>默认情况下，这些颜色会被所有颜色驱动的功能类自动共享，如 <code>textColor</code>、<code>backgroundColor</code>、<code>borderColor</code> 等。  </p>\n<p>这个配置生成类似下面的样式</p>\n<p><img src=\"/../imgs/584137cb90ef45a98d2887a4fe5579e8.png\" alt=\"image.png\"></p>\n<ul>\n<li>fontSize 推荐配置一个数组，第一位是字号，第二位是行高</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fontSizes = <span class=\"selector-attr\">[0, 36, 40, 48, 56, 64]</span>; </span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    theme: &#123;</span><br><span class=\"line\">        fontSize: &#123;</span><br><span class=\"line\">          //字号和行高，<span class=\"number\">12</span>号字体<span class=\"number\">1</span>行高</span><br><span class=\"line\">          sm: [<span class=\"string\">&quot;24px&quot;</span>, <span class=\"string\">&quot;24px&quot;</span>], //最小<span class=\"number\">12</span>，<span class=\"number\">12</span>一下不能保证</span><br><span class=\"line\">          base: [<span class=\"string\">&quot;28px&quot;</span>, <span class=\"string\">&quot;40px&quot;</span>],</span><br><span class=\"line\">          lg: [<span class=\"string\">&quot;32px&quot;</span>, <span class=\"string\">&quot;48px&quot;</span>], // 以上三种为项目中主要字号，不以数字命名，其他特殊字号以数字命名</span><br><span class=\"line\">          ...fontSizes.<span class=\"built_in\">reduce</span>((pre, cur) =&gt; &#123;</span><br><span class=\"line\">            pre<span class=\"selector-attr\">[cur]</span> = <span class=\"selector-attr\">[cur + <span class=\"string\">&quot;px&quot;</span>, 1]</span>;</span><br><span class=\"line\">            return pre;</span><br><span class=\"line\">          &#125;, &#123;&#125;),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>extend:不覆盖原有样式 上面配置的colors等都会覆盖掉原来的配置，通常文字的颜色与其他填充颜色有很多重叠，因此可以在继承colors的基础上，单独为某些用途的文字单独配置颜色</li>\n</ul>\n<p><img src=\"/../imgs/d5a73937beb048adb64124aa285ec196.png\" alt=\"image.png\"></p>\n<h3 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h3><p>当需要新增一些自定义样式时就可以使用这个api，比如设置基础样式（Preflight）、组件样式等</p>\n<p><img src=\"/../imgs/0903e080715f42c49aa2e3dc4be85594.png\" alt=\"image.png\"></p>\n<h3 id=\"变体\"><a href=\"#变体\" class=\"headerlink\" title=\"变体\"></a>变体</h3><p>变体可以理解为某些场景下的前缀，比如hover、focus,当然也可以根据文档配置自定义变体</p>\n<p><img src=\"/../imgs/18409a0a70274ab69df4664311f0aa93.png\" alt=\"image.png\"> （需要注意当变体使用transform时，必须设置transform）</p>\n<h2 id=\"在css中自定义样式\"><a href=\"#在css中自定义样式\" class=\"headerlink\" title=\"在css中自定义样式\"></a>在css中自定义样式</h2><p>除了在tailwind.config.js中进行样式的扩展，还支持在css中使用函数与指令进行扩展，写法更简单</p>\n<h3 id=\"layer\"><a href=\"#layer\" class=\"headerlink\" title=\"@layer\"></a>@layer</h3><p>添加基础样式，与plugins的addBase,addComponents等价</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@layer</span> base &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">@apply</span> text-<span class=\"number\">2</span>xl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  h2 &#123;</span><br><span class=\"line\">    <span class=\"variable\">@apply</span> text-xl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@layer</span> components &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.btn-blue</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">@apply</span> bg-blue-<span class=\"number\">500</span> <span class=\"attribute\">hover</span>:bg-blue-<span class=\"number\">700</span> text-white font-bold py-<span class=\"number\">2</span> px-<span class=\"number\">4</span> rounded;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"variants、-screen、-responsive\"><a href=\"#variants、-screen、-responsive\" class=\"headerlink\" title=\"@variants、@screen、@responsive\"></a>@variants、@screen、@responsive</h3><p>这三个都是为你的自定义样式增加一些额外功能，比如focus等某些变体、媒体查询的某个断电、生成对应的一系列列响应式样式</p>\n"},{"title":"ueditor自定义控件和图片请求","date":"2019-12-30T16:00:00.000Z","_content":"\n认识ueditor\n---------\n\nueditor时百度出的一款非常强大的富文本编辑器，但是并不能将它理解为一个现成的编辑器。富文本编辑器的原理并不复杂，核心api是document.execCommand，以及Selection和Range操作。对于一些自定义的控件，则可以用原生的dom操作完成。然而正式因为dom操作和状态判断非常复杂，因此ueditor铺设了整个编辑器的底层逻辑。所以，你应该将ueditor理解成一个基础设施。\n\n自定义请求\n-----\n\n如果遇到富文本编辑器需求，拿到ueditor官网的demo后，首先要改的就是图片上传的请求。一般项目中，请求都会封装成统一的方法，返回Promise或者PromiseLike，因此我们将serverUrl选项改为一个方法  \n`imgUpload: (file:File) =>Promise<{url:string}>;`  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f5238cd06b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n然后我们抛弃它自带的图片上传逻辑，自定义一个控件叫image，沿用simpleupload的图标，点击图标会生成一个input\\['type=\"file\"'\\]，然后模拟点击这个input，进行图片选择。选中后调用serverUrl中配置的方法，得到后台返回的url后执行  \n`editor.execCommand('insertimage',{src:res.url});`\n\n具体代码如下\n\n```\neditorui.image=function(editor) {\n\n    var ui=neweditorui.Button({\n\n    className:\"edui-for-simpleupload\",\n\n    title:\n\n    editor.options.labelMap['simpleupload'] ||\n\n    editor.getLang(\"labelMap.simpleupload\") ||\n\n    \"\",\n\n    theme:editor.options.theme,\n\n    onclick:function() {\n\n    var fileInput=document.createElement('input');\n\n    fileInput.id='ueditor-custom-upload'\n\n    fileInput.type='file'\n\n    fileInput.style.display='none'\n\n    fileInput.click()\n\n    fileInput.addEventListener('change',function(e){\n\n    var uploadFn=editor.getOpt('serverUrl');\n\n    uploadFn(e.target.files[0]).then((res)=>{\n\n    editor.execCommand('insertimage',{src:res.url});\n\n          })\n\n        })\n\n      }\n\n    });\n\neditorui.buttons.image=ui;\n\nreturn ui;\n\n};\n```\n\n然后在ueditor.config.js的toolbars和ueditor.all.js的btnCmds中添加'image'的命令。这样我们就大致完成了图片上传的改造。\n\n自定义其他控件\n-------\n\n自定义控件分两个步骤：1.自定义新的控件ui；2.自定义新的控件命令。我们举两个例子：\n\n### 对图片加边框的控件\n\n首先生成相应的ui，代码如下，其中ui.setDisabled和ui.setChecked是控制控件是否可点和是否已经加了边框。editor.execCommand('imgborder')和editor.queryCommandState('imgborder')、editor.queryCommandValue('imgborder')是自定义的控件命令。  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f523b4dd6a~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n有了ui后还需要添加相应的css，我们找到一张imageborder的图片，然后在ueditor.css中添加样式代码，这样样式的改造就完成了。  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f523cbbe72~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n然后需要自定义image-border的命令：  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f523cf1dc1~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \nexecCommand执行命令，添加border或者取消border，另外两个方法是查询当前是否可以执行命令和是否已经执行了命令。  \n当然别忘了在toolbars和btnCmds中别忘了添加相关的命令  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f54c835ba7~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n至此，这个控件就完成了。\n\n### 添加字间距控件\n\n字间距是一个下拉列表，首先在ueditor.config.js中进行可选项的配置：toolbars中添加控件'letterspace'  \n然后改造ueditor.js,btnCmds中添加'letterspace'。  \n增加letterspace的ui  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f54dbceac6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f54ffc1303~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n增加command  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f5501bac62~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")\n\n最终demo如下  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f574730aee~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")","source":"_posts/ueditor自定义控件和图片请求.md","raw":"---\n title: \"ueditor自定义控件和图片请求\"\n date: 2019-12-31\n tags: [JavaScript]\n categories: \n---\n\n认识ueditor\n---------\n\nueditor时百度出的一款非常强大的富文本编辑器，但是并不能将它理解为一个现成的编辑器。富文本编辑器的原理并不复杂，核心api是document.execCommand，以及Selection和Range操作。对于一些自定义的控件，则可以用原生的dom操作完成。然而正式因为dom操作和状态判断非常复杂，因此ueditor铺设了整个编辑器的底层逻辑。所以，你应该将ueditor理解成一个基础设施。\n\n自定义请求\n-----\n\n如果遇到富文本编辑器需求，拿到ueditor官网的demo后，首先要改的就是图片上传的请求。一般项目中，请求都会封装成统一的方法，返回Promise或者PromiseLike，因此我们将serverUrl选项改为一个方法  \n`imgUpload: (file:File) =>Promise<{url:string}>;`  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f5238cd06b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n然后我们抛弃它自带的图片上传逻辑，自定义一个控件叫image，沿用simpleupload的图标，点击图标会生成一个input\\['type=\"file\"'\\]，然后模拟点击这个input，进行图片选择。选中后调用serverUrl中配置的方法，得到后台返回的url后执行  \n`editor.execCommand('insertimage',{src:res.url});`\n\n具体代码如下\n\n```\neditorui.image=function(editor) {\n\n    var ui=neweditorui.Button({\n\n    className:\"edui-for-simpleupload\",\n\n    title:\n\n    editor.options.labelMap['simpleupload'] ||\n\n    editor.getLang(\"labelMap.simpleupload\") ||\n\n    \"\",\n\n    theme:editor.options.theme,\n\n    onclick:function() {\n\n    var fileInput=document.createElement('input');\n\n    fileInput.id='ueditor-custom-upload'\n\n    fileInput.type='file'\n\n    fileInput.style.display='none'\n\n    fileInput.click()\n\n    fileInput.addEventListener('change',function(e){\n\n    var uploadFn=editor.getOpt('serverUrl');\n\n    uploadFn(e.target.files[0]).then((res)=>{\n\n    editor.execCommand('insertimage',{src:res.url});\n\n          })\n\n        })\n\n      }\n\n    });\n\neditorui.buttons.image=ui;\n\nreturn ui;\n\n};\n```\n\n然后在ueditor.config.js的toolbars和ueditor.all.js的btnCmds中添加'image'的命令。这样我们就大致完成了图片上传的改造。\n\n自定义其他控件\n-------\n\n自定义控件分两个步骤：1.自定义新的控件ui；2.自定义新的控件命令。我们举两个例子：\n\n### 对图片加边框的控件\n\n首先生成相应的ui，代码如下，其中ui.setDisabled和ui.setChecked是控制控件是否可点和是否已经加了边框。editor.execCommand('imgborder')和editor.queryCommandState('imgborder')、editor.queryCommandValue('imgborder')是自定义的控件命令。  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f523b4dd6a~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n有了ui后还需要添加相应的css，我们找到一张imageborder的图片，然后在ueditor.css中添加样式代码，这样样式的改造就完成了。  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f523cbbe72~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n然后需要自定义image-border的命令：  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f523cf1dc1~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \nexecCommand执行命令，添加border或者取消border，另外两个方法是查询当前是否可以执行命令和是否已经执行了命令。  \n当然别忘了在toolbars和btnCmds中别忘了添加相关的命令  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f54c835ba7~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n至此，这个控件就完成了。\n\n### 添加字间距控件\n\n字间距是一个下拉列表，首先在ueditor.config.js中进行可选项的配置：toolbars中添加控件'letterspace'  \n然后改造ueditor.js,btnCmds中添加'letterspace'。  \n增加letterspace的ui  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f54dbceac6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f54ffc1303~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n增加command  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f5501bac62~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")\n\n最终demo如下  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f574730aee~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")","slug":"ueditor自定义控件和图片请求","published":1,"updated":"2024-04-04T15:27:03.796Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhs003uhajf8rqv1sy1","content":"<h2 id=\"认识ueditor\"><a href=\"#认识ueditor\" class=\"headerlink\" title=\"认识ueditor\"></a>认识ueditor</h2><p>ueditor时百度出的一款非常强大的富文本编辑器，但是并不能将它理解为一个现成的编辑器。富文本编辑器的原理并不复杂，核心api是document.execCommand，以及Selection和Range操作。对于一些自定义的控件，则可以用原生的dom操作完成。然而正式因为dom操作和状态判断非常复杂，因此ueditor铺设了整个编辑器的底层逻辑。所以，你应该将ueditor理解成一个基础设施。</p>\n<h2 id=\"自定义请求\"><a href=\"#自定义请求\" class=\"headerlink\" title=\"自定义请求\"></a>自定义请求</h2><p>如果遇到富文本编辑器需求，拿到ueditor官网的demo后，首先要改的就是图片上传的请求。一般项目中，请求都会封装成统一的方法，返回Promise或者PromiseLike，因此我们将serverUrl选项改为一个方法<br><code>imgUpload: (file:File) =&gt;Promise&lt;&#123;url:string&#125;&gt;;</code><br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f5238cd06b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>然后我们抛弃它自带的图片上传逻辑，自定义一个控件叫image，沿用simpleupload的图标，点击图标会生成一个input[‘type&#x3D;”file”‘]，然后模拟点击这个input，进行图片选择。选中后调用serverUrl中配置的方法，得到后台返回的url后执行<br><code>editor.execCommand(&#39;insertimage&#39;,&#123;src:res.url&#125;);</code></p>\n<p>具体代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">editorui.image=function(editor) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var ui=neweditorui.Button(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    className:&quot;edui-for-simpleupload&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    title:</span><br><span class=\"line\"></span><br><span class=\"line\">    editor.options.labelMap[&#x27;simpleupload&#x27;] ||</span><br><span class=\"line\"></span><br><span class=\"line\">    editor.getLang(&quot;labelMap.simpleupload&quot;) ||</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    theme:editor.options.theme,</span><br><span class=\"line\"></span><br><span class=\"line\">    onclick:function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var fileInput=document.createElement(&#x27;input&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">    fileInput.id=&#x27;ueditor-custom-upload&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">    fileInput.type=&#x27;file&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">    fileInput.style.display=&#x27;none&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">    fileInput.click()</span><br><span class=\"line\"></span><br><span class=\"line\">    fileInput.addEventListener(&#x27;change&#x27;,function(e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var uploadFn=editor.getOpt(&#x27;serverUrl&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">    uploadFn(e.target.files[0]).then((res)=&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    editor.execCommand(&#x27;insertimage&#x27;,&#123;src:res.url&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">editorui.buttons.image=ui;</span><br><span class=\"line\"></span><br><span class=\"line\">return ui;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然后在ueditor.config.js的toolbars和ueditor.all.js的btnCmds中添加’image’的命令。这样我们就大致完成了图片上传的改造。</p>\n<h2 id=\"自定义其他控件\"><a href=\"#自定义其他控件\" class=\"headerlink\" title=\"自定义其他控件\"></a>自定义其他控件</h2><p>自定义控件分两个步骤：1.自定义新的控件ui；2.自定义新的控件命令。我们举两个例子：</p>\n<h3 id=\"对图片加边框的控件\"><a href=\"#对图片加边框的控件\" class=\"headerlink\" title=\"对图片加边框的控件\"></a>对图片加边框的控件</h3><p>首先生成相应的ui，代码如下，其中ui.setDisabled和ui.setChecked是控制控件是否可点和是否已经加了边框。editor.execCommand(‘imgborder’)和editor.queryCommandState(‘imgborder’)、editor.queryCommandValue(‘imgborder’)是自定义的控件命令。<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f523b4dd6a~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>有了ui后还需要添加相应的css，我们找到一张imageborder的图片，然后在ueditor.css中添加样式代码，这样样式的改造就完成了。<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f523cbbe72~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>然后需要自定义image-border的命令：<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f523cf1dc1~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>execCommand执行命令，添加border或者取消border，另外两个方法是查询当前是否可以执行命令和是否已经执行了命令。<br>当然别忘了在toolbars和btnCmds中别忘了添加相关的命令<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f54c835ba7~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>至此，这个控件就完成了。</p>\n<h3 id=\"添加字间距控件\"><a href=\"#添加字间距控件\" class=\"headerlink\" title=\"添加字间距控件\"></a>添加字间距控件</h3><p>字间距是一个下拉列表，首先在ueditor.config.js中进行可选项的配置：toolbars中添加控件’letterspace’<br>然后改造ueditor.js,btnCmds中添加’letterspace’。<br>增加letterspace的ui<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f54dbceac6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f54ffc1303~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>增加command<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f5501bac62~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n<p>最终demo如下<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f574730aee~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n","length":2135,"excerpt":"","more":"<h2 id=\"认识ueditor\"><a href=\"#认识ueditor\" class=\"headerlink\" title=\"认识ueditor\"></a>认识ueditor</h2><p>ueditor时百度出的一款非常强大的富文本编辑器，但是并不能将它理解为一个现成的编辑器。富文本编辑器的原理并不复杂，核心api是document.execCommand，以及Selection和Range操作。对于一些自定义的控件，则可以用原生的dom操作完成。然而正式因为dom操作和状态判断非常复杂，因此ueditor铺设了整个编辑器的底层逻辑。所以，你应该将ueditor理解成一个基础设施。</p>\n<h2 id=\"自定义请求\"><a href=\"#自定义请求\" class=\"headerlink\" title=\"自定义请求\"></a>自定义请求</h2><p>如果遇到富文本编辑器需求，拿到ueditor官网的demo后，首先要改的就是图片上传的请求。一般项目中，请求都会封装成统一的方法，返回Promise或者PromiseLike，因此我们将serverUrl选项改为一个方法<br><code>imgUpload: (file:File) =&gt;Promise&lt;&#123;url:string&#125;&gt;;</code><br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f5238cd06b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>然后我们抛弃它自带的图片上传逻辑，自定义一个控件叫image，沿用simpleupload的图标，点击图标会生成一个input[‘type&#x3D;”file”‘]，然后模拟点击这个input，进行图片选择。选中后调用serverUrl中配置的方法，得到后台返回的url后执行<br><code>editor.execCommand(&#39;insertimage&#39;,&#123;src:res.url&#125;);</code></p>\n<p>具体代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">editorui.image=function(editor) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var ui=neweditorui.Button(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    className:&quot;edui-for-simpleupload&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    title:</span><br><span class=\"line\"></span><br><span class=\"line\">    editor.options.labelMap[&#x27;simpleupload&#x27;] ||</span><br><span class=\"line\"></span><br><span class=\"line\">    editor.getLang(&quot;labelMap.simpleupload&quot;) ||</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    theme:editor.options.theme,</span><br><span class=\"line\"></span><br><span class=\"line\">    onclick:function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var fileInput=document.createElement(&#x27;input&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">    fileInput.id=&#x27;ueditor-custom-upload&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">    fileInput.type=&#x27;file&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">    fileInput.style.display=&#x27;none&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">    fileInput.click()</span><br><span class=\"line\"></span><br><span class=\"line\">    fileInput.addEventListener(&#x27;change&#x27;,function(e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var uploadFn=editor.getOpt(&#x27;serverUrl&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">    uploadFn(e.target.files[0]).then((res)=&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    editor.execCommand(&#x27;insertimage&#x27;,&#123;src:res.url&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">editorui.buttons.image=ui;</span><br><span class=\"line\"></span><br><span class=\"line\">return ui;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然后在ueditor.config.js的toolbars和ueditor.all.js的btnCmds中添加’image’的命令。这样我们就大致完成了图片上传的改造。</p>\n<h2 id=\"自定义其他控件\"><a href=\"#自定义其他控件\" class=\"headerlink\" title=\"自定义其他控件\"></a>自定义其他控件</h2><p>自定义控件分两个步骤：1.自定义新的控件ui；2.自定义新的控件命令。我们举两个例子：</p>\n<h3 id=\"对图片加边框的控件\"><a href=\"#对图片加边框的控件\" class=\"headerlink\" title=\"对图片加边框的控件\"></a>对图片加边框的控件</h3><p>首先生成相应的ui，代码如下，其中ui.setDisabled和ui.setChecked是控制控件是否可点和是否已经加了边框。editor.execCommand(‘imgborder’)和editor.queryCommandState(‘imgborder’)、editor.queryCommandValue(‘imgborder’)是自定义的控件命令。<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f523b4dd6a~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>有了ui后还需要添加相应的css，我们找到一张imageborder的图片，然后在ueditor.css中添加样式代码，这样样式的改造就完成了。<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f523cbbe72~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>然后需要自定义image-border的命令：<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f523cf1dc1~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>execCommand执行命令，添加border或者取消border，另外两个方法是查询当前是否可以执行命令和是否已经执行了命令。<br>当然别忘了在toolbars和btnCmds中别忘了添加相关的命令<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f54c835ba7~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>至此，这个控件就完成了。</p>\n<h3 id=\"添加字间距控件\"><a href=\"#添加字间距控件\" class=\"headerlink\" title=\"添加字间距控件\"></a>添加字间距控件</h3><p>字间距是一个下拉列表，首先在ueditor.config.js中进行可选项的配置：toolbars中添加控件’letterspace’<br>然后改造ueditor.js,btnCmds中添加’letterspace’。<br>增加letterspace的ui<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f54dbceac6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f54ffc1303~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>增加command<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f5501bac62~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n<p>最终demo如下<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5f574730aee~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n"},{"title":"useContext和useReducer真的可以代替Redux吗","date":"2022-01-25T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第9天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n使用hooks代替redux？\n---------------\n\n在react hooks刚出来出来的时候，有很多人都觉得完全可以用hooks代替调繁琐的redux。比如下面这段代码 ：\n\n```jsx\n// 创建context\nconst ThemeContext = React.createContext(null);\n// 初始state\nconst initState = {\n  primary: 'blue',\n  secondary: 'gray',\n  fontSize: '20px',\n  bg: 'aliceblue',\n};\n// 创建reducer\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE_COLOR':\n      return { ...state, ...action.payload };\n    case 'CHANGE_BG':\n      return { ...state, bg: action.payload };\n    case 'CHANGE_SIZE':\n      return { ...state, fontSize: '30px' };\n    default:\n      return state;\n  }\n};\n\nfunction App() {\n  const [theme, dispatch] = useReducer(reducer, initState);\n  const changeBg = useCallback((bg) => {\n    dispatch({ type: 'CHANGE_BG', payload: bg });\n  }, []);\n  const changeColor = useCallback(() => {\n    dispatch({\n      type: 'CHANGE_COLOR',\n      payload: { primary: 'darkgreen', secondary: 'burlywood' },\n    });\n  }, []);\n  const changeSize = useCallback(() => {\n    dispatch({ type: 'CHANGE_SIZE' });\n  }, []);\n  return (\n    <ThemeContext.Provider\n      value={{ ...theme, changeBg, changeColor, changeSize }}\n    >\n      <Container></Container>\n    </ThemeContext.Provider>\n  );\n}\nfunction Container() {\n  const { bg, changeBg, changeColor, changeSize } = useContext(ThemeContext);\n  console.log('render Container');\n  return (\n    <div style={{ padding: 20, background: bg }}>\n      <div>\n        <button\n          onClick={() => {\n            changeBg('gainsboro');\n          }}\n        >\n          change bg\n        </button>\n        <button onClick={changeSize}>change size</button>\n        <button onClick={changeColor}>change color</button>\n      </div>\n      <ParagraphMo\n        text={'Laugh and the world laughs with you, weep and you weep alone.'}\n      ></ParagraphMo>\n      <Author author={'someone'}></Author>\n    </div>\n  );\n}\nfunction Paragraph({ text }) {\n  console.log('render Paragraph');\n  const theme = useContext(ThemeContext);\n\n  return (\n    <div>\n      <p style={{ color: theme.primary, fontSize: theme.fontSize }}>{text}</p>\n    </div>\n  );\n}\nconst ParagraphMo = React.memo(Paragraph);\nfunction Author({ author }) {\n  console.log('render Author');\n\n  return (\n    <ThemeContext.Consumer>\n      {(theme) => {\n        return (\n          <div style={{ textAlign: 'right', color: theme.secondary }}>\n            —— {author}\n          </div>\n        );\n      }}\n    </ThemeContext.Consumer>\n  );\n}\n```\n\n点击按钮会分别改变对应的全局样式,效果如下：\n\n![image.png](../imgs/89ff069b244a4e5d8073f425cab0a975.png)\n\nContext+state+dispatch+reducer，看上去Redux的几个要素都有了，并且也实现了全局的状态管理。\n\n但是当我们点击_change bg_按钮的时候，三个组件都触发了渲染：\n\n![image.png](../imgs/751b1d25cf79455ba6d7e3edcffeda52.png)\n\n**这就是Context的问题所在:不必要的渲染**。即使没有依赖改变的值，也会被迫re-render。\n\n对Context的误解\n-----------\n\n关于Context，有几个常见的误解：\n\n1.  Context是用来做全局状态管理的\n\n事实上Context并不是解决全局状态管理，而是化解props传递的繁琐\n\n> Context provides a way to pass data through the component tree without having to pass props down manually at every level.\n\n2.  修改Context会触发组件的更新\n\nreact对context value并没有监听变化，直接修改context value是无法触发更新的，真正触发组件更新的是setState。\n\n3.  当Context发生变化时，只有依赖到这些变化的属性的组件才会更新\n\n只要组件依赖了Context，不管变化的是那个局部属性，组件都会被强迫更新。即使加上了`memo`也没用用,因为`memo`比较的是props。\n\n如何基于Context设计全局状态管理\n-------------------\n\n如果仅基于hooks的话，可以参考这篇[文章](https://blog.axlight.com%2Fposts%2Ffour-patterns-for-global-state-with-react-hooks-context-or-redux%2F \"https://blog.axlight.com/posts/four-patterns-for-global-state-with-react-hooks-context-or-redux/\")[blog.axlight.com/posts/four-…](https://blog.axlight.com%2Fposts%2Ffour-patterns-for-global-state-with-react-hooks-context-or-redux%2F \"https://blog.axlight.com/posts/four-patterns-for-global-state-with-react-hooks-context-or-redux/\").\n\n不过react-redux已经很好地回答了这个问题，其中的一个关键就是Provider中创建的subscription。\n\n最后总结一下：\n\n> You Might Not Need Redux (But You Can’t Replace It With Hooks)","source":"_posts/useContext和useReducer真的可以代替Redux吗.md","raw":"---\n title: \"useContext和useReducer真的可以代替Redux吗\"\n date: 2022-01-26\n tags: [React.js,前端]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第9天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n使用hooks代替redux？\n---------------\n\n在react hooks刚出来出来的时候，有很多人都觉得完全可以用hooks代替调繁琐的redux。比如下面这段代码 ：\n\n```jsx\n// 创建context\nconst ThemeContext = React.createContext(null);\n// 初始state\nconst initState = {\n  primary: 'blue',\n  secondary: 'gray',\n  fontSize: '20px',\n  bg: 'aliceblue',\n};\n// 创建reducer\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE_COLOR':\n      return { ...state, ...action.payload };\n    case 'CHANGE_BG':\n      return { ...state, bg: action.payload };\n    case 'CHANGE_SIZE':\n      return { ...state, fontSize: '30px' };\n    default:\n      return state;\n  }\n};\n\nfunction App() {\n  const [theme, dispatch] = useReducer(reducer, initState);\n  const changeBg = useCallback((bg) => {\n    dispatch({ type: 'CHANGE_BG', payload: bg });\n  }, []);\n  const changeColor = useCallback(() => {\n    dispatch({\n      type: 'CHANGE_COLOR',\n      payload: { primary: 'darkgreen', secondary: 'burlywood' },\n    });\n  }, []);\n  const changeSize = useCallback(() => {\n    dispatch({ type: 'CHANGE_SIZE' });\n  }, []);\n  return (\n    <ThemeContext.Provider\n      value={{ ...theme, changeBg, changeColor, changeSize }}\n    >\n      <Container></Container>\n    </ThemeContext.Provider>\n  );\n}\nfunction Container() {\n  const { bg, changeBg, changeColor, changeSize } = useContext(ThemeContext);\n  console.log('render Container');\n  return (\n    <div style={{ padding: 20, background: bg }}>\n      <div>\n        <button\n          onClick={() => {\n            changeBg('gainsboro');\n          }}\n        >\n          change bg\n        </button>\n        <button onClick={changeSize}>change size</button>\n        <button onClick={changeColor}>change color</button>\n      </div>\n      <ParagraphMo\n        text={'Laugh and the world laughs with you, weep and you weep alone.'}\n      ></ParagraphMo>\n      <Author author={'someone'}></Author>\n    </div>\n  );\n}\nfunction Paragraph({ text }) {\n  console.log('render Paragraph');\n  const theme = useContext(ThemeContext);\n\n  return (\n    <div>\n      <p style={{ color: theme.primary, fontSize: theme.fontSize }}>{text}</p>\n    </div>\n  );\n}\nconst ParagraphMo = React.memo(Paragraph);\nfunction Author({ author }) {\n  console.log('render Author');\n\n  return (\n    <ThemeContext.Consumer>\n      {(theme) => {\n        return (\n          <div style={{ textAlign: 'right', color: theme.secondary }}>\n            —— {author}\n          </div>\n        );\n      }}\n    </ThemeContext.Consumer>\n  );\n}\n```\n\n点击按钮会分别改变对应的全局样式,效果如下：\n\n![image.png](../imgs/89ff069b244a4e5d8073f425cab0a975.png)\n\nContext+state+dispatch+reducer，看上去Redux的几个要素都有了，并且也实现了全局的状态管理。\n\n但是当我们点击_change bg_按钮的时候，三个组件都触发了渲染：\n\n![image.png](../imgs/751b1d25cf79455ba6d7e3edcffeda52.png)\n\n**这就是Context的问题所在:不必要的渲染**。即使没有依赖改变的值，也会被迫re-render。\n\n对Context的误解\n-----------\n\n关于Context，有几个常见的误解：\n\n1.  Context是用来做全局状态管理的\n\n事实上Context并不是解决全局状态管理，而是化解props传递的繁琐\n\n> Context provides a way to pass data through the component tree without having to pass props down manually at every level.\n\n2.  修改Context会触发组件的更新\n\nreact对context value并没有监听变化，直接修改context value是无法触发更新的，真正触发组件更新的是setState。\n\n3.  当Context发生变化时，只有依赖到这些变化的属性的组件才会更新\n\n只要组件依赖了Context，不管变化的是那个局部属性，组件都会被强迫更新。即使加上了`memo`也没用用,因为`memo`比较的是props。\n\n如何基于Context设计全局状态管理\n-------------------\n\n如果仅基于hooks的话，可以参考这篇[文章](https://blog.axlight.com%2Fposts%2Ffour-patterns-for-global-state-with-react-hooks-context-or-redux%2F \"https://blog.axlight.com/posts/four-patterns-for-global-state-with-react-hooks-context-or-redux/\")[blog.axlight.com/posts/four-…](https://blog.axlight.com%2Fposts%2Ffour-patterns-for-global-state-with-react-hooks-context-or-redux%2F \"https://blog.axlight.com/posts/four-patterns-for-global-state-with-react-hooks-context-or-redux/\").\n\n不过react-redux已经很好地回答了这个问题，其中的一个关键就是Provider中创建的subscription。\n\n最后总结一下：\n\n> You Might Not Need Redux (But You Can’t Replace It With Hooks)","slug":"useContext和useReducer真的可以代替Redux吗","published":1,"updated":"2024-04-04T15:27:03.840Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lht003xhajf3w1o2szv","content":"<p>「这是我参与2022首次更文挑战的第9天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"使用hooks代替redux？\"><a href=\"#使用hooks代替redux？\" class=\"headerlink\" title=\"使用hooks代替redux？\"></a>使用hooks代替redux？</h2><p>在react hooks刚出来出来的时候，有很多人都觉得完全可以用hooks代替调繁琐的redux。比如下面这段代码 ：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ThemeContext</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">createContext</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"comment\">// 初始state</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> initState = &#123;</span><br><span class=\"line\">  <span class=\"attr\">primary</span>: <span class=\"string\">&#x27;blue&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">secondary</span>: <span class=\"string\">&#x27;gray&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">fontSize</span>: <span class=\"string\">&#x27;20px&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">bg</span>: <span class=\"string\">&#x27;aliceblue&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 创建reducer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reducer</span> = (<span class=\"params\">state, action</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;CHANGE_COLOR&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, ...action.<span class=\"property\">payload</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;CHANGE_BG&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">bg</span>: action.<span class=\"property\">payload</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;CHANGE_SIZE&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">fontSize</span>: <span class=\"string\">&#x27;30px&#x27;</span> &#125;;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [theme, dispatch] = <span class=\"title function_\">useReducer</span>(reducer, initState);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> changeBg = <span class=\"title function_\">useCallback</span>(<span class=\"function\">(<span class=\"params\">bg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CHANGE_BG&#x27;</span>, <span class=\"attr\">payload</span>: bg &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> changeColor = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CHANGE_COLOR&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">payload</span>: &#123; <span class=\"attr\">primary</span>: <span class=\"string\">&#x27;darkgreen&#x27;</span>, <span class=\"attr\">secondary</span>: <span class=\"string\">&#x27;burlywood&#x27;</span> &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> changeSize = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CHANGE_SIZE&#x27;</span> &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Provider</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">...theme</span>, <span class=\"attr\">changeBg</span>, <span class=\"attr\">changeColor</span>, <span class=\"attr\">changeSize</span> &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Container</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Container</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Container</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; bg, changeBg, changeColor, changeSize &#125; = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">ThemeContext</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;render Container&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">padding:</span> <span class=\"attr\">20</span>, <span class=\"attr\">background:</span> <span class=\"attr\">bg</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            changeBg(&#x27;gainsboro&#x27;);</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          change bg</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;changeSize&#125;</span>&gt;</span>change size<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;changeColor&#125;</span>&gt;</span>change color<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ParagraphMo</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">text</span>=<span class=\"string\">&#123;</span>&#x27;<span class=\"attr\">Laugh</span> <span class=\"attr\">and</span> <span class=\"attr\">the</span> <span class=\"attr\">world</span> <span class=\"attr\">laughs</span> <span class=\"attr\">with</span> <span class=\"attr\">you</span>, <span class=\"attr\">weep</span> <span class=\"attr\">and</span> <span class=\"attr\">you</span> <span class=\"attr\">weep</span> <span class=\"attr\">alone.</span>&#x27;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ParagraphMo</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Author</span> <span class=\"attr\">author</span>=<span class=\"string\">&#123;</span>&#x27;<span class=\"attr\">someone</span>&#x27;&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Author</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Paragraph</span>(<span class=\"params\">&#123; text &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;render Paragraph&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> theme = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">ThemeContext</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> <span class=\"attr\">theme.primary</span>, <span class=\"attr\">fontSize:</span> <span class=\"attr\">theme.fontSize</span> &#125;&#125;&gt;</span>&#123;text&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ParagraphMo</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"title class_\">Paragraph</span>);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Author</span>(<span class=\"params\">&#123; author &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;render Author&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;(theme) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        return (</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">textAlign:</span> &#x27;<span class=\"attr\">right</span>&#x27;, <span class=\"attr\">color:</span> <span class=\"attr\">theme.secondary</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            —— &#123;author&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        );</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击按钮会分别改变对应的全局样式,效果如下：</p>\n<p><img src=\"/../imgs/89ff069b244a4e5d8073f425cab0a975.png\" alt=\"image.png\"></p>\n<p>Context+state+dispatch+reducer，看上去Redux的几个要素都有了，并且也实现了全局的状态管理。</p>\n<p>但是当我们点击_change bg_按钮的时候，三个组件都触发了渲染：</p>\n<p><img src=\"/../imgs/751b1d25cf79455ba6d7e3edcffeda52.png\" alt=\"image.png\"></p>\n<p><strong>这就是Context的问题所在:不必要的渲染</strong>。即使没有依赖改变的值，也会被迫re-render。</p>\n<h2 id=\"对Context的误解\"><a href=\"#对Context的误解\" class=\"headerlink\" title=\"对Context的误解\"></a>对Context的误解</h2><p>关于Context，有几个常见的误解：</p>\n<ol>\n<li>Context是用来做全局状态管理的</li>\n</ol>\n<p>事实上Context并不是解决全局状态管理，而是化解props传递的繁琐</p>\n<blockquote>\n<p>Context provides a way to pass data through the component tree without having to pass props down manually at every level.</p>\n</blockquote>\n<ol start=\"2\">\n<li>修改Context会触发组件的更新</li>\n</ol>\n<p>react对context value并没有监听变化，直接修改context value是无法触发更新的，真正触发组件更新的是setState。</p>\n<ol start=\"3\">\n<li>当Context发生变化时，只有依赖到这些变化的属性的组件才会更新</li>\n</ol>\n<p>只要组件依赖了Context，不管变化的是那个局部属性，组件都会被强迫更新。即使加上了<code>memo</code>也没用用,因为<code>memo</code>比较的是props。</p>\n<h2 id=\"如何基于Context设计全局状态管理\"><a href=\"#如何基于Context设计全局状态管理\" class=\"headerlink\" title=\"如何基于Context设计全局状态管理\"></a>如何基于Context设计全局状态管理</h2><p>如果仅基于hooks的话，可以参考这篇<a href=\"https://blog.axlight.com%2Fposts%2Ffour-patterns-for-global-state-with-react-hooks-context-or-redux%2F\" title=\"https://blog.axlight.com/posts/four-patterns-for-global-state-with-react-hooks-context-or-redux/\">文章</a><a href=\"https://blog.axlight.com%2Fposts%2Ffour-patterns-for-global-state-with-react-hooks-context-or-redux%2F\" title=\"https://blog.axlight.com/posts/four-patterns-for-global-state-with-react-hooks-context-or-redux/\">blog.axlight.com&#x2F;posts&#x2F;four-…</a>.</p>\n<p>不过react-redux已经很好地回答了这个问题，其中的一个关键就是Provider中创建的subscription。</p>\n<p>最后总结一下：</p>\n<blockquote>\n<p>You Might Not Need Redux (But You Can’t Replace It With Hooks)</p>\n</blockquote>\n","length":3522,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第9天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"使用hooks代替redux？\"><a href=\"#使用hooks代替redux？\" class=\"headerlink\" title=\"使用hooks代替redux？\"></a>使用hooks代替redux？</h2><p>在react hooks刚出来出来的时候，有很多人都觉得完全可以用hooks代替调繁琐的redux。比如下面这段代码 ：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ThemeContext</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">createContext</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"comment\">// 初始state</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> initState = &#123;</span><br><span class=\"line\">  <span class=\"attr\">primary</span>: <span class=\"string\">&#x27;blue&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">secondary</span>: <span class=\"string\">&#x27;gray&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">fontSize</span>: <span class=\"string\">&#x27;20px&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">bg</span>: <span class=\"string\">&#x27;aliceblue&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 创建reducer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reducer</span> = (<span class=\"params\">state, action</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;CHANGE_COLOR&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, ...action.<span class=\"property\">payload</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;CHANGE_BG&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">bg</span>: action.<span class=\"property\">payload</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;CHANGE_SIZE&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">fontSize</span>: <span class=\"string\">&#x27;30px&#x27;</span> &#125;;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [theme, dispatch] = <span class=\"title function_\">useReducer</span>(reducer, initState);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> changeBg = <span class=\"title function_\">useCallback</span>(<span class=\"function\">(<span class=\"params\">bg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CHANGE_BG&#x27;</span>, <span class=\"attr\">payload</span>: bg &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> changeColor = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CHANGE_COLOR&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">payload</span>: &#123; <span class=\"attr\">primary</span>: <span class=\"string\">&#x27;darkgreen&#x27;</span>, <span class=\"attr\">secondary</span>: <span class=\"string\">&#x27;burlywood&#x27;</span> &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> changeSize = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CHANGE_SIZE&#x27;</span> &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Provider</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">...theme</span>, <span class=\"attr\">changeBg</span>, <span class=\"attr\">changeColor</span>, <span class=\"attr\">changeSize</span> &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Container</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Container</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Container</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; bg, changeBg, changeColor, changeSize &#125; = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">ThemeContext</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;render Container&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">padding:</span> <span class=\"attr\">20</span>, <span class=\"attr\">background:</span> <span class=\"attr\">bg</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            changeBg(&#x27;gainsboro&#x27;);</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          change bg</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;changeSize&#125;</span>&gt;</span>change size<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;changeColor&#125;</span>&gt;</span>change color<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ParagraphMo</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">text</span>=<span class=\"string\">&#123;</span>&#x27;<span class=\"attr\">Laugh</span> <span class=\"attr\">and</span> <span class=\"attr\">the</span> <span class=\"attr\">world</span> <span class=\"attr\">laughs</span> <span class=\"attr\">with</span> <span class=\"attr\">you</span>, <span class=\"attr\">weep</span> <span class=\"attr\">and</span> <span class=\"attr\">you</span> <span class=\"attr\">weep</span> <span class=\"attr\">alone.</span>&#x27;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ParagraphMo</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Author</span> <span class=\"attr\">author</span>=<span class=\"string\">&#123;</span>&#x27;<span class=\"attr\">someone</span>&#x27;&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Author</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Paragraph</span>(<span class=\"params\">&#123; text &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;render Paragraph&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> theme = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">ThemeContext</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> <span class=\"attr\">theme.primary</span>, <span class=\"attr\">fontSize:</span> <span class=\"attr\">theme.fontSize</span> &#125;&#125;&gt;</span>&#123;text&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ParagraphMo</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"title class_\">Paragraph</span>);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Author</span>(<span class=\"params\">&#123; author &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;render Author&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;(theme) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        return (</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">textAlign:</span> &#x27;<span class=\"attr\">right</span>&#x27;, <span class=\"attr\">color:</span> <span class=\"attr\">theme.secondary</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            —— &#123;author&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        );</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击按钮会分别改变对应的全局样式,效果如下：</p>\n<p><img src=\"/../imgs/89ff069b244a4e5d8073f425cab0a975.png\" alt=\"image.png\"></p>\n<p>Context+state+dispatch+reducer，看上去Redux的几个要素都有了，并且也实现了全局的状态管理。</p>\n<p>但是当我们点击_change bg_按钮的时候，三个组件都触发了渲染：</p>\n<p><img src=\"/../imgs/751b1d25cf79455ba6d7e3edcffeda52.png\" alt=\"image.png\"></p>\n<p><strong>这就是Context的问题所在:不必要的渲染</strong>。即使没有依赖改变的值，也会被迫re-render。</p>\n<h2 id=\"对Context的误解\"><a href=\"#对Context的误解\" class=\"headerlink\" title=\"对Context的误解\"></a>对Context的误解</h2><p>关于Context，有几个常见的误解：</p>\n<ol>\n<li>Context是用来做全局状态管理的</li>\n</ol>\n<p>事实上Context并不是解决全局状态管理，而是化解props传递的繁琐</p>\n<blockquote>\n<p>Context provides a way to pass data through the component tree without having to pass props down manually at every level.</p>\n</blockquote>\n<ol start=\"2\">\n<li>修改Context会触发组件的更新</li>\n</ol>\n<p>react对context value并没有监听变化，直接修改context value是无法触发更新的，真正触发组件更新的是setState。</p>\n<ol start=\"3\">\n<li>当Context发生变化时，只有依赖到这些变化的属性的组件才会更新</li>\n</ol>\n<p>只要组件依赖了Context，不管变化的是那个局部属性，组件都会被强迫更新。即使加上了<code>memo</code>也没用用,因为<code>memo</code>比较的是props。</p>\n<h2 id=\"如何基于Context设计全局状态管理\"><a href=\"#如何基于Context设计全局状态管理\" class=\"headerlink\" title=\"如何基于Context设计全局状态管理\"></a>如何基于Context设计全局状态管理</h2><p>如果仅基于hooks的话，可以参考这篇<a href=\"https://blog.axlight.com%2Fposts%2Ffour-patterns-for-global-state-with-react-hooks-context-or-redux%2F\" title=\"https://blog.axlight.com/posts/four-patterns-for-global-state-with-react-hooks-context-or-redux/\">文章</a><a href=\"https://blog.axlight.com%2Fposts%2Ffour-patterns-for-global-state-with-react-hooks-context-or-redux%2F\" title=\"https://blog.axlight.com/posts/four-patterns-for-global-state-with-react-hooks-context-or-redux/\">blog.axlight.com&#x2F;posts&#x2F;four-…</a>.</p>\n<p>不过react-redux已经很好地回答了这个问题，其中的一个关键就是Provider中创建的subscription。</p>\n<p>最后总结一下：</p>\n<blockquote>\n<p>You Might Not Need Redux (But You Can’t Replace It With Hooks)</p>\n</blockquote>\n"},{"title":"webpack5 升级踩坑","date":"2021-05-07T16:00:00.000Z","_content":"\n1.  安装webpack@5\n    \n    *   `yarn add webpack@^5.36.2 webpack-cli@^4.6.0`\n2.  解决安装过程中提示的版本不兼容warning\n    \n    ![image.png](../imgs/f89dd471a85f4238949f7c0850cf121f.png)\n    \n3.  处理过时的loader、plugin和配置\n    \n    *   移除cache-loader\n    *   移除friendly-errors-webpack-plugin\n    *   optimize-css-assets-webpack-plugin 替换为css-minimizer-webpack-plugin\n    *   TerserPlugin去掉了sourcmap和cache\n    *   删除 new webpack.optimize.ModuleConcatenationPlugin()\n    *   删除eslint-loader,使用`ESLintPlugin`\n    *   废弃了 raw-loader，url-loader 和 file-loader,新配置参考如下\n        \n        ```css\n        {\n        \t\ttest: /\\.(png|jpe?g|gif|svg|eot|woff|woff2|ttf)(\\?.*)?$/,\n        \t\texclude: /(antd)/,\n        \t\ttype: 'asset',\n        \t\tparser: {\n        \t\t\tdataUrlCondition: {\n        \t\t\t\tmaxSize: 10 * 1024 // 10kb\n        \t\t\t}\n        \t\t},\n        \t\tgenerator: {\n        \t\t\tfilename: `${config.ChunkOutputDirname}assets/img/[name].[hash:7].[ext]` //'static/[hash][ext][query]'\n        \t\t}\n        \n        \t}\n        ```\n        \n4.  根据文档挨个检查处理\n    \n    ![image.png](../imgs/2a9e90766352487e9445f0db4706ff0c.png)\n    \n5.  常见的报错\n    \n    *   dev server 启动报错 ![image.png](../imgs/e01b6f56c7ee4723811457dc17ac563c.png) 解决： 通过`webpack serve`启动dev server ![image.png](../imgs/3dd4d8486dbf41c5bb421fec5a1a3b39.png)\n        \n    *   plugin引用错误\n        \n    \n    ![image.png](../imgs/3e77c54098c845749ec0c60ee14eeb74.png) 解决： 部分plugin写法变更 `const {WebpackManifestPlugin} = require('webpack-manifest-plugin');`\n    \n    *   打包后文件运行报错Uncaught TypeError: Cannot read property 'dispose' of undefined 解决：dev包和本地同时启用了缓存，并缓存保存在同一个目录时会出现混乱，需要将不同环境的缓存区分（生产环境禁止使用缓存）\n        \n        ![image.png](../imgs/914e69f427bc412a90384306391d10bf.png)\n        \n    *   webpack 5 运行于 Node.js v10.13.0+ 的版本，如果出现打包错误，可以检查版本\n        \n    *   如果配置了splitchunk，HtmlWebpackPlugin的chunks和chunksSortMode需要注意顺序，最好让它自己决定chunks和sort","source":"_posts/webpack5 升级踩坑.md","raw":"---\n title: \"webpack5 升级踩坑\"\n date: 2021-05-08\n tags: [Webpack]\n categories: [前端笔记]\n---\n\n1.  安装webpack@5\n    \n    *   `yarn add webpack@^5.36.2 webpack-cli@^4.6.0`\n2.  解决安装过程中提示的版本不兼容warning\n    \n    ![image.png](../imgs/f89dd471a85f4238949f7c0850cf121f.png)\n    \n3.  处理过时的loader、plugin和配置\n    \n    *   移除cache-loader\n    *   移除friendly-errors-webpack-plugin\n    *   optimize-css-assets-webpack-plugin 替换为css-minimizer-webpack-plugin\n    *   TerserPlugin去掉了sourcmap和cache\n    *   删除 new webpack.optimize.ModuleConcatenationPlugin()\n    *   删除eslint-loader,使用`ESLintPlugin`\n    *   废弃了 raw-loader，url-loader 和 file-loader,新配置参考如下\n        \n        ```css\n        {\n        \t\ttest: /\\.(png|jpe?g|gif|svg|eot|woff|woff2|ttf)(\\?.*)?$/,\n        \t\texclude: /(antd)/,\n        \t\ttype: 'asset',\n        \t\tparser: {\n        \t\t\tdataUrlCondition: {\n        \t\t\t\tmaxSize: 10 * 1024 // 10kb\n        \t\t\t}\n        \t\t},\n        \t\tgenerator: {\n        \t\t\tfilename: `${config.ChunkOutputDirname}assets/img/[name].[hash:7].[ext]` //'static/[hash][ext][query]'\n        \t\t}\n        \n        \t}\n        ```\n        \n4.  根据文档挨个检查处理\n    \n    ![image.png](../imgs/2a9e90766352487e9445f0db4706ff0c.png)\n    \n5.  常见的报错\n    \n    *   dev server 启动报错 ![image.png](../imgs/e01b6f56c7ee4723811457dc17ac563c.png) 解决： 通过`webpack serve`启动dev server ![image.png](../imgs/3dd4d8486dbf41c5bb421fec5a1a3b39.png)\n        \n    *   plugin引用错误\n        \n    \n    ![image.png](../imgs/3e77c54098c845749ec0c60ee14eeb74.png) 解决： 部分plugin写法变更 `const {WebpackManifestPlugin} = require('webpack-manifest-plugin');`\n    \n    *   打包后文件运行报错Uncaught TypeError: Cannot read property 'dispose' of undefined 解决：dev包和本地同时启用了缓存，并缓存保存在同一个目录时会出现混乱，需要将不同环境的缓存区分（生产环境禁止使用缓存）\n        \n        ![image.png](../imgs/914e69f427bc412a90384306391d10bf.png)\n        \n    *   webpack 5 运行于 Node.js v10.13.0+ 的版本，如果出现打包错误，可以检查版本\n        \n    *   如果配置了splitchunk，HtmlWebpackPlugin的chunks和chunksSortMode需要注意顺序，最好让它自己决定chunks和sort","slug":"webpack5 升级踩坑","published":1,"updated":"2024-04-04T15:27:03.857Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lht0041hajf3p8ie73g","content":"<ol>\n<li><p>安装webpack@5</p>\n<ul>\n<li><code>yarn add webpack@^5.36.2 webpack-cli@^4.6.0</code></li>\n</ul>\n</li>\n<li><p>解决安装过程中提示的版本不兼容warning</p>\n<p><img src=\"/../imgs/f89dd471a85f4238949f7c0850cf121f.png\" alt=\"image.png\"></p>\n</li>\n<li><p>处理过时的loader、plugin和配置</p>\n<ul>\n<li><p>移除cache-loader</p>\n</li>\n<li><p>移除friendly-errors-webpack-plugin</p>\n</li>\n<li><p>optimize-css-assets-webpack-plugin 替换为css-minimizer-webpack-plugin</p>\n</li>\n<li><p>TerserPlugin去掉了sourcmap和cache</p>\n</li>\n<li><p>删除 new webpack.optimize.ModuleConcatenationPlugin()</p>\n</li>\n<li><p>删除eslint-loader,使用<code>ESLintPlugin</code></p>\n</li>\n<li><p>废弃了 raw-loader，url-loader 和 file-loader,新配置参考如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t\ttest: /\\.(png|jpe?g|gif|svg|eot|woff|woff2|ttf)(\\?.*)?$/,</span><br><span class=\"line\">\t\texclude: /(antd)/,</span><br><span class=\"line\">\t\ttype: <span class=\"string\">&#x27;asset&#x27;</span>,</span><br><span class=\"line\">\t\tparser: &#123;</span><br><span class=\"line\">\t\t\tdataUrlCondition: &#123;</span><br><span class=\"line\">\t\t\t\tmaxSize: <span class=\"number\">10</span> * <span class=\"number\">1024</span> // <span class=\"number\">10</span>kb</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tgenerator: &#123;</span><br><span class=\"line\">\t\t\tfilename: `$&#123;config<span class=\"selector-class\">.ChunkOutputDirname</span>&#125;assets/<span class=\"selector-tag\">img</span>/<span class=\"selector-attr\">[name]</span>.<span class=\"selector-attr\">[hash:7]</span>.<span class=\"selector-attr\">[ext]</span>` //&#x27;static/<span class=\"selector-attr\">[hash]</span><span class=\"selector-attr\">[ext]</span><span class=\"selector-attr\">[query]</span>&#x27;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>根据文档挨个检查处理</p>\n<p><img src=\"/../imgs/2a9e90766352487e9445f0db4706ff0c.png\" alt=\"image.png\"></p>\n</li>\n<li><p>常见的报错</p>\n<ul>\n<li><p>dev server 启动报错 <img src=\"/../imgs/e01b6f56c7ee4723811457dc17ac563c.png\" alt=\"image.png\"> 解决： 通过<code>webpack serve</code>启动dev server <img src=\"/../imgs/3dd4d8486dbf41c5bb421fec5a1a3b39.png\" alt=\"image.png\"></p>\n</li>\n<li><p>plugin引用错误</p>\n</li>\n</ul>\n<p><img src=\"/../imgs/3e77c54098c845749ec0c60ee14eeb74.png\" alt=\"image.png\"> 解决： 部分plugin写法变更 <code>const &#123;WebpackManifestPlugin&#125; = require(&#39;webpack-manifest-plugin&#39;);</code></p>\n<ul>\n<li><p>打包后文件运行报错Uncaught TypeError: Cannot read property ‘dispose’ of undefined 解决：dev包和本地同时启用了缓存，并缓存保存在同一个目录时会出现混乱，需要将不同环境的缓存区分（生产环境禁止使用缓存）</p>\n<p><img src=\"/../imgs/914e69f427bc412a90384306391d10bf.png\" alt=\"image.png\"></p>\n</li>\n<li><p>webpack 5 运行于 Node.js v10.13.0+ 的版本，如果出现打包错误，可以检查版本</p>\n</li>\n<li><p>如果配置了splitchunk，HtmlWebpackPlugin的chunks和chunksSortMode需要注意顺序，最好让它自己决定chunks和sort</p>\n</li>\n</ul>\n</li>\n</ol>\n","length":1111,"excerpt":"","more":"<ol>\n<li><p>安装webpack@5</p>\n<ul>\n<li><code>yarn add webpack@^5.36.2 webpack-cli@^4.6.0</code></li>\n</ul>\n</li>\n<li><p>解决安装过程中提示的版本不兼容warning</p>\n<p><img src=\"/../imgs/f89dd471a85f4238949f7c0850cf121f.png\" alt=\"image.png\"></p>\n</li>\n<li><p>处理过时的loader、plugin和配置</p>\n<ul>\n<li><p>移除cache-loader</p>\n</li>\n<li><p>移除friendly-errors-webpack-plugin</p>\n</li>\n<li><p>optimize-css-assets-webpack-plugin 替换为css-minimizer-webpack-plugin</p>\n</li>\n<li><p>TerserPlugin去掉了sourcmap和cache</p>\n</li>\n<li><p>删除 new webpack.optimize.ModuleConcatenationPlugin()</p>\n</li>\n<li><p>删除eslint-loader,使用<code>ESLintPlugin</code></p>\n</li>\n<li><p>废弃了 raw-loader，url-loader 和 file-loader,新配置参考如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t\ttest: /\\.(png|jpe?g|gif|svg|eot|woff|woff2|ttf)(\\?.*)?$/,</span><br><span class=\"line\">\t\texclude: /(antd)/,</span><br><span class=\"line\">\t\ttype: <span class=\"string\">&#x27;asset&#x27;</span>,</span><br><span class=\"line\">\t\tparser: &#123;</span><br><span class=\"line\">\t\t\tdataUrlCondition: &#123;</span><br><span class=\"line\">\t\t\t\tmaxSize: <span class=\"number\">10</span> * <span class=\"number\">1024</span> // <span class=\"number\">10</span>kb</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tgenerator: &#123;</span><br><span class=\"line\">\t\t\tfilename: `$&#123;config<span class=\"selector-class\">.ChunkOutputDirname</span>&#125;assets/<span class=\"selector-tag\">img</span>/<span class=\"selector-attr\">[name]</span>.<span class=\"selector-attr\">[hash:7]</span>.<span class=\"selector-attr\">[ext]</span>` //&#x27;static/<span class=\"selector-attr\">[hash]</span><span class=\"selector-attr\">[ext]</span><span class=\"selector-attr\">[query]</span>&#x27;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>根据文档挨个检查处理</p>\n<p><img src=\"/../imgs/2a9e90766352487e9445f0db4706ff0c.png\" alt=\"image.png\"></p>\n</li>\n<li><p>常见的报错</p>\n<ul>\n<li><p>dev server 启动报错 <img src=\"/../imgs/e01b6f56c7ee4723811457dc17ac563c.png\" alt=\"image.png\"> 解决： 通过<code>webpack serve</code>启动dev server <img src=\"/../imgs/3dd4d8486dbf41c5bb421fec5a1a3b39.png\" alt=\"image.png\"></p>\n</li>\n<li><p>plugin引用错误</p>\n</li>\n</ul>\n<p><img src=\"/../imgs/3e77c54098c845749ec0c60ee14eeb74.png\" alt=\"image.png\"> 解决： 部分plugin写法变更 <code>const &#123;WebpackManifestPlugin&#125; = require(&#39;webpack-manifest-plugin&#39;);</code></p>\n<ul>\n<li><p>打包后文件运行报错Uncaught TypeError: Cannot read property ‘dispose’ of undefined 解决：dev包和本地同时启用了缓存，并缓存保存在同一个目录时会出现混乱，需要将不同环境的缓存区分（生产环境禁止使用缓存）</p>\n<p><img src=\"/../imgs/914e69f427bc412a90384306391d10bf.png\" alt=\"image.png\"></p>\n</li>\n<li><p>webpack 5 运行于 Node.js v10.13.0+ 的版本，如果出现打包错误，可以检查版本</p>\n</li>\n<li><p>如果配置了splitchunk，HtmlWebpackPlugin的chunks和chunksSortMode需要注意顺序，最好让它自己决定chunks和sort</p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"【翻译】`at`将加入ECMAScript","date":"2021-10-13T16:00:00.000Z","_content":"\n如果你是个js开发者，你看你经常使用数组。它是语言中最基本的数据结构\n\n事实上，正因为它太过基础，过去的几年里数组的 prototype 迅速扩充，添加了诸如`flat`和`filter`等方法，并且还在继续增加。\n\n访问器\n---\n\n为了方位一个数组中的元素，你需要知道它的下标，JavaScript中的下标是从0开始的，因此第一个元素的下标是0.\n\n```less\nconst arr = ['a', 'b', 'c', 'd']\narr[0] // this is \"a\"\narr[2] // this is \"c\"\n```\n\n正如你在上面的例子中看到的，你可以访问到第一个或者第三个元素。但是最后一个呢？在其他语言中，你可以通过类似这样的代码：\n\n```less\nconst arr = ['a', 'b', 'c', 'd']\narr[-1] // This is NOT \"d\"\n```\n\n但是在JavaScript中不行！真的不行吗？... 现在`-1`已经是一个合法的key了。数组实际上是将index作为key的对象，因此`arr[-1]`是在查询`arr`对象的 `\"-1\"`key上的值，该值为`undefined`\n\n最后一个元素\n------\n\n那么我们该如何不适用最后一个元素的下标就可以访问到它呢？的确有办法做到，但是它显然有些冗长：你可以使用length查找\n\n```less\narr[arr.length - 1] // this is \"d\"\n```\n\n你也可以使用slice\n\n```python\narr.slice(-1)[0] // this is \"d\"\n```\n\nAT\n--\n\n这就是`at`加入到JavaScript的原因。你能够用这样的写法代替上面的做法\n\n```python\narr.at(-1) // this is \"d\"\n```\n\n`at`最棒的一点是，你再也不需要使用方括号了。\n\n```scss\narr.at(0) // this is still \"a\"\n```\n\n如果传入了不合法的下标会怎样？\n\n```scss\narr.at(5) // this is undefined\n```\n\n看上去各种写法的容忍度很高。\n\n历史插曲\n----\n\n其实以前提出过类似的`item`api，但是它因为与主流的库冲突而不被web兼容。因此`at`成为当前的提案。\n\n你愿意用它吗?\n-------\n\n这个提案已经被官方采纳了，并且将会成为ES2022的一部分。能预见到它将会成为对访问数组元素非常友好的语法糖。\n\n原文：[laurieontech.com/posts/at-pr…](https://laurieontech.com%2Fposts%2Fat-proposal%2F \"https://laurieontech.com/posts/at-proposal/\")","source":"_posts/【翻译】`at`将加入ECMAScript.md","raw":"---\n title: \"【翻译】`at`将加入ECMAScript\"\n date: 2021-10-14\n tags: [前端]\n categories: [前端笔记]\n---\n\n如果你是个js开发者，你看你经常使用数组。它是语言中最基本的数据结构\n\n事实上，正因为它太过基础，过去的几年里数组的 prototype 迅速扩充，添加了诸如`flat`和`filter`等方法，并且还在继续增加。\n\n访问器\n---\n\n为了方位一个数组中的元素，你需要知道它的下标，JavaScript中的下标是从0开始的，因此第一个元素的下标是0.\n\n```less\nconst arr = ['a', 'b', 'c', 'd']\narr[0] // this is \"a\"\narr[2] // this is \"c\"\n```\n\n正如你在上面的例子中看到的，你可以访问到第一个或者第三个元素。但是最后一个呢？在其他语言中，你可以通过类似这样的代码：\n\n```less\nconst arr = ['a', 'b', 'c', 'd']\narr[-1] // This is NOT \"d\"\n```\n\n但是在JavaScript中不行！真的不行吗？... 现在`-1`已经是一个合法的key了。数组实际上是将index作为key的对象，因此`arr[-1]`是在查询`arr`对象的 `\"-1\"`key上的值，该值为`undefined`\n\n最后一个元素\n------\n\n那么我们该如何不适用最后一个元素的下标就可以访问到它呢？的确有办法做到，但是它显然有些冗长：你可以使用length查找\n\n```less\narr[arr.length - 1] // this is \"d\"\n```\n\n你也可以使用slice\n\n```python\narr.slice(-1)[0] // this is \"d\"\n```\n\nAT\n--\n\n这就是`at`加入到JavaScript的原因。你能够用这样的写法代替上面的做法\n\n```python\narr.at(-1) // this is \"d\"\n```\n\n`at`最棒的一点是，你再也不需要使用方括号了。\n\n```scss\narr.at(0) // this is still \"a\"\n```\n\n如果传入了不合法的下标会怎样？\n\n```scss\narr.at(5) // this is undefined\n```\n\n看上去各种写法的容忍度很高。\n\n历史插曲\n----\n\n其实以前提出过类似的`item`api，但是它因为与主流的库冲突而不被web兼容。因此`at`成为当前的提案。\n\n你愿意用它吗?\n-------\n\n这个提案已经被官方采纳了，并且将会成为ES2022的一部分。能预见到它将会成为对访问数组元素非常友好的语法糖。\n\n原文：[laurieontech.com/posts/at-pr…](https://laurieontech.com%2Fposts%2Fat-proposal%2F \"https://laurieontech.com/posts/at-proposal/\")","slug":"【翻译】`at`将加入ECMAScript","published":1,"updated":"2024-04-04T15:27:03.202Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lht0044hajfcxvz59ri","content":"<p>如果你是个js开发者，你看你经常使用数组。它是语言中最基本的数据结构</p>\n<p>事实上，正因为它太过基础，过去的几年里数组的 prototype 迅速扩充，添加了诸如<code>flat</code>和<code>filter</code>等方法，并且还在继续增加。</p>\n<h2 id=\"访问器\"><a href=\"#访问器\" class=\"headerlink\" title=\"访问器\"></a>访问器</h2><p>为了方位一个数组中的元素，你需要知道它的下标，JavaScript中的下标是从0开始的，因此第一个元素的下标是0.</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">const</span> <span class=\"selector-tag\">arr</span> = <span class=\"selector-attr\">[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"selector-tag\">arr</span><span class=\"selector-attr\">[0]</span> <span class=\"comment\">// this is &quot;a&quot;</span></span><br><span class=\"line\"><span class=\"selector-tag\">arr</span><span class=\"selector-attr\">[2]</span> <span class=\"comment\">// this is &quot;c&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>正如你在上面的例子中看到的，你可以访问到第一个或者第三个元素。但是最后一个呢？在其他语言中，你可以通过类似这样的代码：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">const</span> <span class=\"selector-tag\">arr</span> = <span class=\"selector-attr\">[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"selector-tag\">arr</span><span class=\"selector-attr\">[-1]</span> <span class=\"comment\">// This is NOT &quot;d&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是在JavaScript中不行！真的不行吗？… 现在<code>-1</code>已经是一个合法的key了。数组实际上是将index作为key的对象，因此<code>arr[-1]</code>是在查询<code>arr</code>对象的 <code>&quot;-1&quot;</code>key上的值，该值为<code>undefined</code></p>\n<h2 id=\"最后一个元素\"><a href=\"#最后一个元素\" class=\"headerlink\" title=\"最后一个元素\"></a>最后一个元素</h2><p>那么我们该如何不适用最后一个元素的下标就可以访问到它呢？的确有办法做到，但是它显然有些冗长：你可以使用length查找</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">arr</span><span class=\"selector-attr\">[arr.length - 1]</span> <span class=\"comment\">// this is &quot;d&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>你也可以使用slice</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"built_in\">slice</span>(-<span class=\"number\">1</span>)[<span class=\"number\">0</span>] // this <span class=\"keyword\">is</span> <span class=\"string\">&quot;d&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AT\"><a href=\"#AT\" class=\"headerlink\" title=\"AT\"></a>AT</h2><p>这就是<code>at</code>加入到JavaScript的原因。你能够用这样的写法代替上面的做法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.at(-<span class=\"number\">1</span>) // this <span class=\"keyword\">is</span> <span class=\"string\">&quot;d&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>at</code>最棒的一点是，你再也不需要使用方括号了。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr<span class=\"selector-class\">.at</span>(<span class=\"number\">0</span>) <span class=\"comment\">// this is still &quot;a&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果传入了不合法的下标会怎样？</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr<span class=\"selector-class\">.at</span>(<span class=\"number\">5</span>) <span class=\"comment\">// this is undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>看上去各种写法的容忍度很高。</p>\n<h2 id=\"历史插曲\"><a href=\"#历史插曲\" class=\"headerlink\" title=\"历史插曲\"></a>历史插曲</h2><p>其实以前提出过类似的<code>item</code>api，但是它因为与主流的库冲突而不被web兼容。因此<code>at</code>成为当前的提案。</p>\n<h2 id=\"你愿意用它吗\"><a href=\"#你愿意用它吗\" class=\"headerlink\" title=\"你愿意用它吗?\"></a>你愿意用它吗?</h2><p>这个提案已经被官方采纳了，并且将会成为ES2022的一部分。能预见到它将会成为对访问数组元素非常友好的语法糖。</p>\n<p>原文：<a href=\"https://laurieontech.com%2Fposts%2Fat-proposal%2F\" title=\"https://laurieontech.com/posts/at-proposal/\">laurieontech.com&#x2F;posts&#x2F;at-pr…</a></p>\n","length":1052,"excerpt":"","more":"<p>如果你是个js开发者，你看你经常使用数组。它是语言中最基本的数据结构</p>\n<p>事实上，正因为它太过基础，过去的几年里数组的 prototype 迅速扩充，添加了诸如<code>flat</code>和<code>filter</code>等方法，并且还在继续增加。</p>\n<h2 id=\"访问器\"><a href=\"#访问器\" class=\"headerlink\" title=\"访问器\"></a>访问器</h2><p>为了方位一个数组中的元素，你需要知道它的下标，JavaScript中的下标是从0开始的，因此第一个元素的下标是0.</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">const</span> <span class=\"selector-tag\">arr</span> = <span class=\"selector-attr\">[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"selector-tag\">arr</span><span class=\"selector-attr\">[0]</span> <span class=\"comment\">// this is &quot;a&quot;</span></span><br><span class=\"line\"><span class=\"selector-tag\">arr</span><span class=\"selector-attr\">[2]</span> <span class=\"comment\">// this is &quot;c&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>正如你在上面的例子中看到的，你可以访问到第一个或者第三个元素。但是最后一个呢？在其他语言中，你可以通过类似这样的代码：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">const</span> <span class=\"selector-tag\">arr</span> = <span class=\"selector-attr\">[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"selector-tag\">arr</span><span class=\"selector-attr\">[-1]</span> <span class=\"comment\">// This is NOT &quot;d&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是在JavaScript中不行！真的不行吗？… 现在<code>-1</code>已经是一个合法的key了。数组实际上是将index作为key的对象，因此<code>arr[-1]</code>是在查询<code>arr</code>对象的 <code>&quot;-1&quot;</code>key上的值，该值为<code>undefined</code></p>\n<h2 id=\"最后一个元素\"><a href=\"#最后一个元素\" class=\"headerlink\" title=\"最后一个元素\"></a>最后一个元素</h2><p>那么我们该如何不适用最后一个元素的下标就可以访问到它呢？的确有办法做到，但是它显然有些冗长：你可以使用length查找</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">arr</span><span class=\"selector-attr\">[arr.length - 1]</span> <span class=\"comment\">// this is &quot;d&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>你也可以使用slice</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"built_in\">slice</span>(-<span class=\"number\">1</span>)[<span class=\"number\">0</span>] // this <span class=\"keyword\">is</span> <span class=\"string\">&quot;d&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AT\"><a href=\"#AT\" class=\"headerlink\" title=\"AT\"></a>AT</h2><p>这就是<code>at</code>加入到JavaScript的原因。你能够用这样的写法代替上面的做法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.at(-<span class=\"number\">1</span>) // this <span class=\"keyword\">is</span> <span class=\"string\">&quot;d&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>at</code>最棒的一点是，你再也不需要使用方括号了。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr<span class=\"selector-class\">.at</span>(<span class=\"number\">0</span>) <span class=\"comment\">// this is still &quot;a&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果传入了不合法的下标会怎样？</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr<span class=\"selector-class\">.at</span>(<span class=\"number\">5</span>) <span class=\"comment\">// this is undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>看上去各种写法的容忍度很高。</p>\n<h2 id=\"历史插曲\"><a href=\"#历史插曲\" class=\"headerlink\" title=\"历史插曲\"></a>历史插曲</h2><p>其实以前提出过类似的<code>item</code>api，但是它因为与主流的库冲突而不被web兼容。因此<code>at</code>成为当前的提案。</p>\n<h2 id=\"你愿意用它吗\"><a href=\"#你愿意用它吗\" class=\"headerlink\" title=\"你愿意用它吗?\"></a>你愿意用它吗?</h2><p>这个提案已经被官方采纳了，并且将会成为ES2022的一部分。能预见到它将会成为对访问数组元素非常友好的语法糖。</p>\n<p>原文：<a href=\"https://laurieontech.com%2Fposts%2Fat-proposal%2F\" title=\"https://laurieontech.com/posts/at-proposal/\">laurieontech.com&#x2F;posts&#x2F;at-pr…</a></p>\n"},{"title":"【翻译】css中的“gap”","date":"2021-10-07T16:00:00.000Z","_content":"\n你可能已经了解过[CSS `gap` property](https://developer.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2Fgap \"https://developer.mozilla.org/en-US/docs/Web/CSS/gap\")。 准确来说它并不是一个全新的css属性，但是去年它获得了一个重要的特性：除在了CSS Grid中，在Flexbox中也能使用。我相信这个属性比它表面呈现的更复杂，这也让我想回去解释一下它到底是如何运行的。\n\n让我们仔细看看`gap`和它的相关属性，并了解它们是怎样生效的以及哪些地方能生效。\n\n### 关于间隙（gap）的所有属性\n\n首先，让我们回顾一下所有`gap`相关的CSS properties。一共有6个：\n\n*   `grid-row-gap`\n*   `grid-column-gap`\n*   `grid-gap`\n*   `row-gap`\n*   `column-gap`\n*   `gap`\n\n我们可以忽略这个列表中的前三项，`grid-*`属性是在CSS Grid规范拟定早期加入的，在`gap`普遍使用后便被废弃了。浏览器仍然支持这些废弃的`grid-*`属性（在撰写本文时），并且处理这些属性时忽略`grid-`前缀。因此，`grid-gap` 等同于 `gap`, `grid-column-gap` 等同于 `column-gap` ， `grid-row-gap` 等同于 `row-gap`。\n\n至于另外的三个属性，只要知道`gap`是其他两个属性的缩写，我们实际上只需要了解`row-gap`和`column-gap`的作用。\n\n对这些属性的理解要基于我们使用的CSS布局类型。让我们先看看这些选项。\n\n### 在哪些地方可以使用gaps?\n\n你可能和我一样，仅在grid布局中使用过gaps，但是他们现在可以在Flexbox以及多列布局中使用。让我们看看这每种案例。\n\n#### Grid gaps\n\n所有浏览器都支持在grid布局中使用gaps，在这种context中理解它们非常容易。\n\n*   `row-gap` 在行间中引入空隙\n*   `column-gap` 在列间中引入空隙\n\n![image.png](../imgs/e0e722be9ff347c79397261498aa2a3d.png)\n\n让我们创建一个三列两行布局:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 200px 100px 300px;\n  grid-template-rows: 100px 100px;\n}\n```\n\n我们获得了如下网格:\n\n![image.png](../imgs/fa66a173ce194fedbdd97c27d3715544.png)\n\n图中的线叫做**网格线grid lines**，它们将网格分割为行和列。这些网格线并不真实存在——它们是不可见的，没有宽度的，并且通常是我们开启grid inspector后DevTools展示的。 (in [Safari](https://webkit.org%2Fblog%2F11588%2Fintroducing-css-grid-inspector%2F \"https://webkit.org/blog/11588/introducing-css-grid-inspector/\"), [Firefox](https://developer.mozilla.org%2Fen-US%2Fdocs%2FTools%2FPage_Inspector%2FHow_to%2FExamine_grid_layouts \"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_grid_layouts\"), [Edge](https://docs.microsoft.com%2Fen-us%2Fmicrosoft-edge%2Fdevtools-guide-chromium%2Fcss%2Fgrid \"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/css/grid\") or [Chrome](https://developer.chrome.com%2Fdocs%2Fdevtools%2Fcss%2Fgrid%2F \"https://developer.chrome.com/docs/devtools/css/grid/\")).\n\n![The CSS-Tricks site with DevTools open and docked to the left of the viewport in Firefox. DevTools displays Grid Inspector options and the page contains borders around elements in blue and green to indicate grid track lines.](../imgs/f7c1eace740044619142888b35fcb580.png)\n\n然而如果我们开始为网格增加gaps，它将表现得好像这些网格线获得了宽度一样。\n\n让我们增加 `20px` gap:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 200px 100px 300px;\n  grid-template-rows: 100px 100px;\n  gap: 20px;\n}\n```\n\n现在行列间的网格线是`20px`宽，因此grid items彼此被推得更远了。\n\n![A 3 by 2 grid of yellow boxes with 20px gaps between the column and row tracks.](../imgs/aae076ba4570447aa47c7242c4be29f5.png)\n\n值得注意的是，网格块们仍然有着同样的大小（由 `grid-template-*`定义），因此整个网格会比没有gaps更宽更高。 在网格内，`row-gap`始终应用于行块间，因此在上面的例子中，如果我们将`gap`替换为 `row-gap`，将得到如下示例：\n\n![The same 3 by 2 grid with a gap only between the two rows.](../imgs/6fd8a8300c434df5968d87088c4d41b3.png) 而`column-gap`始终应用于列块间，因此如果将`gap` 替换为 `column-gap`将会得到如下结果：\n\n![The same 3 by 2 grid with a gap only between the three columns.](../imgs/9a1f879dc0884635838d29764d08a6de.png) Grid布局很简单，因为默认情况下列（columns）是垂直的，而行（rows）是水平的，就像在table中。因此很容易记住`column-gap` 和 `row-gap`是用在哪里的。\n\n现在，事情变得稍微复杂了一点点，由于我们使用了[`writing-mode`](https://developer.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2Fwriting-mode \"https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode\")。在web中默认的书写模式（writing mode）是水平的，从左到右，但是同样有上下的书写模式。在这种模式下列（colums）变成水平的，而行（rows）变成垂直的。 要对`writing-mode`留个心眼，因为它有时候会反直觉。\n\n这是一个到下一节的很好的过渡，因为在Flexbox中列和行（columns and rows）又有了新的含义。\n\n#### Flexbox gaps\n\n让我们讲讲Flexbox布局中的gaps，这里会稍微有些小复杂。我们使用如下例子：\n\n```css\n.container {\n  display: flex;\n}\n```\n\n默认情况下，这会产生一个`row` flex容器，这意味着容器中的items被从左往右放在了同一个水平线上。\n\n![A default flex container with six yellow boxes stacked horizontally, from left to right. Each one says flex item in it. A purple border is drawn around each item.](../imgs/130d8810ed5248ecb34cbe8c2082c4c2.png) 在这个案例中，`column-gap` 在items间生效，而`row-gap`啥都不会做。这是因为只有一行。但是我们还是先对items增加一些gap:\n\n```css\n.container {\n  display: flex;\n  column-gap: 10px;\n}\n```\n\n![The same six yellow flex items on a single line with 10 pixels between them.](../imgs/e00ad4c11d534af69efa593d6876fabf.png) 现在让我们将容器的`flex-direction`切换为`column`，这样items将会从上往下垂直分布，代码如下：\n\n```css\n.container {\n  display: flex;\n  flex-direction: column;\n  column-gap: 10px;\n}\n```\n\n效果如下:\n\n![Six yellow rectangles stacked from top to bottom with no gap between them.](../imgs/d9f5150d7a604f33874fe565cd684888.png)\n\ngap消失了。当container是`row`横向布局时，`column-gap`确实在items之间增加了间距，但是在`column`纵向布局时并不会生效。\n\n我们需要使用`row-gap`让它再次生效，或者我们可以使用`gap`缩写，它可以在两个方向上产生同样的gap\n\n```css\n.container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n```\n\n![The same six yellow rectangles stacked vertically, but with 10 pixels of space between them.](../imgs/9bdccc09f7be445cb0edef1627f5c567.png)\n\n所以，总结一下， `colum-gap`始终在垂直中生效（假设默认的 `writing-mode`下），而`row-gap`在水平中生效。这并不依赖于flex布局的方向。\n\n现在让我们看一个涉及换行的列子。\n\n```css\n.container {\n  display: flex;\n  flex-wrap: wrap;\n  column-gap: 40px;\n  row-gap: 10px;\n  justify-content: center;\n}\n \n```\n\n在这里，如果没有足够的空间在一行上放置所有的内容，我们使用`flex-wrap: wrap`来允许items换行。\n\n![Five yellow boxes that wrap into two lines, where three are on the first line and two are on the bottom line. There are differently sized gaps between them based on the space around them.](../imgs/afa38d71d32e47339603f1a510606961.png)\n\n在这个例子中，`column-gap` 仍然在items之间垂直生效，而`row-gap` 在两个flex行间水平生效。\n\n这和grid布局有一个有趣的不同点。column gaps并不一定跨flex line对齐。这是因为`justify-content: center`使得items在flex lines中居中了。这样，我们可以看到每个flex line是一个单独布局，而gaps在lines中各自生效。\n\n#### Multi-column 多列布局的 gaps\n\n多栏布局可以很容易地在多列中自动排列内容，就像你可能在传统报纸文章中看到的那样。我们设置了一些列，并且为每列设置了大小。\n\n![A three-column layout of plain text with a 1 em gap between columns](../imgs/ac27b01d800e49c6ab28d7b360be367b.png)\n\ngaps在多栏布局中和在grid或flexbox中的表现大相径庭。有三个显著的区别：\n\n*   `row-gap` 不会生效,\n*   `column-gap` 默认值不是0,\n*   gaps 可以被设置样式.\n\n让我们分解开来。首先，`row-gap`不会生效。在多栏布局中不会有多行被分隔开，这意味着只有`column-gap`能起到效果（`gap`缩写也一样）。\n\n其次，不像在grid和flexbox中，`column-gap`在多栏布局中的默认值是`1em`,而不是0,所以即使并没有指定任何gap，列之间仍然可以看到被分开了。当然，默认的gap可以被重写，但是这是一个很好的默认设置。\n\n例子中的代码如下：\n\n```css\n.container {\n  column-count: 3;\n  padding: 1em;\n}\n```\n\n最后，我们可以在多栏布局中为gap设置样式。我们可以使用`column-rule`属性，它类似 `border`:\n\n```css\n.container {\n  column-count: 3;\n  column-gap: 12px;\n  column-rule: 4px solid red;\n  padding: 12px;\n}\n```\n\n![The same three columns of plain text, but with a red border between the columns.](../imgs/6cea5abb144a400aa90e04c5d2477863.png)\n\n`column-rule`属性在多列布局中给我们提供了一些样式支持。\n\n### 浏览器支持\n\n`gap`已经被全面支持。更多信息可见 [caniuse](https://caniuse.com%2F%3Fsearch%3Dgap \"https://caniuse.com/?search=gap\")，总结如下:\n\n*   **Flexbox:**  `gap` is supported everywhere except for Internet Explorer (which is [on its way out](https://blogs.windows.com%2Fwindowsexperience%2F2021%2F05%2F19%2Fthe-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge%2F \"https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/\")), Opera Mini and UC Browser for Android. [caniuse](https://caniuse.com%2Fmdn-css_properties_gap_flex_context \"https://caniuse.com/mdn-css_properties_gap_flex_context\") has global support at 87.31%.\n*   **Grid:**  Same thing, but we’re looking at [93.79% global support](https://caniuse.com%2Fmdn-css_properties_gap_grid_context \"https://caniuse.com/mdn-css_properties_gap_grid_context\").\n*   **Multi-column:**  Same thing, too, but it’s unsupported in Safari and has [75.59% global support](https://caniuse.com%2Fmdn-css_properties_gap_multicol_context \"https://caniuse.com/mdn-css_properties_gap_multicol_context\").\n\n所以总的来说，`gap`属性已经得到了很好的支持，在多数情况下并不需要进行变通。\n\n### 为flex和grid中的gap设置样式\n\n为flexbox和grid中的`gap`设置样式是很实用的。坏消息是目前这还并不支持，但好消息是在不远的将来将会实现。  [CSS 工作组已经在讨论](https://github.com%2Fw3c%2Fcsswg-drafts%2Fissues%2F2748%23issuecomment-621543304 \"https://github.com/w3c/csswg-drafts/issues/2748#issuecomment-621543304\") ， [Firefox正着手实现](https://bugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1725495 \"https://bugzilla.mozilla.org/show_bug.cgi?id=1725495\")。一旦我们在Firefox实现相关的规范提案，兴许会驱动其他浏览器的实现。\n\n与此同时，也有其他的办法解决这个问题。\n\n一个办法是对grid容器设置一个背景色，然后对items设置另一个背景色，最后设置gap让容器的颜色显示出来。\n\n虽然这是可行的，但也意味着我们不能使用gap在item间引入空隙。这里`gap`表现为边框的宽度。所以为了在视觉上能够更有效地分隔items，我们需要在items上使用`padding` 或者 `margin`,这并不优雅...我们将在下一节中看到。\n\n### 只能用 margin 或者 padding?\n\n是的，在多数情况下，我们可以使用margin（和/或 padding）在元素间增加可见的间隙，但是`gap`具有很多优势。\n\n首先，gaps是在**容器级别**定义的间隙，这意味着我们只需要为整个布局定义间隙一次，而它们会在容器中表现一致。使用margins需要在每个item上声明，当items并不一样或来自于不同的复用组件时，这么做可能会变得复杂。\n\n此外，默认情况下gaps只需要一行代码就可以完成正确的事情。例如，如果我们尝试在flex items之间(_in between_)引入间隙，而不是周围（around）,`margin`在一些特殊场景下可能需要[删除第一个或者最后一个元素的多余margin](https://css-tricks.com%2Fyou-want-enabling-css-selectors-not-disabling-ones%2F \"https://css-tricks.com/you-want-enabling-css-selectors-not-disabling-ones/\")，而用gaps，我们就不需要这么做。\n\n如果对每个flex item使用`margin: 0 20px`，我们会得到：\n\n![](../imgs/c70711d142154a3f8681fe8339ac5f22.png)\n\n然而如果对容器使用 `gap: 40px`，我们会得到：\n\n![](../imgs/5cd0b10a948842ae91a979859ff8ac1e.png)\n\n在grid布局中也类似，在容器级别上定义 `gap`比在每个item上定义margin并计算网格边缘的margin要简单和优雅得多。\n\n对每个grid item使用`margin: 20px`：\n\n![](../imgs/d0e700cafcb646fca5460f7d268aa1b9.png)\n\n对grid容器使用`gap: 40px`\n\n![](../imgs/83cd1beeb0ba4350b6216de5022b1217.png)\n\n### 空隙的合计\n\n说了这么多，`margin` 和 `gap` 并不是互斥的。事实上，有很多方法可以将布局中的元素进一步分隔开，并且它们能够很好地相互结合。\n\n`gap`属性只是布局容器中盒子间空隙的一部分，`margin`, `padding`，以及对齐都可能增加`gap`已定义的空隙\n\n让我们考虑这么一个例子，我们创建一个简单的flex布局，并设置宽、gap，使用`justify-content`分布内容，以及一些margin和padding：\n\n```css\n.container {\n  display: flex;\n  gap: 40px;\n  width: 900px;\n  justify-content: space-around;\n}\n.item {\n  padding: 20px;\n  margin: 0 20px;\n}\n```\n\n我们设想这段代码效果如下:\n\n![](../imgs/82392bd016a74c298191ef55fff8d75c.png)\n\n现在让我们仔细瞧瞧items间的空隙是如何产生的：\n\n![](../imgs/2bcde11c433a42f1892bfd71b6f856c4.png)\n\n正如我们所见，在连续的flex items间，空隙有4种不同的类型：\n\n*   在两个连续的items间, **gap**定义了items间的_最小_间隔，就像在这个案例中展示的，items间的空隙可以再增加，但没法更少。\n*   **Margin** 将items相互推开，但是和`gap`不同，所有的items两侧都增加了空隙。\n*   **Padding** 在每个item内部提供了一些空隙.\n*   最终，也是因为还有足够的空间剩余， **content distribution**生效，并根据`space-around`在flex line内均匀地分配items\n\n### Debugging gaps\n\n让我们以一个我非常喜欢的话题来结束：DevTools支持对gaps的debug。总会有出现问题的时候，DevTools的支持是令人欣慰的，但我们确实需要知道在这种情况下哪些工具可以帮助我们。\n\n对于`gap`，我能想到两个特殊的特性可能有用。\n\n#### 我的gap生效了吗?\n\n除非我们拼错了`gap`，或者提供了一个非法的值，这个属性将始终应用于页面，例如，这是正确的：\n\n```css\n.some-class {\n  display: block;\n  gap: 3em;\n}\n```\n\n它并不会产生任何效果，但是这是合法的CSS，并且浏览器并不介意 `gap`并不会在block布局中生效。但是Firefox有个[Inactive CSS](https://hacks.mozilla.org%2F2019%2F10%2Ffirefox-70-a-bountiful-release-for-all%2F%23developertools \"https://hacks.mozilla.org/2019/10/firefox-70-a-bountiful-release-for-all/#developertools\")的特性：关注合法且有意义的CSS。在这个场景下，Firefox DevTools会在 Inspector显示一个警告。\n\n![](../imgs/627e6d35689843cda4b8f515bc81edd6.png)\n\n#### [](https://css-tricks.com%2Fminding-the-gap%2F%23where-is-my-gap \"https://css-tricks.com/minding-the-gap/#where-is-my-gap\")Where is my gap?\n\nChrome和Edge也有个非常有用的功能来调试gaps。它是通过Microsoft和Google的合作，旨在在Chromium（是支持这两种浏览器以及其他浏览器的开源项目）构建布局调试工具。在这些浏览器里，你可以将鼠标悬停在 Styles panel里的各个属性上，然后你就可以看到它们在页面上的效果。\n\n![](../imgs/9cae13a7088c416281438340e15e85ba.png)\n\n光标目前悬停在`gap` 和 `justify-content` 属性上，页面上的相关区域会高亮显示这些属性的生效了。\n\n![](../imgs/e50340b5c1cb474d9601715ee83b358f.png)\n\n光标悬停在 `margin` 和 `padding`属性上，并将盒子模型的相关区域高亮。\n\n最后，我希望这篇文章对理解在CSS中gaps如何生效的一些细节能有所帮助。\n\n原文：[css-tricks.com/minding-the…](https://css-tricks.com%2Fminding-the-gap \"https://css-tricks.com/minding-the-gap\")","source":"_posts/【翻译】css中的“gap”.md","raw":"---\n title: \"【翻译】css中的“gap”\"\n date: 2021-10-08\n tags: [前端,CSS]\n categories: [前端笔记]\n---\n\n你可能已经了解过[CSS `gap` property](https://developer.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2Fgap \"https://developer.mozilla.org/en-US/docs/Web/CSS/gap\")。 准确来说它并不是一个全新的css属性，但是去年它获得了一个重要的特性：除在了CSS Grid中，在Flexbox中也能使用。我相信这个属性比它表面呈现的更复杂，这也让我想回去解释一下它到底是如何运行的。\n\n让我们仔细看看`gap`和它的相关属性，并了解它们是怎样生效的以及哪些地方能生效。\n\n### 关于间隙（gap）的所有属性\n\n首先，让我们回顾一下所有`gap`相关的CSS properties。一共有6个：\n\n*   `grid-row-gap`\n*   `grid-column-gap`\n*   `grid-gap`\n*   `row-gap`\n*   `column-gap`\n*   `gap`\n\n我们可以忽略这个列表中的前三项，`grid-*`属性是在CSS Grid规范拟定早期加入的，在`gap`普遍使用后便被废弃了。浏览器仍然支持这些废弃的`grid-*`属性（在撰写本文时），并且处理这些属性时忽略`grid-`前缀。因此，`grid-gap` 等同于 `gap`, `grid-column-gap` 等同于 `column-gap` ， `grid-row-gap` 等同于 `row-gap`。\n\n至于另外的三个属性，只要知道`gap`是其他两个属性的缩写，我们实际上只需要了解`row-gap`和`column-gap`的作用。\n\n对这些属性的理解要基于我们使用的CSS布局类型。让我们先看看这些选项。\n\n### 在哪些地方可以使用gaps?\n\n你可能和我一样，仅在grid布局中使用过gaps，但是他们现在可以在Flexbox以及多列布局中使用。让我们看看这每种案例。\n\n#### Grid gaps\n\n所有浏览器都支持在grid布局中使用gaps，在这种context中理解它们非常容易。\n\n*   `row-gap` 在行间中引入空隙\n*   `column-gap` 在列间中引入空隙\n\n![image.png](../imgs/e0e722be9ff347c79397261498aa2a3d.png)\n\n让我们创建一个三列两行布局:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 200px 100px 300px;\n  grid-template-rows: 100px 100px;\n}\n```\n\n我们获得了如下网格:\n\n![image.png](../imgs/fa66a173ce194fedbdd97c27d3715544.png)\n\n图中的线叫做**网格线grid lines**，它们将网格分割为行和列。这些网格线并不真实存在——它们是不可见的，没有宽度的，并且通常是我们开启grid inspector后DevTools展示的。 (in [Safari](https://webkit.org%2Fblog%2F11588%2Fintroducing-css-grid-inspector%2F \"https://webkit.org/blog/11588/introducing-css-grid-inspector/\"), [Firefox](https://developer.mozilla.org%2Fen-US%2Fdocs%2FTools%2FPage_Inspector%2FHow_to%2FExamine_grid_layouts \"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_grid_layouts\"), [Edge](https://docs.microsoft.com%2Fen-us%2Fmicrosoft-edge%2Fdevtools-guide-chromium%2Fcss%2Fgrid \"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/css/grid\") or [Chrome](https://developer.chrome.com%2Fdocs%2Fdevtools%2Fcss%2Fgrid%2F \"https://developer.chrome.com/docs/devtools/css/grid/\")).\n\n![The CSS-Tricks site with DevTools open and docked to the left of the viewport in Firefox. DevTools displays Grid Inspector options and the page contains borders around elements in blue and green to indicate grid track lines.](../imgs/f7c1eace740044619142888b35fcb580.png)\n\n然而如果我们开始为网格增加gaps，它将表现得好像这些网格线获得了宽度一样。\n\n让我们增加 `20px` gap:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 200px 100px 300px;\n  grid-template-rows: 100px 100px;\n  gap: 20px;\n}\n```\n\n现在行列间的网格线是`20px`宽，因此grid items彼此被推得更远了。\n\n![A 3 by 2 grid of yellow boxes with 20px gaps between the column and row tracks.](../imgs/aae076ba4570447aa47c7242c4be29f5.png)\n\n值得注意的是，网格块们仍然有着同样的大小（由 `grid-template-*`定义），因此整个网格会比没有gaps更宽更高。 在网格内，`row-gap`始终应用于行块间，因此在上面的例子中，如果我们将`gap`替换为 `row-gap`，将得到如下示例：\n\n![The same 3 by 2 grid with a gap only between the two rows.](../imgs/6fd8a8300c434df5968d87088c4d41b3.png) 而`column-gap`始终应用于列块间，因此如果将`gap` 替换为 `column-gap`将会得到如下结果：\n\n![The same 3 by 2 grid with a gap only between the three columns.](../imgs/9a1f879dc0884635838d29764d08a6de.png) Grid布局很简单，因为默认情况下列（columns）是垂直的，而行（rows）是水平的，就像在table中。因此很容易记住`column-gap` 和 `row-gap`是用在哪里的。\n\n现在，事情变得稍微复杂了一点点，由于我们使用了[`writing-mode`](https://developer.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2Fwriting-mode \"https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode\")。在web中默认的书写模式（writing mode）是水平的，从左到右，但是同样有上下的书写模式。在这种模式下列（colums）变成水平的，而行（rows）变成垂直的。 要对`writing-mode`留个心眼，因为它有时候会反直觉。\n\n这是一个到下一节的很好的过渡，因为在Flexbox中列和行（columns and rows）又有了新的含义。\n\n#### Flexbox gaps\n\n让我们讲讲Flexbox布局中的gaps，这里会稍微有些小复杂。我们使用如下例子：\n\n```css\n.container {\n  display: flex;\n}\n```\n\n默认情况下，这会产生一个`row` flex容器，这意味着容器中的items被从左往右放在了同一个水平线上。\n\n![A default flex container with six yellow boxes stacked horizontally, from left to right. Each one says flex item in it. A purple border is drawn around each item.](../imgs/130d8810ed5248ecb34cbe8c2082c4c2.png) 在这个案例中，`column-gap` 在items间生效，而`row-gap`啥都不会做。这是因为只有一行。但是我们还是先对items增加一些gap:\n\n```css\n.container {\n  display: flex;\n  column-gap: 10px;\n}\n```\n\n![The same six yellow flex items on a single line with 10 pixels between them.](../imgs/e00ad4c11d534af69efa593d6876fabf.png) 现在让我们将容器的`flex-direction`切换为`column`，这样items将会从上往下垂直分布，代码如下：\n\n```css\n.container {\n  display: flex;\n  flex-direction: column;\n  column-gap: 10px;\n}\n```\n\n效果如下:\n\n![Six yellow rectangles stacked from top to bottom with no gap between them.](../imgs/d9f5150d7a604f33874fe565cd684888.png)\n\ngap消失了。当container是`row`横向布局时，`column-gap`确实在items之间增加了间距，但是在`column`纵向布局时并不会生效。\n\n我们需要使用`row-gap`让它再次生效，或者我们可以使用`gap`缩写，它可以在两个方向上产生同样的gap\n\n```css\n.container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n```\n\n![The same six yellow rectangles stacked vertically, but with 10 pixels of space between them.](../imgs/9bdccc09f7be445cb0edef1627f5c567.png)\n\n所以，总结一下， `colum-gap`始终在垂直中生效（假设默认的 `writing-mode`下），而`row-gap`在水平中生效。这并不依赖于flex布局的方向。\n\n现在让我们看一个涉及换行的列子。\n\n```css\n.container {\n  display: flex;\n  flex-wrap: wrap;\n  column-gap: 40px;\n  row-gap: 10px;\n  justify-content: center;\n}\n \n```\n\n在这里，如果没有足够的空间在一行上放置所有的内容，我们使用`flex-wrap: wrap`来允许items换行。\n\n![Five yellow boxes that wrap into two lines, where three are on the first line and two are on the bottom line. There are differently sized gaps between them based on the space around them.](../imgs/afa38d71d32e47339603f1a510606961.png)\n\n在这个例子中，`column-gap` 仍然在items之间垂直生效，而`row-gap` 在两个flex行间水平生效。\n\n这和grid布局有一个有趣的不同点。column gaps并不一定跨flex line对齐。这是因为`justify-content: center`使得items在flex lines中居中了。这样，我们可以看到每个flex line是一个单独布局，而gaps在lines中各自生效。\n\n#### Multi-column 多列布局的 gaps\n\n多栏布局可以很容易地在多列中自动排列内容，就像你可能在传统报纸文章中看到的那样。我们设置了一些列，并且为每列设置了大小。\n\n![A three-column layout of plain text with a 1 em gap between columns](../imgs/ac27b01d800e49c6ab28d7b360be367b.png)\n\ngaps在多栏布局中和在grid或flexbox中的表现大相径庭。有三个显著的区别：\n\n*   `row-gap` 不会生效,\n*   `column-gap` 默认值不是0,\n*   gaps 可以被设置样式.\n\n让我们分解开来。首先，`row-gap`不会生效。在多栏布局中不会有多行被分隔开，这意味着只有`column-gap`能起到效果（`gap`缩写也一样）。\n\n其次，不像在grid和flexbox中，`column-gap`在多栏布局中的默认值是`1em`,而不是0,所以即使并没有指定任何gap，列之间仍然可以看到被分开了。当然，默认的gap可以被重写，但是这是一个很好的默认设置。\n\n例子中的代码如下：\n\n```css\n.container {\n  column-count: 3;\n  padding: 1em;\n}\n```\n\n最后，我们可以在多栏布局中为gap设置样式。我们可以使用`column-rule`属性，它类似 `border`:\n\n```css\n.container {\n  column-count: 3;\n  column-gap: 12px;\n  column-rule: 4px solid red;\n  padding: 12px;\n}\n```\n\n![The same three columns of plain text, but with a red border between the columns.](../imgs/6cea5abb144a400aa90e04c5d2477863.png)\n\n`column-rule`属性在多列布局中给我们提供了一些样式支持。\n\n### 浏览器支持\n\n`gap`已经被全面支持。更多信息可见 [caniuse](https://caniuse.com%2F%3Fsearch%3Dgap \"https://caniuse.com/?search=gap\")，总结如下:\n\n*   **Flexbox:**  `gap` is supported everywhere except for Internet Explorer (which is [on its way out](https://blogs.windows.com%2Fwindowsexperience%2F2021%2F05%2F19%2Fthe-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge%2F \"https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/\")), Opera Mini and UC Browser for Android. [caniuse](https://caniuse.com%2Fmdn-css_properties_gap_flex_context \"https://caniuse.com/mdn-css_properties_gap_flex_context\") has global support at 87.31%.\n*   **Grid:**  Same thing, but we’re looking at [93.79% global support](https://caniuse.com%2Fmdn-css_properties_gap_grid_context \"https://caniuse.com/mdn-css_properties_gap_grid_context\").\n*   **Multi-column:**  Same thing, too, but it’s unsupported in Safari and has [75.59% global support](https://caniuse.com%2Fmdn-css_properties_gap_multicol_context \"https://caniuse.com/mdn-css_properties_gap_multicol_context\").\n\n所以总的来说，`gap`属性已经得到了很好的支持，在多数情况下并不需要进行变通。\n\n### 为flex和grid中的gap设置样式\n\n为flexbox和grid中的`gap`设置样式是很实用的。坏消息是目前这还并不支持，但好消息是在不远的将来将会实现。  [CSS 工作组已经在讨论](https://github.com%2Fw3c%2Fcsswg-drafts%2Fissues%2F2748%23issuecomment-621543304 \"https://github.com/w3c/csswg-drafts/issues/2748#issuecomment-621543304\") ， [Firefox正着手实现](https://bugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1725495 \"https://bugzilla.mozilla.org/show_bug.cgi?id=1725495\")。一旦我们在Firefox实现相关的规范提案，兴许会驱动其他浏览器的实现。\n\n与此同时，也有其他的办法解决这个问题。\n\n一个办法是对grid容器设置一个背景色，然后对items设置另一个背景色，最后设置gap让容器的颜色显示出来。\n\n虽然这是可行的，但也意味着我们不能使用gap在item间引入空隙。这里`gap`表现为边框的宽度。所以为了在视觉上能够更有效地分隔items，我们需要在items上使用`padding` 或者 `margin`,这并不优雅...我们将在下一节中看到。\n\n### 只能用 margin 或者 padding?\n\n是的，在多数情况下，我们可以使用margin（和/或 padding）在元素间增加可见的间隙，但是`gap`具有很多优势。\n\n首先，gaps是在**容器级别**定义的间隙，这意味着我们只需要为整个布局定义间隙一次，而它们会在容器中表现一致。使用margins需要在每个item上声明，当items并不一样或来自于不同的复用组件时，这么做可能会变得复杂。\n\n此外，默认情况下gaps只需要一行代码就可以完成正确的事情。例如，如果我们尝试在flex items之间(_in between_)引入间隙，而不是周围（around）,`margin`在一些特殊场景下可能需要[删除第一个或者最后一个元素的多余margin](https://css-tricks.com%2Fyou-want-enabling-css-selectors-not-disabling-ones%2F \"https://css-tricks.com/you-want-enabling-css-selectors-not-disabling-ones/\")，而用gaps，我们就不需要这么做。\n\n如果对每个flex item使用`margin: 0 20px`，我们会得到：\n\n![](../imgs/c70711d142154a3f8681fe8339ac5f22.png)\n\n然而如果对容器使用 `gap: 40px`，我们会得到：\n\n![](../imgs/5cd0b10a948842ae91a979859ff8ac1e.png)\n\n在grid布局中也类似，在容器级别上定义 `gap`比在每个item上定义margin并计算网格边缘的margin要简单和优雅得多。\n\n对每个grid item使用`margin: 20px`：\n\n![](../imgs/d0e700cafcb646fca5460f7d268aa1b9.png)\n\n对grid容器使用`gap: 40px`\n\n![](../imgs/83cd1beeb0ba4350b6216de5022b1217.png)\n\n### 空隙的合计\n\n说了这么多，`margin` 和 `gap` 并不是互斥的。事实上，有很多方法可以将布局中的元素进一步分隔开，并且它们能够很好地相互结合。\n\n`gap`属性只是布局容器中盒子间空隙的一部分，`margin`, `padding`，以及对齐都可能增加`gap`已定义的空隙\n\n让我们考虑这么一个例子，我们创建一个简单的flex布局，并设置宽、gap，使用`justify-content`分布内容，以及一些margin和padding：\n\n```css\n.container {\n  display: flex;\n  gap: 40px;\n  width: 900px;\n  justify-content: space-around;\n}\n.item {\n  padding: 20px;\n  margin: 0 20px;\n}\n```\n\n我们设想这段代码效果如下:\n\n![](../imgs/82392bd016a74c298191ef55fff8d75c.png)\n\n现在让我们仔细瞧瞧items间的空隙是如何产生的：\n\n![](../imgs/2bcde11c433a42f1892bfd71b6f856c4.png)\n\n正如我们所见，在连续的flex items间，空隙有4种不同的类型：\n\n*   在两个连续的items间, **gap**定义了items间的_最小_间隔，就像在这个案例中展示的，items间的空隙可以再增加，但没法更少。\n*   **Margin** 将items相互推开，但是和`gap`不同，所有的items两侧都增加了空隙。\n*   **Padding** 在每个item内部提供了一些空隙.\n*   最终，也是因为还有足够的空间剩余， **content distribution**生效，并根据`space-around`在flex line内均匀地分配items\n\n### Debugging gaps\n\n让我们以一个我非常喜欢的话题来结束：DevTools支持对gaps的debug。总会有出现问题的时候，DevTools的支持是令人欣慰的，但我们确实需要知道在这种情况下哪些工具可以帮助我们。\n\n对于`gap`，我能想到两个特殊的特性可能有用。\n\n#### 我的gap生效了吗?\n\n除非我们拼错了`gap`，或者提供了一个非法的值，这个属性将始终应用于页面，例如，这是正确的：\n\n```css\n.some-class {\n  display: block;\n  gap: 3em;\n}\n```\n\n它并不会产生任何效果，但是这是合法的CSS，并且浏览器并不介意 `gap`并不会在block布局中生效。但是Firefox有个[Inactive CSS](https://hacks.mozilla.org%2F2019%2F10%2Ffirefox-70-a-bountiful-release-for-all%2F%23developertools \"https://hacks.mozilla.org/2019/10/firefox-70-a-bountiful-release-for-all/#developertools\")的特性：关注合法且有意义的CSS。在这个场景下，Firefox DevTools会在 Inspector显示一个警告。\n\n![](../imgs/627e6d35689843cda4b8f515bc81edd6.png)\n\n#### [](https://css-tricks.com%2Fminding-the-gap%2F%23where-is-my-gap \"https://css-tricks.com/minding-the-gap/#where-is-my-gap\")Where is my gap?\n\nChrome和Edge也有个非常有用的功能来调试gaps。它是通过Microsoft和Google的合作，旨在在Chromium（是支持这两种浏览器以及其他浏览器的开源项目）构建布局调试工具。在这些浏览器里，你可以将鼠标悬停在 Styles panel里的各个属性上，然后你就可以看到它们在页面上的效果。\n\n![](../imgs/9cae13a7088c416281438340e15e85ba.png)\n\n光标目前悬停在`gap` 和 `justify-content` 属性上，页面上的相关区域会高亮显示这些属性的生效了。\n\n![](../imgs/e50340b5c1cb474d9601715ee83b358f.png)\n\n光标悬停在 `margin` 和 `padding`属性上，并将盒子模型的相关区域高亮。\n\n最后，我希望这篇文章对理解在CSS中gaps如何生效的一些细节能有所帮助。\n\n原文：[css-tricks.com/minding-the…](https://css-tricks.com%2Fminding-the-gap \"https://css-tricks.com/minding-the-gap\")","slug":"【翻译】css中的“gap”","published":1,"updated":"2024-04-04T15:27:03.209Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lht0046hajfdiox6br1","content":"<p>你可能已经了解过<a href=\"https://developer.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2Fgap\" title=\"https://developer.mozilla.org/en-US/docs/Web/CSS/gap\">CSS <code>gap</code> property</a>。 准确来说它并不是一个全新的css属性，但是去年它获得了一个重要的特性：除在了CSS Grid中，在Flexbox中也能使用。我相信这个属性比它表面呈现的更复杂，这也让我想回去解释一下它到底是如何运行的。</p>\n<p>让我们仔细看看<code>gap</code>和它的相关属性，并了解它们是怎样生效的以及哪些地方能生效。</p>\n<h3 id=\"关于间隙（gap）的所有属性\"><a href=\"#关于间隙（gap）的所有属性\" class=\"headerlink\" title=\"关于间隙（gap）的所有属性\"></a>关于间隙（gap）的所有属性</h3><p>首先，让我们回顾一下所有<code>gap</code>相关的CSS properties。一共有6个：</p>\n<ul>\n<li><code>grid-row-gap</code></li>\n<li><code>grid-column-gap</code></li>\n<li><code>grid-gap</code></li>\n<li><code>row-gap</code></li>\n<li><code>column-gap</code></li>\n<li><code>gap</code></li>\n</ul>\n<p>我们可以忽略这个列表中的前三项，<code>grid-*</code>属性是在CSS Grid规范拟定早期加入的，在<code>gap</code>普遍使用后便被废弃了。浏览器仍然支持这些废弃的<code>grid-*</code>属性（在撰写本文时），并且处理这些属性时忽略<code>grid-</code>前缀。因此，<code>grid-gap</code> 等同于 <code>gap</code>, <code>grid-column-gap</code> 等同于 <code>column-gap</code> ， <code>grid-row-gap</code> 等同于 <code>row-gap</code>。</p>\n<p>至于另外的三个属性，只要知道<code>gap</code>是其他两个属性的缩写，我们实际上只需要了解<code>row-gap</code>和<code>column-gap</code>的作用。</p>\n<p>对这些属性的理解要基于我们使用的CSS布局类型。让我们先看看这些选项。</p>\n<h3 id=\"在哪些地方可以使用gaps\"><a href=\"#在哪些地方可以使用gaps\" class=\"headerlink\" title=\"在哪些地方可以使用gaps?\"></a>在哪些地方可以使用gaps?</h3><p>你可能和我一样，仅在grid布局中使用过gaps，但是他们现在可以在Flexbox以及多列布局中使用。让我们看看这每种案例。</p>\n<h4 id=\"Grid-gaps\"><a href=\"#Grid-gaps\" class=\"headerlink\" title=\"Grid gaps\"></a>Grid gaps</h4><p>所有浏览器都支持在grid布局中使用gaps，在这种context中理解它们非常容易。</p>\n<ul>\n<li><code>row-gap</code> 在行间中引入空隙</li>\n<li><code>column-gap</code> 在列间中引入空隙</li>\n</ul>\n<p><img src=\"/../imgs/e0e722be9ff347c79397261498aa2a3d.png\" alt=\"image.png\"></p>\n<p>让我们创建一个三列两行布局:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">200px</span> <span class=\"number\">100px</span> <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们获得了如下网格:</p>\n<p><img src=\"/../imgs/fa66a173ce194fedbdd97c27d3715544.png\" alt=\"image.png\"></p>\n<p>图中的线叫做<strong>网格线grid lines</strong>，它们将网格分割为行和列。这些网格线并不真实存在——它们是不可见的，没有宽度的，并且通常是我们开启grid inspector后DevTools展示的。 (in <a href=\"https://webkit.org%2Fblog%2F11588%2Fintroducing-css-grid-inspector%2F\" title=\"https://webkit.org/blog/11588/introducing-css-grid-inspector/\">Safari</a>, <a href=\"https://developer.mozilla.org%2Fen-US%2Fdocs%2FTools%2FPage_Inspector%2FHow_to%2FExamine_grid_layouts\" title=\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_grid_layouts\">Firefox</a>, <a href=\"https://docs.microsoft.com%2Fen-us%2Fmicrosoft-edge%2Fdevtools-guide-chromium%2Fcss%2Fgrid\" title=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/css/grid\">Edge</a> or <a href=\"https://developer.chrome.com%2Fdocs%2Fdevtools%2Fcss%2Fgrid%2F\" title=\"https://developer.chrome.com/docs/devtools/css/grid/\">Chrome</a>).</p>\n<p><img src=\"/../imgs/f7c1eace740044619142888b35fcb580.png\" alt=\"The CSS-Tricks site with DevTools open and docked to the left of the viewport in Firefox. DevTools displays Grid Inspector options and the page contains borders around elements in blue and green to indicate grid track lines.\"></p>\n<p>然而如果我们开始为网格增加gaps，它将表现得好像这些网格线获得了宽度一样。</p>\n<p>让我们增加 <code>20px</code> gap:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">200px</span> <span class=\"number\">100px</span> <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">gap</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在行列间的网格线是<code>20px</code>宽，因此grid items彼此被推得更远了。</p>\n<p><img src=\"/../imgs/aae076ba4570447aa47c7242c4be29f5.png\" alt=\"A 3 by 2 grid of yellow boxes with 20px gaps between the column and row tracks.\"></p>\n<p>值得注意的是，网格块们仍然有着同样的大小（由 <code>grid-template-*</code>定义），因此整个网格会比没有gaps更宽更高。 在网格内，<code>row-gap</code>始终应用于行块间，因此在上面的例子中，如果我们将<code>gap</code>替换为 <code>row-gap</code>，将得到如下示例：</p>\n<p><img src=\"/../imgs/6fd8a8300c434df5968d87088c4d41b3.png\" alt=\"The same 3 by 2 grid with a gap only between the two rows.\"> 而<code>column-gap</code>始终应用于列块间，因此如果将<code>gap</code> 替换为 <code>column-gap</code>将会得到如下结果：</p>\n<p><img src=\"/../imgs/9a1f879dc0884635838d29764d08a6de.png\" alt=\"The same 3 by 2 grid with a gap only between the three columns.\"> Grid布局很简单，因为默认情况下列（columns）是垂直的，而行（rows）是水平的，就像在table中。因此很容易记住<code>column-gap</code> 和 <code>row-gap</code>是用在哪里的。</p>\n<p>现在，事情变得稍微复杂了一点点，由于我们使用了<a href=\"https://developer.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2Fwriting-mode\" title=\"https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode\"><code>writing-mode</code></a>。在web中默认的书写模式（writing mode）是水平的，从左到右，但是同样有上下的书写模式。在这种模式下列（colums）变成水平的，而行（rows）变成垂直的。 要对<code>writing-mode</code>留个心眼，因为它有时候会反直觉。</p>\n<p>这是一个到下一节的很好的过渡，因为在Flexbox中列和行（columns and rows）又有了新的含义。</p>\n<h4 id=\"Flexbox-gaps\"><a href=\"#Flexbox-gaps\" class=\"headerlink\" title=\"Flexbox gaps\"></a>Flexbox gaps</h4><p>让我们讲讲Flexbox布局中的gaps，这里会稍微有些小复杂。我们使用如下例子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，这会产生一个<code>row</code> flex容器，这意味着容器中的items被从左往右放在了同一个水平线上。</p>\n<p><img src=\"/../imgs/130d8810ed5248ecb34cbe8c2082c4c2.png\" alt=\"A default flex container with six yellow boxes stacked horizontally, from left to right. Each one says flex item in it. A purple border is drawn around each item.\"> 在这个案例中，<code>column-gap</code> 在items间生效，而<code>row-gap</code>啥都不会做。这是因为只有一行。但是我们还是先对items增加一些gap:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">column-gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/e00ad4c11d534af69efa593d6876fabf.png\" alt=\"The same six yellow flex items on a single line with 10 pixels between them.\"> 现在让我们将容器的<code>flex-direction</code>切换为<code>column</code>，这样items将会从上往下垂直分布，代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">column-gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下:</p>\n<p><img src=\"/../imgs/d9f5150d7a604f33874fe565cd684888.png\" alt=\"Six yellow rectangles stacked from top to bottom with no gap between them.\"></p>\n<p>gap消失了。当container是<code>row</code>横向布局时，<code>column-gap</code>确实在items之间增加了间距，但是在<code>column</code>纵向布局时并不会生效。</p>\n<p>我们需要使用<code>row-gap</code>让它再次生效，或者我们可以使用<code>gap</code>缩写，它可以在两个方向上产生同样的gap</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/9bdccc09f7be445cb0edef1627f5c567.png\" alt=\"The same six yellow rectangles stacked vertically, but with 10 pixels of space between them.\"></p>\n<p>所以，总结一下， <code>colum-gap</code>始终在垂直中生效（假设默认的 <code>writing-mode</code>下），而<code>row-gap</code>在水平中生效。这并不依赖于flex布局的方向。</p>\n<p>现在让我们看一个涉及换行的列子。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>: wrap;</span><br><span class=\"line\">  <span class=\"attribute\">column-gap</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">row-gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>在这里，如果没有足够的空间在一行上放置所有的内容，我们使用<code>flex-wrap: wrap</code>来允许items换行。</p>\n<p><img src=\"/../imgs/afa38d71d32e47339603f1a510606961.png\" alt=\"Five yellow boxes that wrap into two lines, where three are on the first line and two are on the bottom line. There are differently sized gaps between them based on the space around them.\"></p>\n<p>在这个例子中，<code>column-gap</code> 仍然在items之间垂直生效，而<code>row-gap</code> 在两个flex行间水平生效。</p>\n<p>这和grid布局有一个有趣的不同点。column gaps并不一定跨flex line对齐。这是因为<code>justify-content: center</code>使得items在flex lines中居中了。这样，我们可以看到每个flex line是一个单独布局，而gaps在lines中各自生效。</p>\n<h4 id=\"Multi-column-多列布局的-gaps\"><a href=\"#Multi-column-多列布局的-gaps\" class=\"headerlink\" title=\"Multi-column 多列布局的 gaps\"></a>Multi-column 多列布局的 gaps</h4><p>多栏布局可以很容易地在多列中自动排列内容，就像你可能在传统报纸文章中看到的那样。我们设置了一些列，并且为每列设置了大小。</p>\n<p><img src=\"/../imgs/ac27b01d800e49c6ab28d7b360be367b.png\" alt=\"A three-column layout of plain text with a 1 em gap between columns\"></p>\n<p>gaps在多栏布局中和在grid或flexbox中的表现大相径庭。有三个显著的区别：</p>\n<ul>\n<li><code>row-gap</code> 不会生效,</li>\n<li><code>column-gap</code> 默认值不是0,</li>\n<li>gaps 可以被设置样式.</li>\n</ul>\n<p>让我们分解开来。首先，<code>row-gap</code>不会生效。在多栏布局中不会有多行被分隔开，这意味着只有<code>column-gap</code>能起到效果（<code>gap</code>缩写也一样）。</p>\n<p>其次，不像在grid和flexbox中，<code>column-gap</code>在多栏布局中的默认值是<code>1em</code>,而不是0,所以即使并没有指定任何gap，列之间仍然可以看到被分开了。当然，默认的gap可以被重写，但是这是一个很好的默认设置。</p>\n<p>例子中的代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">column-count</span>: <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后，我们可以在多栏布局中为gap设置样式。我们可以使用<code>column-rule</code>属性，它类似 <code>border</code>:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">column-count</span>: <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">column-gap</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">column-rule</span>: <span class=\"number\">4px</span> solid red;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/6cea5abb144a400aa90e04c5d2477863.png\" alt=\"The same three columns of plain text, but with a red border between the columns.\"></p>\n<p><code>column-rule</code>属性在多列布局中给我们提供了一些样式支持。</p>\n<h3 id=\"浏览器支持\"><a href=\"#浏览器支持\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h3><p><code>gap</code>已经被全面支持。更多信息可见 <a href=\"https://caniuse.com%2F%3Fsearch%3Dgap\" title=\"https://caniuse.com/?search=gap\">caniuse</a>，总结如下:</p>\n<ul>\n<li><strong>Flexbox:</strong>  <code>gap</code> is supported everywhere except for Internet Explorer (which is <a href=\"https://blogs.windows.com%2Fwindowsexperience%2F2021%2F05%2F19%2Fthe-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge%2F\" title=\"https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/\">on its way out</a>), Opera Mini and UC Browser for Android. <a href=\"https://caniuse.com%2Fmdn-css_properties_gap_flex_context\" title=\"https://caniuse.com/mdn-css_properties_gap_flex_context\">caniuse</a> has global support at 87.31%.</li>\n<li><strong>Grid:</strong>  Same thing, but we’re looking at <a href=\"https://caniuse.com%2Fmdn-css_properties_gap_grid_context\" title=\"https://caniuse.com/mdn-css_properties_gap_grid_context\">93.79% global support</a>.</li>\n<li><strong>Multi-column:</strong>  Same thing, too, but it’s unsupported in Safari and has <a href=\"https://caniuse.com%2Fmdn-css_properties_gap_multicol_context\" title=\"https://caniuse.com/mdn-css_properties_gap_multicol_context\">75.59% global support</a>.</li>\n</ul>\n<p>所以总的来说，<code>gap</code>属性已经得到了很好的支持，在多数情况下并不需要进行变通。</p>\n<h3 id=\"为flex和grid中的gap设置样式\"><a href=\"#为flex和grid中的gap设置样式\" class=\"headerlink\" title=\"为flex和grid中的gap设置样式\"></a>为flex和grid中的gap设置样式</h3><p>为flexbox和grid中的<code>gap</code>设置样式是很实用的。坏消息是目前这还并不支持，但好消息是在不远的将来将会实现。  <a href=\"https://github.com%2Fw3c%2Fcsswg-drafts%2Fissues%2F2748%23issuecomment-621543304\" title=\"https://github.com/w3c/csswg-drafts/issues/2748#issuecomment-621543304\">CSS 工作组已经在讨论</a> ， <a href=\"https://bugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1725495\" title=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1725495\">Firefox正着手实现</a>。一旦我们在Firefox实现相关的规范提案，兴许会驱动其他浏览器的实现。</p>\n<p>与此同时，也有其他的办法解决这个问题。</p>\n<p>一个办法是对grid容器设置一个背景色，然后对items设置另一个背景色，最后设置gap让容器的颜色显示出来。</p>\n<p>虽然这是可行的，但也意味着我们不能使用gap在item间引入空隙。这里<code>gap</code>表现为边框的宽度。所以为了在视觉上能够更有效地分隔items，我们需要在items上使用<code>padding</code> 或者 <code>margin</code>,这并不优雅…我们将在下一节中看到。</p>\n<h3 id=\"只能用-margin-或者-padding\"><a href=\"#只能用-margin-或者-padding\" class=\"headerlink\" title=\"只能用 margin 或者 padding?\"></a>只能用 margin 或者 padding?</h3><p>是的，在多数情况下，我们可以使用margin（和&#x2F;或 padding）在元素间增加可见的间隙，但是<code>gap</code>具有很多优势。</p>\n<p>首先，gaps是在<strong>容器级别</strong>定义的间隙，这意味着我们只需要为整个布局定义间隙一次，而它们会在容器中表现一致。使用margins需要在每个item上声明，当items并不一样或来自于不同的复用组件时，这么做可能会变得复杂。</p>\n<p>此外，默认情况下gaps只需要一行代码就可以完成正确的事情。例如，如果我们尝试在flex items之间(<em>in between</em>)引入间隙，而不是周围（around）,<code>margin</code>在一些特殊场景下可能需要<a href=\"https://css-tricks.com%2Fyou-want-enabling-css-selectors-not-disabling-ones%2F\" title=\"https://css-tricks.com/you-want-enabling-css-selectors-not-disabling-ones/\">删除第一个或者最后一个元素的多余margin</a>，而用gaps，我们就不需要这么做。</p>\n<p>如果对每个flex item使用<code>margin: 0 20px</code>，我们会得到：</p>\n<p><img src=\"/../imgs/c70711d142154a3f8681fe8339ac5f22.png\"></p>\n<p>然而如果对容器使用 <code>gap: 40px</code>，我们会得到：</p>\n<p><img src=\"/../imgs/5cd0b10a948842ae91a979859ff8ac1e.png\"></p>\n<p>在grid布局中也类似，在容器级别上定义 <code>gap</code>比在每个item上定义margin并计算网格边缘的margin要简单和优雅得多。</p>\n<p>对每个grid item使用<code>margin: 20px</code>：</p>\n<p><img src=\"/../imgs/d0e700cafcb646fca5460f7d268aa1b9.png\"></p>\n<p>对grid容器使用<code>gap: 40px</code></p>\n<p><img src=\"/../imgs/83cd1beeb0ba4350b6216de5022b1217.png\"></p>\n<h3 id=\"空隙的合计\"><a href=\"#空隙的合计\" class=\"headerlink\" title=\"空隙的合计\"></a>空隙的合计</h3><p>说了这么多，<code>margin</code> 和 <code>gap</code> 并不是互斥的。事实上，有很多方法可以将布局中的元素进一步分隔开，并且它们能够很好地相互结合。</p>\n<p><code>gap</code>属性只是布局容器中盒子间空隙的一部分，<code>margin</code>, <code>padding</code>，以及对齐都可能增加<code>gap</code>已定义的空隙</p>\n<p>让我们考虑这么一个例子，我们创建一个简单的flex布局，并设置宽、gap，使用<code>justify-content</code>分布内容，以及一些margin和padding：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">gap</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">900px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-around;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们设想这段代码效果如下:</p>\n<p><img src=\"/../imgs/82392bd016a74c298191ef55fff8d75c.png\"></p>\n<p>现在让我们仔细瞧瞧items间的空隙是如何产生的：</p>\n<p><img src=\"/../imgs/2bcde11c433a42f1892bfd71b6f856c4.png\"></p>\n<p>正如我们所见，在连续的flex items间，空隙有4种不同的类型：</p>\n<ul>\n<li>在两个连续的items间, <strong>gap</strong>定义了items间的_最小_间隔，就像在这个案例中展示的，items间的空隙可以再增加，但没法更少。</li>\n<li><strong>Margin</strong> 将items相互推开，但是和<code>gap</code>不同，所有的items两侧都增加了空隙。</li>\n<li><strong>Padding</strong> 在每个item内部提供了一些空隙.</li>\n<li>最终，也是因为还有足够的空间剩余， <strong>content distribution</strong>生效，并根据<code>space-around</code>在flex line内均匀地分配items</li>\n</ul>\n<h3 id=\"Debugging-gaps\"><a href=\"#Debugging-gaps\" class=\"headerlink\" title=\"Debugging gaps\"></a>Debugging gaps</h3><p>让我们以一个我非常喜欢的话题来结束：DevTools支持对gaps的debug。总会有出现问题的时候，DevTools的支持是令人欣慰的，但我们确实需要知道在这种情况下哪些工具可以帮助我们。</p>\n<p>对于<code>gap</code>，我能想到两个特殊的特性可能有用。</p>\n<h4 id=\"我的gap生效了吗\"><a href=\"#我的gap生效了吗\" class=\"headerlink\" title=\"我的gap生效了吗?\"></a>我的gap生效了吗?</h4><p>除非我们拼错了<code>gap</code>，或者提供了一个非法的值，这个属性将始终应用于页面，例如，这是正确的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.some-class</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">gap</span>: <span class=\"number\">3em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它并不会产生任何效果，但是这是合法的CSS，并且浏览器并不介意 <code>gap</code>并不会在block布局中生效。但是Firefox有个<a href=\"https://hacks.mozilla.org%2F2019%2F10%2Ffirefox-70-a-bountiful-release-for-all%2F%23developertools\" title=\"https://hacks.mozilla.org/2019/10/firefox-70-a-bountiful-release-for-all/#developertools\">Inactive CSS</a>的特性：关注合法且有意义的CSS。在这个场景下，Firefox DevTools会在 Inspector显示一个警告。</p>\n<p><img src=\"/../imgs/627e6d35689843cda4b8f515bc81edd6.png\"></p>\n<h4 id=\"Where-is-my-gap\"><a href=\"#Where-is-my-gap\" class=\"headerlink\" title=\"Where is my gap?\"></a><a href=\"https://css-tricks.com%2Fminding-the-gap%2F%23where-is-my-gap\" title=\"https://css-tricks.com/minding-the-gap/#where-is-my-gap\"></a>Where is my gap?</h4><p>Chrome和Edge也有个非常有用的功能来调试gaps。它是通过Microsoft和Google的合作，旨在在Chromium（是支持这两种浏览器以及其他浏览器的开源项目）构建布局调试工具。在这些浏览器里，你可以将鼠标悬停在 Styles panel里的各个属性上，然后你就可以看到它们在页面上的效果。</p>\n<p><img src=\"/../imgs/9cae13a7088c416281438340e15e85ba.png\"></p>\n<p>光标目前悬停在<code>gap</code> 和 <code>justify-content</code> 属性上，页面上的相关区域会高亮显示这些属性的生效了。</p>\n<p><img src=\"/../imgs/e50340b5c1cb474d9601715ee83b358f.png\"></p>\n<p>光标悬停在 <code>margin</code> 和 <code>padding</code>属性上，并将盒子模型的相关区域高亮。</p>\n<p>最后，我希望这篇文章对理解在CSS中gaps如何生效的一些细节能有所帮助。</p>\n<p>原文：<a href=\"https://css-tricks.com%2Fminding-the-gap\" title=\"https://css-tricks.com/minding-the-gap\">css-tricks.com&#x2F;minding-the…</a></p>\n","length":5720,"excerpt":"","more":"<p>你可能已经了解过<a href=\"https://developer.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2Fgap\" title=\"https://developer.mozilla.org/en-US/docs/Web/CSS/gap\">CSS <code>gap</code> property</a>。 准确来说它并不是一个全新的css属性，但是去年它获得了一个重要的特性：除在了CSS Grid中，在Flexbox中也能使用。我相信这个属性比它表面呈现的更复杂，这也让我想回去解释一下它到底是如何运行的。</p>\n<p>让我们仔细看看<code>gap</code>和它的相关属性，并了解它们是怎样生效的以及哪些地方能生效。</p>\n<h3 id=\"关于间隙（gap）的所有属性\"><a href=\"#关于间隙（gap）的所有属性\" class=\"headerlink\" title=\"关于间隙（gap）的所有属性\"></a>关于间隙（gap）的所有属性</h3><p>首先，让我们回顾一下所有<code>gap</code>相关的CSS properties。一共有6个：</p>\n<ul>\n<li><code>grid-row-gap</code></li>\n<li><code>grid-column-gap</code></li>\n<li><code>grid-gap</code></li>\n<li><code>row-gap</code></li>\n<li><code>column-gap</code></li>\n<li><code>gap</code></li>\n</ul>\n<p>我们可以忽略这个列表中的前三项，<code>grid-*</code>属性是在CSS Grid规范拟定早期加入的，在<code>gap</code>普遍使用后便被废弃了。浏览器仍然支持这些废弃的<code>grid-*</code>属性（在撰写本文时），并且处理这些属性时忽略<code>grid-</code>前缀。因此，<code>grid-gap</code> 等同于 <code>gap</code>, <code>grid-column-gap</code> 等同于 <code>column-gap</code> ， <code>grid-row-gap</code> 等同于 <code>row-gap</code>。</p>\n<p>至于另外的三个属性，只要知道<code>gap</code>是其他两个属性的缩写，我们实际上只需要了解<code>row-gap</code>和<code>column-gap</code>的作用。</p>\n<p>对这些属性的理解要基于我们使用的CSS布局类型。让我们先看看这些选项。</p>\n<h3 id=\"在哪些地方可以使用gaps\"><a href=\"#在哪些地方可以使用gaps\" class=\"headerlink\" title=\"在哪些地方可以使用gaps?\"></a>在哪些地方可以使用gaps?</h3><p>你可能和我一样，仅在grid布局中使用过gaps，但是他们现在可以在Flexbox以及多列布局中使用。让我们看看这每种案例。</p>\n<h4 id=\"Grid-gaps\"><a href=\"#Grid-gaps\" class=\"headerlink\" title=\"Grid gaps\"></a>Grid gaps</h4><p>所有浏览器都支持在grid布局中使用gaps，在这种context中理解它们非常容易。</p>\n<ul>\n<li><code>row-gap</code> 在行间中引入空隙</li>\n<li><code>column-gap</code> 在列间中引入空隙</li>\n</ul>\n<p><img src=\"/../imgs/e0e722be9ff347c79397261498aa2a3d.png\" alt=\"image.png\"></p>\n<p>让我们创建一个三列两行布局:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">200px</span> <span class=\"number\">100px</span> <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们获得了如下网格:</p>\n<p><img src=\"/../imgs/fa66a173ce194fedbdd97c27d3715544.png\" alt=\"image.png\"></p>\n<p>图中的线叫做<strong>网格线grid lines</strong>，它们将网格分割为行和列。这些网格线并不真实存在——它们是不可见的，没有宽度的，并且通常是我们开启grid inspector后DevTools展示的。 (in <a href=\"https://webkit.org%2Fblog%2F11588%2Fintroducing-css-grid-inspector%2F\" title=\"https://webkit.org/blog/11588/introducing-css-grid-inspector/\">Safari</a>, <a href=\"https://developer.mozilla.org%2Fen-US%2Fdocs%2FTools%2FPage_Inspector%2FHow_to%2FExamine_grid_layouts\" title=\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_grid_layouts\">Firefox</a>, <a href=\"https://docs.microsoft.com%2Fen-us%2Fmicrosoft-edge%2Fdevtools-guide-chromium%2Fcss%2Fgrid\" title=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/css/grid\">Edge</a> or <a href=\"https://developer.chrome.com%2Fdocs%2Fdevtools%2Fcss%2Fgrid%2F\" title=\"https://developer.chrome.com/docs/devtools/css/grid/\">Chrome</a>).</p>\n<p><img src=\"/../imgs/f7c1eace740044619142888b35fcb580.png\" alt=\"The CSS-Tricks site with DevTools open and docked to the left of the viewport in Firefox. DevTools displays Grid Inspector options and the page contains borders around elements in blue and green to indicate grid track lines.\"></p>\n<p>然而如果我们开始为网格增加gaps，它将表现得好像这些网格线获得了宽度一样。</p>\n<p>让我们增加 <code>20px</code> gap:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">200px</span> <span class=\"number\">100px</span> <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">gap</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在行列间的网格线是<code>20px</code>宽，因此grid items彼此被推得更远了。</p>\n<p><img src=\"/../imgs/aae076ba4570447aa47c7242c4be29f5.png\" alt=\"A 3 by 2 grid of yellow boxes with 20px gaps between the column and row tracks.\"></p>\n<p>值得注意的是，网格块们仍然有着同样的大小（由 <code>grid-template-*</code>定义），因此整个网格会比没有gaps更宽更高。 在网格内，<code>row-gap</code>始终应用于行块间，因此在上面的例子中，如果我们将<code>gap</code>替换为 <code>row-gap</code>，将得到如下示例：</p>\n<p><img src=\"/../imgs/6fd8a8300c434df5968d87088c4d41b3.png\" alt=\"The same 3 by 2 grid with a gap only between the two rows.\"> 而<code>column-gap</code>始终应用于列块间，因此如果将<code>gap</code> 替换为 <code>column-gap</code>将会得到如下结果：</p>\n<p><img src=\"/../imgs/9a1f879dc0884635838d29764d08a6de.png\" alt=\"The same 3 by 2 grid with a gap only between the three columns.\"> Grid布局很简单，因为默认情况下列（columns）是垂直的，而行（rows）是水平的，就像在table中。因此很容易记住<code>column-gap</code> 和 <code>row-gap</code>是用在哪里的。</p>\n<p>现在，事情变得稍微复杂了一点点，由于我们使用了<a href=\"https://developer.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2Fwriting-mode\" title=\"https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode\"><code>writing-mode</code></a>。在web中默认的书写模式（writing mode）是水平的，从左到右，但是同样有上下的书写模式。在这种模式下列（colums）变成水平的，而行（rows）变成垂直的。 要对<code>writing-mode</code>留个心眼，因为它有时候会反直觉。</p>\n<p>这是一个到下一节的很好的过渡，因为在Flexbox中列和行（columns and rows）又有了新的含义。</p>\n<h4 id=\"Flexbox-gaps\"><a href=\"#Flexbox-gaps\" class=\"headerlink\" title=\"Flexbox gaps\"></a>Flexbox gaps</h4><p>让我们讲讲Flexbox布局中的gaps，这里会稍微有些小复杂。我们使用如下例子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，这会产生一个<code>row</code> flex容器，这意味着容器中的items被从左往右放在了同一个水平线上。</p>\n<p><img src=\"/../imgs/130d8810ed5248ecb34cbe8c2082c4c2.png\" alt=\"A default flex container with six yellow boxes stacked horizontally, from left to right. Each one says flex item in it. A purple border is drawn around each item.\"> 在这个案例中，<code>column-gap</code> 在items间生效，而<code>row-gap</code>啥都不会做。这是因为只有一行。但是我们还是先对items增加一些gap:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">column-gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/e00ad4c11d534af69efa593d6876fabf.png\" alt=\"The same six yellow flex items on a single line with 10 pixels between them.\"> 现在让我们将容器的<code>flex-direction</code>切换为<code>column</code>，这样items将会从上往下垂直分布，代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">column-gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下:</p>\n<p><img src=\"/../imgs/d9f5150d7a604f33874fe565cd684888.png\" alt=\"Six yellow rectangles stacked from top to bottom with no gap between them.\"></p>\n<p>gap消失了。当container是<code>row</code>横向布局时，<code>column-gap</code>确实在items之间增加了间距，但是在<code>column</code>纵向布局时并不会生效。</p>\n<p>我们需要使用<code>row-gap</code>让它再次生效，或者我们可以使用<code>gap</code>缩写，它可以在两个方向上产生同样的gap</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/9bdccc09f7be445cb0edef1627f5c567.png\" alt=\"The same six yellow rectangles stacked vertically, but with 10 pixels of space between them.\"></p>\n<p>所以，总结一下， <code>colum-gap</code>始终在垂直中生效（假设默认的 <code>writing-mode</code>下），而<code>row-gap</code>在水平中生效。这并不依赖于flex布局的方向。</p>\n<p>现在让我们看一个涉及换行的列子。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>: wrap;</span><br><span class=\"line\">  <span class=\"attribute\">column-gap</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">row-gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>在这里，如果没有足够的空间在一行上放置所有的内容，我们使用<code>flex-wrap: wrap</code>来允许items换行。</p>\n<p><img src=\"/../imgs/afa38d71d32e47339603f1a510606961.png\" alt=\"Five yellow boxes that wrap into two lines, where three are on the first line and two are on the bottom line. There are differently sized gaps between them based on the space around them.\"></p>\n<p>在这个例子中，<code>column-gap</code> 仍然在items之间垂直生效，而<code>row-gap</code> 在两个flex行间水平生效。</p>\n<p>这和grid布局有一个有趣的不同点。column gaps并不一定跨flex line对齐。这是因为<code>justify-content: center</code>使得items在flex lines中居中了。这样，我们可以看到每个flex line是一个单独布局，而gaps在lines中各自生效。</p>\n<h4 id=\"Multi-column-多列布局的-gaps\"><a href=\"#Multi-column-多列布局的-gaps\" class=\"headerlink\" title=\"Multi-column 多列布局的 gaps\"></a>Multi-column 多列布局的 gaps</h4><p>多栏布局可以很容易地在多列中自动排列内容，就像你可能在传统报纸文章中看到的那样。我们设置了一些列，并且为每列设置了大小。</p>\n<p><img src=\"/../imgs/ac27b01d800e49c6ab28d7b360be367b.png\" alt=\"A three-column layout of plain text with a 1 em gap between columns\"></p>\n<p>gaps在多栏布局中和在grid或flexbox中的表现大相径庭。有三个显著的区别：</p>\n<ul>\n<li><code>row-gap</code> 不会生效,</li>\n<li><code>column-gap</code> 默认值不是0,</li>\n<li>gaps 可以被设置样式.</li>\n</ul>\n<p>让我们分解开来。首先，<code>row-gap</code>不会生效。在多栏布局中不会有多行被分隔开，这意味着只有<code>column-gap</code>能起到效果（<code>gap</code>缩写也一样）。</p>\n<p>其次，不像在grid和flexbox中，<code>column-gap</code>在多栏布局中的默认值是<code>1em</code>,而不是0,所以即使并没有指定任何gap，列之间仍然可以看到被分开了。当然，默认的gap可以被重写，但是这是一个很好的默认设置。</p>\n<p>例子中的代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">column-count</span>: <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后，我们可以在多栏布局中为gap设置样式。我们可以使用<code>column-rule</code>属性，它类似 <code>border</code>:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">column-count</span>: <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">column-gap</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">column-rule</span>: <span class=\"number\">4px</span> solid red;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/6cea5abb144a400aa90e04c5d2477863.png\" alt=\"The same three columns of plain text, but with a red border between the columns.\"></p>\n<p><code>column-rule</code>属性在多列布局中给我们提供了一些样式支持。</p>\n<h3 id=\"浏览器支持\"><a href=\"#浏览器支持\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h3><p><code>gap</code>已经被全面支持。更多信息可见 <a href=\"https://caniuse.com%2F%3Fsearch%3Dgap\" title=\"https://caniuse.com/?search=gap\">caniuse</a>，总结如下:</p>\n<ul>\n<li><strong>Flexbox:</strong>  <code>gap</code> is supported everywhere except for Internet Explorer (which is <a href=\"https://blogs.windows.com%2Fwindowsexperience%2F2021%2F05%2F19%2Fthe-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge%2F\" title=\"https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/\">on its way out</a>), Opera Mini and UC Browser for Android. <a href=\"https://caniuse.com%2Fmdn-css_properties_gap_flex_context\" title=\"https://caniuse.com/mdn-css_properties_gap_flex_context\">caniuse</a> has global support at 87.31%.</li>\n<li><strong>Grid:</strong>  Same thing, but we’re looking at <a href=\"https://caniuse.com%2Fmdn-css_properties_gap_grid_context\" title=\"https://caniuse.com/mdn-css_properties_gap_grid_context\">93.79% global support</a>.</li>\n<li><strong>Multi-column:</strong>  Same thing, too, but it’s unsupported in Safari and has <a href=\"https://caniuse.com%2Fmdn-css_properties_gap_multicol_context\" title=\"https://caniuse.com/mdn-css_properties_gap_multicol_context\">75.59% global support</a>.</li>\n</ul>\n<p>所以总的来说，<code>gap</code>属性已经得到了很好的支持，在多数情况下并不需要进行变通。</p>\n<h3 id=\"为flex和grid中的gap设置样式\"><a href=\"#为flex和grid中的gap设置样式\" class=\"headerlink\" title=\"为flex和grid中的gap设置样式\"></a>为flex和grid中的gap设置样式</h3><p>为flexbox和grid中的<code>gap</code>设置样式是很实用的。坏消息是目前这还并不支持，但好消息是在不远的将来将会实现。  <a href=\"https://github.com%2Fw3c%2Fcsswg-drafts%2Fissues%2F2748%23issuecomment-621543304\" title=\"https://github.com/w3c/csswg-drafts/issues/2748#issuecomment-621543304\">CSS 工作组已经在讨论</a> ， <a href=\"https://bugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1725495\" title=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1725495\">Firefox正着手实现</a>。一旦我们在Firefox实现相关的规范提案，兴许会驱动其他浏览器的实现。</p>\n<p>与此同时，也有其他的办法解决这个问题。</p>\n<p>一个办法是对grid容器设置一个背景色，然后对items设置另一个背景色，最后设置gap让容器的颜色显示出来。</p>\n<p>虽然这是可行的，但也意味着我们不能使用gap在item间引入空隙。这里<code>gap</code>表现为边框的宽度。所以为了在视觉上能够更有效地分隔items，我们需要在items上使用<code>padding</code> 或者 <code>margin</code>,这并不优雅…我们将在下一节中看到。</p>\n<h3 id=\"只能用-margin-或者-padding\"><a href=\"#只能用-margin-或者-padding\" class=\"headerlink\" title=\"只能用 margin 或者 padding?\"></a>只能用 margin 或者 padding?</h3><p>是的，在多数情况下，我们可以使用margin（和&#x2F;或 padding）在元素间增加可见的间隙，但是<code>gap</code>具有很多优势。</p>\n<p>首先，gaps是在<strong>容器级别</strong>定义的间隙，这意味着我们只需要为整个布局定义间隙一次，而它们会在容器中表现一致。使用margins需要在每个item上声明，当items并不一样或来自于不同的复用组件时，这么做可能会变得复杂。</p>\n<p>此外，默认情况下gaps只需要一行代码就可以完成正确的事情。例如，如果我们尝试在flex items之间(<em>in between</em>)引入间隙，而不是周围（around）,<code>margin</code>在一些特殊场景下可能需要<a href=\"https://css-tricks.com%2Fyou-want-enabling-css-selectors-not-disabling-ones%2F\" title=\"https://css-tricks.com/you-want-enabling-css-selectors-not-disabling-ones/\">删除第一个或者最后一个元素的多余margin</a>，而用gaps，我们就不需要这么做。</p>\n<p>如果对每个flex item使用<code>margin: 0 20px</code>，我们会得到：</p>\n<p><img src=\"/../imgs/c70711d142154a3f8681fe8339ac5f22.png\"></p>\n<p>然而如果对容器使用 <code>gap: 40px</code>，我们会得到：</p>\n<p><img src=\"/../imgs/5cd0b10a948842ae91a979859ff8ac1e.png\"></p>\n<p>在grid布局中也类似，在容器级别上定义 <code>gap</code>比在每个item上定义margin并计算网格边缘的margin要简单和优雅得多。</p>\n<p>对每个grid item使用<code>margin: 20px</code>：</p>\n<p><img src=\"/../imgs/d0e700cafcb646fca5460f7d268aa1b9.png\"></p>\n<p>对grid容器使用<code>gap: 40px</code></p>\n<p><img src=\"/../imgs/83cd1beeb0ba4350b6216de5022b1217.png\"></p>\n<h3 id=\"空隙的合计\"><a href=\"#空隙的合计\" class=\"headerlink\" title=\"空隙的合计\"></a>空隙的合计</h3><p>说了这么多，<code>margin</code> 和 <code>gap</code> 并不是互斥的。事实上，有很多方法可以将布局中的元素进一步分隔开，并且它们能够很好地相互结合。</p>\n<p><code>gap</code>属性只是布局容器中盒子间空隙的一部分，<code>margin</code>, <code>padding</code>，以及对齐都可能增加<code>gap</code>已定义的空隙</p>\n<p>让我们考虑这么一个例子，我们创建一个简单的flex布局，并设置宽、gap，使用<code>justify-content</code>分布内容，以及一些margin和padding：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">gap</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">900px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-around;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们设想这段代码效果如下:</p>\n<p><img src=\"/../imgs/82392bd016a74c298191ef55fff8d75c.png\"></p>\n<p>现在让我们仔细瞧瞧items间的空隙是如何产生的：</p>\n<p><img src=\"/../imgs/2bcde11c433a42f1892bfd71b6f856c4.png\"></p>\n<p>正如我们所见，在连续的flex items间，空隙有4种不同的类型：</p>\n<ul>\n<li>在两个连续的items间, <strong>gap</strong>定义了items间的_最小_间隔，就像在这个案例中展示的，items间的空隙可以再增加，但没法更少。</li>\n<li><strong>Margin</strong> 将items相互推开，但是和<code>gap</code>不同，所有的items两侧都增加了空隙。</li>\n<li><strong>Padding</strong> 在每个item内部提供了一些空隙.</li>\n<li>最终，也是因为还有足够的空间剩余， <strong>content distribution</strong>生效，并根据<code>space-around</code>在flex line内均匀地分配items</li>\n</ul>\n<h3 id=\"Debugging-gaps\"><a href=\"#Debugging-gaps\" class=\"headerlink\" title=\"Debugging gaps\"></a>Debugging gaps</h3><p>让我们以一个我非常喜欢的话题来结束：DevTools支持对gaps的debug。总会有出现问题的时候，DevTools的支持是令人欣慰的，但我们确实需要知道在这种情况下哪些工具可以帮助我们。</p>\n<p>对于<code>gap</code>，我能想到两个特殊的特性可能有用。</p>\n<h4 id=\"我的gap生效了吗\"><a href=\"#我的gap生效了吗\" class=\"headerlink\" title=\"我的gap生效了吗?\"></a>我的gap生效了吗?</h4><p>除非我们拼错了<code>gap</code>，或者提供了一个非法的值，这个属性将始终应用于页面，例如，这是正确的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.some-class</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">gap</span>: <span class=\"number\">3em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它并不会产生任何效果，但是这是合法的CSS，并且浏览器并不介意 <code>gap</code>并不会在block布局中生效。但是Firefox有个<a href=\"https://hacks.mozilla.org%2F2019%2F10%2Ffirefox-70-a-bountiful-release-for-all%2F%23developertools\" title=\"https://hacks.mozilla.org/2019/10/firefox-70-a-bountiful-release-for-all/#developertools\">Inactive CSS</a>的特性：关注合法且有意义的CSS。在这个场景下，Firefox DevTools会在 Inspector显示一个警告。</p>\n<p><img src=\"/../imgs/627e6d35689843cda4b8f515bc81edd6.png\"></p>\n<h4 id=\"Where-is-my-gap\"><a href=\"#Where-is-my-gap\" class=\"headerlink\" title=\"Where is my gap?\"></a><a href=\"https://css-tricks.com%2Fminding-the-gap%2F%23where-is-my-gap\" title=\"https://css-tricks.com/minding-the-gap/#where-is-my-gap\"></a>Where is my gap?</h4><p>Chrome和Edge也有个非常有用的功能来调试gaps。它是通过Microsoft和Google的合作，旨在在Chromium（是支持这两种浏览器以及其他浏览器的开源项目）构建布局调试工具。在这些浏览器里，你可以将鼠标悬停在 Styles panel里的各个属性上，然后你就可以看到它们在页面上的效果。</p>\n<p><img src=\"/../imgs/9cae13a7088c416281438340e15e85ba.png\"></p>\n<p>光标目前悬停在<code>gap</code> 和 <code>justify-content</code> 属性上，页面上的相关区域会高亮显示这些属性的生效了。</p>\n<p><img src=\"/../imgs/e50340b5c1cb474d9601715ee83b358f.png\"></p>\n<p>光标悬停在 <code>margin</code> 和 <code>padding</code>属性上，并将盒子模型的相关区域高亮。</p>\n<p>最后，我希望这篇文章对理解在CSS中gaps如何生效的一些细节能有所帮助。</p>\n<p>原文：<a href=\"https://css-tricks.com%2Fminding-the-gap\" title=\"https://css-tricks.com/minding-the-gap\">css-tricks.com&#x2F;minding-the…</a></p>\n"},{"title":"【翻译】对某些元素抵消样式不如活用选择器","date":"2021-10-08T16:00:00.000Z","_content":"\n我很认同Silvestar Bistrović的[建议](https://www.silvestar.codes%2Farticles%2Fyou-want-a-single-enabling-selector-not-the-one-that-disables-the-rule-of-the-previous-one%2F \"https://www.silvestar.codes/articles/you-want-a-single-enabling-selector-not-the-one-that-disables-the-rule-of-the-previous-one/\")\n\n> An enabling selector is what I call a selector that does a job without disabling the particular rule.\n\n一个经典的例子是将`margin`一股脑应用到所有元素后，却又不得不对最后一个元素删除margin，因为它在你不需要的地方又增加了空白。\n\n```css\n.card {\n  margin-bottom: 1rem;\n}\n\n/* Wait but not on the last one!! */\n.parent-of-cards :last-child {\n  margin-bottom: 0;\n}\n```\n\n你可能这么做...\n\n```css\n/* \"Disabling\" rule */\n.card:last-child {\n  margin-bottom: 0;\n}\n```\n\n但是相比使用父级选择器，这么写可能并没有足够的上下文信息。\n\n另一个写法是这样的:\n\n```css\n.card:not(:last-child) {\n  margin-bottom: 1rem;\n}\n```\n\n这就是Silvestar所说的“enabling”，因为你只需要应用这项CSS rule，而不是应用某些CSS rule，然后使用另一个选择器删除它。我也觉得这理解起来有点困难，同时也容易出错。\n\n另一个例子是[Lobotomized Owls](https://alistapart.com%2Farticle%2Faxiomatic-css-and-lobotomized-owls%2F \"https://alistapart.com/article/axiomatic-css-and-lobotomized-owls/\")的精简版：\n\n```css\n/* Only space them out if they stack */\n.card + .card {\n  margin-top: 1rem;\n}\n```\n\n我认为长远来看`gap`才是方向。由父级承担职责，而不是子元素，因此可以使用如下选择器：\n\n```css\n.parent-of-cards {\n  display: grid;\n  gap: 1rem;\n}\n```\n\n原文：[css-tricks.com/you-want-en…](https://css-tricks.com%2Fyou-want-enabling-css-selectors-not-disabling-ones%2F \"https://css-tricks.com/you-want-enabling-css-selectors-not-disabling-ones/\")","source":"_posts/【翻译】对某些元素抵消样式不如活用选择器.md","raw":"---\n title: \"【翻译】对某些元素抵消样式不如活用选择器\"\n date: 2021-10-09\n tags: [前端]\n categories: [前端笔记]\n---\n\n我很认同Silvestar Bistrović的[建议](https://www.silvestar.codes%2Farticles%2Fyou-want-a-single-enabling-selector-not-the-one-that-disables-the-rule-of-the-previous-one%2F \"https://www.silvestar.codes/articles/you-want-a-single-enabling-selector-not-the-one-that-disables-the-rule-of-the-previous-one/\")\n\n> An enabling selector is what I call a selector that does a job without disabling the particular rule.\n\n一个经典的例子是将`margin`一股脑应用到所有元素后，却又不得不对最后一个元素删除margin，因为它在你不需要的地方又增加了空白。\n\n```css\n.card {\n  margin-bottom: 1rem;\n}\n\n/* Wait but not on the last one!! */\n.parent-of-cards :last-child {\n  margin-bottom: 0;\n}\n```\n\n你可能这么做...\n\n```css\n/* \"Disabling\" rule */\n.card:last-child {\n  margin-bottom: 0;\n}\n```\n\n但是相比使用父级选择器，这么写可能并没有足够的上下文信息。\n\n另一个写法是这样的:\n\n```css\n.card:not(:last-child) {\n  margin-bottom: 1rem;\n}\n```\n\n这就是Silvestar所说的“enabling”，因为你只需要应用这项CSS rule，而不是应用某些CSS rule，然后使用另一个选择器删除它。我也觉得这理解起来有点困难，同时也容易出错。\n\n另一个例子是[Lobotomized Owls](https://alistapart.com%2Farticle%2Faxiomatic-css-and-lobotomized-owls%2F \"https://alistapart.com/article/axiomatic-css-and-lobotomized-owls/\")的精简版：\n\n```css\n/* Only space them out if they stack */\n.card + .card {\n  margin-top: 1rem;\n}\n```\n\n我认为长远来看`gap`才是方向。由父级承担职责，而不是子元素，因此可以使用如下选择器：\n\n```css\n.parent-of-cards {\n  display: grid;\n  gap: 1rem;\n}\n```\n\n原文：[css-tricks.com/you-want-en…](https://css-tricks.com%2Fyou-want-enabling-css-selectors-not-disabling-ones%2F \"https://css-tricks.com/you-want-enabling-css-selectors-not-disabling-ones/\")","slug":"【翻译】对某些元素抵消样式不如活用选择器","published":1,"updated":"2024-04-04T15:27:03.206Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lht004ahajf0mmb528e","content":"<p>我很认同Silvestar Bistrović的<a href=\"https://www.silvestar.codes%2Farticles%2Fyou-want-a-single-enabling-selector-not-the-one-that-disables-the-rule-of-the-previous-one%2F\" title=\"https://www.silvestar.codes/articles/you-want-a-single-enabling-selector-not-the-one-that-disables-the-rule-of-the-previous-one/\">建议</a></p>\n<blockquote>\n<p>An enabling selector is what I call a selector that does a job without disabling the particular rule.</p>\n</blockquote>\n<p>一个经典的例子是将<code>margin</code>一股脑应用到所有元素后，却又不得不对最后一个元素删除margin，因为它在你不需要的地方又增加了空白。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Wait but not on the last one!! */</span></span><br><span class=\"line\"><span class=\"selector-class\">.parent-of-cards</span> <span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可能这么做…</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* &quot;Disabling&quot; rule */</span></span><br><span class=\"line\"><span class=\"selector-class\">.card</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是相比使用父级选择器，这么写可能并没有足够的上下文信息。</p>\n<p>另一个写法是这样的:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.card</span><span class=\"selector-pseudo\">:not</span>(<span class=\"selector-pseudo\">:last-child</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这就是Silvestar所说的“enabling”，因为你只需要应用这项CSS rule，而不是应用某些CSS rule，然后使用另一个选择器删除它。我也觉得这理解起来有点困难，同时也容易出错。</p>\n<p>另一个例子是<a href=\"https://alistapart.com%2Farticle%2Faxiomatic-css-and-lobotomized-owls%2F\" title=\"https://alistapart.com/article/axiomatic-css-and-lobotomized-owls/\">Lobotomized Owls</a>的精简版：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Only space them out if they stack */</span></span><br><span class=\"line\"><span class=\"selector-class\">.card</span> + <span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我认为长远来看<code>gap</code>才是方向。由父级承担职责，而不是子元素，因此可以使用如下选择器：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent-of-cards</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">gap</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原文：<a href=\"https://css-tricks.com%2Fyou-want-enabling-css-selectors-not-disabling-ones%2F\" title=\"https://css-tricks.com/you-want-enabling-css-selectors-not-disabling-ones/\">css-tricks.com&#x2F;you-want-en…</a></p>\n","length":807,"excerpt":"","more":"<p>我很认同Silvestar Bistrović的<a href=\"https://www.silvestar.codes%2Farticles%2Fyou-want-a-single-enabling-selector-not-the-one-that-disables-the-rule-of-the-previous-one%2F\" title=\"https://www.silvestar.codes/articles/you-want-a-single-enabling-selector-not-the-one-that-disables-the-rule-of-the-previous-one/\">建议</a></p>\n<blockquote>\n<p>An enabling selector is what I call a selector that does a job without disabling the particular rule.</p>\n</blockquote>\n<p>一个经典的例子是将<code>margin</code>一股脑应用到所有元素后，却又不得不对最后一个元素删除margin，因为它在你不需要的地方又增加了空白。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Wait but not on the last one!! */</span></span><br><span class=\"line\"><span class=\"selector-class\">.parent-of-cards</span> <span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可能这么做…</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* &quot;Disabling&quot; rule */</span></span><br><span class=\"line\"><span class=\"selector-class\">.card</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是相比使用父级选择器，这么写可能并没有足够的上下文信息。</p>\n<p>另一个写法是这样的:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.card</span><span class=\"selector-pseudo\">:not</span>(<span class=\"selector-pseudo\">:last-child</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这就是Silvestar所说的“enabling”，因为你只需要应用这项CSS rule，而不是应用某些CSS rule，然后使用另一个选择器删除它。我也觉得这理解起来有点困难，同时也容易出错。</p>\n<p>另一个例子是<a href=\"https://alistapart.com%2Farticle%2Faxiomatic-css-and-lobotomized-owls%2F\" title=\"https://alistapart.com/article/axiomatic-css-and-lobotomized-owls/\">Lobotomized Owls</a>的精简版：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Only space them out if they stack */</span></span><br><span class=\"line\"><span class=\"selector-class\">.card</span> + <span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我认为长远来看<code>gap</code>才是方向。由父级承担职责，而不是子元素，因此可以使用如下选择器：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent-of-cards</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">gap</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原文：<a href=\"https://css-tricks.com%2Fyou-want-enabling-css-selectors-not-disabling-ones%2F\" title=\"https://css-tricks.com/you-want-enabling-css-selectors-not-disabling-ones/\">css-tricks.com&#x2F;you-want-en…</a></p>\n"},{"title":"三分钟搞懂js属性描述符之基础知识","date":"2019-12-30T16:00:00.000Z","_content":"\n前言：这年头所有用过vue的人都知道get，set，Object.defineProperty，可听到属性描述符却有点懵。另外实际使用的场景有哪些，又有哪些坑可能很多人并不清楚，因此打算分两篇文章，一篇讲基础知识，另一篇讲实际应用中的坑。\n\n什么是属性描述符对象\n----------\n\n下面这么个对象就是完整的属性描述符。\n\n```\n{\n    configurable: false,\n    enumberable: false,\n    value: 'value',\n    writable: false,\n    get: function() {\n        console.log('get')\n    },\n    set: function(val) {\n        console.log('set')\n    }\n}\n```\n\n当然正常情况下你不会看到完整的属性描述符。它的每个属性都是**可选的**。当一个属性描述符没有没有get和set时，它是个**数据描述符**。当它没有value和writable时，它是个**存取描述符**。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常。\n\n描述符可同时具有的键值\n\nPropertyDescriptor\n\nconfigurable\n\nenumerable\n\nvalue\n\nwritable\n\nget\n\nset\n\n数据描述符\n\nYes\n\nYes\n\nYes\n\nYes\n\nNo\n\nNo\n\n存取描述符\n\nYes\n\nYes\n\nNo\n\nNo\n\nYes\n\nYes\n\n每种属性的含义\n-------\n\n`configurable`  \n当且仅当该属性的 configurable 为 true 时，该属性`描述符`才能够被改变，同时该属性也能从对应的对象上被删除。\n\n`enumerable`  \n当且仅当该属性的`enumerable`为`true`时，该属性才能够出现在对象的枚举属性中。\n\n`value`  \n该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。\n\n`writable`  \n当且仅当该属性的`writable`为`true`时，`value`才能被[赋值运算符](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FAssignment_Operators \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\")改变。\n\n`get`  \n一个给属性提供 getter 的方法，如果没有 getter 则为 `undefined`。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入`this`对象（由于继承关系，这里的`this`并不一定是定义该属性的对象）。\n\n`set`  \n一个给属性提供 setter 的方法，如果没有 setter 则为 `undefined`。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。\n\n### 关于默认值\n\n以上的定义和解释来自于mdn，但是删除了默认值的说明。默认值分两种语境，一个是我没有设置属性描述符时，就去取它；另一种是我设置属性描述符，但是我省略了部分属性。**mdn上的默认值是后者**。\n\n获取属性描述符\n-------\n\n`Object.getOwnPropertyDescriptor`和`Object.getOwnPropertyDescriptors`,两者模式差不多，懂一个就懂另一个了。  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d37237e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp \"image.png\")  \n可见其中writable、enumerable、configurable默认是true\n\n设置属性描述符\n-------\n\n`Object.defineProperty`和`Object.defineProperties`，同样一个就懂另一个了。  \n我们分别设置get和value，然后再获取属性描述符看看区别  \nget:  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d34e349~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp \"image.png\")  \nvalue:  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d4ce573~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp \"image.png\")  \n可以看到，当我设置了属性描述符后writable、enumerable、configurable默认是false。  \n**enumerable为false时**  \n并且细心的同学发现了，对象的这个属性名的颜色有点不一样。不过此时我们先忽略这个颜色的区别。  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d506699~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp \"image.png\")  \n我们将它转为json字符串，发现没有age和address。嗯，这就是因为enumerable设置成了false，使得它被转为字符串的过程中无法遍历到这两个属性。我们可以将enumerable设置成true再试一下。  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d864d0ad5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp \"image.png\")  \n**configurable为false时**  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d8b63e926~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp \"image.png\")  \n因为缺省的configurable默认为false，当我们再次设置时就报错了。此时就陷入了无解的状态，因此我们平时开发中需要设置属性描述符时，**最好不要缺省enumerable和configurable**。  \n我们从头来一次：  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d8c24e694~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp \"image.png\")\n\n关于属性描述符，我想大家应该都有一个大致的印象了，对于get和set我在后面实际应用中再解释吧~","source":"_posts/三分钟搞懂js属性描述符之基础知识.md","raw":"---\n title: \"三分钟搞懂js属性描述符之基础知识\"\n date: 2019-12-31\n tags: [ECMAScript 6]\n categories: [前端笔记]\n---\n\n前言：这年头所有用过vue的人都知道get，set，Object.defineProperty，可听到属性描述符却有点懵。另外实际使用的场景有哪些，又有哪些坑可能很多人并不清楚，因此打算分两篇文章，一篇讲基础知识，另一篇讲实际应用中的坑。\n\n什么是属性描述符对象\n----------\n\n下面这么个对象就是完整的属性描述符。\n\n```\n{\n    configurable: false,\n    enumberable: false,\n    value: 'value',\n    writable: false,\n    get: function() {\n        console.log('get')\n    },\n    set: function(val) {\n        console.log('set')\n    }\n}\n```\n\n当然正常情况下你不会看到完整的属性描述符。它的每个属性都是**可选的**。当一个属性描述符没有没有get和set时，它是个**数据描述符**。当它没有value和writable时，它是个**存取描述符**。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常。\n\n描述符可同时具有的键值\n\nPropertyDescriptor\n\nconfigurable\n\nenumerable\n\nvalue\n\nwritable\n\nget\n\nset\n\n数据描述符\n\nYes\n\nYes\n\nYes\n\nYes\n\nNo\n\nNo\n\n存取描述符\n\nYes\n\nYes\n\nNo\n\nNo\n\nYes\n\nYes\n\n每种属性的含义\n-------\n\n`configurable`  \n当且仅当该属性的 configurable 为 true 时，该属性`描述符`才能够被改变，同时该属性也能从对应的对象上被删除。\n\n`enumerable`  \n当且仅当该属性的`enumerable`为`true`时，该属性才能够出现在对象的枚举属性中。\n\n`value`  \n该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。\n\n`writable`  \n当且仅当该属性的`writable`为`true`时，`value`才能被[赋值运算符](https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FAssignment_Operators \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\")改变。\n\n`get`  \n一个给属性提供 getter 的方法，如果没有 getter 则为 `undefined`。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入`this`对象（由于继承关系，这里的`this`并不一定是定义该属性的对象）。\n\n`set`  \n一个给属性提供 setter 的方法，如果没有 setter 则为 `undefined`。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。\n\n### 关于默认值\n\n以上的定义和解释来自于mdn，但是删除了默认值的说明。默认值分两种语境，一个是我没有设置属性描述符时，就去取它；另一种是我设置属性描述符，但是我省略了部分属性。**mdn上的默认值是后者**。\n\n获取属性描述符\n-------\n\n`Object.getOwnPropertyDescriptor`和`Object.getOwnPropertyDescriptors`,两者模式差不多，懂一个就懂另一个了。  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d37237e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp \"image.png\")  \n可见其中writable、enumerable、configurable默认是true\n\n设置属性描述符\n-------\n\n`Object.defineProperty`和`Object.defineProperties`，同样一个就懂另一个了。  \n我们分别设置get和value，然后再获取属性描述符看看区别  \nget:  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d34e349~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp \"image.png\")  \nvalue:  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d4ce573~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp \"image.png\")  \n可以看到，当我设置了属性描述符后writable、enumerable、configurable默认是false。  \n**enumerable为false时**  \n并且细心的同学发现了，对象的这个属性名的颜色有点不一样。不过此时我们先忽略这个颜色的区别。  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d506699~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp \"image.png\")  \n我们将它转为json字符串，发现没有age和address。嗯，这就是因为enumerable设置成了false，使得它被转为字符串的过程中无法遍历到这两个属性。我们可以将enumerable设置成true再试一下。  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d864d0ad5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp \"image.png\")  \n**configurable为false时**  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d8b63e926~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp \"image.png\")  \n因为缺省的configurable默认为false，当我们再次设置时就报错了。此时就陷入了无解的状态，因此我们平时开发中需要设置属性描述符时，**最好不要缺省enumerable和configurable**。  \n我们从头来一次：  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d8c24e694~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp \"image.png\")\n\n关于属性描述符，我想大家应该都有一个大致的印象了，对于get和set我在后面实际应用中再解释吧~","slug":"三分钟搞懂js属性描述符之基础知识","published":1,"updated":"2024-04-04T15:27:03.404Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhu004dhajfbk1zgyvt","content":"<p>前言：这年头所有用过vue的人都知道get，set，Object.defineProperty，可听到属性描述符却有点懵。另外实际使用的场景有哪些，又有哪些坑可能很多人并不清楚，因此打算分两篇文章，一篇讲基础知识，另一篇讲实际应用中的坑。</p>\n<h2 id=\"什么是属性描述符对象\"><a href=\"#什么是属性描述符对象\" class=\"headerlink\" title=\"什么是属性描述符对象\"></a>什么是属性描述符对象</h2><p>下面这么个对象就是完整的属性描述符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    configurable: false,</span><br><span class=\"line\">    enumberable: false,</span><br><span class=\"line\">    value: &#x27;value&#x27;,</span><br><span class=\"line\">    writable: false,</span><br><span class=\"line\">    get: function() &#123;</span><br><span class=\"line\">        console.log(&#x27;get&#x27;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: function(val) &#123;</span><br><span class=\"line\">        console.log(&#x27;set&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然正常情况下你不会看到完整的属性描述符。它的每个属性都是<strong>可选的</strong>。当一个属性描述符没有没有get和set时，它是个<strong>数据描述符</strong>。当它没有value和writable时，它是个<strong>存取描述符</strong>。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常。</p>\n<p>描述符可同时具有的键值</p>\n<p>PropertyDescriptor</p>\n<p>configurable</p>\n<p>enumerable</p>\n<p>value</p>\n<p>writable</p>\n<p>get</p>\n<p>set</p>\n<p>数据描述符</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>No</p>\n<p>No</p>\n<p>存取描述符</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>No</p>\n<p>No</p>\n<p>Yes</p>\n<p>Yes</p>\n<h2 id=\"每种属性的含义\"><a href=\"#每种属性的含义\" class=\"headerlink\" title=\"每种属性的含义\"></a>每种属性的含义</h2><p><code>configurable</code><br>当且仅当该属性的 configurable 为 true 时，该属性<code>描述符</code>才能够被改变，同时该属性也能从对应的对象上被删除。</p>\n<p><code>enumerable</code><br>当且仅当该属性的<code>enumerable</code>为<code>true</code>时，该属性才能够出现在对象的枚举属性中。</p>\n<p><code>value</code><br>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。</p>\n<p><code>writable</code><br>当且仅当该属性的<code>writable</code>为<code>true</code>时，<code>value</code>才能被<a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FAssignment_Operators\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\">赋值运算符</a>改变。</p>\n<p><code>get</code><br>一个给属性提供 getter 的方法，如果没有 getter 则为 <code>undefined</code>。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入<code>this</code>对象（由于继承关系，这里的<code>this</code>并不一定是定义该属性的对象）。</p>\n<p><code>set</code><br>一个给属性提供 setter 的方法，如果没有 setter 则为 <code>undefined</code>。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。</p>\n<h3 id=\"关于默认值\"><a href=\"#关于默认值\" class=\"headerlink\" title=\"关于默认值\"></a>关于默认值</h3><p>以上的定义和解释来自于mdn，但是删除了默认值的说明。默认值分两种语境，一个是我没有设置属性描述符时，就去取它；另一种是我设置属性描述符，但是我省略了部分属性。<strong>mdn上的默认值是后者</strong>。</p>\n<h2 id=\"获取属性描述符\"><a href=\"#获取属性描述符\" class=\"headerlink\" title=\"获取属性描述符\"></a>获取属性描述符</h2><p><code>Object.getOwnPropertyDescriptor</code>和<code>Object.getOwnPropertyDescriptors</code>,两者模式差不多，懂一个就懂另一个了。<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d37237e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp\" alt=\"image.png\" title=\"image.png\"><br>可见其中writable、enumerable、configurable默认是true</p>\n<h2 id=\"设置属性描述符\"><a href=\"#设置属性描述符\" class=\"headerlink\" title=\"设置属性描述符\"></a>设置属性描述符</h2><p><code>Object.defineProperty</code>和<code>Object.defineProperties</code>，同样一个就懂另一个了。<br>我们分别设置get和value，然后再获取属性描述符看看区别<br>get:<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d34e349~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp\" alt=\"image.png\" title=\"image.png\"><br>value:<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d4ce573~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp\" alt=\"image.png\" title=\"image.png\"><br>可以看到，当我设置了属性描述符后writable、enumerable、configurable默认是false。<br><strong>enumerable为false时</strong><br>并且细心的同学发现了，对象的这个属性名的颜色有点不一样。不过此时我们先忽略这个颜色的区别。<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d506699~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp\" alt=\"image.png\" title=\"image.png\"><br>我们将它转为json字符串，发现没有age和address。嗯，这就是因为enumerable设置成了false，使得它被转为字符串的过程中无法遍历到这两个属性。我们可以将enumerable设置成true再试一下。<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d864d0ad5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp\" alt=\"image.png\" title=\"image.png\"><br><strong>configurable为false时</strong><br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d8b63e926~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp\" alt=\"image.png\" title=\"image.png\"><br>因为缺省的configurable默认为false，当我们再次设置时就报错了。此时就陷入了无解的状态，因此我们平时开发中需要设置属性描述符时，<strong>最好不要缺省enumerable和configurable</strong>。<br>我们从头来一次：<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d8c24e694~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp\" alt=\"image.png\" title=\"image.png\"></p>\n<p>关于属性描述符，我想大家应该都有一个大致的印象了，对于get和set我在后面实际应用中再解释吧~</p>\n","length":1763,"excerpt":"","more":"<p>前言：这年头所有用过vue的人都知道get，set，Object.defineProperty，可听到属性描述符却有点懵。另外实际使用的场景有哪些，又有哪些坑可能很多人并不清楚，因此打算分两篇文章，一篇讲基础知识，另一篇讲实际应用中的坑。</p>\n<h2 id=\"什么是属性描述符对象\"><a href=\"#什么是属性描述符对象\" class=\"headerlink\" title=\"什么是属性描述符对象\"></a>什么是属性描述符对象</h2><p>下面这么个对象就是完整的属性描述符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    configurable: false,</span><br><span class=\"line\">    enumberable: false,</span><br><span class=\"line\">    value: &#x27;value&#x27;,</span><br><span class=\"line\">    writable: false,</span><br><span class=\"line\">    get: function() &#123;</span><br><span class=\"line\">        console.log(&#x27;get&#x27;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: function(val) &#123;</span><br><span class=\"line\">        console.log(&#x27;set&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然正常情况下你不会看到完整的属性描述符。它的每个属性都是<strong>可选的</strong>。当一个属性描述符没有没有get和set时，它是个<strong>数据描述符</strong>。当它没有value和writable时，它是个<strong>存取描述符</strong>。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常。</p>\n<p>描述符可同时具有的键值</p>\n<p>PropertyDescriptor</p>\n<p>configurable</p>\n<p>enumerable</p>\n<p>value</p>\n<p>writable</p>\n<p>get</p>\n<p>set</p>\n<p>数据描述符</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>No</p>\n<p>No</p>\n<p>存取描述符</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>No</p>\n<p>No</p>\n<p>Yes</p>\n<p>Yes</p>\n<h2 id=\"每种属性的含义\"><a href=\"#每种属性的含义\" class=\"headerlink\" title=\"每种属性的含义\"></a>每种属性的含义</h2><p><code>configurable</code><br>当且仅当该属性的 configurable 为 true 时，该属性<code>描述符</code>才能够被改变，同时该属性也能从对应的对象上被删除。</p>\n<p><code>enumerable</code><br>当且仅当该属性的<code>enumerable</code>为<code>true</code>时，该属性才能够出现在对象的枚举属性中。</p>\n<p><code>value</code><br>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。</p>\n<p><code>writable</code><br>当且仅当该属性的<code>writable</code>为<code>true</code>时，<code>value</code>才能被<a href=\"https://developer.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FAssignment_Operators\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\">赋值运算符</a>改变。</p>\n<p><code>get</code><br>一个给属性提供 getter 的方法，如果没有 getter 则为 <code>undefined</code>。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入<code>this</code>对象（由于继承关系，这里的<code>this</code>并不一定是定义该属性的对象）。</p>\n<p><code>set</code><br>一个给属性提供 setter 的方法，如果没有 setter 则为 <code>undefined</code>。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。</p>\n<h3 id=\"关于默认值\"><a href=\"#关于默认值\" class=\"headerlink\" title=\"关于默认值\"></a>关于默认值</h3><p>以上的定义和解释来自于mdn，但是删除了默认值的说明。默认值分两种语境，一个是我没有设置属性描述符时，就去取它；另一种是我设置属性描述符，但是我省略了部分属性。<strong>mdn上的默认值是后者</strong>。</p>\n<h2 id=\"获取属性描述符\"><a href=\"#获取属性描述符\" class=\"headerlink\" title=\"获取属性描述符\"></a>获取属性描述符</h2><p><code>Object.getOwnPropertyDescriptor</code>和<code>Object.getOwnPropertyDescriptors</code>,两者模式差不多，懂一个就懂另一个了。<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d37237e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp\" alt=\"image.png\" title=\"image.png\"><br>可见其中writable、enumerable、configurable默认是true</p>\n<h2 id=\"设置属性描述符\"><a href=\"#设置属性描述符\" class=\"headerlink\" title=\"设置属性描述符\"></a>设置属性描述符</h2><p><code>Object.defineProperty</code>和<code>Object.defineProperties</code>，同样一个就懂另一个了。<br>我们分别设置get和value，然后再获取属性描述符看看区别<br>get:<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d34e349~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp\" alt=\"image.png\" title=\"image.png\"><br>value:<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d4ce573~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp\" alt=\"image.png\" title=\"image.png\"><br>可以看到，当我设置了属性描述符后writable、enumerable、configurable默认是false。<br><strong>enumerable为false时</strong><br>并且细心的同学发现了，对象的这个属性名的颜色有点不一样。不过此时我们先忽略这个颜色的区别。<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d5d506699~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp\" alt=\"image.png\" title=\"image.png\"><br>我们将它转为json字符串，发现没有age和address。嗯，这就是因为enumerable设置成了false，使得它被转为字符串的过程中无法遍历到这两个属性。我们可以将enumerable设置成true再试一下。<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d864d0ad5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp\" alt=\"image.png\" title=\"image.png\"><br><strong>configurable为false时</strong><br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d8b63e926~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp\" alt=\"image.png\" title=\"image.png\"><br>因为缺省的configurable默认为false，当我们再次设置时就报错了。此时就陷入了无解的状态，因此我们平时开发中需要设置属性描述符时，<strong>最好不要缺省enumerable和configurable</strong>。<br>我们从头来一次：<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5ba4d8c24e694~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp\" alt=\"image.png\" title=\"image.png\"></p>\n<p>关于属性描述符，我想大家应该都有一个大致的印象了，对于get和set我在后面实际应用中再解释吧~</p>\n"},{"title":"三分钟搞懂正则之反向引用和零宽断言","date":"2019-12-30T16:00:00.000Z","_content":"\n反向引用\n----\n\n上一期讲到了反向引用，那什么是反向引用，我们先来看一个demo  \n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143a4dce8~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n其中1, 2的语法就叫做反向引用，他们分别表示捕获到的第一个，第二个内容，最多可以使用到9，表示捕获到的第9个内容。  \n注意引用的，是捕获到的内容，而不是捕获规则。所以`(\\w)(\\w)\\1\\2` 表示的就是一个`xyxy`的结构，因此匹配到了`\"cdcd\"`。  \n下面举几个小栗子：\n\n*   判断字符串中有没有连续重复字符  \n    ![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143c6ea10~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n*   缩写16进制颜色值\n    \n    ![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143d83d3f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n    \n\n零宽断言\n----\n\n断言又有很多中叫法，比如环视，巡视。断言一共又分4种：\n\n1.  x(?=y) 匹配‘x’仅仅当‘x’后面跟着‘y’.这种叫做先行肯定断言。\n2.  (?<=y)x 匹配‘x’仅仅当‘x’前面是‘y’.这种叫做后行肯定断言。\n3.  x(?!y) 仅仅当‘x’后面不跟着‘y’时匹配‘x’，这被称为正向否定断言。\n4.  (?<!y)x 仅仅当‘x’前面不是‘y’时匹配‘x’，这被称为反向否定断言。\n\n不同语言叫法不同，先行后行，正向反向都是一个意思。\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143dd6a46~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d16d2dc048~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n零宽可以理解位它表示的是一个位置，而不是内容。  \n正则中表示位置的元字符有`\\b ^ $`等等，它们也都是零宽的。  \n上面的两个demo，如果不用零宽断言，则会将整个字符串给替换掉。  \n下面也举几个零宽断言的例子：\n\n*   密码规则：大写，小写，数字，特殊字符必须有一个，长度8到12位\n    \n    ![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d16ebd3360~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n    \n\n这段正则可以看到，先行断言前面的匹配项是`^`,几个断言分别表示，从头开始，不管中间经历了啥，始终有一个小写英文字母/大写英文字母/数字，特殊字符。  \n后面的`[^\\s]{8,12}`表示长度8到12的非空字符。要注意的是，这里的断言，匹配的不是后面的8到12位字符，而是满足断言条件的开头`^`，\n\n*   金额千分位分隔符\n    \n    ![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d176bcd0e8~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n    \n\n正则只能从前往后匹配，这里表示如果一个数字后面跟着的数字，每三个一组，到小数点刚好分完，则需要加入分隔符。\n\n以上就是正则的反向引用和零宽断言了，是不是很简单？","source":"_posts/三分钟搞懂正则之反向引用和零宽断言.md","raw":"---\n title: \"三分钟搞懂正则之反向引用和零宽断言\"\n date: 2019-12-31\n tags: [正则表达式]\n categories: [前端笔记]\n---\n\n反向引用\n----\n\n上一期讲到了反向引用，那什么是反向引用，我们先来看一个demo  \n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143a4dce8~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n其中1, 2的语法就叫做反向引用，他们分别表示捕获到的第一个，第二个内容，最多可以使用到9，表示捕获到的第9个内容。  \n注意引用的，是捕获到的内容，而不是捕获规则。所以`(\\w)(\\w)\\1\\2` 表示的就是一个`xyxy`的结构，因此匹配到了`\"cdcd\"`。  \n下面举几个小栗子：\n\n*   判断字符串中有没有连续重复字符  \n    ![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143c6ea10~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n*   缩写16进制颜色值\n    \n    ![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143d83d3f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n    \n\n零宽断言\n----\n\n断言又有很多中叫法，比如环视，巡视。断言一共又分4种：\n\n1.  x(?=y) 匹配‘x’仅仅当‘x’后面跟着‘y’.这种叫做先行肯定断言。\n2.  (?<=y)x 匹配‘x’仅仅当‘x’前面是‘y’.这种叫做后行肯定断言。\n3.  x(?!y) 仅仅当‘x’后面不跟着‘y’时匹配‘x’，这被称为正向否定断言。\n4.  (?<!y)x 仅仅当‘x’前面不是‘y’时匹配‘x’，这被称为反向否定断言。\n\n不同语言叫法不同，先行后行，正向反向都是一个意思。\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143dd6a46~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d16d2dc048~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n零宽可以理解位它表示的是一个位置，而不是内容。  \n正则中表示位置的元字符有`\\b ^ $`等等，它们也都是零宽的。  \n上面的两个demo，如果不用零宽断言，则会将整个字符串给替换掉。  \n下面也举几个零宽断言的例子：\n\n*   密码规则：大写，小写，数字，特殊字符必须有一个，长度8到12位\n    \n    ![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d16ebd3360~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n    \n\n这段正则可以看到，先行断言前面的匹配项是`^`,几个断言分别表示，从头开始，不管中间经历了啥，始终有一个小写英文字母/大写英文字母/数字，特殊字符。  \n后面的`[^\\s]{8,12}`表示长度8到12的非空字符。要注意的是，这里的断言，匹配的不是后面的8到12位字符，而是满足断言条件的开头`^`，\n\n*   金额千分位分隔符\n    \n    ![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d176bcd0e8~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n    \n\n正则只能从前往后匹配，这里表示如果一个数字后面跟着的数字，每三个一组，到小数点刚好分完，则需要加入分隔符。\n\n以上就是正则的反向引用和零宽断言了，是不是很简单？","slug":"三分钟搞懂正则之反向引用和零宽断言","published":1,"updated":"2024-04-04T15:27:03.396Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhu004hhajfh7zlcmbj","content":"<h2 id=\"反向引用\"><a href=\"#反向引用\" class=\"headerlink\" title=\"反向引用\"></a>反向引用</h2><p>上一期讲到了反向引用，那什么是反向引用，我们先来看一个demo<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143a4dce8~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>其中1, 2的语法就叫做反向引用，他们分别表示捕获到的第一个，第二个内容，最多可以使用到9，表示捕获到的第9个内容。<br>注意引用的，是捕获到的内容，而不是捕获规则。所以<code>(\\w)(\\w)\\1\\2</code> 表示的就是一个<code>xyxy</code>的结构，因此匹配到了<code>&quot;cdcd&quot;</code>。<br>下面举几个小栗子：</p>\n<ul>\n<li><p>判断字符串中有没有连续重复字符<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143c6ea10~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n</li>\n<li><p>缩写16进制颜色值</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143d83d3f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n</li>\n</ul>\n<h2 id=\"零宽断言\"><a href=\"#零宽断言\" class=\"headerlink\" title=\"零宽断言\"></a>零宽断言</h2><p>断言又有很多中叫法，比如环视，巡视。断言一共又分4种：</p>\n<ol>\n<li>x(?&#x3D;y) 匹配‘x’仅仅当‘x’后面跟着‘y’.这种叫做先行肯定断言。</li>\n<li>(?&lt;&#x3D;y)x 匹配‘x’仅仅当‘x’前面是‘y’.这种叫做后行肯定断言。</li>\n<li>x(?!y) 仅仅当‘x’后面不跟着‘y’时匹配‘x’，这被称为正向否定断言。</li>\n<li>(?&lt;!y)x 仅仅当‘x’前面不是‘y’时匹配‘x’，这被称为反向否定断言。</li>\n</ol>\n<p>不同语言叫法不同，先行后行，正向反向都是一个意思。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143dd6a46~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d16d2dc048~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>零宽可以理解位它表示的是一个位置，而不是内容。<br>正则中表示位置的元字符有<code>\\b ^ $</code>等等，它们也都是零宽的。<br>上面的两个demo，如果不用零宽断言，则会将整个字符串给替换掉。<br>下面也举几个零宽断言的例子：</p>\n<ul>\n<li><p>密码规则：大写，小写，数字，特殊字符必须有一个，长度8到12位</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d16ebd3360~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n</li>\n</ul>\n<p>这段正则可以看到，先行断言前面的匹配项是<code>^</code>,几个断言分别表示，从头开始，不管中间经历了啥，始终有一个小写英文字母&#x2F;大写英文字母&#x2F;数字，特殊字符。<br>后面的<code>[^\\s]&#123;8,12&#125;</code>表示长度8到12的非空字符。要注意的是，这里的断言，匹配的不是后面的8到12位字符，而是满足断言条件的开头<code>^</code>，</p>\n<ul>\n<li><p>金额千分位分隔符</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d176bcd0e8~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n</li>\n</ul>\n<p>正则只能从前往后匹配，这里表示如果一个数字后面跟着的数字，每三个一组，到小数点刚好分完，则需要加入分隔符。</p>\n<p>以上就是正则的反向引用和零宽断言了，是不是很简单？</p>\n","length":794,"excerpt":"","more":"<h2 id=\"反向引用\"><a href=\"#反向引用\" class=\"headerlink\" title=\"反向引用\"></a>反向引用</h2><p>上一期讲到了反向引用，那什么是反向引用，我们先来看一个demo<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143a4dce8~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>其中1, 2的语法就叫做反向引用，他们分别表示捕获到的第一个，第二个内容，最多可以使用到9，表示捕获到的第9个内容。<br>注意引用的，是捕获到的内容，而不是捕获规则。所以<code>(\\w)(\\w)\\1\\2</code> 表示的就是一个<code>xyxy</code>的结构，因此匹配到了<code>&quot;cdcd&quot;</code>。<br>下面举几个小栗子：</p>\n<ul>\n<li><p>判断字符串中有没有连续重复字符<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143c6ea10~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n</li>\n<li><p>缩写16进制颜色值</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143d83d3f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n</li>\n</ul>\n<h2 id=\"零宽断言\"><a href=\"#零宽断言\" class=\"headerlink\" title=\"零宽断言\"></a>零宽断言</h2><p>断言又有很多中叫法，比如环视，巡视。断言一共又分4种：</p>\n<ol>\n<li>x(?&#x3D;y) 匹配‘x’仅仅当‘x’后面跟着‘y’.这种叫做先行肯定断言。</li>\n<li>(?&lt;&#x3D;y)x 匹配‘x’仅仅当‘x’前面是‘y’.这种叫做后行肯定断言。</li>\n<li>x(?!y) 仅仅当‘x’后面不跟着‘y’时匹配‘x’，这被称为正向否定断言。</li>\n<li>(?&lt;!y)x 仅仅当‘x’前面不是‘y’时匹配‘x’，这被称为反向否定断言。</li>\n</ol>\n<p>不同语言叫法不同，先行后行，正向反向都是一个意思。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d143dd6a46~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d16d2dc048~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>零宽可以理解位它表示的是一个位置，而不是内容。<br>正则中表示位置的元字符有<code>\\b ^ $</code>等等，它们也都是零宽的。<br>上面的两个demo，如果不用零宽断言，则会将整个字符串给替换掉。<br>下面也举几个零宽断言的例子：</p>\n<ul>\n<li><p>密码规则：大写，小写，数字，特殊字符必须有一个，长度8到12位</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d16ebd3360~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n</li>\n</ul>\n<p>这段正则可以看到，先行断言前面的匹配项是<code>^</code>,几个断言分别表示，从头开始，不管中间经历了啥，始终有一个小写英文字母&#x2F;大写英文字母&#x2F;数字，特殊字符。<br>后面的<code>[^\\s]&#123;8,12&#125;</code>表示长度8到12的非空字符。要注意的是，这里的断言，匹配的不是后面的8到12位字符，而是满足断言条件的开头<code>^</code>，</p>\n<ul>\n<li><p>金额千分位分隔符</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5d176bcd0e8~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n</li>\n</ul>\n<p>正则只能从前往后匹配，这里表示如果一个数字后面跟着的数字，每三个一组，到小数点刚好分完，则需要加入分隔符。</p>\n<p>以上就是正则的反向引用和零宽断言了，是不是很简单？</p>\n"},{"title":"三分钟搞懂正则之捕获","date":"2019-09-02T16:00:00.000Z","_content":"\n正则基础知识\n------\n\n### 元字符\n\n如果把正则看做一门语言，那么元字符就是其最基本的语法，只有熟练掌握了元字符，才能敲开正则的大门。熟悉的同学可以跳过这一部分。常用的元字符有一下这些：\n\n*   表示位置的：`^` `&`，分别表示开头和结尾\n*   表示字符的：`\\w`，也即`[a-zA-Z0-9_]`\n*   表示数字的：`\\d`,也即\\[0-9\\]\n*   表示边界的：`\\b`，要注意的是它仅对数字和英文字母有效，比如`/a\\b/` 匹配 `'ba'`中的a\n*   表示空白符：`\\s`，\n*   表示数量的：可以用通配符，也可以用{n,m}的形式。比如`*和{0,}, ?和{0,1} , +和{1,}`\n\n还有一种特殊的元字符，叫字符集  \n`[]`,`[^ ]`分别代表正向字符集和反向字符集，分别表示匹配（不匹配）其中任意一个字符。反向字符集中的`^`必须在开头哦。  \n另外要注意的是，元字符在字符集都可都是普通字符，字符集中也有元字符`-`，表示范围连接。`[a-b]`无法匹配`'-'`哦。  \n字符集里面还可以表示unicode字符，比如常见的汉字的正则表达式`\\u4e00-\\u9fa5`,这个范围就代表unicode字符集中CJK统一表意符中的一部分，`String.fromCharCode(parseInt('4e00',16))`可以得到`'一'`\n\n捕获\n--\n\n首先我们来看下面这张图片，加不加()对结果有何影响。  \n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1048171461~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n我们可以看到，没有括号，返回的结果里就少了一个东西。那么返回的数组的第二位表示啥呢？我们可以参阅MDN中的解释。\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1048222625~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n翻译成白话，就是数组中的第一个值表示匹配中的字符串，第二个往后，就是捕获到的匹配项。也就是说我加了()，正则就可以捕获到其中的匹配项。input，index很好理解，那groups有事啥呢？为啥一直没见过它里面有值。好的，我们再来看下一张图\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c10483586c4~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n这个正则的写法叫命名捕获组，它捕获的内容就会在groups中也存一份。\n\n那么如何理解捕获呢？我们只要理解主语，宾语，如何获取，捕获顺序就行了。  \n主语自然是正则，宾语就是括号中的匹配项。  \n正则捕获后我们可以使用RegExp.$1获取捕获的第一个内容，$2表示捕获的第二个内容，以此类推，也可以从match，exec等js方法返回值中获取  \n那么捕获顺序如何确定呢，我们可以再看下一张图：\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1048352725~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n很显然，它是从外往内，从左往右的一个顺序捕获的。\n\n既然有捕获，那也一定有非捕获。()还有一种功能就是将其中的多个匹配项看成一个整体。那么如果我只想捕获这个整体中的一部分呢？\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1068e4124f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n一图胜千言，当我们不需要捕获时，就可以使用`(?: )`这种写法了。\n\n以上就是捕获的基本用法，不过还有个具名捕获组需要掌握。\n\n*   命名：`?<name>`\n*   获取：除了用groups对象，我们还可以在replace方法中使用`$<name>`获取\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c106b2eb55d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n*   另外还需要掌握它的反向引用：`\\k<name>`\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1070123f69~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n那么反向引用是什么意思呢？我们下一期再继续。","source":"_posts/三分钟搞懂正则之捕获.md","raw":"---\n title: \"三分钟搞懂正则之捕获\"\n date: 2019-09-03\n tags: [正则表达式]\n categories: [前端笔记]\n---\n\n正则基础知识\n------\n\n### 元字符\n\n如果把正则看做一门语言，那么元字符就是其最基本的语法，只有熟练掌握了元字符，才能敲开正则的大门。熟悉的同学可以跳过这一部分。常用的元字符有一下这些：\n\n*   表示位置的：`^` `&`，分别表示开头和结尾\n*   表示字符的：`\\w`，也即`[a-zA-Z0-9_]`\n*   表示数字的：`\\d`,也即\\[0-9\\]\n*   表示边界的：`\\b`，要注意的是它仅对数字和英文字母有效，比如`/a\\b/` 匹配 `'ba'`中的a\n*   表示空白符：`\\s`，\n*   表示数量的：可以用通配符，也可以用{n,m}的形式。比如`*和{0,}, ?和{0,1} , +和{1,}`\n\n还有一种特殊的元字符，叫字符集  \n`[]`,`[^ ]`分别代表正向字符集和反向字符集，分别表示匹配（不匹配）其中任意一个字符。反向字符集中的`^`必须在开头哦。  \n另外要注意的是，元字符在字符集都可都是普通字符，字符集中也有元字符`-`，表示范围连接。`[a-b]`无法匹配`'-'`哦。  \n字符集里面还可以表示unicode字符，比如常见的汉字的正则表达式`\\u4e00-\\u9fa5`,这个范围就代表unicode字符集中CJK统一表意符中的一部分，`String.fromCharCode(parseInt('4e00',16))`可以得到`'一'`\n\n捕获\n--\n\n首先我们来看下面这张图片，加不加()对结果有何影响。  \n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1048171461~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n我们可以看到，没有括号，返回的结果里就少了一个东西。那么返回的数组的第二位表示啥呢？我们可以参阅MDN中的解释。\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1048222625~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n翻译成白话，就是数组中的第一个值表示匹配中的字符串，第二个往后，就是捕获到的匹配项。也就是说我加了()，正则就可以捕获到其中的匹配项。input，index很好理解，那groups有事啥呢？为啥一直没见过它里面有值。好的，我们再来看下一张图\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c10483586c4~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n这个正则的写法叫命名捕获组，它捕获的内容就会在groups中也存一份。\n\n那么如何理解捕获呢？我们只要理解主语，宾语，如何获取，捕获顺序就行了。  \n主语自然是正则，宾语就是括号中的匹配项。  \n正则捕获后我们可以使用RegExp.$1获取捕获的第一个内容，$2表示捕获的第二个内容，以此类推，也可以从match，exec等js方法返回值中获取  \n那么捕获顺序如何确定呢，我们可以再看下一张图：\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1048352725~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n很显然，它是从外往内，从左往右的一个顺序捕获的。\n\n既然有捕获，那也一定有非捕获。()还有一种功能就是将其中的多个匹配项看成一个整体。那么如果我只想捕获这个整体中的一部分呢？\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1068e4124f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n一图胜千言，当我们不需要捕获时，就可以使用`(?: )`这种写法了。\n\n以上就是捕获的基本用法，不过还有个具名捕获组需要掌握。\n\n*   命名：`?<name>`\n*   获取：除了用groups对象，我们还可以在replace方法中使用`$<name>`获取\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c106b2eb55d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n*   另外还需要掌握它的反向引用：`\\k<name>`\n\n![clipboard.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1070123f69~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"clipboard.png\")\n\n那么反向引用是什么意思呢？我们下一期再继续。","slug":"三分钟搞懂正则之捕获","published":1,"updated":"2024-04-04T15:27:03.389Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhu004khajfbpjo9ygg","content":"<h2 id=\"正则基础知识\"><a href=\"#正则基础知识\" class=\"headerlink\" title=\"正则基础知识\"></a>正则基础知识</h2><h3 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h3><p>如果把正则看做一门语言，那么元字符就是其最基本的语法，只有熟练掌握了元字符，才能敲开正则的大门。熟悉的同学可以跳过这一部分。常用的元字符有一下这些：</p>\n<ul>\n<li>表示位置的：<code>^</code> <code>&amp;</code>，分别表示开头和结尾</li>\n<li>表示字符的：<code>\\w</code>，也即<code>[a-zA-Z0-9_]</code></li>\n<li>表示数字的：<code>\\d</code>,也即[0-9]</li>\n<li>表示边界的：<code>\\b</code>，要注意的是它仅对数字和英文字母有效，比如<code>/a\\b/</code> 匹配 <code>&#39;ba&#39;</code>中的a</li>\n<li>表示空白符：<code>\\s</code>，</li>\n<li>表示数量的：可以用通配符，也可以用{n,m}的形式。比如<code>*和&#123;0,&#125;, ?和&#123;0,1&#125; , +和&#123;1,&#125;</code></li>\n</ul>\n<p>还有一种特殊的元字符，叫字符集<br><code>[]</code>,<code>[^ ]</code>分别代表正向字符集和反向字符集，分别表示匹配（不匹配）其中任意一个字符。反向字符集中的<code>^</code>必须在开头哦。<br>另外要注意的是，元字符在字符集都可都是普通字符，字符集中也有元字符<code>-</code>，表示范围连接。<code>[a-b]</code>无法匹配<code>&#39;-&#39;</code>哦。<br>字符集里面还可以表示unicode字符，比如常见的汉字的正则表达式<code>\\u4e00-\\u9fa5</code>,这个范围就代表unicode字符集中CJK统一表意符中的一部分，<code>String.fromCharCode(parseInt(&#39;4e00&#39;,16))</code>可以得到<code>&#39;一&#39;</code></p>\n<h2 id=\"捕获\"><a href=\"#捕获\" class=\"headerlink\" title=\"捕获\"></a>捕获</h2><p>首先我们来看下面这张图片，加不加()对结果有何影响。<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1048171461~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>我们可以看到，没有括号，返回的结果里就少了一个东西。那么返回的数组的第二位表示啥呢？我们可以参阅MDN中的解释。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1048222625~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>翻译成白话，就是数组中的第一个值表示匹配中的字符串，第二个往后，就是捕获到的匹配项。也就是说我加了()，正则就可以捕获到其中的匹配项。input，index很好理解，那groups有事啥呢？为啥一直没见过它里面有值。好的，我们再来看下一张图</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c10483586c4~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>这个正则的写法叫命名捕获组，它捕获的内容就会在groups中也存一份。</p>\n<p>那么如何理解捕获呢？我们只要理解主语，宾语，如何获取，捕获顺序就行了。<br>主语自然是正则，宾语就是括号中的匹配项。<br>正则捕获后我们可以使用RegExp.$1获取捕获的第一个内容，$2表示捕获的第二个内容，以此类推，也可以从match，exec等js方法返回值中获取<br>那么捕获顺序如何确定呢，我们可以再看下一张图：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1048352725~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>很显然，它是从外往内，从左往右的一个顺序捕获的。</p>\n<p>既然有捕获，那也一定有非捕获。()还有一种功能就是将其中的多个匹配项看成一个整体。那么如果我只想捕获这个整体中的一部分呢？</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1068e4124f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>一图胜千言，当我们不需要捕获时，就可以使用<code>(?: )</code>这种写法了。</p>\n<p>以上就是捕获的基本用法，不过还有个具名捕获组需要掌握。</p>\n<ul>\n<li>命名：<code>?&lt;name&gt;</code></li>\n<li>获取：除了用groups对象，我们还可以在replace方法中使用<code>$&lt;name&gt;</code>获取</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c106b2eb55d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<ul>\n<li>另外还需要掌握它的反向引用：<code>\\k&lt;name&gt;</code></li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1070123f69~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>那么反向引用是什么意思呢？我们下一期再继续。</p>\n","length":1209,"excerpt":"","more":"<h2 id=\"正则基础知识\"><a href=\"#正则基础知识\" class=\"headerlink\" title=\"正则基础知识\"></a>正则基础知识</h2><h3 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h3><p>如果把正则看做一门语言，那么元字符就是其最基本的语法，只有熟练掌握了元字符，才能敲开正则的大门。熟悉的同学可以跳过这一部分。常用的元字符有一下这些：</p>\n<ul>\n<li>表示位置的：<code>^</code> <code>&amp;</code>，分别表示开头和结尾</li>\n<li>表示字符的：<code>\\w</code>，也即<code>[a-zA-Z0-9_]</code></li>\n<li>表示数字的：<code>\\d</code>,也即[0-9]</li>\n<li>表示边界的：<code>\\b</code>，要注意的是它仅对数字和英文字母有效，比如<code>/a\\b/</code> 匹配 <code>&#39;ba&#39;</code>中的a</li>\n<li>表示空白符：<code>\\s</code>，</li>\n<li>表示数量的：可以用通配符，也可以用{n,m}的形式。比如<code>*和&#123;0,&#125;, ?和&#123;0,1&#125; , +和&#123;1,&#125;</code></li>\n</ul>\n<p>还有一种特殊的元字符，叫字符集<br><code>[]</code>,<code>[^ ]</code>分别代表正向字符集和反向字符集，分别表示匹配（不匹配）其中任意一个字符。反向字符集中的<code>^</code>必须在开头哦。<br>另外要注意的是，元字符在字符集都可都是普通字符，字符集中也有元字符<code>-</code>，表示范围连接。<code>[a-b]</code>无法匹配<code>&#39;-&#39;</code>哦。<br>字符集里面还可以表示unicode字符，比如常见的汉字的正则表达式<code>\\u4e00-\\u9fa5</code>,这个范围就代表unicode字符集中CJK统一表意符中的一部分，<code>String.fromCharCode(parseInt(&#39;4e00&#39;,16))</code>可以得到<code>&#39;一&#39;</code></p>\n<h2 id=\"捕获\"><a href=\"#捕获\" class=\"headerlink\" title=\"捕获\"></a>捕获</h2><p>首先我们来看下面这张图片，加不加()对结果有何影响。<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1048171461~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>我们可以看到，没有括号，返回的结果里就少了一个东西。那么返回的数组的第二位表示啥呢？我们可以参阅MDN中的解释。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1048222625~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>翻译成白话，就是数组中的第一个值表示匹配中的字符串，第二个往后，就是捕获到的匹配项。也就是说我加了()，正则就可以捕获到其中的匹配项。input，index很好理解，那groups有事啥呢？为啥一直没见过它里面有值。好的，我们再来看下一张图</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c10483586c4~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>这个正则的写法叫命名捕获组，它捕获的内容就会在groups中也存一份。</p>\n<p>那么如何理解捕获呢？我们只要理解主语，宾语，如何获取，捕获顺序就行了。<br>主语自然是正则，宾语就是括号中的匹配项。<br>正则捕获后我们可以使用RegExp.$1获取捕获的第一个内容，$2表示捕获的第二个内容，以此类推，也可以从match，exec等js方法返回值中获取<br>那么捕获顺序如何确定呢，我们可以再看下一张图：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1048352725~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>很显然，它是从外往内，从左往右的一个顺序捕获的。</p>\n<p>既然有捕获，那也一定有非捕获。()还有一种功能就是将其中的多个匹配项看成一个整体。那么如果我只想捕获这个整体中的一部分呢？</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1068e4124f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>一图胜千言，当我们不需要捕获时，就可以使用<code>(?: )</code>这种写法了。</p>\n<p>以上就是捕获的基本用法，不过还有个具名捕获组需要掌握。</p>\n<ul>\n<li>命名：<code>?&lt;name&gt;</code></li>\n<li>获取：除了用groups对象，我们还可以在replace方法中使用<code>$&lt;name&gt;</code>获取</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c106b2eb55d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<ul>\n<li>另外还需要掌握它的反向引用：<code>\\k&lt;name&gt;</code></li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/3/16cf6c1070123f69~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"clipboard.png\" title=\"clipboard.png\"></p>\n<p>那么反向引用是什么意思呢？我们下一期再继续。</p>\n"},{"title":"为什么慢两拍：关于promise规范thenable的白话解释","date":"2021-10-13T16:00:00.000Z","_content":"\n慢两拍？\n----\n\n沸点上看到这样一个问题： ![f9ebd1bfa73a4ee79f7873f731695a4c_tplv-k3u1fbpfcp-watermark.png](../imgs/4fcd03d8db8d4007845f8aa23a9bcb93.png)\n\n类似的问题还有\n\n```javascript\nPromise.resolve().then(() => {\n  console.log(0);\n  return Promise.resolve(4)\n}).then(res => {\n  console.log(res)\n})\n\nPromise.resolve().then(() => {\n  console.log(1);\n}).then(() => {\n  console.log(2);\n}).then(() => {\n  console.log(3);\n}).then(() => {\n  console.log(5);\n}).then(() =>{\n  console.log(6);\n})\n// 0,1,2,3,4,5,6\n```\n\n大家会发现 return Promise.resolve()慢了两拍。\n\nwhy\n---\n\n虽然可能有个并没什么卵用的知识，但是很神奇，我来试着解释一下：\n\n还是以最上图片中代码为示例：\n\n假设async functin 返回的promise为p0，内部的Promise.resolve()，返回的为p1, 下面new Promise返回的为p2,p2.then返回的为p3;\n\n### 阶段一\n\n#### 1.\n\n执行async内部的Promise.resolve,得到p1，**而p1上有可调用的then**，则在微任务队列中放入一个任务：[NewPromiseResolveThenableJob](https://tc39.es%2Fecma262%2F%23sec-promise-objects \"https://tc39.es/ecma262/#sec-promise-objects\")(promise0, p1, p1.then)，\n\n> 14.Let job be NewPromiseResolveThenableJob(promise, resolution, thenJobCallback).\n\n> 15.  Perform HostEnqueuePromiseJob(job.\\[\\[Job\\]\\], job.\\[\\[Realm\\]\\]).\n\n**此时p0的状态还是pending**，它需要等待p1.then执行之后，也就是说，console.log(1)处于等待中。\n\n#### 2.\n\nnew Promise同步执行了resolve()，返回p2，并执行then，p2是已解决的，那么往微任务队列中放入console.log(2);再执行then，但是因为console.log(2)的这个then回调还没有执行，因此console.log(3)所在的回调会等待\n\n#### 阶段一结束\n\n此时微任务队列中有两条任务：NewPromiseResolveThenableJob(p0, p1, p1.then)和console.log(2)；\n\n* * *\n\n### 阶段二\n\n#### 3.\n\n执行job:NewPromiseResolveThenableJob(p0, p1, p1.then)，p1是fulfilled，执行p1.then,它的回调是resolve p0，此时往微任务队列增加一条任务 resolve p0。\n\n_另外，**如果then不是异步的**，比如这样：(async function(){ return {then:(r)=>{r()}};})().then(()=>{console.log(1)});）则在这一步就将p0 resolve掉，并将log(1)放入微任务队列，**则只会慢1拍**_\n\n#### 4.\n\n执行console.log(2)\n\n#### 5.\n\np3被resolved，将console.log(3)放入微任务队列\n\n### 阶段二结束\n\n此时微任务队列有两个任务，resolve p0和console.log(3)\n\n* * *\n\n### 后续阶段\n\n#### 6.\n\n执行resolve p0，console.log(1)被放入微任务队列\n\n#### 7.\n\n执行console.log(3)\n\n#### 8.\n\n执行console.log(1)\n\n总结：\n---\n\n如果promise内返回的对象具有可调用的then方法，则会在微任务队列中再**插入一个任务NewPromiseResolveThenableJob，这就慢了一拍**；这个任务会执行这个then方法，如果这个**then方法是来自于promise的，则因为是异步的又慢了一拍**，所以一共慢了两拍。\n\n关于NewPromiseResolveThenableJob：\n\n> This Job uses the supplied thenable and its then method to resolve the given promise. This process must take place as a Job to ensure that the evaluation of the then method occurs after evaluation of any surrounding code has completed.\n\n具体的解释可以参考[tc39.es/ecma262/#se…](https://tc39.es%2Fecma262%2F%23sec-promise-jobs \"https://tc39.es/ecma262/#sec-promise-jobs\")","source":"_posts/为什么慢两拍：关于promise规范thenable的白话解释.md","raw":"---\n title: \"为什么慢两拍：关于promise规范thenable的白话解释\"\n date: 2021-10-14\n tags: [前端]\n categories: [前端笔记]\n---\n\n慢两拍？\n----\n\n沸点上看到这样一个问题： ![f9ebd1bfa73a4ee79f7873f731695a4c_tplv-k3u1fbpfcp-watermark.png](../imgs/4fcd03d8db8d4007845f8aa23a9bcb93.png)\n\n类似的问题还有\n\n```javascript\nPromise.resolve().then(() => {\n  console.log(0);\n  return Promise.resolve(4)\n}).then(res => {\n  console.log(res)\n})\n\nPromise.resolve().then(() => {\n  console.log(1);\n}).then(() => {\n  console.log(2);\n}).then(() => {\n  console.log(3);\n}).then(() => {\n  console.log(5);\n}).then(() =>{\n  console.log(6);\n})\n// 0,1,2,3,4,5,6\n```\n\n大家会发现 return Promise.resolve()慢了两拍。\n\nwhy\n---\n\n虽然可能有个并没什么卵用的知识，但是很神奇，我来试着解释一下：\n\n还是以最上图片中代码为示例：\n\n假设async functin 返回的promise为p0，内部的Promise.resolve()，返回的为p1, 下面new Promise返回的为p2,p2.then返回的为p3;\n\n### 阶段一\n\n#### 1.\n\n执行async内部的Promise.resolve,得到p1，**而p1上有可调用的then**，则在微任务队列中放入一个任务：[NewPromiseResolveThenableJob](https://tc39.es%2Fecma262%2F%23sec-promise-objects \"https://tc39.es/ecma262/#sec-promise-objects\")(promise0, p1, p1.then)，\n\n> 14.Let job be NewPromiseResolveThenableJob(promise, resolution, thenJobCallback).\n\n> 15.  Perform HostEnqueuePromiseJob(job.\\[\\[Job\\]\\], job.\\[\\[Realm\\]\\]).\n\n**此时p0的状态还是pending**，它需要等待p1.then执行之后，也就是说，console.log(1)处于等待中。\n\n#### 2.\n\nnew Promise同步执行了resolve()，返回p2，并执行then，p2是已解决的，那么往微任务队列中放入console.log(2);再执行then，但是因为console.log(2)的这个then回调还没有执行，因此console.log(3)所在的回调会等待\n\n#### 阶段一结束\n\n此时微任务队列中有两条任务：NewPromiseResolveThenableJob(p0, p1, p1.then)和console.log(2)；\n\n* * *\n\n### 阶段二\n\n#### 3.\n\n执行job:NewPromiseResolveThenableJob(p0, p1, p1.then)，p1是fulfilled，执行p1.then,它的回调是resolve p0，此时往微任务队列增加一条任务 resolve p0。\n\n_另外，**如果then不是异步的**，比如这样：(async function(){ return {then:(r)=>{r()}};})().then(()=>{console.log(1)});）则在这一步就将p0 resolve掉，并将log(1)放入微任务队列，**则只会慢1拍**_\n\n#### 4.\n\n执行console.log(2)\n\n#### 5.\n\np3被resolved，将console.log(3)放入微任务队列\n\n### 阶段二结束\n\n此时微任务队列有两个任务，resolve p0和console.log(3)\n\n* * *\n\n### 后续阶段\n\n#### 6.\n\n执行resolve p0，console.log(1)被放入微任务队列\n\n#### 7.\n\n执行console.log(3)\n\n#### 8.\n\n执行console.log(1)\n\n总结：\n---\n\n如果promise内返回的对象具有可调用的then方法，则会在微任务队列中再**插入一个任务NewPromiseResolveThenableJob，这就慢了一拍**；这个任务会执行这个then方法，如果这个**then方法是来自于promise的，则因为是异步的又慢了一拍**，所以一共慢了两拍。\n\n关于NewPromiseResolveThenableJob：\n\n> This Job uses the supplied thenable and its then method to resolve the given promise. This process must take place as a Job to ensure that the evaluation of the then method occurs after evaluation of any surrounding code has completed.\n\n具体的解释可以参考[tc39.es/ecma262/#se…](https://tc39.es%2Fecma262%2F%23sec-promise-jobs \"https://tc39.es/ecma262/#sec-promise-jobs\")","slug":"为什么慢两拍：关于promise规范thenable的白话解释","published":1,"updated":"2024-04-04T15:27:03.450Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhu004ohajf85wl2coj","content":"<h2 id=\"慢两拍？\"><a href=\"#慢两拍？\" class=\"headerlink\" title=\"慢两拍？\"></a>慢两拍？</h2><p>沸点上看到这样一个问题： <img src=\"/../imgs/4fcd03d8db8d4007845f8aa23a9bcb93.png\" alt=\"f9ebd1bfa73a4ee79f7873f731695a4c_tplv-k3u1fbpfcp-watermark.png\"></p>\n<p>类似的问题还有</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 0,1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure>\n\n<p>大家会发现 return Promise.resolve()慢了两拍。</p>\n<h2 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h2><p>虽然可能有个并没什么卵用的知识，但是很神奇，我来试着解释一下：</p>\n<p>还是以最上图片中代码为示例：</p>\n<p>假设async functin 返回的promise为p0，内部的Promise.resolve()，返回的为p1, 下面new Promise返回的为p2,p2.then返回的为p3;</p>\n<h3 id=\"阶段一\"><a href=\"#阶段一\" class=\"headerlink\" title=\"阶段一\"></a>阶段一</h3><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h4><p>执行async内部的Promise.resolve,得到p1，<strong>而p1上有可调用的then</strong>，则在微任务队列中放入一个任务：<a href=\"https://tc39.es%2Fecma262%2F%23sec-promise-objects\" title=\"https://tc39.es/ecma262/#sec-promise-objects\">NewPromiseResolveThenableJob</a>(promise0, p1, p1.then)，</p>\n<blockquote>\n<p>14.Let job be NewPromiseResolveThenableJob(promise, resolution, thenJobCallback).</p>\n</blockquote>\n<blockquote>\n<ol start=\"15\">\n<li>Perform HostEnqueuePromiseJob(job.[[Job]], job.[[Realm]]).</li>\n</ol>\n</blockquote>\n<p><strong>此时p0的状态还是pending</strong>，它需要等待p1.then执行之后，也就是说，console.log(1)处于等待中。</p>\n<h4 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h4><p>new Promise同步执行了resolve()，返回p2，并执行then，p2是已解决的，那么往微任务队列中放入console.log(2);再执行then，但是因为console.log(2)的这个then回调还没有执行，因此console.log(3)所在的回调会等待</p>\n<h4 id=\"阶段一结束\"><a href=\"#阶段一结束\" class=\"headerlink\" title=\"阶段一结束\"></a>阶段一结束</h4><p>此时微任务队列中有两条任务：NewPromiseResolveThenableJob(p0, p1, p1.then)和console.log(2)；</p>\n<hr>\n<h3 id=\"阶段二\"><a href=\"#阶段二\" class=\"headerlink\" title=\"阶段二\"></a>阶段二</h3><h4 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h4><p>执行job:NewPromiseResolveThenableJob(p0, p1, p1.then)，p1是fulfilled，执行p1.then,它的回调是resolve p0，此时往微任务队列增加一条任务 resolve p0。</p>\n<p><em>另外，<strong>如果then不是异步的</strong>，比如这样：(async function(){ return {then:(r)&#x3D;&gt;{r()}};})().then(()&#x3D;&gt;{console.log(1)});）则在这一步就将p0 resolve掉，并将log(1)放入微任务队列，<strong>则只会慢1拍</strong></em></p>\n<h4 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h4><p>执行console.log(2)</p>\n<h4 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h4><p>p3被resolved，将console.log(3)放入微任务队列</p>\n<h3 id=\"阶段二结束\"><a href=\"#阶段二结束\" class=\"headerlink\" title=\"阶段二结束\"></a>阶段二结束</h3><p>此时微任务队列有两个任务，resolve p0和console.log(3)</p>\n<hr>\n<h3 id=\"后续阶段\"><a href=\"#后续阶段\" class=\"headerlink\" title=\"后续阶段\"></a>后续阶段</h3><h4 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6.\"></a>6.</h4><p>执行resolve p0，console.log(1)被放入微任务队列</p>\n<h4 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7.\"></a>7.</h4><p>执行console.log(3)</p>\n<h4 id=\"8\"><a href=\"#8\" class=\"headerlink\" title=\"8.\"></a>8.</h4><p>执行console.log(1)</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>如果promise内返回的对象具有可调用的then方法，则会在微任务队列中再<strong>插入一个任务NewPromiseResolveThenableJob，这就慢了一拍</strong>；这个任务会执行这个then方法，如果这个<strong>then方法是来自于promise的，则因为是异步的又慢了一拍</strong>，所以一共慢了两拍。</p>\n<p>关于NewPromiseResolveThenableJob：</p>\n<blockquote>\n<p>This Job uses the supplied thenable and its then method to resolve the given promise. This process must take place as a Job to ensure that the evaluation of the then method occurs after evaluation of any surrounding code has completed.</p>\n</blockquote>\n<p>具体的解释可以参考<a href=\"https://tc39.es%2Fecma262%2F%23sec-promise-jobs\" title=\"https://tc39.es/ecma262/#sec-promise-jobs\">tc39.es&#x2F;ecma262&#x2F;#se…</a></p>\n","length":1955,"excerpt":"","more":"<h2 id=\"慢两拍？\"><a href=\"#慢两拍？\" class=\"headerlink\" title=\"慢两拍？\"></a>慢两拍？</h2><p>沸点上看到这样一个问题： <img src=\"/../imgs/4fcd03d8db8d4007845f8aa23a9bcb93.png\" alt=\"f9ebd1bfa73a4ee79f7873f731695a4c_tplv-k3u1fbpfcp-watermark.png\"></p>\n<p>类似的问题还有</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 0,1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure>\n\n<p>大家会发现 return Promise.resolve()慢了两拍。</p>\n<h2 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h2><p>虽然可能有个并没什么卵用的知识，但是很神奇，我来试着解释一下：</p>\n<p>还是以最上图片中代码为示例：</p>\n<p>假设async functin 返回的promise为p0，内部的Promise.resolve()，返回的为p1, 下面new Promise返回的为p2,p2.then返回的为p3;</p>\n<h3 id=\"阶段一\"><a href=\"#阶段一\" class=\"headerlink\" title=\"阶段一\"></a>阶段一</h3><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h4><p>执行async内部的Promise.resolve,得到p1，<strong>而p1上有可调用的then</strong>，则在微任务队列中放入一个任务：<a href=\"https://tc39.es%2Fecma262%2F%23sec-promise-objects\" title=\"https://tc39.es/ecma262/#sec-promise-objects\">NewPromiseResolveThenableJob</a>(promise0, p1, p1.then)，</p>\n<blockquote>\n<p>14.Let job be NewPromiseResolveThenableJob(promise, resolution, thenJobCallback).</p>\n</blockquote>\n<blockquote>\n<ol start=\"15\">\n<li>Perform HostEnqueuePromiseJob(job.[[Job]], job.[[Realm]]).</li>\n</ol>\n</blockquote>\n<p><strong>此时p0的状态还是pending</strong>，它需要等待p1.then执行之后，也就是说，console.log(1)处于等待中。</p>\n<h4 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h4><p>new Promise同步执行了resolve()，返回p2，并执行then，p2是已解决的，那么往微任务队列中放入console.log(2);再执行then，但是因为console.log(2)的这个then回调还没有执行，因此console.log(3)所在的回调会等待</p>\n<h4 id=\"阶段一结束\"><a href=\"#阶段一结束\" class=\"headerlink\" title=\"阶段一结束\"></a>阶段一结束</h4><p>此时微任务队列中有两条任务：NewPromiseResolveThenableJob(p0, p1, p1.then)和console.log(2)；</p>\n<hr>\n<h3 id=\"阶段二\"><a href=\"#阶段二\" class=\"headerlink\" title=\"阶段二\"></a>阶段二</h3><h4 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h4><p>执行job:NewPromiseResolveThenableJob(p0, p1, p1.then)，p1是fulfilled，执行p1.then,它的回调是resolve p0，此时往微任务队列增加一条任务 resolve p0。</p>\n<p><em>另外，<strong>如果then不是异步的</strong>，比如这样：(async function(){ return {then:(r)&#x3D;&gt;{r()}};})().then(()&#x3D;&gt;{console.log(1)});）则在这一步就将p0 resolve掉，并将log(1)放入微任务队列，<strong>则只会慢1拍</strong></em></p>\n<h4 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h4><p>执行console.log(2)</p>\n<h4 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h4><p>p3被resolved，将console.log(3)放入微任务队列</p>\n<h3 id=\"阶段二结束\"><a href=\"#阶段二结束\" class=\"headerlink\" title=\"阶段二结束\"></a>阶段二结束</h3><p>此时微任务队列有两个任务，resolve p0和console.log(3)</p>\n<hr>\n<h3 id=\"后续阶段\"><a href=\"#后续阶段\" class=\"headerlink\" title=\"后续阶段\"></a>后续阶段</h3><h4 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6.\"></a>6.</h4><p>执行resolve p0，console.log(1)被放入微任务队列</p>\n<h4 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7.\"></a>7.</h4><p>执行console.log(3)</p>\n<h4 id=\"8\"><a href=\"#8\" class=\"headerlink\" title=\"8.\"></a>8.</h4><p>执行console.log(1)</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>如果promise内返回的对象具有可调用的then方法，则会在微任务队列中再<strong>插入一个任务NewPromiseResolveThenableJob，这就慢了一拍</strong>；这个任务会执行这个then方法，如果这个<strong>then方法是来自于promise的，则因为是异步的又慢了一拍</strong>，所以一共慢了两拍。</p>\n<p>关于NewPromiseResolveThenableJob：</p>\n<blockquote>\n<p>This Job uses the supplied thenable and its then method to resolve the given promise. This process must take place as a Job to ensure that the evaluation of the then method occurs after evaluation of any surrounding code has completed.</p>\n</blockquote>\n<p>具体的解释可以参考<a href=\"https://tc39.es%2Fecma262%2F%23sec-promise-jobs\" title=\"https://tc39.es/ecma262/#sec-promise-jobs\">tc39.es&#x2F;ecma262&#x2F;#se…</a></p>\n"},{"title":"什么时候该用useReducer","date":"2022-02-06T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第12天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n被滥用的useState和被忽略的useReducer\n---------------------------\n\n过去的一年里，Hook成了React中最普遍的使用的api。然而Hook的设计是为了更细粒度的划分状态逻辑以便进行复用，在实践中大多数情况却是因写法便捷而使用，以致代码中充斥着滥用的useState和无效的useMemo。\n\n然而并不是每一个Hook api都大受欢迎，useReducer就是最没有存在感的一个，甚至对它存在两个普遍的误解——复杂化的useState和只有在Context场景中才会用到。\n\nuseReducer\n----------\n\n用过redux的人对这个api一定很亲切：\n\n```scss\nconst [state, dispatch] = useReducer(reducer, initialArg, init);\n```\n\n官网对它的使用场景做了一个描述：\n\n> 在某些场景下，`useReducer` 会比 `useState` 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等。并且，使用 `useReducer` 还能给那些会触发深更新的组件做性能优化，因为[你可以向子组件传递 `dispatch` 而不是回调函数](https://zh-hans.reactjs.org%2Fdocs%2Fhooks-faq.html%23how-to-avoid-passing-callbacks-down \"https://zh-hans.reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\") 。\n\n举个例子\n----\n\n虽然官网给了一个demo，但是并不清晰。这里给一个更简单的例子：\n\n![9ad5fec8f58215de6fa8b60549e7d3c.png](../imgs/a03b864b3bed427592c6c363019b0943.png)\n\n父组件渲染count，子组件修改父组件的count。看起来很简单的代码，却隐藏着一个问题：当修改count时，父组件的re-render会触发子组件的re-render。\n\n![a115567ee75f1e83a36e12d8ef0101c.png](../imgs/1324acbb236147538ee6038c283548cf.png)\n\n但是子组件并没有用到count值，完全不需要被re-render。\n\n如果对子组件加个memo呢？\n\n![79899ee31cdf3bcbca225b7a4aea29f.png](../imgs/2435791a1fdd44a4ad5778657f7ebb08.png)\n\n还是不行，因为父组件的更新会造成`const addCount =()=> setCount(count => ++count)` 重新声明，因此子组件的props还是变了。\n\n所以还需对父组件修改,加个useCallback：\n\n`const addCount =useCallback(()=> setCount(count => ++count),[])`\n\n这样修改count，就子组件就不会再re-render了。 ![aa3156d5534e18450ab6c99ebe6936c.png](../imgs/f849f6db6f584dc6b27307ae1f738aa5.png)\n\n但如果这里使用useReducer，就不需要增加useCallback，因为**dispatch不会在多次渲染之间变化**。\n\n![cdba3f553ad659b0bcd5bb49bfe9db5.png](../imgs/ca7ca0ea83704218b251c1d867dfc2fd.png)\n\n虽然这里用useState同样可以实现这个优化，但是如果**state之间有相互依赖**，比如：\n\n![475938760120dd63a1cfdefbc2fbb36.png](../imgs/f0768686252f4a8589a36b0f587ee340.png)\n\n这里的rate，子组件不需要，因此rate的改变不应该导致子组件的更新，但如果不把rate放在callback的依赖中，会因为闭包问题造成无法更新。但如果把这两个值合并成一个state，用useReducer修改，会帮你避开这个坑。","source":"_posts/什么时候该用useReducer.md","raw":"---\n title: \"什么时候该用useReducer\"\n date: 2022-02-07\n tags: [前端,React.js]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第12天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n被滥用的useState和被忽略的useReducer\n---------------------------\n\n过去的一年里，Hook成了React中最普遍的使用的api。然而Hook的设计是为了更细粒度的划分状态逻辑以便进行复用，在实践中大多数情况却是因写法便捷而使用，以致代码中充斥着滥用的useState和无效的useMemo。\n\n然而并不是每一个Hook api都大受欢迎，useReducer就是最没有存在感的一个，甚至对它存在两个普遍的误解——复杂化的useState和只有在Context场景中才会用到。\n\nuseReducer\n----------\n\n用过redux的人对这个api一定很亲切：\n\n```scss\nconst [state, dispatch] = useReducer(reducer, initialArg, init);\n```\n\n官网对它的使用场景做了一个描述：\n\n> 在某些场景下，`useReducer` 会比 `useState` 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等。并且，使用 `useReducer` 还能给那些会触发深更新的组件做性能优化，因为[你可以向子组件传递 `dispatch` 而不是回调函数](https://zh-hans.reactjs.org%2Fdocs%2Fhooks-faq.html%23how-to-avoid-passing-callbacks-down \"https://zh-hans.reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\") 。\n\n举个例子\n----\n\n虽然官网给了一个demo，但是并不清晰。这里给一个更简单的例子：\n\n![9ad5fec8f58215de6fa8b60549e7d3c.png](../imgs/a03b864b3bed427592c6c363019b0943.png)\n\n父组件渲染count，子组件修改父组件的count。看起来很简单的代码，却隐藏着一个问题：当修改count时，父组件的re-render会触发子组件的re-render。\n\n![a115567ee75f1e83a36e12d8ef0101c.png](../imgs/1324acbb236147538ee6038c283548cf.png)\n\n但是子组件并没有用到count值，完全不需要被re-render。\n\n如果对子组件加个memo呢？\n\n![79899ee31cdf3bcbca225b7a4aea29f.png](../imgs/2435791a1fdd44a4ad5778657f7ebb08.png)\n\n还是不行，因为父组件的更新会造成`const addCount =()=> setCount(count => ++count)` 重新声明，因此子组件的props还是变了。\n\n所以还需对父组件修改,加个useCallback：\n\n`const addCount =useCallback(()=> setCount(count => ++count),[])`\n\n这样修改count，就子组件就不会再re-render了。 ![aa3156d5534e18450ab6c99ebe6936c.png](../imgs/f849f6db6f584dc6b27307ae1f738aa5.png)\n\n但如果这里使用useReducer，就不需要增加useCallback，因为**dispatch不会在多次渲染之间变化**。\n\n![cdba3f553ad659b0bcd5bb49bfe9db5.png](../imgs/ca7ca0ea83704218b251c1d867dfc2fd.png)\n\n虽然这里用useState同样可以实现这个优化，但是如果**state之间有相互依赖**，比如：\n\n![475938760120dd63a1cfdefbc2fbb36.png](../imgs/f0768686252f4a8589a36b0f587ee340.png)\n\n这里的rate，子组件不需要，因此rate的改变不应该导致子组件的更新，但如果不把rate放在callback的依赖中，会因为闭包问题造成无法更新。但如果把这两个值合并成一个state，用useReducer修改，会帮你避开这个坑。","slug":"什么时候该用useReducer","published":1,"updated":"2024-04-04T15:27:03.412Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhv004rhajf6cvo8lwd","content":"<p>「这是我参与2022首次更文挑战的第12天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"被滥用的useState和被忽略的useReducer\"><a href=\"#被滥用的useState和被忽略的useReducer\" class=\"headerlink\" title=\"被滥用的useState和被忽略的useReducer\"></a>被滥用的useState和被忽略的useReducer</h2><p>过去的一年里，Hook成了React中最普遍的使用的api。然而Hook的设计是为了更细粒度的划分状态逻辑以便进行复用，在实践中大多数情况却是因写法便捷而使用，以致代码中充斥着滥用的useState和无效的useMemo。</p>\n<p>然而并不是每一个Hook api都大受欢迎，useReducer就是最没有存在感的一个，甚至对它存在两个普遍的误解——复杂化的useState和只有在Context场景中才会用到。</p>\n<h2 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h2><p>用过redux的人对这个api一定很亲切：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"selector-attr\">[state, dispatch]</span> = <span class=\"built_in\">useReducer</span>(reducer, initialArg, init);</span><br></pre></td></tr></table></figure>\n\n<p>官网对它的使用场景做了一个描述：</p>\n<blockquote>\n<p>在某些场景下，<code>useReducer</code> 会比 <code>useState</code> 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等。并且，使用 <code>useReducer</code> 还能给那些会触发深更新的组件做性能优化，因为<a href=\"https://zh-hans.reactjs.org%2Fdocs%2Fhooks-faq.html%23how-to-avoid-passing-callbacks-down\" title=\"https://zh-hans.reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\">你可以向子组件传递 <code>dispatch</code> 而不是回调函数</a> 。</p>\n</blockquote>\n<h2 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h2><p>虽然官网给了一个demo，但是并不清晰。这里给一个更简单的例子：</p>\n<p><img src=\"/../imgs/a03b864b3bed427592c6c363019b0943.png\" alt=\"9ad5fec8f58215de6fa8b60549e7d3c.png\"></p>\n<p>父组件渲染count，子组件修改父组件的count。看起来很简单的代码，却隐藏着一个问题：当修改count时，父组件的re-render会触发子组件的re-render。</p>\n<p><img src=\"/../imgs/1324acbb236147538ee6038c283548cf.png\" alt=\"a115567ee75f1e83a36e12d8ef0101c.png\"></p>\n<p>但是子组件并没有用到count值，完全不需要被re-render。</p>\n<p>如果对子组件加个memo呢？</p>\n<p><img src=\"/../imgs/2435791a1fdd44a4ad5778657f7ebb08.png\" alt=\"79899ee31cdf3bcbca225b7a4aea29f.png\"></p>\n<p>还是不行，因为父组件的更新会造成<code>const addCount =()=&gt; setCount(count =&gt; ++count)</code> 重新声明，因此子组件的props还是变了。</p>\n<p>所以还需对父组件修改,加个useCallback：</p>\n<p><code>const addCount =useCallback(()=&gt; setCount(count =&gt; ++count),[])</code></p>\n<p>这样修改count，就子组件就不会再re-render了。 <img src=\"/../imgs/f849f6db6f584dc6b27307ae1f738aa5.png\" alt=\"aa3156d5534e18450ab6c99ebe6936c.png\"></p>\n<p>但如果这里使用useReducer，就不需要增加useCallback，因为<strong>dispatch不会在多次渲染之间变化</strong>。</p>\n<p><img src=\"/../imgs/ca7ca0ea83704218b251c1d867dfc2fd.png\" alt=\"cdba3f553ad659b0bcd5bb49bfe9db5.png\"></p>\n<p>虽然这里用useState同样可以实现这个优化，但是如果<strong>state之间有相互依赖</strong>，比如：</p>\n<p><img src=\"/../imgs/f0768686252f4a8589a36b0f587ee340.png\" alt=\"475938760120dd63a1cfdefbc2fbb36.png\"></p>\n<p>这里的rate，子组件不需要，因此rate的改变不应该导致子组件的更新，但如果不把rate放在callback的依赖中，会因为闭包问题造成无法更新。但如果把这两个值合并成一个state，用useReducer修改，会帮你避开这个坑。</p>\n","length":1098,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第12天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"被滥用的useState和被忽略的useReducer\"><a href=\"#被滥用的useState和被忽略的useReducer\" class=\"headerlink\" title=\"被滥用的useState和被忽略的useReducer\"></a>被滥用的useState和被忽略的useReducer</h2><p>过去的一年里，Hook成了React中最普遍的使用的api。然而Hook的设计是为了更细粒度的划分状态逻辑以便进行复用，在实践中大多数情况却是因写法便捷而使用，以致代码中充斥着滥用的useState和无效的useMemo。</p>\n<p>然而并不是每一个Hook api都大受欢迎，useReducer就是最没有存在感的一个，甚至对它存在两个普遍的误解——复杂化的useState和只有在Context场景中才会用到。</p>\n<h2 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h2><p>用过redux的人对这个api一定很亲切：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"selector-attr\">[state, dispatch]</span> = <span class=\"built_in\">useReducer</span>(reducer, initialArg, init);</span><br></pre></td></tr></table></figure>\n\n<p>官网对它的使用场景做了一个描述：</p>\n<blockquote>\n<p>在某些场景下，<code>useReducer</code> 会比 <code>useState</code> 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等。并且，使用 <code>useReducer</code> 还能给那些会触发深更新的组件做性能优化，因为<a href=\"https://zh-hans.reactjs.org%2Fdocs%2Fhooks-faq.html%23how-to-avoid-passing-callbacks-down\" title=\"https://zh-hans.reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\">你可以向子组件传递 <code>dispatch</code> 而不是回调函数</a> 。</p>\n</blockquote>\n<h2 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h2><p>虽然官网给了一个demo，但是并不清晰。这里给一个更简单的例子：</p>\n<p><img src=\"/../imgs/a03b864b3bed427592c6c363019b0943.png\" alt=\"9ad5fec8f58215de6fa8b60549e7d3c.png\"></p>\n<p>父组件渲染count，子组件修改父组件的count。看起来很简单的代码，却隐藏着一个问题：当修改count时，父组件的re-render会触发子组件的re-render。</p>\n<p><img src=\"/../imgs/1324acbb236147538ee6038c283548cf.png\" alt=\"a115567ee75f1e83a36e12d8ef0101c.png\"></p>\n<p>但是子组件并没有用到count值，完全不需要被re-render。</p>\n<p>如果对子组件加个memo呢？</p>\n<p><img src=\"/../imgs/2435791a1fdd44a4ad5778657f7ebb08.png\" alt=\"79899ee31cdf3bcbca225b7a4aea29f.png\"></p>\n<p>还是不行，因为父组件的更新会造成<code>const addCount =()=&gt; setCount(count =&gt; ++count)</code> 重新声明，因此子组件的props还是变了。</p>\n<p>所以还需对父组件修改,加个useCallback：</p>\n<p><code>const addCount =useCallback(()=&gt; setCount(count =&gt; ++count),[])</code></p>\n<p>这样修改count，就子组件就不会再re-render了。 <img src=\"/../imgs/f849f6db6f584dc6b27307ae1f738aa5.png\" alt=\"aa3156d5534e18450ab6c99ebe6936c.png\"></p>\n<p>但如果这里使用useReducer，就不需要增加useCallback，因为<strong>dispatch不会在多次渲染之间变化</strong>。</p>\n<p><img src=\"/../imgs/ca7ca0ea83704218b251c1d867dfc2fd.png\" alt=\"cdba3f553ad659b0bcd5bb49bfe9db5.png\"></p>\n<p>虽然这里用useState同样可以实现这个优化，但是如果<strong>state之间有相互依赖</strong>，比如：</p>\n<p><img src=\"/../imgs/f0768686252f4a8589a36b0f587ee340.png\" alt=\"475938760120dd63a1cfdefbc2fbb36.png\"></p>\n<p>这里的rate，子组件不需要，因此rate的改变不应该导致子组件的更新，但如果不把rate放在callback的依赖中，会因为闭包问题造成无法更新。但如果把这两个值合并成一个state，用useReducer修改，会帮你避开这个坑。</p>\n"},{"title":"使用AVA测试你的Typescript","date":"2021-11-12T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第13天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n介绍\n--\n\n[AVA](https://www.npmjs.com%2Fpackage%2Fava \"https://www.npmjs.com/package/ava\")是一个轻量级测试工具，不仅api简单，还能并发执行测试，没有隐式的全局变量，对ts lib类的项目测试特别友好。\n\n安装\n--\n\n在项目中运行\n\n```csharp\nnpm init ava\n```\n\n这个命令将会在项目中安装ava，并修改package.json\n\n```json\n{\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^3.15.0\"\n\t}\n}\n```\n\n编写ts\n----\n\n整体项目结构如下\n\n```csharp\n├───scripts/\n│   └───build.js\n├───src/\n│   └───index.ts\n├───test/\n│   └───ava.ts\n├───CHANGELOG.md\n├───package-lock.json\n├───package.json\n├───README.md\n├───tsconfig.json\n└───yarn.lock\n```\n\n假设我们编写了一个工具函数：\n\nsrc/index.ts\n\n```ini\n// {k1:[k2,value]},k1查k2,k2查value\ntype Dictionary<T> = {\n    [key in string | number]: [number, T] | T;\n  };\n  \n  type Entries<T> = Array<[number, T]>;\n  type EntriesFunction<T> = () => Entries<T>;\n  /**\n   * 对enum的扩展，可以根据k1找到k2，根据k2找到value\n   * @param data {k1:[k2,value]},可以简化为{k1:value},此时k2为k1在属性中的index值\n   * @returns\n   */\n  \n  export default function Enum<P extends Dictionary<T>, T>(data: P) {\n    type U = P extends Dictionary<infer S> ? S : 'string'; //令U=S，S类型为T\n    const map = new Map<string | number, number | U>();\n    const entries: Entries<U> = [];\n    if (!data) {\n      return data;\n    }\n    // Object.getOwnPropertyNames是有序的\n    Object.getOwnPropertyNames(data).forEach((key1, index) => {\n      let key2, value: U;\n      if (Array.isArray(data[key1])) {\n        let arr = data[key1] as [number, U];\n        key2 = arr[0];\n        value = arr[1];\n      } else {\n        key2 = index;\n        value = data[key1] as U;\n      }\n      map.set(key1, key2);\n      map.set(key2, value);\n      entries.push([key2, value]);\n    });\n    return new Proxy(\n      {} as { [key in keyof Exclude<P, 'entries'>]: number } & {\n        [key: number]: U;\n        entries: EntriesFunction<U>;\n      },\n      {\n        get: function (_target, propKey: string) {\n          if (propKey === 'entries') {\n            return () => entries;\n          }\n  \n          let value = map.get(propKey) ?? data[propKey];\n          if (value === undefined && /\\d+/.test(propKey)) {\n            value = map.get(Number(propKey)) || data[Number(propKey)];\n          }\n          return value;\n        },\n      },\n    );\n  }\n```\n\n这个函数的功能是提供一个便于访问的字典,期望的功能和输出如下：\n\n```php\nconst AuditStatus = Enum({\n  UNAUDIT: [1, '未审核'],\n  AUDITING: [2, '审核中'],\n  AUDITED: [3, '审核通过'],\n  REFUSED: [4, '审核拒绝'],\n});\n// AuditStatus.UNAUDIT => 1\n// AuditStatus[1] => '未审核'\nconst FileSource = Enum({\n  local:  '本地',\n  remote: '远端',\n});\n// FileSource.local = 0\n// FileSource[0] = '本地'\n// FileSource.entries() => [[0,'本地'],[1,'远端']]\n```\n\n配置\n--\n\n在设计中，这个函数函数是pure ESM，需要进行一些配置：\n\ntsconfig.json\n\n```json\n{\n\n\t\"compilerOptions\": {\n\t\t\"outDir\": \"dist\",\n\t\t\"target\": \"es6\",\n\t\t\"module\": \"ESNext\",\n\t\t\"moduleResolution\": \"node\",\n\t\t\"downlevelIteration\": true,\n\t\t\"alwaysStrict\": true,\n\t\t\"sourceMap\": true,\n\t\t\"declaration\": true,\n\t\t\"removeComments\": false,\n\t\t\"strict\": true,\n\t\t\"noImplicitReturns\": true,\n\t\t\"noUnusedLocals\": true,\n\t\t\"noImplicitAny\": false,\n\t\t\"noImplicitThis\": false,\n\t\t\"experimentalDecorators\": true,\n\t\t\"useDefineForClassFields\": true,\n\t\t\"esModuleInterop\": true,\n\t\t\"rootDir\": \"src\"\n\t},\n\t\"exclude\": [\n\t\t\"node_modules\",\"test\",\"dist\"\n\t]\n}\n```\n\npackage.json\n\n```json\n\"ava\": {\n    \"extensions\": {\n      \"ts\": \"module\"\n    },\n    \"nonSemVerExperiments\": {\n      \"configurableModuleFormat\": true\n    },\n    \"nodeArguments\": [\n      \"--loader=ts-node/esm\",\n      \"--experimental-specifier-resolution=node\"\n    ]\n  }\n```\n\n接下来编写测试用例\n\n编写测试\n----\n\ntest/ava.ts\n\n```vbnet\nimport test from \"ava\";\nimport Enum from \"../src\";\nconst AuditStatus = Enum({\n  UNAUDIT: [1, \"未审核\"],\n  REFUSED: [4, \"审核拒绝\"],\n});\nconst FileSource = Enum({\n  LOCAL: \"本地\",\n  REMOTE: \"远端\",\n});\nconsole.log(AuditStatus, FileSource);\n\ntest(\"entries\", (t) => {\n  t.like(\n    { e: FileSource.entries() },\n    {\n      e: [\n        [0, \"本地\"],\n        [1, \"远端\"],\n      ],\n    }\n  );\n  t.like(\n    { e: AuditStatus.entries() },\n    {\n      e: [\n        [1, \"未审核\"],\n        [4, \"审核拒绝\"],\n      ],\n    }\n  );\n});\n\ntest(\"k1 to k2\", async (t) => {\n  t.is(AuditStatus.UNAUDIT, 1);\n  t.is(AuditStatus.REFUSED, 4);\n  t.is(FileSource.LOCAL, 0);\n  t.is(FileSource.REMOTE, 1);\n});\ntest(\"k2 to value\", async (t) => {\n  t.is(AuditStatus[1], \"未审核\");\n  t.is(AuditStatus[4], \"审核拒绝\");\n  t.is(FileSource[0], \"本地\");\n  t.is(FileSource[1], \"远端\");\n});\n\n```\n\n运行 `npm run test`\n\n如果通过：\n\n![image.png](../imgs/079325dede394c41b4a5bc39e1ece8a7.png)\n\n如果有失败，比如\n\n```dart\ntest(\"k2 to value\", async (t) => {\n  t.is(AuditStatus[1], \"未审核\");\n  t.is(AuditStatus[4], \"审核拒绝\");\n  t.is(FileSource[0], \"本地\");\n  t.is(FileSource[1], \"远\");\n});\n\n```\n\nava会输出详细的信息，能显示输入值和期待值的差异，这也是ava的一大特性\n\n![image.png](../imgs/174737fba5f442d6977bcd22bb2805b1.png)","source":"_posts/使用AVA测试你的Typescript.md","raw":"---\n title: \"使用AVA测试你的Typescript\"\n date: 2021-11-13\n tags: [前端,TypeScript]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第13天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n介绍\n--\n\n[AVA](https://www.npmjs.com%2Fpackage%2Fava \"https://www.npmjs.com/package/ava\")是一个轻量级测试工具，不仅api简单，还能并发执行测试，没有隐式的全局变量，对ts lib类的项目测试特别友好。\n\n安装\n--\n\n在项目中运行\n\n```csharp\nnpm init ava\n```\n\n这个命令将会在项目中安装ava，并修改package.json\n\n```json\n{\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^3.15.0\"\n\t}\n}\n```\n\n编写ts\n----\n\n整体项目结构如下\n\n```csharp\n├───scripts/\n│   └───build.js\n├───src/\n│   └───index.ts\n├───test/\n│   └───ava.ts\n├───CHANGELOG.md\n├───package-lock.json\n├───package.json\n├───README.md\n├───tsconfig.json\n└───yarn.lock\n```\n\n假设我们编写了一个工具函数：\n\nsrc/index.ts\n\n```ini\n// {k1:[k2,value]},k1查k2,k2查value\ntype Dictionary<T> = {\n    [key in string | number]: [number, T] | T;\n  };\n  \n  type Entries<T> = Array<[number, T]>;\n  type EntriesFunction<T> = () => Entries<T>;\n  /**\n   * 对enum的扩展，可以根据k1找到k2，根据k2找到value\n   * @param data {k1:[k2,value]},可以简化为{k1:value},此时k2为k1在属性中的index值\n   * @returns\n   */\n  \n  export default function Enum<P extends Dictionary<T>, T>(data: P) {\n    type U = P extends Dictionary<infer S> ? S : 'string'; //令U=S，S类型为T\n    const map = new Map<string | number, number | U>();\n    const entries: Entries<U> = [];\n    if (!data) {\n      return data;\n    }\n    // Object.getOwnPropertyNames是有序的\n    Object.getOwnPropertyNames(data).forEach((key1, index) => {\n      let key2, value: U;\n      if (Array.isArray(data[key1])) {\n        let arr = data[key1] as [number, U];\n        key2 = arr[0];\n        value = arr[1];\n      } else {\n        key2 = index;\n        value = data[key1] as U;\n      }\n      map.set(key1, key2);\n      map.set(key2, value);\n      entries.push([key2, value]);\n    });\n    return new Proxy(\n      {} as { [key in keyof Exclude<P, 'entries'>]: number } & {\n        [key: number]: U;\n        entries: EntriesFunction<U>;\n      },\n      {\n        get: function (_target, propKey: string) {\n          if (propKey === 'entries') {\n            return () => entries;\n          }\n  \n          let value = map.get(propKey) ?? data[propKey];\n          if (value === undefined && /\\d+/.test(propKey)) {\n            value = map.get(Number(propKey)) || data[Number(propKey)];\n          }\n          return value;\n        },\n      },\n    );\n  }\n```\n\n这个函数的功能是提供一个便于访问的字典,期望的功能和输出如下：\n\n```php\nconst AuditStatus = Enum({\n  UNAUDIT: [1, '未审核'],\n  AUDITING: [2, '审核中'],\n  AUDITED: [3, '审核通过'],\n  REFUSED: [4, '审核拒绝'],\n});\n// AuditStatus.UNAUDIT => 1\n// AuditStatus[1] => '未审核'\nconst FileSource = Enum({\n  local:  '本地',\n  remote: '远端',\n});\n// FileSource.local = 0\n// FileSource[0] = '本地'\n// FileSource.entries() => [[0,'本地'],[1,'远端']]\n```\n\n配置\n--\n\n在设计中，这个函数函数是pure ESM，需要进行一些配置：\n\ntsconfig.json\n\n```json\n{\n\n\t\"compilerOptions\": {\n\t\t\"outDir\": \"dist\",\n\t\t\"target\": \"es6\",\n\t\t\"module\": \"ESNext\",\n\t\t\"moduleResolution\": \"node\",\n\t\t\"downlevelIteration\": true,\n\t\t\"alwaysStrict\": true,\n\t\t\"sourceMap\": true,\n\t\t\"declaration\": true,\n\t\t\"removeComments\": false,\n\t\t\"strict\": true,\n\t\t\"noImplicitReturns\": true,\n\t\t\"noUnusedLocals\": true,\n\t\t\"noImplicitAny\": false,\n\t\t\"noImplicitThis\": false,\n\t\t\"experimentalDecorators\": true,\n\t\t\"useDefineForClassFields\": true,\n\t\t\"esModuleInterop\": true,\n\t\t\"rootDir\": \"src\"\n\t},\n\t\"exclude\": [\n\t\t\"node_modules\",\"test\",\"dist\"\n\t]\n}\n```\n\npackage.json\n\n```json\n\"ava\": {\n    \"extensions\": {\n      \"ts\": \"module\"\n    },\n    \"nonSemVerExperiments\": {\n      \"configurableModuleFormat\": true\n    },\n    \"nodeArguments\": [\n      \"--loader=ts-node/esm\",\n      \"--experimental-specifier-resolution=node\"\n    ]\n  }\n```\n\n接下来编写测试用例\n\n编写测试\n----\n\ntest/ava.ts\n\n```vbnet\nimport test from \"ava\";\nimport Enum from \"../src\";\nconst AuditStatus = Enum({\n  UNAUDIT: [1, \"未审核\"],\n  REFUSED: [4, \"审核拒绝\"],\n});\nconst FileSource = Enum({\n  LOCAL: \"本地\",\n  REMOTE: \"远端\",\n});\nconsole.log(AuditStatus, FileSource);\n\ntest(\"entries\", (t) => {\n  t.like(\n    { e: FileSource.entries() },\n    {\n      e: [\n        [0, \"本地\"],\n        [1, \"远端\"],\n      ],\n    }\n  );\n  t.like(\n    { e: AuditStatus.entries() },\n    {\n      e: [\n        [1, \"未审核\"],\n        [4, \"审核拒绝\"],\n      ],\n    }\n  );\n});\n\ntest(\"k1 to k2\", async (t) => {\n  t.is(AuditStatus.UNAUDIT, 1);\n  t.is(AuditStatus.REFUSED, 4);\n  t.is(FileSource.LOCAL, 0);\n  t.is(FileSource.REMOTE, 1);\n});\ntest(\"k2 to value\", async (t) => {\n  t.is(AuditStatus[1], \"未审核\");\n  t.is(AuditStatus[4], \"审核拒绝\");\n  t.is(FileSource[0], \"本地\");\n  t.is(FileSource[1], \"远端\");\n});\n\n```\n\n运行 `npm run test`\n\n如果通过：\n\n![image.png](../imgs/079325dede394c41b4a5bc39e1ece8a7.png)\n\n如果有失败，比如\n\n```dart\ntest(\"k2 to value\", async (t) => {\n  t.is(AuditStatus[1], \"未审核\");\n  t.is(AuditStatus[4], \"审核拒绝\");\n  t.is(FileSource[0], \"本地\");\n  t.is(FileSource[1], \"远\");\n});\n\n```\n\nava会输出详细的信息，能显示输入值和期待值的差异，这也是ava的一大特性\n\n![image.png](../imgs/174737fba5f442d6977bcd22bb2805b1.png)","slug":"使用AVA测试你的Typescript","published":1,"updated":"2024-04-04T15:27:03.427Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhw004vhajff05jak6m","content":"<p>这是我参与11月更文挑战的第13天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><a href=\"https://www.npmjs.com%2Fpackage%2Fava\" title=\"https://www.npmjs.com/package/ava\">AVA</a>是一个轻量级测试工具，不仅api简单，还能并发执行测试，没有隐式的全局变量，对ts lib类的项目测试特别友好。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在项目中运行</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">init</span> ava</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将会在项目中安装ava，并修改package.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ava&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;ava&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.15.0&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编写ts\"><a href=\"#编写ts\" class=\"headerlink\" title=\"编写ts\"></a>编写ts</h2><p>整体项目结构如下</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├───scripts/</span><br><span class=\"line\">│   └───build.js</span><br><span class=\"line\">├───src/</span><br><span class=\"line\">│   └───index.ts</span><br><span class=\"line\">├───test/</span><br><span class=\"line\">│   └───ava.ts</span><br><span class=\"line\">├───CHANGELOG.md</span><br><span class=\"line\">├───package-<span class=\"keyword\">lock</span>.json</span><br><span class=\"line\">├───package.json</span><br><span class=\"line\">├───README.md</span><br><span class=\"line\">├───tsconfig.json</span><br><span class=\"line\">└───yarn.<span class=\"keyword\">lock</span></span><br></pre></td></tr></table></figure>\n\n<p>假设我们编写了一个工具函数：</p>\n<p>src&#x2F;index.ts</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// &#123;k1:<span class=\"section\">[k2,value]</span>&#125;,k1查k2,k2查value</span><br><span class=\"line\">type Dictionary&lt;T&gt; = &#123;</span><br><span class=\"line\">    <span class=\"section\">[key in string | number]</span>: <span class=\"section\">[number, T]</span> | T<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;<span class=\"comment\">;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  type Entries&lt;T&gt; = Array&lt;<span class=\"section\">[number, T]</span>&gt;<span class=\"comment\">;</span></span><br><span class=\"line\">  type EntriesFunction&lt;T&gt; = () =&gt; Entries&lt;T&gt;<span class=\"comment\">;</span></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 对enum的扩展，可以根据k1找到k2，根据k2找到value</span><br><span class=\"line\">   * @param data &#123;k1:<span class=\"section\">[k2,value]</span>&#125;,可以简化为&#123;k1:value&#125;,此时k2为k1在属性中的index值</span><br><span class=\"line\">   * @returns</span><br><span class=\"line\">   */</span><br><span class=\"line\">  </span><br><span class=\"line\">  export default function Enum&lt;P extends Dictionary&lt;T&gt;, T&gt;(data: P) &#123;</span><br><span class=\"line\">    type <span class=\"attr\">U</span> = P extends Dictionary&lt;infer S&gt; ? S : <span class=\"string\">&#x27;string&#x27;</span><span class=\"comment\">; //令U=S，S类型为T</span></span><br><span class=\"line\">    const <span class=\"attr\">map</span> = new Map&lt;string | number, number | U&gt;()<span class=\"comment\">;</span></span><br><span class=\"line\">    const entries: Entries&lt;U&gt; = <span class=\"section\">[]</span><span class=\"comment\">;</span></span><br><span class=\"line\">    if (!data) &#123;</span><br><span class=\"line\">      return data<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // Object.getOwnPropertyNames是有序的</span><br><span class=\"line\">    Object.getOwnPropertyNames(data).forEach((key1, index) =&gt; &#123;</span><br><span class=\"line\">      let key2, value: U<span class=\"comment\">;</span></span><br><span class=\"line\">      if (Array.isArray(data<span class=\"section\">[key1]</span>)) &#123;</span><br><span class=\"line\">        let <span class=\"attr\">arr</span> = data[key1] as [number, U]<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"attr\">key2</span> = arr[<span class=\"number\">0</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"attr\">value</span> = arr[<span class=\"number\">1</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        <span class=\"attr\">key2</span> = index<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"attr\">value</span> = data[key1] as U<span class=\"comment\">;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      map.set(key1, key2)<span class=\"comment\">;</span></span><br><span class=\"line\">      map.set(key2, value)<span class=\"comment\">;</span></span><br><span class=\"line\">      entries.push(<span class=\"section\">[key2, value]</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">    return new Proxy(</span><br><span class=\"line\">      &#123;&#125; as &#123; <span class=\"section\">[key in keyof Exclude&lt;P, &#x27;entries&#x27;&gt;]</span>: number &#125; &amp; &#123;</span><br><span class=\"line\">        <span class=\"section\">[key: number]</span>: U<span class=\"comment\">;</span></span><br><span class=\"line\">        entries: EntriesFunction&lt;U&gt;<span class=\"comment\">;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        get: function (_target, propKey: string) &#123;</span><br><span class=\"line\">          if (<span class=\"attr\">propKey</span> === <span class=\"string\">&#x27;entries&#x27;</span>) &#123;</span><br><span class=\"line\">            return () =&gt; entries<span class=\"comment\">;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">          let <span class=\"attr\">value</span> = map.get(propKey) ?? data[propKey]<span class=\"comment\">;</span></span><br><span class=\"line\">          if (<span class=\"attr\">value</span> === undefined &amp;&amp; /\\d+/.test(propKey)) &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span> = map.get(Number(propKey)) || data[Number(propKey)]<span class=\"comment\">;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return value<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    )<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个函数的功能是提供一个便于访问的字典,期望的功能和输出如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">AuditStatus</span> = <span class=\"title function_ invoke__\">Enum</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">UNAUDIT</span>: [<span class=\"number\">1</span>, <span class=\"string\">&#x27;未审核&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">AUDITING</span>: [<span class=\"number\">2</span>, <span class=\"string\">&#x27;审核中&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">AUDITED</span>: [<span class=\"number\">3</span>, <span class=\"string\">&#x27;审核通过&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">REFUSED</span>: [<span class=\"number\">4</span>, <span class=\"string\">&#x27;审核拒绝&#x27;</span>],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// AuditStatus.UNAUDIT =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">// AuditStatus[1] =&gt; &#x27;未审核&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FileSource</span> = <span class=\"title function_ invoke__\">Enum</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">local</span>:  <span class=\"string\">&#x27;本地&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">remote</span>: <span class=\"string\">&#x27;远端&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// FileSource.local = 0</span></span><br><span class=\"line\"><span class=\"comment\">// FileSource[0] = &#x27;本地&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// FileSource.entries() =&gt; [[0,&#x27;本地&#x27;],[1,&#x27;远端&#x27;]]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>在设计中，这个函数函数是pure ESM，需要进行一些配置：</p>\n<p>tsconfig.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;outDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dist&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;es6&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ESNext&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;moduleResolution&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;downlevelIteration&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;alwaysStrict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;sourceMap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;declaration&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;removeComments&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;strict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noImplicitReturns&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noUnusedLocals&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noImplicitAny&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noImplicitThis&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;experimentalDecorators&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;useDefineForClassFields&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;esModuleInterop&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;rootDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;src&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;exclude&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;node_modules&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;test&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;dist&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>package.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;ava&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extensions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;ts&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;module&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;nonSemVerExperiments&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;configurableModuleFormat&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;nodeArguments&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;--loader=ts-node/esm&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;--experimental-specifier-resolution=node&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来编写测试用例</p>\n<h2 id=\"编写测试\"><a href=\"#编写测试\" class=\"headerlink\" title=\"编写测试\"></a>编写测试</h2><p>test&#x2F;ava.ts</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import test <span class=\"keyword\">from</span> <span class=\"string\">&quot;ava&quot;</span>;</span><br><span class=\"line\">import <span class=\"keyword\">Enum</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../src&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> AuditStatus = <span class=\"keyword\">Enum</span>(&#123;</span><br><span class=\"line\">  UNAUDIT: [<span class=\"number\">1</span>, <span class=\"string\">&quot;未审核&quot;</span>],</span><br><span class=\"line\">  REFUSED: [<span class=\"number\">4</span>, <span class=\"string\">&quot;审核拒绝&quot;</span>],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> FileSource = <span class=\"keyword\">Enum</span>(&#123;</span><br><span class=\"line\">  LOCAL: <span class=\"string\">&quot;本地&quot;</span>,</span><br><span class=\"line\">  REMOTE: <span class=\"string\">&quot;远端&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(AuditStatus, FileSource);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;entries&quot;</span>, (t) =&gt; &#123;</span><br><span class=\"line\">  t.<span class=\"built_in\">like</span>(</span><br><span class=\"line\">    &#123; e: FileSource.entries() &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      e: [</span><br><span class=\"line\">        [<span class=\"number\">0</span>, <span class=\"string\">&quot;本地&quot;</span>],</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"string\">&quot;远端&quot;</span>],</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  t.<span class=\"built_in\">like</span>(</span><br><span class=\"line\">    &#123; e: AuditStatus.entries() &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      e: [</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"string\">&quot;未审核&quot;</span>],</span><br><span class=\"line\">        [<span class=\"number\">4</span>, <span class=\"string\">&quot;审核拒绝&quot;</span>],</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;k1 to k2&quot;</span>, <span class=\"keyword\">async</span> (t) =&gt; &#123;</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(AuditStatus.UNAUDIT, <span class=\"number\">1</span>);</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(AuditStatus.REFUSED, <span class=\"number\">4</span>);</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(FileSource.LOCAL, <span class=\"number\">0</span>);</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(FileSource.REMOTE, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">test(<span class=\"string\">&quot;k2 to value&quot;</span>, <span class=\"keyword\">async</span> (t) =&gt; &#123;</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(AuditStatus[<span class=\"number\">1</span>], <span class=\"string\">&quot;未审核&quot;</span>);</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(AuditStatus[<span class=\"number\">4</span>], <span class=\"string\">&quot;审核拒绝&quot;</span>);</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(FileSource[<span class=\"number\">0</span>], <span class=\"string\">&quot;本地&quot;</span>);</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(FileSource[<span class=\"number\">1</span>], <span class=\"string\">&quot;远端&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行 <code>npm run test</code></p>\n<p>如果通过：</p>\n<p><img src=\"/../imgs/079325dede394c41b4a5bc39e1ece8a7.png\" alt=\"image.png\"></p>\n<p>如果有失败，比如</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;k2 to value&quot;</span>, <span class=\"keyword\">async</span> (t) =&gt; &#123;</span><br><span class=\"line\">  t.<span class=\"keyword\">is</span>(AuditStatus[<span class=\"number\">1</span>], <span class=\"string\">&quot;未审核&quot;</span>);</span><br><span class=\"line\">  t.<span class=\"keyword\">is</span>(AuditStatus[<span class=\"number\">4</span>], <span class=\"string\">&quot;审核拒绝&quot;</span>);</span><br><span class=\"line\">  t.<span class=\"keyword\">is</span>(FileSource[<span class=\"number\">0</span>], <span class=\"string\">&quot;本地&quot;</span>);</span><br><span class=\"line\">  t.<span class=\"keyword\">is</span>(FileSource[<span class=\"number\">1</span>], <span class=\"string\">&quot;远&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>ava会输出详细的信息，能显示输入值和期待值的差异，这也是ava的一大特性</p>\n<p><img src=\"/../imgs/174737fba5f442d6977bcd22bb2805b1.png\" alt=\"image.png\"></p>\n","length":4897,"excerpt":"","more":"<p>这是我参与11月更文挑战的第13天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><a href=\"https://www.npmjs.com%2Fpackage%2Fava\" title=\"https://www.npmjs.com/package/ava\">AVA</a>是一个轻量级测试工具，不仅api简单，还能并发执行测试，没有隐式的全局变量，对ts lib类的项目测试特别友好。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在项目中运行</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">init</span> ava</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将会在项目中安装ava，并修改package.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ava&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;ava&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.15.0&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编写ts\"><a href=\"#编写ts\" class=\"headerlink\" title=\"编写ts\"></a>编写ts</h2><p>整体项目结构如下</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├───scripts/</span><br><span class=\"line\">│   └───build.js</span><br><span class=\"line\">├───src/</span><br><span class=\"line\">│   └───index.ts</span><br><span class=\"line\">├───test/</span><br><span class=\"line\">│   └───ava.ts</span><br><span class=\"line\">├───CHANGELOG.md</span><br><span class=\"line\">├───package-<span class=\"keyword\">lock</span>.json</span><br><span class=\"line\">├───package.json</span><br><span class=\"line\">├───README.md</span><br><span class=\"line\">├───tsconfig.json</span><br><span class=\"line\">└───yarn.<span class=\"keyword\">lock</span></span><br></pre></td></tr></table></figure>\n\n<p>假设我们编写了一个工具函数：</p>\n<p>src&#x2F;index.ts</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// &#123;k1:<span class=\"section\">[k2,value]</span>&#125;,k1查k2,k2查value</span><br><span class=\"line\">type Dictionary&lt;T&gt; = &#123;</span><br><span class=\"line\">    <span class=\"section\">[key in string | number]</span>: <span class=\"section\">[number, T]</span> | T<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;<span class=\"comment\">;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  type Entries&lt;T&gt; = Array&lt;<span class=\"section\">[number, T]</span>&gt;<span class=\"comment\">;</span></span><br><span class=\"line\">  type EntriesFunction&lt;T&gt; = () =&gt; Entries&lt;T&gt;<span class=\"comment\">;</span></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 对enum的扩展，可以根据k1找到k2，根据k2找到value</span><br><span class=\"line\">   * @param data &#123;k1:<span class=\"section\">[k2,value]</span>&#125;,可以简化为&#123;k1:value&#125;,此时k2为k1在属性中的index值</span><br><span class=\"line\">   * @returns</span><br><span class=\"line\">   */</span><br><span class=\"line\">  </span><br><span class=\"line\">  export default function Enum&lt;P extends Dictionary&lt;T&gt;, T&gt;(data: P) &#123;</span><br><span class=\"line\">    type <span class=\"attr\">U</span> = P extends Dictionary&lt;infer S&gt; ? S : <span class=\"string\">&#x27;string&#x27;</span><span class=\"comment\">; //令U=S，S类型为T</span></span><br><span class=\"line\">    const <span class=\"attr\">map</span> = new Map&lt;string | number, number | U&gt;()<span class=\"comment\">;</span></span><br><span class=\"line\">    const entries: Entries&lt;U&gt; = <span class=\"section\">[]</span><span class=\"comment\">;</span></span><br><span class=\"line\">    if (!data) &#123;</span><br><span class=\"line\">      return data<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // Object.getOwnPropertyNames是有序的</span><br><span class=\"line\">    Object.getOwnPropertyNames(data).forEach((key1, index) =&gt; &#123;</span><br><span class=\"line\">      let key2, value: U<span class=\"comment\">;</span></span><br><span class=\"line\">      if (Array.isArray(data<span class=\"section\">[key1]</span>)) &#123;</span><br><span class=\"line\">        let <span class=\"attr\">arr</span> = data[key1] as [number, U]<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"attr\">key2</span> = arr[<span class=\"number\">0</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"attr\">value</span> = arr[<span class=\"number\">1</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        <span class=\"attr\">key2</span> = index<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"attr\">value</span> = data[key1] as U<span class=\"comment\">;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      map.set(key1, key2)<span class=\"comment\">;</span></span><br><span class=\"line\">      map.set(key2, value)<span class=\"comment\">;</span></span><br><span class=\"line\">      entries.push(<span class=\"section\">[key2, value]</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">    return new Proxy(</span><br><span class=\"line\">      &#123;&#125; as &#123; <span class=\"section\">[key in keyof Exclude&lt;P, &#x27;entries&#x27;&gt;]</span>: number &#125; &amp; &#123;</span><br><span class=\"line\">        <span class=\"section\">[key: number]</span>: U<span class=\"comment\">;</span></span><br><span class=\"line\">        entries: EntriesFunction&lt;U&gt;<span class=\"comment\">;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        get: function (_target, propKey: string) &#123;</span><br><span class=\"line\">          if (<span class=\"attr\">propKey</span> === <span class=\"string\">&#x27;entries&#x27;</span>) &#123;</span><br><span class=\"line\">            return () =&gt; entries<span class=\"comment\">;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">          let <span class=\"attr\">value</span> = map.get(propKey) ?? data[propKey]<span class=\"comment\">;</span></span><br><span class=\"line\">          if (<span class=\"attr\">value</span> === undefined &amp;&amp; /\\d+/.test(propKey)) &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span> = map.get(Number(propKey)) || data[Number(propKey)]<span class=\"comment\">;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return value<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    )<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个函数的功能是提供一个便于访问的字典,期望的功能和输出如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">AuditStatus</span> = <span class=\"title function_ invoke__\">Enum</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">UNAUDIT</span>: [<span class=\"number\">1</span>, <span class=\"string\">&#x27;未审核&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">AUDITING</span>: [<span class=\"number\">2</span>, <span class=\"string\">&#x27;审核中&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">AUDITED</span>: [<span class=\"number\">3</span>, <span class=\"string\">&#x27;审核通过&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">REFUSED</span>: [<span class=\"number\">4</span>, <span class=\"string\">&#x27;审核拒绝&#x27;</span>],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// AuditStatus.UNAUDIT =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">// AuditStatus[1] =&gt; &#x27;未审核&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FileSource</span> = <span class=\"title function_ invoke__\">Enum</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">local</span>:  <span class=\"string\">&#x27;本地&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">remote</span>: <span class=\"string\">&#x27;远端&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// FileSource.local = 0</span></span><br><span class=\"line\"><span class=\"comment\">// FileSource[0] = &#x27;本地&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// FileSource.entries() =&gt; [[0,&#x27;本地&#x27;],[1,&#x27;远端&#x27;]]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>在设计中，这个函数函数是pure ESM，需要进行一些配置：</p>\n<p>tsconfig.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;outDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dist&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;es6&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ESNext&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;moduleResolution&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;downlevelIteration&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;alwaysStrict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;sourceMap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;declaration&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;removeComments&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;strict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noImplicitReturns&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noUnusedLocals&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noImplicitAny&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noImplicitThis&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;experimentalDecorators&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;useDefineForClassFields&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;esModuleInterop&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;rootDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;src&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;exclude&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;node_modules&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;test&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;dist&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>package.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;ava&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extensions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;ts&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;module&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;nonSemVerExperiments&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;configurableModuleFormat&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;nodeArguments&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;--loader=ts-node/esm&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;--experimental-specifier-resolution=node&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来编写测试用例</p>\n<h2 id=\"编写测试\"><a href=\"#编写测试\" class=\"headerlink\" title=\"编写测试\"></a>编写测试</h2><p>test&#x2F;ava.ts</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import test <span class=\"keyword\">from</span> <span class=\"string\">&quot;ava&quot;</span>;</span><br><span class=\"line\">import <span class=\"keyword\">Enum</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../src&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> AuditStatus = <span class=\"keyword\">Enum</span>(&#123;</span><br><span class=\"line\">  UNAUDIT: [<span class=\"number\">1</span>, <span class=\"string\">&quot;未审核&quot;</span>],</span><br><span class=\"line\">  REFUSED: [<span class=\"number\">4</span>, <span class=\"string\">&quot;审核拒绝&quot;</span>],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> FileSource = <span class=\"keyword\">Enum</span>(&#123;</span><br><span class=\"line\">  LOCAL: <span class=\"string\">&quot;本地&quot;</span>,</span><br><span class=\"line\">  REMOTE: <span class=\"string\">&quot;远端&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(AuditStatus, FileSource);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;entries&quot;</span>, (t) =&gt; &#123;</span><br><span class=\"line\">  t.<span class=\"built_in\">like</span>(</span><br><span class=\"line\">    &#123; e: FileSource.entries() &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      e: [</span><br><span class=\"line\">        [<span class=\"number\">0</span>, <span class=\"string\">&quot;本地&quot;</span>],</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"string\">&quot;远端&quot;</span>],</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  t.<span class=\"built_in\">like</span>(</span><br><span class=\"line\">    &#123; e: AuditStatus.entries() &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      e: [</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"string\">&quot;未审核&quot;</span>],</span><br><span class=\"line\">        [<span class=\"number\">4</span>, <span class=\"string\">&quot;审核拒绝&quot;</span>],</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;k1 to k2&quot;</span>, <span class=\"keyword\">async</span> (t) =&gt; &#123;</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(AuditStatus.UNAUDIT, <span class=\"number\">1</span>);</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(AuditStatus.REFUSED, <span class=\"number\">4</span>);</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(FileSource.LOCAL, <span class=\"number\">0</span>);</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(FileSource.REMOTE, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">test(<span class=\"string\">&quot;k2 to value&quot;</span>, <span class=\"keyword\">async</span> (t) =&gt; &#123;</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(AuditStatus[<span class=\"number\">1</span>], <span class=\"string\">&quot;未审核&quot;</span>);</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(AuditStatus[<span class=\"number\">4</span>], <span class=\"string\">&quot;审核拒绝&quot;</span>);</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(FileSource[<span class=\"number\">0</span>], <span class=\"string\">&quot;本地&quot;</span>);</span><br><span class=\"line\">  t.<span class=\"built_in\">is</span>(FileSource[<span class=\"number\">1</span>], <span class=\"string\">&quot;远端&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行 <code>npm run test</code></p>\n<p>如果通过：</p>\n<p><img src=\"/../imgs/079325dede394c41b4a5bc39e1ece8a7.png\" alt=\"image.png\"></p>\n<p>如果有失败，比如</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;k2 to value&quot;</span>, <span class=\"keyword\">async</span> (t) =&gt; &#123;</span><br><span class=\"line\">  t.<span class=\"keyword\">is</span>(AuditStatus[<span class=\"number\">1</span>], <span class=\"string\">&quot;未审核&quot;</span>);</span><br><span class=\"line\">  t.<span class=\"keyword\">is</span>(AuditStatus[<span class=\"number\">4</span>], <span class=\"string\">&quot;审核拒绝&quot;</span>);</span><br><span class=\"line\">  t.<span class=\"keyword\">is</span>(FileSource[<span class=\"number\">0</span>], <span class=\"string\">&quot;本地&quot;</span>);</span><br><span class=\"line\">  t.<span class=\"keyword\">is</span>(FileSource[<span class=\"number\">1</span>], <span class=\"string\">&quot;远&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>ava会输出详细的信息，能显示输入值和期待值的差异，这也是ava的一大特性</p>\n<p><img src=\"/../imgs/174737fba5f442d6977bcd22bb2805b1.png\" alt=\"image.png\"></p>\n"},{"title":"使用less生成公共样式","date":"2019-12-30T16:00:00.000Z","_content":"\n项目初始阶段需要根据设计稿抽离出公用的样式，比如width,height,padding,margin，这时候就可以使用less的变量，函数，循环，快速生成原子级样式\n\n```\n@widthList: 18, 50, 240;\n@heightList: 40, 48;\n\n@spacingList: 5, 10, 12, 15, 16, 20, 24, 40, 60;\n@directionShort: l, r, t, b;\n@direction: left, right, top, bottom;\n\n.generWidth(@i) when (@i < length(@widthList)+1) {\n    .widths(extract(@widthList, @i));\n    .generWidth(@i+1);\n}\n.generHeight(@i) when (@i < length(@heightList)+1) {\n    .heights(extract(@heightList, @i));\n    .generHeight(@i+1);\n}\n.widths(@size) {\n    .w-@{size} {\n        width: unit(@size, px);\n    }\n}\n.heights(@size) {\n    .h-@{size} {\n        height: unit(@size, px);\n    }\n}\n\n.generSpacingDirection(@j,@i) when (@j < length(@direction)+1) {\n    .spacing(extract(@directionShort, @j), extract(@direction, @j), extract(@spacingList, @i));\n    .generSpacingDirection(@j+1, @i);\n}\n.generSpacing(@i) when (@i < length(@spacingList)+1) {\n    .spacingUnit(extract(@spacingList, @i));\n    .generSpacingDirection(1, @i);\n    .generSpacing(@i+1);\n}\n\n.spacingUnit(@size) {\n    .p-@{size} {\n        padding: unit(@size, px);\n    }\n    .px-@{size} {\n        padding-left: unit(@size, px);\n        padding-right: unit(@size, px);\n    }\n    .py-@{size} {\n        padding-top: unit(@size, px);\n        padding-bottom: unit(@size, px);\n    }\n    .m-@{size} {\n        margin: unit(@size, px);\n    }\n    .mx-@{size} {\n        margin-left: unit(@size, px);\n        margin-right: unit(@size, px);\n    }\n    .my-@{size} {\n        margin-top: unit(@size, px);\n        margin-bottom: unit(@size, px);\n    }\n}\n.spacing(@directionShort,@direction,@size) {\n    .p@{directionShort}-@{size} {\n        padding-@{direction}: unit(@size, px);\n    }\n\n    .m@{directionShort}-@{size} {\n        margin-@{direction}: unit(@size, px);\n    }\n}\n:global {\n    html,\n    body,\n    #app {\n        height: 100%;\n    }\n    .generWidth(1);\n    .generHeight(1);\n    .generSpacing(1); \n}\n```\n\n得到相应的padding，margin，width，height原子级样式，如下demo  \n![生成结果](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5c2604bec72~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"生成结果\")","source":"_posts/使用less生成公共样式.md","raw":"---\n title: \"使用less生成公共样式\"\n date: 2019-12-31\n tags: [Less]\n categories: [前端笔记]\n---\n\n项目初始阶段需要根据设计稿抽离出公用的样式，比如width,height,padding,margin，这时候就可以使用less的变量，函数，循环，快速生成原子级样式\n\n```\n@widthList: 18, 50, 240;\n@heightList: 40, 48;\n\n@spacingList: 5, 10, 12, 15, 16, 20, 24, 40, 60;\n@directionShort: l, r, t, b;\n@direction: left, right, top, bottom;\n\n.generWidth(@i) when (@i < length(@widthList)+1) {\n    .widths(extract(@widthList, @i));\n    .generWidth(@i+1);\n}\n.generHeight(@i) when (@i < length(@heightList)+1) {\n    .heights(extract(@heightList, @i));\n    .generHeight(@i+1);\n}\n.widths(@size) {\n    .w-@{size} {\n        width: unit(@size, px);\n    }\n}\n.heights(@size) {\n    .h-@{size} {\n        height: unit(@size, px);\n    }\n}\n\n.generSpacingDirection(@j,@i) when (@j < length(@direction)+1) {\n    .spacing(extract(@directionShort, @j), extract(@direction, @j), extract(@spacingList, @i));\n    .generSpacingDirection(@j+1, @i);\n}\n.generSpacing(@i) when (@i < length(@spacingList)+1) {\n    .spacingUnit(extract(@spacingList, @i));\n    .generSpacingDirection(1, @i);\n    .generSpacing(@i+1);\n}\n\n.spacingUnit(@size) {\n    .p-@{size} {\n        padding: unit(@size, px);\n    }\n    .px-@{size} {\n        padding-left: unit(@size, px);\n        padding-right: unit(@size, px);\n    }\n    .py-@{size} {\n        padding-top: unit(@size, px);\n        padding-bottom: unit(@size, px);\n    }\n    .m-@{size} {\n        margin: unit(@size, px);\n    }\n    .mx-@{size} {\n        margin-left: unit(@size, px);\n        margin-right: unit(@size, px);\n    }\n    .my-@{size} {\n        margin-top: unit(@size, px);\n        margin-bottom: unit(@size, px);\n    }\n}\n.spacing(@directionShort,@direction,@size) {\n    .p@{directionShort}-@{size} {\n        padding-@{direction}: unit(@size, px);\n    }\n\n    .m@{directionShort}-@{size} {\n        margin-@{direction}: unit(@size, px);\n    }\n}\n:global {\n    html,\n    body,\n    #app {\n        height: 100%;\n    }\n    .generWidth(1);\n    .generHeight(1);\n    .generSpacing(1); \n}\n```\n\n得到相应的padding，margin，width，height原子级样式，如下demo  \n![生成结果](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5c2604bec72~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"生成结果\")","slug":"使用less生成公共样式","published":1,"updated":"2024-04-04T15:27:03.435Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhw004yhajfh1u2510n","content":"<p>项目初始阶段需要根据设计稿抽离出公用的样式，比如width,height,padding,margin，这时候就可以使用less的变量，函数，循环，快速生成原子级样式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@widthList: 18, 50, 240;</span><br><span class=\"line\">@heightList: 40, 48;</span><br><span class=\"line\"></span><br><span class=\"line\">@spacingList: 5, 10, 12, 15, 16, 20, 24, 40, 60;</span><br><span class=\"line\">@directionShort: l, r, t, b;</span><br><span class=\"line\">@direction: left, right, top, bottom;</span><br><span class=\"line\"></span><br><span class=\"line\">.generWidth(@i) when (@i &lt; length(@widthList)+1) &#123;</span><br><span class=\"line\">    .widths(extract(@widthList, @i));</span><br><span class=\"line\">    .generWidth(@i+1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.generHeight(@i) when (@i &lt; length(@heightList)+1) &#123;</span><br><span class=\"line\">    .heights(extract(@heightList, @i));</span><br><span class=\"line\">    .generHeight(@i+1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.widths(@size) &#123;</span><br><span class=\"line\">    .w-@&#123;size&#125; &#123;</span><br><span class=\"line\">        width: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.heights(@size) &#123;</span><br><span class=\"line\">    .h-@&#123;size&#125; &#123;</span><br><span class=\"line\">        height: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.generSpacingDirection(@j,@i) when (@j &lt; length(@direction)+1) &#123;</span><br><span class=\"line\">    .spacing(extract(@directionShort, @j), extract(@direction, @j), extract(@spacingList, @i));</span><br><span class=\"line\">    .generSpacingDirection(@j+1, @i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.generSpacing(@i) when (@i &lt; length(@spacingList)+1) &#123;</span><br><span class=\"line\">    .spacingUnit(extract(@spacingList, @i));</span><br><span class=\"line\">    .generSpacingDirection(1, @i);</span><br><span class=\"line\">    .generSpacing(@i+1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.spacingUnit(@size) &#123;</span><br><span class=\"line\">    .p-@&#123;size&#125; &#123;</span><br><span class=\"line\">        padding: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .px-@&#123;size&#125; &#123;</span><br><span class=\"line\">        padding-left: unit(@size, px);</span><br><span class=\"line\">        padding-right: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .py-@&#123;size&#125; &#123;</span><br><span class=\"line\">        padding-top: unit(@size, px);</span><br><span class=\"line\">        padding-bottom: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .m-@&#123;size&#125; &#123;</span><br><span class=\"line\">        margin: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .mx-@&#123;size&#125; &#123;</span><br><span class=\"line\">        margin-left: unit(@size, px);</span><br><span class=\"line\">        margin-right: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .my-@&#123;size&#125; &#123;</span><br><span class=\"line\">        margin-top: unit(@size, px);</span><br><span class=\"line\">        margin-bottom: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.spacing(@directionShort,@direction,@size) &#123;</span><br><span class=\"line\">    .p@&#123;directionShort&#125;-@&#123;size&#125; &#123;</span><br><span class=\"line\">        padding-@&#123;direction&#125;: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .m@&#123;directionShort&#125;-@&#123;size&#125; &#123;</span><br><span class=\"line\">        margin-@&#123;direction&#125;: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">:global &#123;</span><br><span class=\"line\">    html,</span><br><span class=\"line\">    body,</span><br><span class=\"line\">    #app &#123;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .generWidth(1);</span><br><span class=\"line\">    .generHeight(1);</span><br><span class=\"line\">    .generSpacing(1); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>得到相应的padding，margin，width，height原子级样式，如下demo<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5c2604bec72~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"生成结果\" title=\"生成结果\"></p>\n","length":2000,"excerpt":"","more":"<p>项目初始阶段需要根据设计稿抽离出公用的样式，比如width,height,padding,margin，这时候就可以使用less的变量，函数，循环，快速生成原子级样式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@widthList: 18, 50, 240;</span><br><span class=\"line\">@heightList: 40, 48;</span><br><span class=\"line\"></span><br><span class=\"line\">@spacingList: 5, 10, 12, 15, 16, 20, 24, 40, 60;</span><br><span class=\"line\">@directionShort: l, r, t, b;</span><br><span class=\"line\">@direction: left, right, top, bottom;</span><br><span class=\"line\"></span><br><span class=\"line\">.generWidth(@i) when (@i &lt; length(@widthList)+1) &#123;</span><br><span class=\"line\">    .widths(extract(@widthList, @i));</span><br><span class=\"line\">    .generWidth(@i+1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.generHeight(@i) when (@i &lt; length(@heightList)+1) &#123;</span><br><span class=\"line\">    .heights(extract(@heightList, @i));</span><br><span class=\"line\">    .generHeight(@i+1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.widths(@size) &#123;</span><br><span class=\"line\">    .w-@&#123;size&#125; &#123;</span><br><span class=\"line\">        width: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.heights(@size) &#123;</span><br><span class=\"line\">    .h-@&#123;size&#125; &#123;</span><br><span class=\"line\">        height: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.generSpacingDirection(@j,@i) when (@j &lt; length(@direction)+1) &#123;</span><br><span class=\"line\">    .spacing(extract(@directionShort, @j), extract(@direction, @j), extract(@spacingList, @i));</span><br><span class=\"line\">    .generSpacingDirection(@j+1, @i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.generSpacing(@i) when (@i &lt; length(@spacingList)+1) &#123;</span><br><span class=\"line\">    .spacingUnit(extract(@spacingList, @i));</span><br><span class=\"line\">    .generSpacingDirection(1, @i);</span><br><span class=\"line\">    .generSpacing(@i+1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.spacingUnit(@size) &#123;</span><br><span class=\"line\">    .p-@&#123;size&#125; &#123;</span><br><span class=\"line\">        padding: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .px-@&#123;size&#125; &#123;</span><br><span class=\"line\">        padding-left: unit(@size, px);</span><br><span class=\"line\">        padding-right: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .py-@&#123;size&#125; &#123;</span><br><span class=\"line\">        padding-top: unit(@size, px);</span><br><span class=\"line\">        padding-bottom: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .m-@&#123;size&#125; &#123;</span><br><span class=\"line\">        margin: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .mx-@&#123;size&#125; &#123;</span><br><span class=\"line\">        margin-left: unit(@size, px);</span><br><span class=\"line\">        margin-right: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .my-@&#123;size&#125; &#123;</span><br><span class=\"line\">        margin-top: unit(@size, px);</span><br><span class=\"line\">        margin-bottom: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.spacing(@directionShort,@direction,@size) &#123;</span><br><span class=\"line\">    .p@&#123;directionShort&#125;-@&#123;size&#125; &#123;</span><br><span class=\"line\">        padding-@&#123;direction&#125;: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .m@&#123;directionShort&#125;-@&#123;size&#125; &#123;</span><br><span class=\"line\">        margin-@&#123;direction&#125;: unit(@size, px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">:global &#123;</span><br><span class=\"line\">    html,</span><br><span class=\"line\">    body,</span><br><span class=\"line\">    #app &#123;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .generWidth(1);</span><br><span class=\"line\">    .generHeight(1);</span><br><span class=\"line\">    .generSpacing(1); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>得到相应的padding，margin，width，height原子级样式，如下demo<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b5c2604bec72~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"生成结果\" title=\"生成结果\"></p>\n"},{"title":"使用postman创建collection测试接口","date":"2019-12-30T16:00:00.000Z","_content":"\npostman可以创建一个工作流按顺序测试多个接口，并可以将前面的接口的返回值作为变量传递给后面的接口使用。\n\n比如要顺序测试智联卓聘的接口：  \n1.[data.highpin.cn/api/J...](https://data.highpin.cn%2Fapi%2FJobSearch%2FSearch \"https://data.highpin.cn/api/JobSearch/Search\") 查询职位列表  \n2.[www.highpin.cn/api/jo...](https://www.highpin.cn%2Fapi%2Fjob%2FGetPositionDetail \"https://www.highpin.cn/api/job/GetPositionDetail\") 查询职位详情\n\n那么我们首先编辑两个接口：\n\n1.  *   body部分 ![body部分](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8f41412~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"body部分\")\n    *   Pre-request Script中可以在请求发送前设置一个环境变量：Q;body中可以使用`{{}}`的形式获取环境或全局变量\n        \n        ```routeros\n        pm.environment.set('Q','前端'); \n        ```\n        \n    *   Test中可以获取到查询结果，这里我们取第一条记录的信息传递给后面的接口\n        \n        ```\n        var id = pm.response.json().body.JobList[0].JobID;\n        var ref = pm.response.json().body.JobList[0].ReferrerType;\n        pm.globals.set(\"id\", id);\n        pm.globals.set(\"ref\", ref);\n        ```\n        \n2.  第二个接口可以这样获取前面设置的全局变量  \n    ![图片描述](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8e2d9f5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"图片描述\")\n3.  将这两个接口保存为collection，侧边栏可以调整执行的顺序；点击run进入Collection Runner界面，  \n    ![图片描述](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8e7000b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"图片描述\")\n4.  运行一下，可以得到两个接口执行的结果  \n    ![图片描述](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8f47206~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"图片描述\")","source":"_posts/使用postman创建collection测试接口.md","raw":"---\n title: \"使用postman创建collection测试接口\"\n date: 2019-12-31\n tags: [Postman]\n categories: \n---\n\npostman可以创建一个工作流按顺序测试多个接口，并可以将前面的接口的返回值作为变量传递给后面的接口使用。\n\n比如要顺序测试智联卓聘的接口：  \n1.[data.highpin.cn/api/J...](https://data.highpin.cn%2Fapi%2FJobSearch%2FSearch \"https://data.highpin.cn/api/JobSearch/Search\") 查询职位列表  \n2.[www.highpin.cn/api/jo...](https://www.highpin.cn%2Fapi%2Fjob%2FGetPositionDetail \"https://www.highpin.cn/api/job/GetPositionDetail\") 查询职位详情\n\n那么我们首先编辑两个接口：\n\n1.  *   body部分 ![body部分](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8f41412~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"body部分\")\n    *   Pre-request Script中可以在请求发送前设置一个环境变量：Q;body中可以使用`{{}}`的形式获取环境或全局变量\n        \n        ```routeros\n        pm.environment.set('Q','前端'); \n        ```\n        \n    *   Test中可以获取到查询结果，这里我们取第一条记录的信息传递给后面的接口\n        \n        ```\n        var id = pm.response.json().body.JobList[0].JobID;\n        var ref = pm.response.json().body.JobList[0].ReferrerType;\n        pm.globals.set(\"id\", id);\n        pm.globals.set(\"ref\", ref);\n        ```\n        \n2.  第二个接口可以这样获取前面设置的全局变量  \n    ![图片描述](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8e2d9f5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"图片描述\")\n3.  将这两个接口保存为collection，侧边栏可以调整执行的顺序；点击run进入Collection Runner界面，  \n    ![图片描述](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8e7000b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"图片描述\")\n4.  运行一下，可以得到两个接口执行的结果  \n    ![图片描述](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8f47206~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"图片描述\")","slug":"使用postman创建collection测试接口","published":1,"updated":"2024-04-04T15:28:37.809Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhx0052hajfe43x9uns","content":"<p>postman可以创建一个工作流按顺序测试多个接口，并可以将前面的接口的返回值作为变量传递给后面的接口使用。</p>\n<p>比如要顺序测试智联卓聘的接口：<br>1.<a href=\"https://data.highpin.cn%2Fapi%2FJobSearch%2FSearch\" title=\"https://data.highpin.cn/api/JobSearch/Search\">data.highpin.cn&#x2F;api&#x2F;J…</a> 查询职位列表<br>2.<a href=\"https://www.highpin.cn%2Fapi%2Fjob%2FGetPositionDetail\" title=\"https://www.highpin.cn/api/job/GetPositionDetail\">www.highpin.cn/api/jo...</a> 查询职位详情</p>\n<p>那么我们首先编辑两个接口：</p>\n<ol>\n<li><ul>\n<li><p>body部分 <img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8f41412~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"body部分\" title=\"body部分\"></p>\n</li>\n<li><p>Pre-request Script中可以在请求发送前设置一个环境变量：Q;body中可以使用<code>&#123;&#123;&#125;&#125;</code>的形式获取环境或全局变量</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.environment.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;Q&#x27;</span>,<span class=\"string\">&#x27;前端&#x27;</span>); </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Test中可以获取到查询结果，这里我们取第一条记录的信息传递给后面的接口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var id = pm.response.json().body.JobList[0].JobID;</span><br><span class=\"line\">var ref = pm.response.json().body.JobList[0].ReferrerType;</span><br><span class=\"line\">pm.globals.set(&quot;id&quot;, id);</span><br><span class=\"line\">pm.globals.set(&quot;ref&quot;, ref);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>第二个接口可以这样获取前面设置的全局变量<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8e2d9f5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"图片描述\" title=\"图片描述\"></p>\n</li>\n<li><p>将这两个接口保存为collection，侧边栏可以调整执行的顺序；点击run进入Collection Runner界面，<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8e7000b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"图片描述\" title=\"图片描述\"></p>\n</li>\n<li><p>运行一下，可以得到两个接口执行的结果<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8f47206~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"图片描述\" title=\"图片描述\"></p>\n</li>\n</ol>\n","length":601,"excerpt":"","more":"<p>postman可以创建一个工作流按顺序测试多个接口，并可以将前面的接口的返回值作为变量传递给后面的接口使用。</p>\n<p>比如要顺序测试智联卓聘的接口：<br>1.<a href=\"https://data.highpin.cn%2Fapi%2FJobSearch%2FSearch\" title=\"https://data.highpin.cn/api/JobSearch/Search\">data.highpin.cn&#x2F;api&#x2F;J…</a> 查询职位列表<br>2.<a href=\"https://www.highpin.cn%2Fapi%2Fjob%2FGetPositionDetail\" title=\"https://www.highpin.cn/api/job/GetPositionDetail\">www.highpin.cn/api/jo...</a> 查询职位详情</p>\n<p>那么我们首先编辑两个接口：</p>\n<ol>\n<li><ul>\n<li><p>body部分 <img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8f41412~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"body部分\" title=\"body部分\"></p>\n</li>\n<li><p>Pre-request Script中可以在请求发送前设置一个环境变量：Q;body中可以使用<code>&#123;&#123;&#125;&#125;</code>的形式获取环境或全局变量</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.environment.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;Q&#x27;</span>,<span class=\"string\">&#x27;前端&#x27;</span>); </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Test中可以获取到查询结果，这里我们取第一条记录的信息传递给后面的接口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var id = pm.response.json().body.JobList[0].JobID;</span><br><span class=\"line\">var ref = pm.response.json().body.JobList[0].ReferrerType;</span><br><span class=\"line\">pm.globals.set(&quot;id&quot;, id);</span><br><span class=\"line\">pm.globals.set(&quot;ref&quot;, ref);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>第二个接口可以这样获取前面设置的全局变量<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8e2d9f5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"图片描述\" title=\"图片描述\"></p>\n</li>\n<li><p>将这两个接口保存为collection，侧边栏可以调整执行的顺序；点击run进入Collection Runner界面，<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8e7000b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"图片描述\" title=\"图片描述\"></p>\n</li>\n<li><p>运行一下，可以得到两个接口执行的结果<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/31/16f5b593f8f47206~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"图片描述\" title=\"图片描述\"></p>\n</li>\n</ol>\n"},{"title":"再看箭头函数的this指向——《JavaScript高级程序设计》造成的歧义","date":"2022-03-15T16:00:00.000Z","_content":"\n箭头函数中的this指向什么？\n\n这是一道经典JS问题。  \n很多人都认为，**箭头函数中的this，指向的是它定义时的环境中的this**。这个观点来自于《JavaScript高级程序设计》，它关于箭头函数的this有如下解释：\n\n> 在箭头函数中，this引用的是定义箭头函数的上下文。 ...\n\n> 事件回调或定时回调中调用某个函数时，this值指向的并非想要的对象。此时将回调函数写成箭头函数就可以解决问题。这是因为箭头函数中的this会保留定义该函数时的上下文\n\n并且还给出了一个经典例子：\n\n```js\nwindow.color = 'red';\nlet o = {\n    color:'blue'\n}\nlet sayColor = ()=>console.log(this.color)\nsayColor(); //red\no.sayColor = sayColor;\no.sayColor(); //red\n```\n\n根据它的解释，我们可以这么理解：定义sayColor时的上下文中的this是window，因此这个函数中的this始终绑定了window。\n\n**但是这个解释是有问题的!**\n\n**上下文和this都是运行时概念**，当定义sayColor的上下文发生变化时，其this指向也会发生变化。\n\n我们来看下面一个例子：\n\n```js\nconst obj = {\n  do() {\n    return () => {\n      console.log(this);\n    };\n  },\n};\n\n```\n\n这里匿名箭头函数中的this指向的是什么？**这个问题其实无法回答，要看它是怎么执行的。**\n\n```js\n// 第一次调用\nobj.do()(); // obj\n\n// 第二次调用\nconst do1 = obj.do;\ndo1()(); // window\n\n// 第三次调用\nconst do2 = obj.do();\ndo2(); // obj\n```\n\n这里可以看到this的指向会根据不同的上下文而发生变化。第一次和第三次调用中，匿名箭头函数定义时的上下文环境中的this是obj，而第二次调用时是window。\n\n如果觉得有点费解，**将“定义”改为“声明”**——“在箭头函数中，this引用的是箭头函数声明时所在上下文”，这样就消除了歧义。\n\n最后我们再来看一下《JavaScript权威指南第七版》中的解释：\n\n“箭头函数不同于用关键字定义的函数：箭头函**数从定义它们的环境继承 this 关键字**，而不是像其他定义方式那样定义自己的调用上下文。”\n\n> Arrow functions differ from functions defined in other ways in one critical way: they inherit the value of the this keyword from the environment in which they are defined rather than defining their own invocation context as functions defined in other ways do.\n\n这段话可以浓缩为两个字“**继承**”（inherit），虽然看起来并不容易理解，但不会造成歧义。。。（怪不得各种官方定义都那么的费解）","source":"_posts/再看箭头函数的this指向——《JavaScript高级程序设计》造成的歧义.md","raw":"---\n title: \"再看箭头函数的this指向——《JavaScript高级程序设计》造成的歧义\"\n date: 2022-03-16\n tags: [前端,JavaScript]\n categories: [前端笔记]\n---\n\n箭头函数中的this指向什么？\n\n这是一道经典JS问题。  \n很多人都认为，**箭头函数中的this，指向的是它定义时的环境中的this**。这个观点来自于《JavaScript高级程序设计》，它关于箭头函数的this有如下解释：\n\n> 在箭头函数中，this引用的是定义箭头函数的上下文。 ...\n\n> 事件回调或定时回调中调用某个函数时，this值指向的并非想要的对象。此时将回调函数写成箭头函数就可以解决问题。这是因为箭头函数中的this会保留定义该函数时的上下文\n\n并且还给出了一个经典例子：\n\n```js\nwindow.color = 'red';\nlet o = {\n    color:'blue'\n}\nlet sayColor = ()=>console.log(this.color)\nsayColor(); //red\no.sayColor = sayColor;\no.sayColor(); //red\n```\n\n根据它的解释，我们可以这么理解：定义sayColor时的上下文中的this是window，因此这个函数中的this始终绑定了window。\n\n**但是这个解释是有问题的!**\n\n**上下文和this都是运行时概念**，当定义sayColor的上下文发生变化时，其this指向也会发生变化。\n\n我们来看下面一个例子：\n\n```js\nconst obj = {\n  do() {\n    return () => {\n      console.log(this);\n    };\n  },\n};\n\n```\n\n这里匿名箭头函数中的this指向的是什么？**这个问题其实无法回答，要看它是怎么执行的。**\n\n```js\n// 第一次调用\nobj.do()(); // obj\n\n// 第二次调用\nconst do1 = obj.do;\ndo1()(); // window\n\n// 第三次调用\nconst do2 = obj.do();\ndo2(); // obj\n```\n\n这里可以看到this的指向会根据不同的上下文而发生变化。第一次和第三次调用中，匿名箭头函数定义时的上下文环境中的this是obj，而第二次调用时是window。\n\n如果觉得有点费解，**将“定义”改为“声明”**——“在箭头函数中，this引用的是箭头函数声明时所在上下文”，这样就消除了歧义。\n\n最后我们再来看一下《JavaScript权威指南第七版》中的解释：\n\n“箭头函数不同于用关键字定义的函数：箭头函**数从定义它们的环境继承 this 关键字**，而不是像其他定义方式那样定义自己的调用上下文。”\n\n> Arrow functions differ from functions defined in other ways in one critical way: they inherit the value of the this keyword from the environment in which they are defined rather than defining their own invocation context as functions defined in other ways do.\n\n这段话可以浓缩为两个字“**继承**”（inherit），虽然看起来并不容易理解，但不会造成歧义。。。（怪不得各种官方定义都那么的费解）","slug":"再看箭头函数的this指向——《JavaScript高级程序设计》造成的歧义","published":1,"updated":"2024-04-04T15:27:03.466Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhx0055hajf09o62wtw","content":"<p>箭头函数中的this指向什么？</p>\n<p>这是一道经典JS问题。<br>很多人都认为，<strong>箭头函数中的this，指向的是它定义时的环境中的this</strong>。这个观点来自于《JavaScript高级程序设计》，它关于箭头函数的this有如下解释：</p>\n<blockquote>\n<p>在箭头函数中，this引用的是定义箭头函数的上下文。 …</p>\n</blockquote>\n<blockquote>\n<p>事件回调或定时回调中调用某个函数时，this值指向的并非想要的对象。此时将回调函数写成箭头函数就可以解决问题。这是因为箭头函数中的this会保留定义该函数时的上下文</p>\n</blockquote>\n<p>并且还给出了一个经典例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o = &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>:<span class=\"string\">&#x27;blue&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">sayColor</span> = (<span class=\"params\"></span>)=&gt;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">color</span>)</span><br><span class=\"line\"><span class=\"title function_\">sayColor</span>(); <span class=\"comment\">//red</span></span><br><span class=\"line\">o.<span class=\"property\">sayColor</span> = sayColor;</span><br><span class=\"line\">o.<span class=\"title function_\">sayColor</span>(); <span class=\"comment\">//red</span></span><br></pre></td></tr></table></figure>\n\n<p>根据它的解释，我们可以这么理解：定义sayColor时的上下文中的this是window，因此这个函数中的this始终绑定了window。</p>\n<p><strong>但是这个解释是有问题的!</strong></p>\n<p><strong>上下文和this都是运行时概念</strong>，当定义sayColor的上下文发生变化时，其this指向也会发生变化。</p>\n<p>我们来看下面一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">do</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里匿名箭头函数中的this指向的是什么？<strong>这个问题其实无法回答，要看它是怎么执行的。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一次调用</span></span><br><span class=\"line\">obj.<span class=\"title function_\">do</span>()(); <span class=\"comment\">// obj</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二次调用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> do1 = obj.<span class=\"property\">do</span>;</span><br><span class=\"line\"><span class=\"title function_\">do1</span>()(); <span class=\"comment\">// window</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三次调用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> do2 = obj.<span class=\"title function_\">do</span>();</span><br><span class=\"line\"><span class=\"title function_\">do2</span>(); <span class=\"comment\">// obj</span></span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到this的指向会根据不同的上下文而发生变化。第一次和第三次调用中，匿名箭头函数定义时的上下文环境中的this是obj，而第二次调用时是window。</p>\n<p>如果觉得有点费解，<strong>将“定义”改为“声明”</strong>——“在箭头函数中，this引用的是箭头函数声明时所在上下文”，这样就消除了歧义。</p>\n<p>最后我们再来看一下《JavaScript权威指南第七版》中的解释：</p>\n<p>“箭头函数不同于用关键字定义的函数：箭头函<strong>数从定义它们的环境继承 this 关键字</strong>，而不是像其他定义方式那样定义自己的调用上下文。”</p>\n<blockquote>\n<p>Arrow functions differ from functions defined in other ways in one critical way: they inherit the value of the this keyword from the environment in which they are defined rather than defining their own invocation context as functions defined in other ways do.</p>\n</blockquote>\n<p>这段话可以浓缩为两个字“<strong>继承</strong>”（inherit），虽然看起来并不容易理解，但不会造成歧义。。。（怪不得各种官方定义都那么的费解）</p>\n","length":1304,"excerpt":"","more":"<p>箭头函数中的this指向什么？</p>\n<p>这是一道经典JS问题。<br>很多人都认为，<strong>箭头函数中的this，指向的是它定义时的环境中的this</strong>。这个观点来自于《JavaScript高级程序设计》，它关于箭头函数的this有如下解释：</p>\n<blockquote>\n<p>在箭头函数中，this引用的是定义箭头函数的上下文。 …</p>\n</blockquote>\n<blockquote>\n<p>事件回调或定时回调中调用某个函数时，this值指向的并非想要的对象。此时将回调函数写成箭头函数就可以解决问题。这是因为箭头函数中的this会保留定义该函数时的上下文</p>\n</blockquote>\n<p>并且还给出了一个经典例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o = &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>:<span class=\"string\">&#x27;blue&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">sayColor</span> = (<span class=\"params\"></span>)=&gt;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">color</span>)</span><br><span class=\"line\"><span class=\"title function_\">sayColor</span>(); <span class=\"comment\">//red</span></span><br><span class=\"line\">o.<span class=\"property\">sayColor</span> = sayColor;</span><br><span class=\"line\">o.<span class=\"title function_\">sayColor</span>(); <span class=\"comment\">//red</span></span><br></pre></td></tr></table></figure>\n\n<p>根据它的解释，我们可以这么理解：定义sayColor时的上下文中的this是window，因此这个函数中的this始终绑定了window。</p>\n<p><strong>但是这个解释是有问题的!</strong></p>\n<p><strong>上下文和this都是运行时概念</strong>，当定义sayColor的上下文发生变化时，其this指向也会发生变化。</p>\n<p>我们来看下面一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">do</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里匿名箭头函数中的this指向的是什么？<strong>这个问题其实无法回答，要看它是怎么执行的。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一次调用</span></span><br><span class=\"line\">obj.<span class=\"title function_\">do</span>()(); <span class=\"comment\">// obj</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二次调用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> do1 = obj.<span class=\"property\">do</span>;</span><br><span class=\"line\"><span class=\"title function_\">do1</span>()(); <span class=\"comment\">// window</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三次调用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> do2 = obj.<span class=\"title function_\">do</span>();</span><br><span class=\"line\"><span class=\"title function_\">do2</span>(); <span class=\"comment\">// obj</span></span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到this的指向会根据不同的上下文而发生变化。第一次和第三次调用中，匿名箭头函数定义时的上下文环境中的this是obj，而第二次调用时是window。</p>\n<p>如果觉得有点费解，<strong>将“定义”改为“声明”</strong>——“在箭头函数中，this引用的是箭头函数声明时所在上下文”，这样就消除了歧义。</p>\n<p>最后我们再来看一下《JavaScript权威指南第七版》中的解释：</p>\n<p>“箭头函数不同于用关键字定义的函数：箭头函<strong>数从定义它们的环境继承 this 关键字</strong>，而不是像其他定义方式那样定义自己的调用上下文。”</p>\n<blockquote>\n<p>Arrow functions differ from functions defined in other ways in one critical way: they inherit the value of the this keyword from the environment in which they are defined rather than defining their own invocation context as functions defined in other ways do.</p>\n</blockquote>\n<p>这段话可以浓缩为两个字“<strong>继承</strong>”（inherit），虽然看起来并不容易理解，但不会造成歧义。。。（怪不得各种官方定义都那么的费解）</p>\n"},{"title":"前端docker快速入门——Compose","date":"2022-03-05T16:00:00.000Z","_content":"\n前言\n==\n\n前文介绍了Dockerfile文件，但在实际应用中还有一个常见的文件——docker-compose.yml，本文便介绍Compose的使用方法。\n\nCompose\n=======\n\nCompose定位是“定义和运行多个Docker容器的应用”。\n\ndocker可以很方便地起一个应用容器，但是我们项目实践中往往需要多个应用。比如一个web项目，可能需要启动nginx,redis,mysql等多个应用容器，它们之间可能还需要相互配合。Compose可以让用户通过编写一个简单的模板文件，快速地创建和管理基于Docker容器的应用集群。\n\n服务和项目\n-----\n\nCompose中有两个重要的概念：服务（service）和项目（project）。\n\n*   服务：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。\n*   项目：由一组关联的应用容器组成的一个完整业务单元。\n\n模板文件\n----\n\nCompose默认的模板文件名是docker-compose.yml。下面是docker-compose.yml文件的一个例子：\n\n```yml\nversion: \"3\"\n\nservices:\n  webapp:\n    image: examples/web\n    ports:\n      - \"80:80\"\n    volumes:\n      - \"/data\"\n```\n\n其中webapp是服务名，image、ports、volumes都是指令关键字。\n\n### 常用指令\n\nCompose模板文件中常用指令如下：\n\n*   **image和build** 一个服务必须指定镜像，可以用image指定，也可以用build指定Dockerfile所在的文件目录\n*   **command** 覆盖容器启动后默认执行的命令。\n*   **depends\\_on** 指定容器启动顺序\n*   **env\\_file和environment** 指定环境变量，env\\_file的值是.env文件，将从文件中读取；environment则直接设置环境变量。\n\n模板文件默认支持读取系统环境变量和当前目录下的.env文件中的变量，模板中可以用`${}`占位。\n\n```arduino\nimage: \"mongo:${MONGO_VERSION}\"\n```\n\n*   **ports** 将端口映射到主机\n*   **volumes** 设置数据卷挂载路径\n\nCompose 命令\n----------\n\nCompose中的命令只需要记住一个：**up**。  \n`docker-compose up [options] [SERVICE...]`  \n它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。大部分时候都可以直接通过该命令来启动一个项目。\n\n常用的选项有：\n\n*   `-d` 在后台运行服务容器\n*   `--no-recreate` 如果容器已经存在了，则不重新创建\n\n实战\n--\n\n项目需要启动mongo、redis、rabbitmq三个应用，编写docker-compose.yml如下：\n\n```yaml\nversion: '3.1'\nnetworks:\n  xxx:\n\nservices:\n\n  mongo:\n    image: mongo\n    restart: always\n    ports:\n      - 27017:27017\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: xxx\n      MONGO_INITDB_ROOT_PASSWORD: xxx\n    networks:\n      - xxx\n\n  mongo-express:\n    image: mongo-express\n    restart: always\n    ports:\n      - 8081:8081\n    environment:\n      ME_CONFIG_MONGODB_ADMINUSERNAME: xxx\n      ME_CONFIG_MONGODB_ADMINPASSWORD: xxx\n      ME_CONFIG_MONGODB_URL: mongodb://xxx:xxx@mongo:27017/\n    networks:\n      - xxx\n\n  redis:\n    image: redis:alpine\n    ports:\n      - 6379:6379\n    command: redis-server\n    networks:\n      - xxx\n\n  rabbitmq:\n    image: rabbitmq:3.8.3-management\n    container_name: rabbitmq\n    restart: always\n    hostname: myRabbitmq\n    ports:\n      - 15672:15672\n      - 5672:5672\n    environment:\n      - RABBITMQ_DEFAULT_USER=xxx\n      - RABBITMQ_DEFAULT_PASS=xxx\n    networks:\n      - xxx\n```\n\n*   构建并启动 执行`docker-compose up -d --no-recreate`\n\n![image.png](../imgs/4f79340e5802405c8528233799680046.png)\n\n*   查看容器 执行`docker-compose ps` ![image.png](../imgs/a777431b0212407d999884280b44aaa1.png)\n*   删除容器 可以使用`stop`命令停止运行中的容器，然后再运行`rm`命令。但还有更简单的办法：`down`，它能停止并删除`up`命令创建的容器。\n\n![image.png](../imgs/01a207b620f34eaea21cfea282c3f4ba.png)","source":"_posts/前端docker快速入门——Compose.md","raw":"---\n title: \"前端docker快速入门——Compose\"\n date: 2022-03-06\n tags: [Docker]\n categories: [前端笔记]\n---\n\n前言\n==\n\n前文介绍了Dockerfile文件，但在实际应用中还有一个常见的文件——docker-compose.yml，本文便介绍Compose的使用方法。\n\nCompose\n=======\n\nCompose定位是“定义和运行多个Docker容器的应用”。\n\ndocker可以很方便地起一个应用容器，但是我们项目实践中往往需要多个应用。比如一个web项目，可能需要启动nginx,redis,mysql等多个应用容器，它们之间可能还需要相互配合。Compose可以让用户通过编写一个简单的模板文件，快速地创建和管理基于Docker容器的应用集群。\n\n服务和项目\n-----\n\nCompose中有两个重要的概念：服务（service）和项目（project）。\n\n*   服务：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。\n*   项目：由一组关联的应用容器组成的一个完整业务单元。\n\n模板文件\n----\n\nCompose默认的模板文件名是docker-compose.yml。下面是docker-compose.yml文件的一个例子：\n\n```yml\nversion: \"3\"\n\nservices:\n  webapp:\n    image: examples/web\n    ports:\n      - \"80:80\"\n    volumes:\n      - \"/data\"\n```\n\n其中webapp是服务名，image、ports、volumes都是指令关键字。\n\n### 常用指令\n\nCompose模板文件中常用指令如下：\n\n*   **image和build** 一个服务必须指定镜像，可以用image指定，也可以用build指定Dockerfile所在的文件目录\n*   **command** 覆盖容器启动后默认执行的命令。\n*   **depends\\_on** 指定容器启动顺序\n*   **env\\_file和environment** 指定环境变量，env\\_file的值是.env文件，将从文件中读取；environment则直接设置环境变量。\n\n模板文件默认支持读取系统环境变量和当前目录下的.env文件中的变量，模板中可以用`${}`占位。\n\n```arduino\nimage: \"mongo:${MONGO_VERSION}\"\n```\n\n*   **ports** 将端口映射到主机\n*   **volumes** 设置数据卷挂载路径\n\nCompose 命令\n----------\n\nCompose中的命令只需要记住一个：**up**。  \n`docker-compose up [options] [SERVICE...]`  \n它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。大部分时候都可以直接通过该命令来启动一个项目。\n\n常用的选项有：\n\n*   `-d` 在后台运行服务容器\n*   `--no-recreate` 如果容器已经存在了，则不重新创建\n\n实战\n--\n\n项目需要启动mongo、redis、rabbitmq三个应用，编写docker-compose.yml如下：\n\n```yaml\nversion: '3.1'\nnetworks:\n  xxx:\n\nservices:\n\n  mongo:\n    image: mongo\n    restart: always\n    ports:\n      - 27017:27017\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: xxx\n      MONGO_INITDB_ROOT_PASSWORD: xxx\n    networks:\n      - xxx\n\n  mongo-express:\n    image: mongo-express\n    restart: always\n    ports:\n      - 8081:8081\n    environment:\n      ME_CONFIG_MONGODB_ADMINUSERNAME: xxx\n      ME_CONFIG_MONGODB_ADMINPASSWORD: xxx\n      ME_CONFIG_MONGODB_URL: mongodb://xxx:xxx@mongo:27017/\n    networks:\n      - xxx\n\n  redis:\n    image: redis:alpine\n    ports:\n      - 6379:6379\n    command: redis-server\n    networks:\n      - xxx\n\n  rabbitmq:\n    image: rabbitmq:3.8.3-management\n    container_name: rabbitmq\n    restart: always\n    hostname: myRabbitmq\n    ports:\n      - 15672:15672\n      - 5672:5672\n    environment:\n      - RABBITMQ_DEFAULT_USER=xxx\n      - RABBITMQ_DEFAULT_PASS=xxx\n    networks:\n      - xxx\n```\n\n*   构建并启动 执行`docker-compose up -d --no-recreate`\n\n![image.png](../imgs/4f79340e5802405c8528233799680046.png)\n\n*   查看容器 执行`docker-compose ps` ![image.png](../imgs/a777431b0212407d999884280b44aaa1.png)\n*   删除容器 可以使用`stop`命令停止运行中的容器，然后再运行`rm`命令。但还有更简单的办法：`down`，它能停止并删除`up`命令创建的容器。\n\n![image.png](../imgs/01a207b620f34eaea21cfea282c3f4ba.png)","slug":"前端docker快速入门——Compose","published":1,"updated":"2024-04-04T15:27:03.358Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhy0059hajf8hgqd8jd","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前文介绍了Dockerfile文件，但在实际应用中还有一个常见的文件——docker-compose.yml，本文便介绍Compose的使用方法。</p>\n<h1 id=\"Compose\"><a href=\"#Compose\" class=\"headerlink\" title=\"Compose\"></a>Compose</h1><p>Compose定位是“定义和运行多个Docker容器的应用”。</p>\n<p>docker可以很方便地起一个应用容器，但是我们项目实践中往往需要多个应用。比如一个web项目，可能需要启动nginx,redis,mysql等多个应用容器，它们之间可能还需要相互配合。Compose可以让用户通过编写一个简单的模板文件，快速地创建和管理基于Docker容器的应用集群。</p>\n<h2 id=\"服务和项目\"><a href=\"#服务和项目\" class=\"headerlink\" title=\"服务和项目\"></a>服务和项目</h2><p>Compose中有两个重要的概念：服务（service）和项目（project）。</p>\n<ul>\n<li>服务：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li>\n<li>项目：由一组关联的应用容器组成的一个完整业务单元。</li>\n</ul>\n<h2 id=\"模板文件\"><a href=\"#模板文件\" class=\"headerlink\" title=\"模板文件\"></a>模板文件</h2><p>Compose默认的模板文件名是docker-compose.yml。下面是docker-compose.yml文件的一个例子：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">webapp:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">examples/web</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;80:80&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;/data&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中webapp是服务名，image、ports、volumes都是指令关键字。</p>\n<h3 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h3><p>Compose模板文件中常用指令如下：</p>\n<ul>\n<li><strong>image和build</strong> 一个服务必须指定镜像，可以用image指定，也可以用build指定Dockerfile所在的文件目录</li>\n<li><strong>command</strong> 覆盖容器启动后默认执行的命令。</li>\n<li><strong>depends_on</strong> 指定容器启动顺序</li>\n<li><strong>env_file和environment</strong> 指定环境变量，env_file的值是.env文件，将从文件中读取；environment则直接设置环境变量。</li>\n</ul>\n<p>模板文件默认支持读取系统环境变量和当前目录下的.env文件中的变量，模板中可以用<code>$&#123;&#125;</code>占位。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image: <span class=\"string\">&quot;mongo:$&#123;MONGO_VERSION&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ports</strong> 将端口映射到主机</li>\n<li><strong>volumes</strong> 设置数据卷挂载路径</li>\n</ul>\n<h2 id=\"Compose-命令\"><a href=\"#Compose-命令\" class=\"headerlink\" title=\"Compose 命令\"></a>Compose 命令</h2><p>Compose中的命令只需要记住一个：<strong>up</strong>。<br><code>docker-compose up [options] [SERVICE...]</code><br>它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。大部分时候都可以直接通过该命令来启动一个项目。</p>\n<p>常用的选项有：</p>\n<ul>\n<li><code>-d</code> 在后台运行服务容器</li>\n<li><code>--no-recreate</code> 如果容器已经存在了，则不重新创建</li>\n</ul>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><p>项目需要启动mongo、redis、rabbitmq三个应用，编写docker-compose.yml如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.1&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">xxx:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mongo:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">27017</span><span class=\"string\">:27017</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MONGO_INITDB_ROOT_USERNAME:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\">      <span class=\"attr\">MONGO_INITDB_ROOT_PASSWORD:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mongo-express:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mongo-express</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8081</span><span class=\"string\">:8081</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">ME_CONFIG_MONGODB_ADMINUSERNAME:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\">      <span class=\"attr\">ME_CONFIG_MONGODB_ADMINPASSWORD:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\">      <span class=\"attr\">ME_CONFIG_MONGODB_URL:</span> <span class=\"string\">mongodb://xxx:xxx@mongo:27017/</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">6379</span><span class=\"string\">:6379</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">redis-server</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">rabbitmq:3.8.3-management</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">rabbitmq</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">myRabbitmq</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">15672</span><span class=\"string\">:15672</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">5672</span><span class=\"string\">:5672</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">RABBITMQ_DEFAULT_USER=xxx</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">RABBITMQ_DEFAULT_PASS=xxx</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>构建并启动 执行<code>docker-compose up -d --no-recreate</code></li>\n</ul>\n<p><img src=\"/../imgs/4f79340e5802405c8528233799680046.png\" alt=\"image.png\"></p>\n<ul>\n<li>查看容器 执行<code>docker-compose ps</code> <img src=\"/../imgs/a777431b0212407d999884280b44aaa1.png\" alt=\"image.png\"></li>\n<li>删除容器 可以使用<code>stop</code>命令停止运行中的容器，然后再运行<code>rm</code>命令。但还有更简单的办法：<code>down</code>，它能停止并删除<code>up</code>命令创建的容器。</li>\n</ul>\n<p><img src=\"/../imgs/01a207b620f34eaea21cfea282c3f4ba.png\" alt=\"image.png\"></p>\n","length":2033,"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前文介绍了Dockerfile文件，但在实际应用中还有一个常见的文件——docker-compose.yml，本文便介绍Compose的使用方法。</p>\n<h1 id=\"Compose\"><a href=\"#Compose\" class=\"headerlink\" title=\"Compose\"></a>Compose</h1><p>Compose定位是“定义和运行多个Docker容器的应用”。</p>\n<p>docker可以很方便地起一个应用容器，但是我们项目实践中往往需要多个应用。比如一个web项目，可能需要启动nginx,redis,mysql等多个应用容器，它们之间可能还需要相互配合。Compose可以让用户通过编写一个简单的模板文件，快速地创建和管理基于Docker容器的应用集群。</p>\n<h2 id=\"服务和项目\"><a href=\"#服务和项目\" class=\"headerlink\" title=\"服务和项目\"></a>服务和项目</h2><p>Compose中有两个重要的概念：服务（service）和项目（project）。</p>\n<ul>\n<li>服务：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li>\n<li>项目：由一组关联的应用容器组成的一个完整业务单元。</li>\n</ul>\n<h2 id=\"模板文件\"><a href=\"#模板文件\" class=\"headerlink\" title=\"模板文件\"></a>模板文件</h2><p>Compose默认的模板文件名是docker-compose.yml。下面是docker-compose.yml文件的一个例子：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">webapp:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">examples/web</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;80:80&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;/data&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中webapp是服务名，image、ports、volumes都是指令关键字。</p>\n<h3 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h3><p>Compose模板文件中常用指令如下：</p>\n<ul>\n<li><strong>image和build</strong> 一个服务必须指定镜像，可以用image指定，也可以用build指定Dockerfile所在的文件目录</li>\n<li><strong>command</strong> 覆盖容器启动后默认执行的命令。</li>\n<li><strong>depends_on</strong> 指定容器启动顺序</li>\n<li><strong>env_file和environment</strong> 指定环境变量，env_file的值是.env文件，将从文件中读取；environment则直接设置环境变量。</li>\n</ul>\n<p>模板文件默认支持读取系统环境变量和当前目录下的.env文件中的变量，模板中可以用<code>$&#123;&#125;</code>占位。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image: <span class=\"string\">&quot;mongo:$&#123;MONGO_VERSION&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ports</strong> 将端口映射到主机</li>\n<li><strong>volumes</strong> 设置数据卷挂载路径</li>\n</ul>\n<h2 id=\"Compose-命令\"><a href=\"#Compose-命令\" class=\"headerlink\" title=\"Compose 命令\"></a>Compose 命令</h2><p>Compose中的命令只需要记住一个：<strong>up</strong>。<br><code>docker-compose up [options] [SERVICE...]</code><br>它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。大部分时候都可以直接通过该命令来启动一个项目。</p>\n<p>常用的选项有：</p>\n<ul>\n<li><code>-d</code> 在后台运行服务容器</li>\n<li><code>--no-recreate</code> 如果容器已经存在了，则不重新创建</li>\n</ul>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><p>项目需要启动mongo、redis、rabbitmq三个应用，编写docker-compose.yml如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.1&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">xxx:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mongo:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">27017</span><span class=\"string\">:27017</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MONGO_INITDB_ROOT_USERNAME:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\">      <span class=\"attr\">MONGO_INITDB_ROOT_PASSWORD:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mongo-express:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mongo-express</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8081</span><span class=\"string\">:8081</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">ME_CONFIG_MONGODB_ADMINUSERNAME:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\">      <span class=\"attr\">ME_CONFIG_MONGODB_ADMINPASSWORD:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\">      <span class=\"attr\">ME_CONFIG_MONGODB_URL:</span> <span class=\"string\">mongodb://xxx:xxx@mongo:27017/</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">6379</span><span class=\"string\">:6379</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">redis-server</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">rabbitmq:3.8.3-management</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">rabbitmq</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">myRabbitmq</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">15672</span><span class=\"string\">:15672</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">5672</span><span class=\"string\">:5672</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">RABBITMQ_DEFAULT_USER=xxx</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">RABBITMQ_DEFAULT_PASS=xxx</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>构建并启动 执行<code>docker-compose up -d --no-recreate</code></li>\n</ul>\n<p><img src=\"/../imgs/4f79340e5802405c8528233799680046.png\" alt=\"image.png\"></p>\n<ul>\n<li>查看容器 执行<code>docker-compose ps</code> <img src=\"/../imgs/a777431b0212407d999884280b44aaa1.png\" alt=\"image.png\"></li>\n<li>删除容器 可以使用<code>stop</code>命令停止运行中的容器，然后再运行<code>rm</code>命令。但还有更简单的办法：<code>down</code>，它能停止并删除<code>up</code>命令创建的容器。</li>\n</ul>\n<p><img src=\"/../imgs/01a207b620f34eaea21cfea282c3f4ba.png\" alt=\"image.png\"></p>\n"},{"title":"前端docker快速入门——Dockerfile","date":"2022-03-04T16:00:00.000Z","_content":"\n前言\n--\n\n前文介绍了docker中最最常用的几个命令，但漏了一个build命令。build构建镜像通常需要编写一个Dockerfile的文件，这个文件上手也很简单，只要记住几个常用的指令就行了。\n\ndocker镜像的分层存储\n-------------\n\n这里需要先补充一个关于镜像概念：分层存储。\n\n前文将镜像类比为一个装机文件，但实际上镜像并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。\n\n镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。\n\n> 联合文件系统（UnionFS）是一种轻量级的高性能分层文件系统，它支持将文件系统中的修改信息作为一次提交，并层层叠加，同时可以将不同目录挂载到同一个虚拟文件系统下，应用看到的是挂载的最终结果。联合文件系统是实现Docker镜像的技术基础。\n\n分层能有哪些好处呢？这里可以举两个好理解的例子。比如镜像升级的时候，会创建一个新层，而不会改动之前的文件，那么其他人更新镜像的时候，只需要添加新层，而不必替换原来的整个镜像。另外，当我们拉取镜像的时候，是先拿到该镜像的配置文件，从中读取镜像layer的信息，并且只会拉取本地没有的layer，因为很多镜像都基于同样的基础镜像，这种设计就提高了镜像拉取速度和存储效率。\n\nDockerfile\n----------\n\n### 介绍\n\nDockerfile是用来定制镜像的，镜像的定制实际上就是定制每一层所添加的配置、文件。\n\nDockerfile以指令记录每一层的修改、安装、构建、操作,每一条指令构建一层。\n\n比如我们构建一个nginx镜像，并自定义它web页面，那么Dockerfile可能是这样的：\n\n```docker\nFROM nginx\nCOPY ./index.html /usr/share/nginx/html\n```\n\n其中`FROM`、`COPY`就是指令。\n\n### 指令\n\n*   **FROM** 指定所创建镜像的基础镜像，如果本地不存在，则默认会去Docker Hub下载指定镜像。Dockerfile中的第一条指令必须为FROM指令.\n*   **RUN** 运行指定命令。格式为RUN或RUN \\[\"executable\", \"param1\", \"param2\"\\]（因为会被解析问json数组，所以必须是双引号）。  \n    每条RUN指令将在当前镜像的基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\\\来换行。\n*   **CMD** CMD指令用来指定启动容器时默认执行的命令。每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。 `CMD [\"executable\", \"param1\", \"param2\"]`使用exec执行；`CMD command param1 param2`在/bin/sh中执行，提供给需要交互的应用;`CMD [\"param1\", \"param2\"]`提供给ENTRYPOINT的默认参数。\n*   **LABELLABEL** 用来指定生成镜像的元数据标签信息。格式为`LABEL <key>=<value> <key>=<value> <key>=<value> ...`。\n*   **EXPOSE** 声明镜像内服务所监听的端口。格式为`EXPOSE <port> [<port>...]`。但仅是声明，启动容器并不会自动完成端口映射。\n*   **ENV** 指定环境变量，在镜像生成过程中会被后续RUN指令使用，在镜像启动的容器中也会存在。格式为`ENV<key><value>`或`ENV<key>=<value>...`。\n*   **ADD** 该命令将复制指定的路径下的内容到容器中的路径下。格式为`ADD<src> <dest>`。 src可以是Dockerfile所在目录的一个相对路径，或者一个URL。如果是tar文件，会自动解压缩。\n*   **COPY** ADD的简化版，不支持URL,也不会自动解压缩，docker官方更推荐COPY。格式为`COPY <src> <dest>`。\n*   **ENTRYPOINT** 指定镜像的默认入口命令，该入口命令会在启动容器时作为根命令执行，所有传入值作为该命令的参数。 每个Dockerfile中只能有一个ENTRYPOINT。格式为`ENTRYPOINT [\"executable\", \"param1\", \"param2\"]`（exec调用执行）或`ENTRYPOINT command param1 param2`（shell中执行）。\n*   VOLUME 创建一个数据卷挂载点。格式为`VOLUME [\"/data\"]`。\n\ndocker容器删除后，其运行期间产生的数据也会被删除。而数据卷就是解决这一问题的常用手段。\n\n_数据卷是一个可供一个或多个容器使用的特殊目录，数据卷的中的更新会立即生效，它的主要用途是持久化数据。_\n\n*   **WORKDIR** 为后续的RUN、CMD和ENTRYPOINT指令配置工作目录。格式为`WORKDIR /path/to/workdir`。\n\n下面的指令不太常用：\n\n*   **USER** 指定运行容器时的用户名或UID\n*   **MAINTAINER** 指定维护者信息，格式为MAINTAINER\n*   **ARG** 指定一些镜像内使用的参数（例如版本号信息等），这些参数在执行docker build命令时可以以--build-arg=格式传入。格式为`ARG<name>[=<default value>]`。\n*   **ONBUILD** 配置当所创建的镜像作为其他镜像的基础镜像时，所执行的创建操作指令。\n*   **STOPSIGNAL** 指定所创建镜像启动的容器接收退出的信号值\n*   **HEALTHCHECK** 配置所启动容器如何进行健康检查。\n*   **SHELL** 指定其他命令使用shell时的默认shell类型。默认值为\\[\"/bin/sh\", \"-c\"\\]。\n\n### docker build\n\n编写完成Dockerfile之后，可以通过docker build命令来创建镜像。\n\n```perl\ndocker build -t my-nginx .\n```\n\n常用的参数有：\n\n*   **\\--tag, -t:**  镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。\n*   **\\-f :** 指定要使用的Dockerfile路径；\n*   **\\-build-arg=\\[\\] :** 设置镜像创建时的变量；\n\n`docker build` 命令最后有一个 `.`,`.` 表示当前目录，也可以改成其他路径。这个路径并非用来指定Dockerfile的位置，而是命令执行的上下文，ADD和COPY命令只能操作这个上下文中的文件。\n\ndocker build的构建过程发生在服务端（docker引擎），因此会将该上下文中的所有文件全部打包传给docker 引擎，如果这些文件中有一部分不需要，那么可以编写.dockerignore忽略这些文件，就类似.gitignore一样。","source":"_posts/前端docker快速入门——Dockerfile.md","raw":"---\n title: \"前端docker快速入门——Dockerfile\"\n date: 2022-03-05\n tags: [Docker]\n categories: [前端笔记]\n---\n\n前言\n--\n\n前文介绍了docker中最最常用的几个命令，但漏了一个build命令。build构建镜像通常需要编写一个Dockerfile的文件，这个文件上手也很简单，只要记住几个常用的指令就行了。\n\ndocker镜像的分层存储\n-------------\n\n这里需要先补充一个关于镜像概念：分层存储。\n\n前文将镜像类比为一个装机文件，但实际上镜像并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。\n\n镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。\n\n> 联合文件系统（UnionFS）是一种轻量级的高性能分层文件系统，它支持将文件系统中的修改信息作为一次提交，并层层叠加，同时可以将不同目录挂载到同一个虚拟文件系统下，应用看到的是挂载的最终结果。联合文件系统是实现Docker镜像的技术基础。\n\n分层能有哪些好处呢？这里可以举两个好理解的例子。比如镜像升级的时候，会创建一个新层，而不会改动之前的文件，那么其他人更新镜像的时候，只需要添加新层，而不必替换原来的整个镜像。另外，当我们拉取镜像的时候，是先拿到该镜像的配置文件，从中读取镜像layer的信息，并且只会拉取本地没有的layer，因为很多镜像都基于同样的基础镜像，这种设计就提高了镜像拉取速度和存储效率。\n\nDockerfile\n----------\n\n### 介绍\n\nDockerfile是用来定制镜像的，镜像的定制实际上就是定制每一层所添加的配置、文件。\n\nDockerfile以指令记录每一层的修改、安装、构建、操作,每一条指令构建一层。\n\n比如我们构建一个nginx镜像，并自定义它web页面，那么Dockerfile可能是这样的：\n\n```docker\nFROM nginx\nCOPY ./index.html /usr/share/nginx/html\n```\n\n其中`FROM`、`COPY`就是指令。\n\n### 指令\n\n*   **FROM** 指定所创建镜像的基础镜像，如果本地不存在，则默认会去Docker Hub下载指定镜像。Dockerfile中的第一条指令必须为FROM指令.\n*   **RUN** 运行指定命令。格式为RUN或RUN \\[\"executable\", \"param1\", \"param2\"\\]（因为会被解析问json数组，所以必须是双引号）。  \n    每条RUN指令将在当前镜像的基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\\\来换行。\n*   **CMD** CMD指令用来指定启动容器时默认执行的命令。每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。 `CMD [\"executable\", \"param1\", \"param2\"]`使用exec执行；`CMD command param1 param2`在/bin/sh中执行，提供给需要交互的应用;`CMD [\"param1\", \"param2\"]`提供给ENTRYPOINT的默认参数。\n*   **LABELLABEL** 用来指定生成镜像的元数据标签信息。格式为`LABEL <key>=<value> <key>=<value> <key>=<value> ...`。\n*   **EXPOSE** 声明镜像内服务所监听的端口。格式为`EXPOSE <port> [<port>...]`。但仅是声明，启动容器并不会自动完成端口映射。\n*   **ENV** 指定环境变量，在镜像生成过程中会被后续RUN指令使用，在镜像启动的容器中也会存在。格式为`ENV<key><value>`或`ENV<key>=<value>...`。\n*   **ADD** 该命令将复制指定的路径下的内容到容器中的路径下。格式为`ADD<src> <dest>`。 src可以是Dockerfile所在目录的一个相对路径，或者一个URL。如果是tar文件，会自动解压缩。\n*   **COPY** ADD的简化版，不支持URL,也不会自动解压缩，docker官方更推荐COPY。格式为`COPY <src> <dest>`。\n*   **ENTRYPOINT** 指定镜像的默认入口命令，该入口命令会在启动容器时作为根命令执行，所有传入值作为该命令的参数。 每个Dockerfile中只能有一个ENTRYPOINT。格式为`ENTRYPOINT [\"executable\", \"param1\", \"param2\"]`（exec调用执行）或`ENTRYPOINT command param1 param2`（shell中执行）。\n*   VOLUME 创建一个数据卷挂载点。格式为`VOLUME [\"/data\"]`。\n\ndocker容器删除后，其运行期间产生的数据也会被删除。而数据卷就是解决这一问题的常用手段。\n\n_数据卷是一个可供一个或多个容器使用的特殊目录，数据卷的中的更新会立即生效，它的主要用途是持久化数据。_\n\n*   **WORKDIR** 为后续的RUN、CMD和ENTRYPOINT指令配置工作目录。格式为`WORKDIR /path/to/workdir`。\n\n下面的指令不太常用：\n\n*   **USER** 指定运行容器时的用户名或UID\n*   **MAINTAINER** 指定维护者信息，格式为MAINTAINER\n*   **ARG** 指定一些镜像内使用的参数（例如版本号信息等），这些参数在执行docker build命令时可以以--build-arg=格式传入。格式为`ARG<name>[=<default value>]`。\n*   **ONBUILD** 配置当所创建的镜像作为其他镜像的基础镜像时，所执行的创建操作指令。\n*   **STOPSIGNAL** 指定所创建镜像启动的容器接收退出的信号值\n*   **HEALTHCHECK** 配置所启动容器如何进行健康检查。\n*   **SHELL** 指定其他命令使用shell时的默认shell类型。默认值为\\[\"/bin/sh\", \"-c\"\\]。\n\n### docker build\n\n编写完成Dockerfile之后，可以通过docker build命令来创建镜像。\n\n```perl\ndocker build -t my-nginx .\n```\n\n常用的参数有：\n\n*   **\\--tag, -t:**  镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。\n*   **\\-f :** 指定要使用的Dockerfile路径；\n*   **\\-build-arg=\\[\\] :** 设置镜像创建时的变量；\n\n`docker build` 命令最后有一个 `.`,`.` 表示当前目录，也可以改成其他路径。这个路径并非用来指定Dockerfile的位置，而是命令执行的上下文，ADD和COPY命令只能操作这个上下文中的文件。\n\ndocker build的构建过程发生在服务端（docker引擎），因此会将该上下文中的所有文件全部打包传给docker 引擎，如果这些文件中有一部分不需要，那么可以编写.dockerignore忽略这些文件，就类似.gitignore一样。","slug":"前端docker快速入门——Dockerfile","published":1,"updated":"2024-04-04T15:27:03.366Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhy005chajf8empboda","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前文介绍了docker中最最常用的几个命令，但漏了一个build命令。build构建镜像通常需要编写一个Dockerfile的文件，这个文件上手也很简单，只要记住几个常用的指令就行了。</p>\n<h2 id=\"docker镜像的分层存储\"><a href=\"#docker镜像的分层存储\" class=\"headerlink\" title=\"docker镜像的分层存储\"></a>docker镜像的分层存储</h2><p>这里需要先补充一个关于镜像概念：分层存储。</p>\n<p>前文将镜像类比为一个装机文件，但实际上镜像并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p>\n<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</p>\n<blockquote>\n<p>联合文件系统（UnionFS）是一种轻量级的高性能分层文件系统，它支持将文件系统中的修改信息作为一次提交，并层层叠加，同时可以将不同目录挂载到同一个虚拟文件系统下，应用看到的是挂载的最终结果。联合文件系统是实现Docker镜像的技术基础。</p>\n</blockquote>\n<p>分层能有哪些好处呢？这里可以举两个好理解的例子。比如镜像升级的时候，会创建一个新层，而不会改动之前的文件，那么其他人更新镜像的时候，只需要添加新层，而不必替换原来的整个镜像。另外，当我们拉取镜像的时候，是先拿到该镜像的配置文件，从中读取镜像layer的信息，并且只会拉取本地没有的layer，因为很多镜像都基于同样的基础镜像，这种设计就提高了镜像拉取速度和存储效率。</p>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Dockerfile是用来定制镜像的，镜像的定制实际上就是定制每一层所添加的配置、文件。</p>\n<p>Dockerfile以指令记录每一层的修改、安装、构建、操作,每一条指令构建一层。</p>\n<p>比如我们构建一个nginx镜像，并自定义它web页面，那么Dockerfile可能是这样的：</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> nginx</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./index.html /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure>\n\n<p>其中<code>FROM</code>、<code>COPY</code>就是指令。</p>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><ul>\n<li><strong>FROM</strong> 指定所创建镜像的基础镜像，如果本地不存在，则默认会去Docker Hub下载指定镜像。Dockerfile中的第一条指令必须为FROM指令.</li>\n<li><strong>RUN</strong> 运行指定命令。格式为RUN或RUN [“executable”, “param1”, “param2”]（因为会被解析问json数组，所以必须是双引号）。<br>每条RUN指令将在当前镜像的基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\来换行。</li>\n<li><strong>CMD</strong> CMD指令用来指定启动容器时默认执行的命令。每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。 <code>CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>使用exec执行；<code>CMD command param1 param2</code>在&#x2F;bin&#x2F;sh中执行，提供给需要交互的应用;<code>CMD [&quot;param1&quot;, &quot;param2&quot;]</code>提供给ENTRYPOINT的默认参数。</li>\n<li><strong>LABELLABEL</strong> 用来指定生成镜像的元数据标签信息。格式为<code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</code>。</li>\n<li><strong>EXPOSE</strong> 声明镜像内服务所监听的端口。格式为<code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code>。但仅是声明，启动容器并不会自动完成端口映射。</li>\n<li><strong>ENV</strong> 指定环境变量，在镜像生成过程中会被后续RUN指令使用，在镜像启动的容器中也会存在。格式为<code>ENV&lt;key&gt;&lt;value&gt;</code>或<code>ENV&lt;key&gt;=&lt;value&gt;...</code>。</li>\n<li><strong>ADD</strong> 该命令将复制指定的路径下的内容到容器中的路径下。格式为<code>ADD&lt;src&gt; &lt;dest&gt;</code>。 src可以是Dockerfile所在目录的一个相对路径，或者一个URL。如果是tar文件，会自动解压缩。</li>\n<li><strong>COPY</strong> ADD的简化版，不支持URL,也不会自动解压缩，docker官方更推荐COPY。格式为<code>COPY &lt;src&gt; &lt;dest&gt;</code>。</li>\n<li><strong>ENTRYPOINT</strong> 指定镜像的默认入口命令，该入口命令会在启动容器时作为根命令执行，所有传入值作为该命令的参数。 每个Dockerfile中只能有一个ENTRYPOINT。格式为<code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>（exec调用执行）或<code>ENTRYPOINT command param1 param2</code>（shell中执行）。</li>\n<li>VOLUME 创建一个数据卷挂载点。格式为<code>VOLUME [&quot;/data&quot;]</code>。</li>\n</ul>\n<p>docker容器删除后，其运行期间产生的数据也会被删除。而数据卷就是解决这一问题的常用手段。</p>\n<p><em>数据卷是一个可供一个或多个容器使用的特殊目录，数据卷的中的更新会立即生效，它的主要用途是持久化数据。</em></p>\n<ul>\n<li><strong>WORKDIR</strong> 为后续的RUN、CMD和ENTRYPOINT指令配置工作目录。格式为<code>WORKDIR /path/to/workdir</code>。</li>\n</ul>\n<p>下面的指令不太常用：</p>\n<ul>\n<li><strong>USER</strong> 指定运行容器时的用户名或UID</li>\n<li><strong>MAINTAINER</strong> 指定维护者信息，格式为MAINTAINER</li>\n<li><strong>ARG</strong> 指定一些镜像内使用的参数（例如版本号信息等），这些参数在执行docker build命令时可以以–build-arg&#x3D;格式传入。格式为<code>ARG&lt;name&gt;[=&lt;default value&gt;]</code>。</li>\n<li><strong>ONBUILD</strong> 配置当所创建的镜像作为其他镜像的基础镜像时，所执行的创建操作指令。</li>\n<li><strong>STOPSIGNAL</strong> 指定所创建镜像启动的容器接收退出的信号值</li>\n<li><strong>HEALTHCHECK</strong> 配置所启动容器如何进行健康检查。</li>\n<li><strong>SHELL</strong> 指定其他命令使用shell时的默认shell类型。默认值为[“&#x2F;bin&#x2F;sh”, “-c”]。</li>\n</ul>\n<h3 id=\"docker-build\"><a href=\"#docker-build\" class=\"headerlink\" title=\"docker build\"></a>docker build</h3><p>编写完成Dockerfile之后，可以通过docker build命令来创建镜像。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t <span class=\"keyword\">my</span>-nginx .</span><br></pre></td></tr></table></figure>\n\n<p>常用的参数有：</p>\n<ul>\n<li><strong>--tag, -t:</strong>  镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li>\n<li><strong>-f :</strong> 指定要使用的Dockerfile路径；</li>\n<li><strong>-build-arg&#x3D;[] :</strong> 设置镜像创建时的变量；</li>\n</ul>\n<p><code>docker build</code> 命令最后有一个 <code>.</code>,<code>.</code> 表示当前目录，也可以改成其他路径。这个路径并非用来指定Dockerfile的位置，而是命令执行的上下文，ADD和COPY命令只能操作这个上下文中的文件。</p>\n<p>docker build的构建过程发生在服务端（docker引擎），因此会将该上下文中的所有文件全部打包传给docker 引擎，如果这些文件中有一部分不需要，那么可以编写.dockerignore忽略这些文件，就类似.gitignore一样。</p>\n","length":2854,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前文介绍了docker中最最常用的几个命令，但漏了一个build命令。build构建镜像通常需要编写一个Dockerfile的文件，这个文件上手也很简单，只要记住几个常用的指令就行了。</p>\n<h2 id=\"docker镜像的分层存储\"><a href=\"#docker镜像的分层存储\" class=\"headerlink\" title=\"docker镜像的分层存储\"></a>docker镜像的分层存储</h2><p>这里需要先补充一个关于镜像概念：分层存储。</p>\n<p>前文将镜像类比为一个装机文件，但实际上镜像并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p>\n<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</p>\n<blockquote>\n<p>联合文件系统（UnionFS）是一种轻量级的高性能分层文件系统，它支持将文件系统中的修改信息作为一次提交，并层层叠加，同时可以将不同目录挂载到同一个虚拟文件系统下，应用看到的是挂载的最终结果。联合文件系统是实现Docker镜像的技术基础。</p>\n</blockquote>\n<p>分层能有哪些好处呢？这里可以举两个好理解的例子。比如镜像升级的时候，会创建一个新层，而不会改动之前的文件，那么其他人更新镜像的时候，只需要添加新层，而不必替换原来的整个镜像。另外，当我们拉取镜像的时候，是先拿到该镜像的配置文件，从中读取镜像layer的信息，并且只会拉取本地没有的layer，因为很多镜像都基于同样的基础镜像，这种设计就提高了镜像拉取速度和存储效率。</p>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Dockerfile是用来定制镜像的，镜像的定制实际上就是定制每一层所添加的配置、文件。</p>\n<p>Dockerfile以指令记录每一层的修改、安装、构建、操作,每一条指令构建一层。</p>\n<p>比如我们构建一个nginx镜像，并自定义它web页面，那么Dockerfile可能是这样的：</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> nginx</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./index.html /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure>\n\n<p>其中<code>FROM</code>、<code>COPY</code>就是指令。</p>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><ul>\n<li><strong>FROM</strong> 指定所创建镜像的基础镜像，如果本地不存在，则默认会去Docker Hub下载指定镜像。Dockerfile中的第一条指令必须为FROM指令.</li>\n<li><strong>RUN</strong> 运行指定命令。格式为RUN或RUN [“executable”, “param1”, “param2”]（因为会被解析问json数组，所以必须是双引号）。<br>每条RUN指令将在当前镜像的基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\来换行。</li>\n<li><strong>CMD</strong> CMD指令用来指定启动容器时默认执行的命令。每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。 <code>CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>使用exec执行；<code>CMD command param1 param2</code>在&#x2F;bin&#x2F;sh中执行，提供给需要交互的应用;<code>CMD [&quot;param1&quot;, &quot;param2&quot;]</code>提供给ENTRYPOINT的默认参数。</li>\n<li><strong>LABELLABEL</strong> 用来指定生成镜像的元数据标签信息。格式为<code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</code>。</li>\n<li><strong>EXPOSE</strong> 声明镜像内服务所监听的端口。格式为<code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code>。但仅是声明，启动容器并不会自动完成端口映射。</li>\n<li><strong>ENV</strong> 指定环境变量，在镜像生成过程中会被后续RUN指令使用，在镜像启动的容器中也会存在。格式为<code>ENV&lt;key&gt;&lt;value&gt;</code>或<code>ENV&lt;key&gt;=&lt;value&gt;...</code>。</li>\n<li><strong>ADD</strong> 该命令将复制指定的路径下的内容到容器中的路径下。格式为<code>ADD&lt;src&gt; &lt;dest&gt;</code>。 src可以是Dockerfile所在目录的一个相对路径，或者一个URL。如果是tar文件，会自动解压缩。</li>\n<li><strong>COPY</strong> ADD的简化版，不支持URL,也不会自动解压缩，docker官方更推荐COPY。格式为<code>COPY &lt;src&gt; &lt;dest&gt;</code>。</li>\n<li><strong>ENTRYPOINT</strong> 指定镜像的默认入口命令，该入口命令会在启动容器时作为根命令执行，所有传入值作为该命令的参数。 每个Dockerfile中只能有一个ENTRYPOINT。格式为<code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>（exec调用执行）或<code>ENTRYPOINT command param1 param2</code>（shell中执行）。</li>\n<li>VOLUME 创建一个数据卷挂载点。格式为<code>VOLUME [&quot;/data&quot;]</code>。</li>\n</ul>\n<p>docker容器删除后，其运行期间产生的数据也会被删除。而数据卷就是解决这一问题的常用手段。</p>\n<p><em>数据卷是一个可供一个或多个容器使用的特殊目录，数据卷的中的更新会立即生效，它的主要用途是持久化数据。</em></p>\n<ul>\n<li><strong>WORKDIR</strong> 为后续的RUN、CMD和ENTRYPOINT指令配置工作目录。格式为<code>WORKDIR /path/to/workdir</code>。</li>\n</ul>\n<p>下面的指令不太常用：</p>\n<ul>\n<li><strong>USER</strong> 指定运行容器时的用户名或UID</li>\n<li><strong>MAINTAINER</strong> 指定维护者信息，格式为MAINTAINER</li>\n<li><strong>ARG</strong> 指定一些镜像内使用的参数（例如版本号信息等），这些参数在执行docker build命令时可以以–build-arg&#x3D;格式传入。格式为<code>ARG&lt;name&gt;[=&lt;default value&gt;]</code>。</li>\n<li><strong>ONBUILD</strong> 配置当所创建的镜像作为其他镜像的基础镜像时，所执行的创建操作指令。</li>\n<li><strong>STOPSIGNAL</strong> 指定所创建镜像启动的容器接收退出的信号值</li>\n<li><strong>HEALTHCHECK</strong> 配置所启动容器如何进行健康检查。</li>\n<li><strong>SHELL</strong> 指定其他命令使用shell时的默认shell类型。默认值为[“&#x2F;bin&#x2F;sh”, “-c”]。</li>\n</ul>\n<h3 id=\"docker-build\"><a href=\"#docker-build\" class=\"headerlink\" title=\"docker build\"></a>docker build</h3><p>编写完成Dockerfile之后，可以通过docker build命令来创建镜像。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t <span class=\"keyword\">my</span>-nginx .</span><br></pre></td></tr></table></figure>\n\n<p>常用的参数有：</p>\n<ul>\n<li><strong>--tag, -t:</strong>  镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li>\n<li><strong>-f :</strong> 指定要使用的Dockerfile路径；</li>\n<li><strong>-build-arg&#x3D;[] :</strong> 设置镜像创建时的变量；</li>\n</ul>\n<p><code>docker build</code> 命令最后有一个 <code>.</code>,<code>.</code> 表示当前目录，也可以改成其他路径。这个路径并非用来指定Dockerfile的位置，而是命令执行的上下文，ADD和COPY命令只能操作这个上下文中的文件。</p>\n<p>docker build的构建过程发生在服务端（docker引擎），因此会将该上下文中的所有文件全部打包传给docker 引擎，如果这些文件中有一部分不需要，那么可以编写.dockerignore忽略这些文件，就类似.gitignore一样。</p>\n"},{"title":"前端docker快速入门——常用命令","date":"2022-02-27T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第29天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n前言\n--\n\ndocker渐渐成为前端避不开的一个知识点，好在docker上手非常简单，看完本文，十分钟带你入门。\n\ndocker介绍\n--------\n\n在docker之前，我们先对容器有个概念：  \n容器能有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。\n\n简单理解，容器可以看做是一个沙箱，每个容器运行着自己的应用，不同容器之间相互隔离，但也可以通过网络通信。\n\n在docker之前，最重要的容器技术是LXC(Linux Containers),docker在它的基础上进一步优化了容器的使用体验，比如提供了各种容器管理工具（分发、版本、移植），以及引入分层文件系统和高效的镜像机制。\n\n网上有很多文章对docker介绍的非常详细了，但是如果是没有接触过服务端、虚拟机的新手，只要记住容器这个概念就行了。至于docker有哪些好处，什么情况下使用docker，当你学会docker的基本操作后，自然就能回答这些问题了。\n\ndocker核心概念\n----------\n\n### 镜像\n\n镜像可以类比为一个装机光盘。镜像是一个只读的模板，不包含任何动态数据。\n\n### 容器\n\n容器是镜像创建的实例，可以类比为通过装机光盘安装的一个系统。但容器不仅包括这个系统，还包括了系统上运行的各种程序，将这些所有当成一个沙箱，沙箱之间相互隔离。\n\n### 仓库\n\n仓库就更好理解了，前端的包可以上传到npm上，docker镜像可以上传到docker hub上。\n\n常用的docker命令\n-----------\n\n### 操作镜像\n\n*   获取镜像：`docker pull`\n\n获取一个Ubuntu 18.04系统的基础镜像可以使用如下的命令:\n\n```\ndocker pull ubuntu:18.04\n```\n\n它默认会从Docker Hub拉取镜像\n\n![image.png](../imgs/075a6d0cbd2a4be1bf15ddaa2f0b5bf2.png)\n\n*   查看镜像：`docker image ls` 可以列出本地的镜像： ![image.png](../imgs/8f8b19af5c424949a663d44f3d02bff2.png)\n*   查看镜像详情：`docker image inspect` ![image.png](../imgs/f783efff2b084fc5b4a1f578d40f0cff.png)\n\n### 操作容器\n\n*   新建并启动容器：`docker run` `run`命令相当于`create`和`start`命令的结合，如果本地不存在该镜像，会先从仓库拉取一个。\n\n启动一个bash终端，允许用户进行交互: ![image.png](../imgs/a5a182f1f49b425b8a240459655c066b.png) -t表示分配一个伪终端，-i表示容器的标准输入保持打开。 如果输入exit，则不仅会退出容器，还会终止容器。\n\n另外还有两个常用参数`-d`，`-p`: ![image.png](../imgs/2115d5d726604ad6b04a09a05833413d.png)\n\n`-d`表示后台运行(容器是否长久运行和-d参数无关，和run后面指定的命令有关)，`-p`表示将容器的端口映射到主机的端口 ![image.png](../imgs/30f4747ae988400594cdf1b5388d6ff5.png)\n\n*   进入容器 进入容器有两个命令：`attach`和`exec`,前者退出时会终止容器，因此只需要记后者就行了。\n\n![image.png](../imgs/370adb6836494a0a99a708e5c8ecbe3a.png)\n\n*   查看容器:`docker ps` `docker ps`可以看到运行中的容器，加参数`-a`可以看到所有的。 ![image.png](../imgs/74906f4b22a24b28800bbbb6c7bcfd40.png)\n    \n*   删除容器 `rm`删除一个处于终止状态的容器\n    \n\n```bash\ndocker container rm\n```\n\n可以指定container的id，也可以指定name ![image.png](../imgs/d1336902565d488a9abb3e3621db5c1d.png)\n\n`prune`清理所有终止的容器\n\n```\ndocker container prune\n```\n\n*   传输文件 当需要将文件从主机复制到容器中时可以使用命令`cp`\n\n比如将本地的README.md传到容器的tmp目录下： ![image.png](../imgs/5ab6d4336eae4c378909d6f4fc8e9560.png)","source":"_posts/前端docker快速入门——常用命令.md","raw":"---\n title: \"前端docker快速入门——常用命令\"\n date: 2022-02-28\n tags: [前端,Docker]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第29天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n前言\n--\n\ndocker渐渐成为前端避不开的一个知识点，好在docker上手非常简单，看完本文，十分钟带你入门。\n\ndocker介绍\n--------\n\n在docker之前，我们先对容器有个概念：  \n容器能有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。\n\n简单理解，容器可以看做是一个沙箱，每个容器运行着自己的应用，不同容器之间相互隔离，但也可以通过网络通信。\n\n在docker之前，最重要的容器技术是LXC(Linux Containers),docker在它的基础上进一步优化了容器的使用体验，比如提供了各种容器管理工具（分发、版本、移植），以及引入分层文件系统和高效的镜像机制。\n\n网上有很多文章对docker介绍的非常详细了，但是如果是没有接触过服务端、虚拟机的新手，只要记住容器这个概念就行了。至于docker有哪些好处，什么情况下使用docker，当你学会docker的基本操作后，自然就能回答这些问题了。\n\ndocker核心概念\n----------\n\n### 镜像\n\n镜像可以类比为一个装机光盘。镜像是一个只读的模板，不包含任何动态数据。\n\n### 容器\n\n容器是镜像创建的实例，可以类比为通过装机光盘安装的一个系统。但容器不仅包括这个系统，还包括了系统上运行的各种程序，将这些所有当成一个沙箱，沙箱之间相互隔离。\n\n### 仓库\n\n仓库就更好理解了，前端的包可以上传到npm上，docker镜像可以上传到docker hub上。\n\n常用的docker命令\n-----------\n\n### 操作镜像\n\n*   获取镜像：`docker pull`\n\n获取一个Ubuntu 18.04系统的基础镜像可以使用如下的命令:\n\n```\ndocker pull ubuntu:18.04\n```\n\n它默认会从Docker Hub拉取镜像\n\n![image.png](../imgs/075a6d0cbd2a4be1bf15ddaa2f0b5bf2.png)\n\n*   查看镜像：`docker image ls` 可以列出本地的镜像： ![image.png](../imgs/8f8b19af5c424949a663d44f3d02bff2.png)\n*   查看镜像详情：`docker image inspect` ![image.png](../imgs/f783efff2b084fc5b4a1f578d40f0cff.png)\n\n### 操作容器\n\n*   新建并启动容器：`docker run` `run`命令相当于`create`和`start`命令的结合，如果本地不存在该镜像，会先从仓库拉取一个。\n\n启动一个bash终端，允许用户进行交互: ![image.png](../imgs/a5a182f1f49b425b8a240459655c066b.png) -t表示分配一个伪终端，-i表示容器的标准输入保持打开。 如果输入exit，则不仅会退出容器，还会终止容器。\n\n另外还有两个常用参数`-d`，`-p`: ![image.png](../imgs/2115d5d726604ad6b04a09a05833413d.png)\n\n`-d`表示后台运行(容器是否长久运行和-d参数无关，和run后面指定的命令有关)，`-p`表示将容器的端口映射到主机的端口 ![image.png](../imgs/30f4747ae988400594cdf1b5388d6ff5.png)\n\n*   进入容器 进入容器有两个命令：`attach`和`exec`,前者退出时会终止容器，因此只需要记后者就行了。\n\n![image.png](../imgs/370adb6836494a0a99a708e5c8ecbe3a.png)\n\n*   查看容器:`docker ps` `docker ps`可以看到运行中的容器，加参数`-a`可以看到所有的。 ![image.png](../imgs/74906f4b22a24b28800bbbb6c7bcfd40.png)\n    \n*   删除容器 `rm`删除一个处于终止状态的容器\n    \n\n```bash\ndocker container rm\n```\n\n可以指定container的id，也可以指定name ![image.png](../imgs/d1336902565d488a9abb3e3621db5c1d.png)\n\n`prune`清理所有终止的容器\n\n```\ndocker container prune\n```\n\n*   传输文件 当需要将文件从主机复制到容器中时可以使用命令`cp`\n\n比如将本地的README.md传到容器的tmp目录下： ![image.png](../imgs/5ab6d4336eae4c378909d6f4fc8e9560.png)","slug":"前端docker快速入门——常用命令","published":1,"updated":"2024-04-04T15:27:03.351Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhy005fhajf8p8j6ctp","content":"<p>「这是我参与2022首次更文挑战的第29天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>docker渐渐成为前端避不开的一个知识点，好在docker上手非常简单，看完本文，十分钟带你入门。</p>\n<h2 id=\"docker介绍\"><a href=\"#docker介绍\" class=\"headerlink\" title=\"docker介绍\"></a>docker介绍</h2><p>在docker之前，我们先对容器有个概念：<br>容器能有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。</p>\n<p>简单理解，容器可以看做是一个沙箱，每个容器运行着自己的应用，不同容器之间相互隔离，但也可以通过网络通信。</p>\n<p>在docker之前，最重要的容器技术是LXC(Linux Containers),docker在它的基础上进一步优化了容器的使用体验，比如提供了各种容器管理工具（分发、版本、移植），以及引入分层文件系统和高效的镜像机制。</p>\n<p>网上有很多文章对docker介绍的非常详细了，但是如果是没有接触过服务端、虚拟机的新手，只要记住容器这个概念就行了。至于docker有哪些好处，什么情况下使用docker，当你学会docker的基本操作后，自然就能回答这些问题了。</p>\n<h2 id=\"docker核心概念\"><a href=\"#docker核心概念\" class=\"headerlink\" title=\"docker核心概念\"></a>docker核心概念</h2><h3 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h3><p>镜像可以类比为一个装机光盘。镜像是一个只读的模板，不包含任何动态数据。</p>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><p>容器是镜像创建的实例，可以类比为通过装机光盘安装的一个系统。但容器不仅包括这个系统，还包括了系统上运行的各种程序，将这些所有当成一个沙箱，沙箱之间相互隔离。</p>\n<h3 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h3><p>仓库就更好理解了，前端的包可以上传到npm上，docker镜像可以上传到docker hub上。</p>\n<h2 id=\"常用的docker命令\"><a href=\"#常用的docker命令\" class=\"headerlink\" title=\"常用的docker命令\"></a>常用的docker命令</h2><h3 id=\"操作镜像\"><a href=\"#操作镜像\" class=\"headerlink\" title=\"操作镜像\"></a>操作镜像</h3><ul>\n<li>获取镜像：<code>docker pull</code></li>\n</ul>\n<p>获取一个Ubuntu 18.04系统的基础镜像可以使用如下的命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure>\n\n<p>它默认会从Docker Hub拉取镜像</p>\n<p><img src=\"/../imgs/075a6d0cbd2a4be1bf15ddaa2f0b5bf2.png\" alt=\"image.png\"></p>\n<ul>\n<li>查看镜像：<code>docker image ls</code> 可以列出本地的镜像： <img src=\"/../imgs/8f8b19af5c424949a663d44f3d02bff2.png\" alt=\"image.png\"></li>\n<li>查看镜像详情：<code>docker image inspect</code> <img src=\"/../imgs/f783efff2b084fc5b4a1f578d40f0cff.png\" alt=\"image.png\"></li>\n</ul>\n<h3 id=\"操作容器\"><a href=\"#操作容器\" class=\"headerlink\" title=\"操作容器\"></a>操作容器</h3><ul>\n<li>新建并启动容器：<code>docker run</code> <code>run</code>命令相当于<code>create</code>和<code>start</code>命令的结合，如果本地不存在该镜像，会先从仓库拉取一个。</li>\n</ul>\n<p>启动一个bash终端，允许用户进行交互: <img src=\"/../imgs/a5a182f1f49b425b8a240459655c066b.png\" alt=\"image.png\"> -t表示分配一个伪终端，-i表示容器的标准输入保持打开。 如果输入exit，则不仅会退出容器，还会终止容器。</p>\n<p>另外还有两个常用参数<code>-d</code>，<code>-p</code>: <img src=\"/../imgs/2115d5d726604ad6b04a09a05833413d.png\" alt=\"image.png\"></p>\n<p><code>-d</code>表示后台运行(容器是否长久运行和-d参数无关，和run后面指定的命令有关)，<code>-p</code>表示将容器的端口映射到主机的端口 <img src=\"/../imgs/30f4747ae988400594cdf1b5388d6ff5.png\" alt=\"image.png\"></p>\n<ul>\n<li>进入容器 进入容器有两个命令：<code>attach</code>和<code>exec</code>,前者退出时会终止容器，因此只需要记后者就行了。</li>\n</ul>\n<p><img src=\"/../imgs/370adb6836494a0a99a708e5c8ecbe3a.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>查看容器:<code>docker ps</code> <code>docker ps</code>可以看到运行中的容器，加参数<code>-a</code>可以看到所有的。 <img src=\"/../imgs/74906f4b22a24b28800bbbb6c7bcfd40.png\" alt=\"image.png\"></p>\n</li>\n<li><p>删除容器 <code>rm</code>删除一个处于终止状态的容器</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container <span class=\"built_in\">rm</span></span><br></pre></td></tr></table></figure>\n\n<p>可以指定container的id，也可以指定name <img src=\"/../imgs/d1336902565d488a9abb3e3621db5c1d.png\" alt=\"image.png\"></p>\n<p><code>prune</code>清理所有终止的容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container prune</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>传输文件 当需要将文件从主机复制到容器中时可以使用命令<code>cp</code></li>\n</ul>\n<p>比如将本地的README.md传到容器的tmp目录下： <img src=\"/../imgs/5ab6d4336eae4c378909d6f4fc8e9560.png\" alt=\"image.png\"></p>\n","length":1243,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第29天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>docker渐渐成为前端避不开的一个知识点，好在docker上手非常简单，看完本文，十分钟带你入门。</p>\n<h2 id=\"docker介绍\"><a href=\"#docker介绍\" class=\"headerlink\" title=\"docker介绍\"></a>docker介绍</h2><p>在docker之前，我们先对容器有个概念：<br>容器能有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。</p>\n<p>简单理解，容器可以看做是一个沙箱，每个容器运行着自己的应用，不同容器之间相互隔离，但也可以通过网络通信。</p>\n<p>在docker之前，最重要的容器技术是LXC(Linux Containers),docker在它的基础上进一步优化了容器的使用体验，比如提供了各种容器管理工具（分发、版本、移植），以及引入分层文件系统和高效的镜像机制。</p>\n<p>网上有很多文章对docker介绍的非常详细了，但是如果是没有接触过服务端、虚拟机的新手，只要记住容器这个概念就行了。至于docker有哪些好处，什么情况下使用docker，当你学会docker的基本操作后，自然就能回答这些问题了。</p>\n<h2 id=\"docker核心概念\"><a href=\"#docker核心概念\" class=\"headerlink\" title=\"docker核心概念\"></a>docker核心概念</h2><h3 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h3><p>镜像可以类比为一个装机光盘。镜像是一个只读的模板，不包含任何动态数据。</p>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><p>容器是镜像创建的实例，可以类比为通过装机光盘安装的一个系统。但容器不仅包括这个系统，还包括了系统上运行的各种程序，将这些所有当成一个沙箱，沙箱之间相互隔离。</p>\n<h3 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h3><p>仓库就更好理解了，前端的包可以上传到npm上，docker镜像可以上传到docker hub上。</p>\n<h2 id=\"常用的docker命令\"><a href=\"#常用的docker命令\" class=\"headerlink\" title=\"常用的docker命令\"></a>常用的docker命令</h2><h3 id=\"操作镜像\"><a href=\"#操作镜像\" class=\"headerlink\" title=\"操作镜像\"></a>操作镜像</h3><ul>\n<li>获取镜像：<code>docker pull</code></li>\n</ul>\n<p>获取一个Ubuntu 18.04系统的基础镜像可以使用如下的命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure>\n\n<p>它默认会从Docker Hub拉取镜像</p>\n<p><img src=\"/../imgs/075a6d0cbd2a4be1bf15ddaa2f0b5bf2.png\" alt=\"image.png\"></p>\n<ul>\n<li>查看镜像：<code>docker image ls</code> 可以列出本地的镜像： <img src=\"/../imgs/8f8b19af5c424949a663d44f3d02bff2.png\" alt=\"image.png\"></li>\n<li>查看镜像详情：<code>docker image inspect</code> <img src=\"/../imgs/f783efff2b084fc5b4a1f578d40f0cff.png\" alt=\"image.png\"></li>\n</ul>\n<h3 id=\"操作容器\"><a href=\"#操作容器\" class=\"headerlink\" title=\"操作容器\"></a>操作容器</h3><ul>\n<li>新建并启动容器：<code>docker run</code> <code>run</code>命令相当于<code>create</code>和<code>start</code>命令的结合，如果本地不存在该镜像，会先从仓库拉取一个。</li>\n</ul>\n<p>启动一个bash终端，允许用户进行交互: <img src=\"/../imgs/a5a182f1f49b425b8a240459655c066b.png\" alt=\"image.png\"> -t表示分配一个伪终端，-i表示容器的标准输入保持打开。 如果输入exit，则不仅会退出容器，还会终止容器。</p>\n<p>另外还有两个常用参数<code>-d</code>，<code>-p</code>: <img src=\"/../imgs/2115d5d726604ad6b04a09a05833413d.png\" alt=\"image.png\"></p>\n<p><code>-d</code>表示后台运行(容器是否长久运行和-d参数无关，和run后面指定的命令有关)，<code>-p</code>表示将容器的端口映射到主机的端口 <img src=\"/../imgs/30f4747ae988400594cdf1b5388d6ff5.png\" alt=\"image.png\"></p>\n<ul>\n<li>进入容器 进入容器有两个命令：<code>attach</code>和<code>exec</code>,前者退出时会终止容器，因此只需要记后者就行了。</li>\n</ul>\n<p><img src=\"/../imgs/370adb6836494a0a99a708e5c8ecbe3a.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>查看容器:<code>docker ps</code> <code>docker ps</code>可以看到运行中的容器，加参数<code>-a</code>可以看到所有的。 <img src=\"/../imgs/74906f4b22a24b28800bbbb6c7bcfd40.png\" alt=\"image.png\"></p>\n</li>\n<li><p>删除容器 <code>rm</code>删除一个处于终止状态的容器</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container <span class=\"built_in\">rm</span></span><br></pre></td></tr></table></figure>\n\n<p>可以指定container的id，也可以指定name <img src=\"/../imgs/d1336902565d488a9abb3e3621db5c1d.png\" alt=\"image.png\"></p>\n<p><code>prune</code>清理所有终止的容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container prune</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>传输文件 当需要将文件从主机复制到容器中时可以使用命令<code>cp</code></li>\n</ul>\n<p>比如将本地的README.md传到容器的tmp目录下： <img src=\"/../imgs/5ab6d4336eae4c378909d6f4fc8e9560.png\" alt=\"image.png\"></p>\n"},{"title":"前端脚手架：从入门到进阶——CLI常用的npm包(三)","date":"2021-11-11T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第12天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n前言\n--\n\ncli免不了需要手动运行一些命令，或者打印一些提示，或者做一些比较、字符处理等，社区里已经有了一些非常优秀的轮子，这篇文章便介绍这些小工具。\n\n命令\n--\n\ncli常常需要运行一些命令，虽然nodejs也提供了 `child_process.spawn`，但是[有着跨平台的问题](http://nodejs.cn%2Fapi%2Fchild_process.html%23spawning-bat-and-cmd-files-on-windows \"http://nodejs.cn/api/child_process.html#spawning-bat-and-cmd-files-on-windows\"),下面推荐几个更好的工具\n\n### [cross-spawn](https://github.com%2Fmoxystudio%2Fnode-cross-spawn \"https://github.com/moxystudio/node-cross-spawn\")\n\n`create-react-app`和`umi`都用了`cross-spawn`,api语法和`child_process.spawn`一样 同步用法\n\n```ini\nconst spawn = require(\"cross-spawn\");\n\nconst result = spawn.sync('npm', ['list',  '-depth', '0']);\nconsole.log(result.output.join(''))\n```\n\n异步用法：\n\n```javascript\nconst child = spawn('npm', ['list',  '-depth', '0']);\nchild.stdout.on('data', (data) => {\n    console.log(`stdout: ${data}`);\n  });\n\n```\n\n### [execa](https://github.com%2Fsindresorhus%2Fexeca%23readme \"https://github.com/sindresorhus/execa#readme\")\n\n`execa`和`cross-spawn`类似，它的特点是提供了`Promsie`支持，`@vue/cli`用的就是它。\n\n```javascript\nconst execa = require('execa');\n(async ()=>{\n    const {stdout} = await execa('find', [\"-name=*.js\"]);\n\tconsole.log(stdout);\n})()\n\n```\n\n### [shelljs](https://github.com%2Fshelljs%2Fshelljs \"https://github.com/shelljs/shelljs\")\n\n当需要运行一些linux命令,比如windows不支持的`find`命令，可以使用`shelljs`\n\n```lua\nvar shell = require('shelljs');\nconsole.log(shell.find('*.js').stdout)\n```\n\n也可以直接用它执行命令：\n\n```bash\nshell.exec(`cd ${process.cwd()}/ && yarn install`);\n```\n\n输出\n--\n\n类型明晰的log输出能让使用者更容易上手\n\n### [chalk](https://github.com%2Fchalk%2Fchalk%23readme \"https://github.com/chalk/chalk#readme\")\n\n`create-react-app`中大量使用了`chalk`给log增加颜色\n\n```javascript\n console.log(\n        `    Only ${chalk.green('<project-directory>')} is required.`\n      );\n      console.log();\n      console.log(\n        `    A custom ${chalk.cyan('--scripts-version')} can be one of:`\n      );\n```\n\n类似的还有[colors](https://github.com%2FMarak%2Fcolors.js \"https://github.com/Marak/colors.js\")\n\n### signale\n\n如果觉得在`console.log`里拼不同颜色的字符串太麻烦了，还有一款开箱即用的log工具`signale`\n\n```ini\nconst signale = require(\"signale\");\n signale.success(\n            `webpack配置已弹出，可自定义webpack配置，继续开发~`\n          )\n```\n\n![default-loggers.png](../imgs/47adc712f1a34ef79eaf2b5eb691bcdc.png)\n\n### [ora](https://github.com%2Fsindresorhus%2Fora%23readme \"https://github.com/sindresorhus/ora#readme\")\n\n一个展示loading的工具：\n\n![screenshot-2.gif](../imgs/3709d5cc20cd4f3b925887c5a9c72d51.png)\n\nv6.x版本后ora是[pure ESM](https://gist.github.com%2Fsindresorhus%2Fa39789f98801d908bbc7ff3ecc99d99c \"https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\")的，node版本高于12.2，并且以`import`引入\n\n```ini\nimport ora from 'ora'\n\nconst spinner = ora('Loading unicorns').start();\n\nsetTimeout(() => {\n\tspinner.color = 'yellow';\n\tspinner.text = 'Loading rainbows';\n\tsetTimeout(()=>{\n\t\tspinner.succeed('success')\n\t},1000)\n}, 1000);\n```\n\n工具\n--\n\n### [semver](https://github.com%2Fnpm%2Fnode-semver%23readme \"https://github.com/npm/node-semver#readme\")\n\n版本比较工具，比如用来检测cli版本或node版本\n\n```javascript\nconst semver = require('semver')\n\nsemver.valid('1.2.3') // '1.2.3'\nsemver.valid('a.b.c') // null\nsemver.clean('  =v1.2.3   ') // '1.2.3'\nsemver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true\nsemver.gt('1.2.3', '9.8.7') // false\nsemver.lt('1.2.3', '9.8.7') // true\n```\n\n### [change-case](https://github.com%2Fblakeembrey%2Fchange-case \"https://github.com/blakeembrey/change-case\")\n\n字符串转换工具，可以轻易地将字符转转换成各种命名格式，比如\n\n```perl\ndotCase(\"test string\"); \n//=> \"test.string\"\n\ncamelCase(\"test string\");\n//=> \"testString\"\n```\n\n### [globby](https://github.com%2Fsindresorhus%2Fglobby%23readme \"https://github.com/sindresorhus/globby#readme\")\n\n通配符匹配工具\n\n```python\nimport {globby} from 'globby';\n\n(async () => {\n\tconst paths = await globby('images', {\n\t\texpandDirectories: {\n\t\t\tfiles: ['cat', 'unicorn', '*.jpg'],\n\t\t\textensions: ['png']\n\t\t}\n\t});\n\n\tconsole.log(paths);\n\t//=> ['cat.png', 'unicorn.png', 'cow.jpg', 'rainbow.jpg']\n})();\n```\n\n### [minimist](https://github.com%2Fsubstack%2Fminimist \"https://github.com/substack/minimist\")\n\n解析命令参数和选项的便捷工具\n\n```ini\nvar argv = require('minimist')(process.argv.slice(2));\nconsole.log(argv);\n```\n\n```yaml\n$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz\n{ _: [ 'foo', 'bar', 'baz' ],\n  x: 3,\n  y: 4,\n  n: 5,\n  a: true,\n  b: true,\n  c: true,\n  beep: 'boop' }\n```\n\n以上就是cli开发过程中比较常用的几个小工具，后续将一步步介绍如何开发一个cli。","source":"_posts/前端脚手架：从入门到进阶——CLI常用的npm包(三).md","raw":"---\n title: \"前端脚手架：从入门到进阶——CLI常用的npm包(三)\"\n date: 2021-11-12\n tags: [前端,NPM]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第12天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n前言\n--\n\ncli免不了需要手动运行一些命令，或者打印一些提示，或者做一些比较、字符处理等，社区里已经有了一些非常优秀的轮子，这篇文章便介绍这些小工具。\n\n命令\n--\n\ncli常常需要运行一些命令，虽然nodejs也提供了 `child_process.spawn`，但是[有着跨平台的问题](http://nodejs.cn%2Fapi%2Fchild_process.html%23spawning-bat-and-cmd-files-on-windows \"http://nodejs.cn/api/child_process.html#spawning-bat-and-cmd-files-on-windows\"),下面推荐几个更好的工具\n\n### [cross-spawn](https://github.com%2Fmoxystudio%2Fnode-cross-spawn \"https://github.com/moxystudio/node-cross-spawn\")\n\n`create-react-app`和`umi`都用了`cross-spawn`,api语法和`child_process.spawn`一样 同步用法\n\n```ini\nconst spawn = require(\"cross-spawn\");\n\nconst result = spawn.sync('npm', ['list',  '-depth', '0']);\nconsole.log(result.output.join(''))\n```\n\n异步用法：\n\n```javascript\nconst child = spawn('npm', ['list',  '-depth', '0']);\nchild.stdout.on('data', (data) => {\n    console.log(`stdout: ${data}`);\n  });\n\n```\n\n### [execa](https://github.com%2Fsindresorhus%2Fexeca%23readme \"https://github.com/sindresorhus/execa#readme\")\n\n`execa`和`cross-spawn`类似，它的特点是提供了`Promsie`支持，`@vue/cli`用的就是它。\n\n```javascript\nconst execa = require('execa');\n(async ()=>{\n    const {stdout} = await execa('find', [\"-name=*.js\"]);\n\tconsole.log(stdout);\n})()\n\n```\n\n### [shelljs](https://github.com%2Fshelljs%2Fshelljs \"https://github.com/shelljs/shelljs\")\n\n当需要运行一些linux命令,比如windows不支持的`find`命令，可以使用`shelljs`\n\n```lua\nvar shell = require('shelljs');\nconsole.log(shell.find('*.js').stdout)\n```\n\n也可以直接用它执行命令：\n\n```bash\nshell.exec(`cd ${process.cwd()}/ && yarn install`);\n```\n\n输出\n--\n\n类型明晰的log输出能让使用者更容易上手\n\n### [chalk](https://github.com%2Fchalk%2Fchalk%23readme \"https://github.com/chalk/chalk#readme\")\n\n`create-react-app`中大量使用了`chalk`给log增加颜色\n\n```javascript\n console.log(\n        `    Only ${chalk.green('<project-directory>')} is required.`\n      );\n      console.log();\n      console.log(\n        `    A custom ${chalk.cyan('--scripts-version')} can be one of:`\n      );\n```\n\n类似的还有[colors](https://github.com%2FMarak%2Fcolors.js \"https://github.com/Marak/colors.js\")\n\n### signale\n\n如果觉得在`console.log`里拼不同颜色的字符串太麻烦了，还有一款开箱即用的log工具`signale`\n\n```ini\nconst signale = require(\"signale\");\n signale.success(\n            `webpack配置已弹出，可自定义webpack配置，继续开发~`\n          )\n```\n\n![default-loggers.png](../imgs/47adc712f1a34ef79eaf2b5eb691bcdc.png)\n\n### [ora](https://github.com%2Fsindresorhus%2Fora%23readme \"https://github.com/sindresorhus/ora#readme\")\n\n一个展示loading的工具：\n\n![screenshot-2.gif](../imgs/3709d5cc20cd4f3b925887c5a9c72d51.png)\n\nv6.x版本后ora是[pure ESM](https://gist.github.com%2Fsindresorhus%2Fa39789f98801d908bbc7ff3ecc99d99c \"https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\")的，node版本高于12.2，并且以`import`引入\n\n```ini\nimport ora from 'ora'\n\nconst spinner = ora('Loading unicorns').start();\n\nsetTimeout(() => {\n\tspinner.color = 'yellow';\n\tspinner.text = 'Loading rainbows';\n\tsetTimeout(()=>{\n\t\tspinner.succeed('success')\n\t},1000)\n}, 1000);\n```\n\n工具\n--\n\n### [semver](https://github.com%2Fnpm%2Fnode-semver%23readme \"https://github.com/npm/node-semver#readme\")\n\n版本比较工具，比如用来检测cli版本或node版本\n\n```javascript\nconst semver = require('semver')\n\nsemver.valid('1.2.3') // '1.2.3'\nsemver.valid('a.b.c') // null\nsemver.clean('  =v1.2.3   ') // '1.2.3'\nsemver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true\nsemver.gt('1.2.3', '9.8.7') // false\nsemver.lt('1.2.3', '9.8.7') // true\n```\n\n### [change-case](https://github.com%2Fblakeembrey%2Fchange-case \"https://github.com/blakeembrey/change-case\")\n\n字符串转换工具，可以轻易地将字符转转换成各种命名格式，比如\n\n```perl\ndotCase(\"test string\"); \n//=> \"test.string\"\n\ncamelCase(\"test string\");\n//=> \"testString\"\n```\n\n### [globby](https://github.com%2Fsindresorhus%2Fglobby%23readme \"https://github.com/sindresorhus/globby#readme\")\n\n通配符匹配工具\n\n```python\nimport {globby} from 'globby';\n\n(async () => {\n\tconst paths = await globby('images', {\n\t\texpandDirectories: {\n\t\t\tfiles: ['cat', 'unicorn', '*.jpg'],\n\t\t\textensions: ['png']\n\t\t}\n\t});\n\n\tconsole.log(paths);\n\t//=> ['cat.png', 'unicorn.png', 'cow.jpg', 'rainbow.jpg']\n})();\n```\n\n### [minimist](https://github.com%2Fsubstack%2Fminimist \"https://github.com/substack/minimist\")\n\n解析命令参数和选项的便捷工具\n\n```ini\nvar argv = require('minimist')(process.argv.slice(2));\nconsole.log(argv);\n```\n\n```yaml\n$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz\n{ _: [ 'foo', 'bar', 'baz' ],\n  x: 3,\n  y: 4,\n  n: 5,\n  a: true,\n  b: true,\n  c: true,\n  beep: 'boop' }\n```\n\n以上就是cli开发过程中比较常用的几个小工具，后续将一步步介绍如何开发一个cli。","slug":"前端脚手架：从入门到进阶——CLI常用的npm包(三)","published":1,"updated":"2024-04-04T15:27:03.282Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhy005ihajf9mljf3j4","content":"<p>这是我参与11月更文挑战的第12天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>cli免不了需要手动运行一些命令，或者打印一些提示，或者做一些比较、字符处理等，社区里已经有了一些非常优秀的轮子，这篇文章便介绍这些小工具。</p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><p>cli常常需要运行一些命令，虽然nodejs也提供了 <code>child_process.spawn</code>，但是<a href=\"http://nodejs.cn%2Fapi%2Fchild_process.html%23spawning-bat-and-cmd-files-on-windows\" title=\"http://nodejs.cn/api/child_process.html#spawning-bat-and-cmd-files-on-windows\">有着跨平台的问题</a>,下面推荐几个更好的工具</p>\n<h3 id=\"cross-spawn\"><a href=\"#cross-spawn\" class=\"headerlink\" title=\"cross-spawn\"></a><a href=\"https://github.com%2Fmoxystudio%2Fnode-cross-spawn\" title=\"https://github.com/moxystudio/node-cross-spawn\">cross-spawn</a></h3><p><code>create-react-app</code>和<code>umi</code>都用了<code>cross-spawn</code>,api语法和<code>child_process.spawn</code>一样 同步用法</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">spawn</span> = require(<span class=\"string\">&quot;cross-spawn&quot;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">const <span class=\"attr\">result</span> = spawn.sync(<span class=\"string\">&#x27;npm&#x27;</span>, [<span class=\"string\">&#x27;list&#x27;</span>,  <span class=\"string\">&#x27;-depth&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>])<span class=\"comment\">;</span></span><br><span class=\"line\">console.log(result.output.join(&#x27;&#x27;))</span><br></pre></td></tr></table></figure>\n\n<p>异步用法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;npm&#x27;</span>, [<span class=\"string\">&#x27;list&#x27;</span>,  <span class=\"string\">&#x27;-depth&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>]);</span><br><span class=\"line\">child.<span class=\"property\">stdout</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`stdout: <span class=\"subst\">$&#123;data&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"execa\"><a href=\"#execa\" class=\"headerlink\" title=\"execa\"></a><a href=\"https://github.com%2Fsindresorhus%2Fexeca%23readme\" title=\"https://github.com/sindresorhus/execa#readme\">execa</a></h3><p><code>execa</code>和<code>cross-spawn</code>类似，它的特点是提供了<code>Promsie</code>支持，<code>@vue/cli</code>用的就是它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> execa = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;execa&#x27;</span>);</span><br><span class=\"line\">(<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;stdout&#125; = <span class=\"keyword\">await</span> <span class=\"title function_\">execa</span>(<span class=\"string\">&#x27;find&#x27;</span>, [<span class=\"string\">&quot;-name=*.js&quot;</span>]);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stdout);</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"shelljs\"><a href=\"#shelljs\" class=\"headerlink\" title=\"shelljs\"></a><a href=\"https://github.com%2Fshelljs%2Fshelljs\" title=\"https://github.com/shelljs/shelljs\">shelljs</a></h3><p>当需要运行一些linux命令,比如windows不支持的<code>find</code>命令，可以使用<code>shelljs</code></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var shell = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;shelljs&#x27;</span>);</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(shell.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;*.js&#x27;</span>).<span class=\"built_in\">stdout</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以直接用它执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell.exec(`<span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;process.cwd()&#125;</span>/ &amp;&amp; yarn install`);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>类型明晰的log输出能让使用者更容易上手</p>\n<h3 id=\"chalk\"><a href=\"#chalk\" class=\"headerlink\" title=\"chalk\"></a><a href=\"https://github.com%2Fchalk%2Fchalk%23readme\" title=\"https://github.com/chalk/chalk#readme\">chalk</a></h3><p><code>create-react-app</code>中大量使用了<code>chalk</code>给log增加颜色</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">       <span class=\"string\">`    Only <span class=\"subst\">$&#123;chalk.green(<span class=\"string\">&#x27;&lt;project-directory&gt;&#x27;</span>)&#125;</span> is required.`</span></span><br><span class=\"line\">     );</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>();</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">       <span class=\"string\">`    A custom <span class=\"subst\">$&#123;chalk.cyan(<span class=\"string\">&#x27;--scripts-version&#x27;</span>)&#125;</span> can be one of:`</span></span><br><span class=\"line\">     );</span><br></pre></td></tr></table></figure>\n\n<p>类似的还有<a href=\"https://github.com%2FMarak%2Fcolors.js\" title=\"https://github.com/Marak/colors.js\">colors</a></p>\n<h3 id=\"signale\"><a href=\"#signale\" class=\"headerlink\" title=\"signale\"></a>signale</h3><p>如果觉得在<code>console.log</code>里拼不同颜色的字符串太麻烦了，还有一款开箱即用的log工具<code>signale</code></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">signale</span> = require(<span class=\"string\">&quot;signale&quot;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"> signale.success(</span><br><span class=\"line\">            `webpack配置已弹出，可自定义webpack配置，继续开发~`</span><br><span class=\"line\">          )</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/47adc712f1a34ef79eaf2b5eb691bcdc.png\" alt=\"default-loggers.png\"></p>\n<h3 id=\"ora\"><a href=\"#ora\" class=\"headerlink\" title=\"ora\"></a><a href=\"https://github.com%2Fsindresorhus%2Fora%23readme\" title=\"https://github.com/sindresorhus/ora#readme\">ora</a></h3><p>一个展示loading的工具：</p>\n<p><img src=\"/../imgs/3709d5cc20cd4f3b925887c5a9c72d51.png\" alt=\"screenshot-2.gif\"></p>\n<p>v6.x版本后ora是<a href=\"https://gist.github.com%2Fsindresorhus%2Fa39789f98801d908bbc7ff3ecc99d99c\" title=\"https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\">pure ESM</a>的，node版本高于12.2，并且以<code>import</code>引入</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import ora from &#x27;ora&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const <span class=\"attr\">spinner</span> = ora(<span class=\"string\">&#x27;Loading unicorns&#x27;</span>).start()<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"attr\">spinner.color</span> = <span class=\"string\">&#x27;yellow&#x27;</span><span class=\"comment\">;</span></span><br><span class=\"line\">\t<span class=\"attr\">spinner.text</span> = <span class=\"string\">&#x27;Loading rainbows&#x27;</span><span class=\"comment\">;</span></span><br><span class=\"line\">\tsetTimeout(()=&gt;&#123;</span><br><span class=\"line\">\t\tspinner.succeed(&#x27;success&#x27;)</span><br><span class=\"line\">\t&#125;,1000)</span><br><span class=\"line\">&#125;, 1000)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h3 id=\"semver\"><a href=\"#semver\" class=\"headerlink\" title=\"semver\"></a><a href=\"https://github.com%2Fnpm%2Fnode-semver%23readme\" title=\"https://github.com/npm/node-semver#readme\">semver</a></h3><p>版本比较工具，比如用来检测cli版本或node版本</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> semver = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;semver&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">semver.<span class=\"title function_\">valid</span>(<span class=\"string\">&#x27;1.2.3&#x27;</span>) <span class=\"comment\">// &#x27;1.2.3&#x27;</span></span><br><span class=\"line\">semver.<span class=\"title function_\">valid</span>(<span class=\"string\">&#x27;a.b.c&#x27;</span>) <span class=\"comment\">// null</span></span><br><span class=\"line\">semver.<span class=\"title function_\">clean</span>(<span class=\"string\">&#x27;  =v1.2.3   &#x27;</span>) <span class=\"comment\">// &#x27;1.2.3&#x27;</span></span><br><span class=\"line\">semver.<span class=\"title function_\">satisfies</span>(<span class=\"string\">&#x27;1.2.3&#x27;</span>, <span class=\"string\">&#x27;1.x || &gt;=2.5.0 || 5.0.0 - 7.2.3&#x27;</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">semver.<span class=\"title function_\">gt</span>(<span class=\"string\">&#x27;1.2.3&#x27;</span>, <span class=\"string\">&#x27;9.8.7&#x27;</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">semver.<span class=\"title function_\">lt</span>(<span class=\"string\">&#x27;1.2.3&#x27;</span>, <span class=\"string\">&#x27;9.8.7&#x27;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"change-case\"><a href=\"#change-case\" class=\"headerlink\" title=\"change-case\"></a><a href=\"https://github.com%2Fblakeembrey%2Fchange-case\" title=\"https://github.com/blakeembrey/change-case\">change-case</a></h3><p>字符串转换工具，可以轻易地将字符转转换成各种命名格式，比如</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotCase(<span class=\"string\">&quot;test string&quot;</span>); </span><br><span class=\"line\"><span class=\"regexp\">//</span>=&gt; <span class=\"string\">&quot;test.string&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">camelCase(<span class=\"string\">&quot;test string&quot;</span>);</span><br><span class=\"line\"><span class=\"regexp\">//</span>=&gt; <span class=\"string\">&quot;testString&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"globby\"><a href=\"#globby\" class=\"headerlink\" title=\"globby\"></a><a href=\"https://github.com%2Fsindresorhus%2Fglobby%23readme\" title=\"https://github.com/sindresorhus/globby#readme\">globby</a></h3><p>通配符匹配工具</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;globby&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;globby&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">\tconst paths = <span class=\"keyword\">await</span> globby(<span class=\"string\">&#x27;images&#x27;</span>, &#123;</span><br><span class=\"line\">\t\texpandDirectories: &#123;</span><br><span class=\"line\">\t\t\tfiles: [<span class=\"string\">&#x27;cat&#x27;</span>, <span class=\"string\">&#x27;unicorn&#x27;</span>, <span class=\"string\">&#x27;*.jpg&#x27;</span>],</span><br><span class=\"line\">\t\t\textensions: [<span class=\"string\">&#x27;png&#x27;</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tconsole.log(paths);</span><br><span class=\"line\">\t//=&gt; [<span class=\"string\">&#x27;cat.png&#x27;</span>, <span class=\"string\">&#x27;unicorn.png&#x27;</span>, <span class=\"string\">&#x27;cow.jpg&#x27;</span>, <span class=\"string\">&#x27;rainbow.jpg&#x27;</span>]</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"minimist\"><a href=\"#minimist\" class=\"headerlink\" title=\"minimist\"></a><a href=\"https://github.com%2Fsubstack%2Fminimist\" title=\"https://github.com/substack/minimist\">minimist</a></h3><p>解析命令参数和选项的便捷工具</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"attr\">argv</span> = require(<span class=\"string\">&#x27;minimist&#x27;</span>)(process.argv.slice(<span class=\"number\">2</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">console.log(argv)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">node</span> <span class=\"string\">example/parse.js</span> <span class=\"string\">-x</span> <span class=\"number\">3</span> <span class=\"string\">-y</span> <span class=\"number\">4</span> <span class=\"string\">-n5</span> <span class=\"string\">-abc</span> <span class=\"string\">--beep=boop</span> <span class=\"string\">foo</span> <span class=\"string\">bar</span> <span class=\"string\">baz</span></span><br><span class=\"line\">&#123; <span class=\"attr\">_:</span> [ <span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>, <span class=\"string\">&#x27;baz&#x27;</span> ],</span><br><span class=\"line\">  <span class=\"attr\">x:</span> <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"attr\">y:</span> <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"attr\">n:</span> <span class=\"number\">5</span>,</span><br><span class=\"line\">  <span class=\"attr\">a:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">b:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">c:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">beep:</span> <span class=\"string\">&#x27;boop&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上就是cli开发过程中比较常用的几个小工具，后续将一步步介绍如何开发一个cli。</p>\n","length":3151,"excerpt":"","more":"<p>这是我参与11月更文挑战的第12天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>cli免不了需要手动运行一些命令，或者打印一些提示，或者做一些比较、字符处理等，社区里已经有了一些非常优秀的轮子，这篇文章便介绍这些小工具。</p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><p>cli常常需要运行一些命令，虽然nodejs也提供了 <code>child_process.spawn</code>，但是<a href=\"http://nodejs.cn%2Fapi%2Fchild_process.html%23spawning-bat-and-cmd-files-on-windows\" title=\"http://nodejs.cn/api/child_process.html#spawning-bat-and-cmd-files-on-windows\">有着跨平台的问题</a>,下面推荐几个更好的工具</p>\n<h3 id=\"cross-spawn\"><a href=\"#cross-spawn\" class=\"headerlink\" title=\"cross-spawn\"></a><a href=\"https://github.com%2Fmoxystudio%2Fnode-cross-spawn\" title=\"https://github.com/moxystudio/node-cross-spawn\">cross-spawn</a></h3><p><code>create-react-app</code>和<code>umi</code>都用了<code>cross-spawn</code>,api语法和<code>child_process.spawn</code>一样 同步用法</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">spawn</span> = require(<span class=\"string\">&quot;cross-spawn&quot;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">const <span class=\"attr\">result</span> = spawn.sync(<span class=\"string\">&#x27;npm&#x27;</span>, [<span class=\"string\">&#x27;list&#x27;</span>,  <span class=\"string\">&#x27;-depth&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>])<span class=\"comment\">;</span></span><br><span class=\"line\">console.log(result.output.join(&#x27;&#x27;))</span><br></pre></td></tr></table></figure>\n\n<p>异步用法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;npm&#x27;</span>, [<span class=\"string\">&#x27;list&#x27;</span>,  <span class=\"string\">&#x27;-depth&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>]);</span><br><span class=\"line\">child.<span class=\"property\">stdout</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`stdout: <span class=\"subst\">$&#123;data&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"execa\"><a href=\"#execa\" class=\"headerlink\" title=\"execa\"></a><a href=\"https://github.com%2Fsindresorhus%2Fexeca%23readme\" title=\"https://github.com/sindresorhus/execa#readme\">execa</a></h3><p><code>execa</code>和<code>cross-spawn</code>类似，它的特点是提供了<code>Promsie</code>支持，<code>@vue/cli</code>用的就是它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> execa = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;execa&#x27;</span>);</span><br><span class=\"line\">(<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;stdout&#125; = <span class=\"keyword\">await</span> <span class=\"title function_\">execa</span>(<span class=\"string\">&#x27;find&#x27;</span>, [<span class=\"string\">&quot;-name=*.js&quot;</span>]);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stdout);</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"shelljs\"><a href=\"#shelljs\" class=\"headerlink\" title=\"shelljs\"></a><a href=\"https://github.com%2Fshelljs%2Fshelljs\" title=\"https://github.com/shelljs/shelljs\">shelljs</a></h3><p>当需要运行一些linux命令,比如windows不支持的<code>find</code>命令，可以使用<code>shelljs</code></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var shell = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;shelljs&#x27;</span>);</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(shell.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;*.js&#x27;</span>).<span class=\"built_in\">stdout</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以直接用它执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell.exec(`<span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;process.cwd()&#125;</span>/ &amp;&amp; yarn install`);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>类型明晰的log输出能让使用者更容易上手</p>\n<h3 id=\"chalk\"><a href=\"#chalk\" class=\"headerlink\" title=\"chalk\"></a><a href=\"https://github.com%2Fchalk%2Fchalk%23readme\" title=\"https://github.com/chalk/chalk#readme\">chalk</a></h3><p><code>create-react-app</code>中大量使用了<code>chalk</code>给log增加颜色</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">       <span class=\"string\">`    Only <span class=\"subst\">$&#123;chalk.green(<span class=\"string\">&#x27;&lt;project-directory&gt;&#x27;</span>)&#125;</span> is required.`</span></span><br><span class=\"line\">     );</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>();</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">       <span class=\"string\">`    A custom <span class=\"subst\">$&#123;chalk.cyan(<span class=\"string\">&#x27;--scripts-version&#x27;</span>)&#125;</span> can be one of:`</span></span><br><span class=\"line\">     );</span><br></pre></td></tr></table></figure>\n\n<p>类似的还有<a href=\"https://github.com%2FMarak%2Fcolors.js\" title=\"https://github.com/Marak/colors.js\">colors</a></p>\n<h3 id=\"signale\"><a href=\"#signale\" class=\"headerlink\" title=\"signale\"></a>signale</h3><p>如果觉得在<code>console.log</code>里拼不同颜色的字符串太麻烦了，还有一款开箱即用的log工具<code>signale</code></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">signale</span> = require(<span class=\"string\">&quot;signale&quot;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"> signale.success(</span><br><span class=\"line\">            `webpack配置已弹出，可自定义webpack配置，继续开发~`</span><br><span class=\"line\">          )</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/47adc712f1a34ef79eaf2b5eb691bcdc.png\" alt=\"default-loggers.png\"></p>\n<h3 id=\"ora\"><a href=\"#ora\" class=\"headerlink\" title=\"ora\"></a><a href=\"https://github.com%2Fsindresorhus%2Fora%23readme\" title=\"https://github.com/sindresorhus/ora#readme\">ora</a></h3><p>一个展示loading的工具：</p>\n<p><img src=\"/../imgs/3709d5cc20cd4f3b925887c5a9c72d51.png\" alt=\"screenshot-2.gif\"></p>\n<p>v6.x版本后ora是<a href=\"https://gist.github.com%2Fsindresorhus%2Fa39789f98801d908bbc7ff3ecc99d99c\" title=\"https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\">pure ESM</a>的，node版本高于12.2，并且以<code>import</code>引入</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import ora from &#x27;ora&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const <span class=\"attr\">spinner</span> = ora(<span class=\"string\">&#x27;Loading unicorns&#x27;</span>).start()<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"attr\">spinner.color</span> = <span class=\"string\">&#x27;yellow&#x27;</span><span class=\"comment\">;</span></span><br><span class=\"line\">\t<span class=\"attr\">spinner.text</span> = <span class=\"string\">&#x27;Loading rainbows&#x27;</span><span class=\"comment\">;</span></span><br><span class=\"line\">\tsetTimeout(()=&gt;&#123;</span><br><span class=\"line\">\t\tspinner.succeed(&#x27;success&#x27;)</span><br><span class=\"line\">\t&#125;,1000)</span><br><span class=\"line\">&#125;, 1000)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h3 id=\"semver\"><a href=\"#semver\" class=\"headerlink\" title=\"semver\"></a><a href=\"https://github.com%2Fnpm%2Fnode-semver%23readme\" title=\"https://github.com/npm/node-semver#readme\">semver</a></h3><p>版本比较工具，比如用来检测cli版本或node版本</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> semver = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;semver&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">semver.<span class=\"title function_\">valid</span>(<span class=\"string\">&#x27;1.2.3&#x27;</span>) <span class=\"comment\">// &#x27;1.2.3&#x27;</span></span><br><span class=\"line\">semver.<span class=\"title function_\">valid</span>(<span class=\"string\">&#x27;a.b.c&#x27;</span>) <span class=\"comment\">// null</span></span><br><span class=\"line\">semver.<span class=\"title function_\">clean</span>(<span class=\"string\">&#x27;  =v1.2.3   &#x27;</span>) <span class=\"comment\">// &#x27;1.2.3&#x27;</span></span><br><span class=\"line\">semver.<span class=\"title function_\">satisfies</span>(<span class=\"string\">&#x27;1.2.3&#x27;</span>, <span class=\"string\">&#x27;1.x || &gt;=2.5.0 || 5.0.0 - 7.2.3&#x27;</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">semver.<span class=\"title function_\">gt</span>(<span class=\"string\">&#x27;1.2.3&#x27;</span>, <span class=\"string\">&#x27;9.8.7&#x27;</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">semver.<span class=\"title function_\">lt</span>(<span class=\"string\">&#x27;1.2.3&#x27;</span>, <span class=\"string\">&#x27;9.8.7&#x27;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"change-case\"><a href=\"#change-case\" class=\"headerlink\" title=\"change-case\"></a><a href=\"https://github.com%2Fblakeembrey%2Fchange-case\" title=\"https://github.com/blakeembrey/change-case\">change-case</a></h3><p>字符串转换工具，可以轻易地将字符转转换成各种命名格式，比如</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotCase(<span class=\"string\">&quot;test string&quot;</span>); </span><br><span class=\"line\"><span class=\"regexp\">//</span>=&gt; <span class=\"string\">&quot;test.string&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">camelCase(<span class=\"string\">&quot;test string&quot;</span>);</span><br><span class=\"line\"><span class=\"regexp\">//</span>=&gt; <span class=\"string\">&quot;testString&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"globby\"><a href=\"#globby\" class=\"headerlink\" title=\"globby\"></a><a href=\"https://github.com%2Fsindresorhus%2Fglobby%23readme\" title=\"https://github.com/sindresorhus/globby#readme\">globby</a></h3><p>通配符匹配工具</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;globby&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;globby&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">\tconst paths = <span class=\"keyword\">await</span> globby(<span class=\"string\">&#x27;images&#x27;</span>, &#123;</span><br><span class=\"line\">\t\texpandDirectories: &#123;</span><br><span class=\"line\">\t\t\tfiles: [<span class=\"string\">&#x27;cat&#x27;</span>, <span class=\"string\">&#x27;unicorn&#x27;</span>, <span class=\"string\">&#x27;*.jpg&#x27;</span>],</span><br><span class=\"line\">\t\t\textensions: [<span class=\"string\">&#x27;png&#x27;</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tconsole.log(paths);</span><br><span class=\"line\">\t//=&gt; [<span class=\"string\">&#x27;cat.png&#x27;</span>, <span class=\"string\">&#x27;unicorn.png&#x27;</span>, <span class=\"string\">&#x27;cow.jpg&#x27;</span>, <span class=\"string\">&#x27;rainbow.jpg&#x27;</span>]</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"minimist\"><a href=\"#minimist\" class=\"headerlink\" title=\"minimist\"></a><a href=\"https://github.com%2Fsubstack%2Fminimist\" title=\"https://github.com/substack/minimist\">minimist</a></h3><p>解析命令参数和选项的便捷工具</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"attr\">argv</span> = require(<span class=\"string\">&#x27;minimist&#x27;</span>)(process.argv.slice(<span class=\"number\">2</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">console.log(argv)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">node</span> <span class=\"string\">example/parse.js</span> <span class=\"string\">-x</span> <span class=\"number\">3</span> <span class=\"string\">-y</span> <span class=\"number\">4</span> <span class=\"string\">-n5</span> <span class=\"string\">-abc</span> <span class=\"string\">--beep=boop</span> <span class=\"string\">foo</span> <span class=\"string\">bar</span> <span class=\"string\">baz</span></span><br><span class=\"line\">&#123; <span class=\"attr\">_:</span> [ <span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>, <span class=\"string\">&#x27;baz&#x27;</span> ],</span><br><span class=\"line\">  <span class=\"attr\">x:</span> <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"attr\">y:</span> <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"attr\">n:</span> <span class=\"number\">5</span>,</span><br><span class=\"line\">  <span class=\"attr\">a:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">b:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">c:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">beep:</span> <span class=\"string\">&#x27;boop&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上就是cli开发过程中比较常用的几个小工具，后续将一步步介绍如何开发一个cli。</p>\n"},{"title":"前端脚手架：从入门到进阶——CLI常用的npm包(二)","date":"2021-11-10T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第11天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n上一节介绍了两个交互的库，这一节再介绍文件与模板操作的几个库\n\n文件操作\n----\n\n脚手架运行过程中的文件操作可能会比较繁杂，而node原生的fs api并不友好，借助优秀的文件操作库能帮助我们事半功倍。\n\n### [fs-extra](https://github.com%2Fjprichardson%2Fnode-fs-extra \"https://github.com/jprichardson/node-fs-extra\")\n\nfs-extra对原生的fs对象进行了扩展，增加了一些方便的api，比如创建多个目录，复制，移动、读写json等，api调用方式也很简单，支持同步和异步，并且增加了Promise支持：\n\n```javascript\nconst fs = require('fs-extra')\n\nconst src = '/tmp/file.txt'\nconst dest = '/tmp/this/path/does/not/exist/file.txt'\n// 移动\nfs.move(src, dest)\n.then(() => {\n  console.log('success!')\n})\n.catch(err => {\n  console.error(err)\n})\n// 复制\nasync function example () {\n  try {\n    await fs.copy('/tmp/myfile', '/tmp/mynewfile')\n    console.log('success!')\n  } catch (err) {\n    console.error(err)\n  }\n}\n\nexample()\n\n// 同步删除\nfs.emptyDirSync('/tmp/some/dir')\n```\n\n### [mem-fs-editor](https://github.com%2Fsboudrias%2Fmem-fs-editor \"https://github.com/sboudrias/mem-fs-editor\")\n\nYeoman内置的文件操作库就是men-fs-editor,不仅增加了一些友好的api，还能能方便我们对模板文件进行操作。\n\n```ini\nvar memFs = require(\"mem-fs\");\nvar editor = require(\"mem-fs-editor\");\n\nvar store = memFs.create();\nvar fs = editor.create(store);\n\nfs.write(\"somefile.js\", \"var a = 1;\");\n\n\n\n\n```\n\n它的模板语法为[ejs](http://ejs.co%2F \"http://ejs.co/\")\n\n```ini\nconst filepath = path.join(__dirname, 'fixtures/file-tpl.txt'); \nconst newPath = '/new/path/file.txt';  \nfs.copyTpl(filepath, newPath, {name: 'new content'});\n```\n\n另外它能对文件进行批操作全部完成后再一次性写入磁盘，能够避免过程中对文件的多次操作造成的意外冲突。\n\n```javascript\n\nconst filesystem = require('fs');\n\nfs.append('./append.txt', 'b', {create: true});\nfilesystem.stat('./append.txt',(err)=>{\n  if(err) {\n    console.log('commit前：文件不存在');\n    fs.commit(()=>{\n      console.log('commit后',filesystem.statSync('./append.txt'))\n    })\n  }\n\n})\n```\n\n![image.png](../imgs/744095f84fc54d0faa6a002ecd90045f.png)\n\n模板操作\n----\n\n### [handlebars](https://github.com%2Fhandlebars-lang%2Fhandlebars.js \"https://github.com/handlebars-lang/handlebars.js\")\n\nhandlebars也是一个常见的模板工具\n\n```css\nvar Handlebars = require('handlebars');\nvar source = \"<p>Hello, my name is {{name}}. I am from {{hometown}}. I have \" +\n             \"{{kids.length}} kids:</p>\" +\n             \"<ul>{{#kids}}<li>{{name}} is {{age}}</li>{{/kids}}</ul>\";\nvar template = Handlebars.compile(source);\n\nvar data = { \"name\": \"Alan\", \"hometown\": \"Somewhere, TX\",\n             \"kids\": [{\"name\": \"Jimmy\", \"age\": \"12\"}, {\"name\": \"Sally\", \"age\": \"4\"}]};\nvar result = template(data);\n```\n\n条件判断：\n\npostcss.config.js.hbs:\n\n```yaml\nmodule.exports = {\n\tplugins: [\n\t\trequire('autoprefixer')(){{#if h5}},\n\t\trequire('postcss-px-to-viewport')({\n\t\t\tviewportWidth: 375,\n\t\t\tviewportHeight: 667,\n\t\t\tunitPrecision: 5,\n\t\t\tviewportUnit: 'vw',\n\t\t\tselectorBlackList: ['NoVw'],\n\t\t\tminPixelValue: 1,\n\t\t\tmediaQuery: false\n\t\t})\n\t\t{{/if}}\n\t]\n};\n\n```\n\n### [download-git-repo](https://gitlab.com%2Fflippidippi%2Fdownload-git-repo%23readme \"https://gitlab.com/flippidippi/download-git-repo#readme\")\n\n用git仓库维护项目模板也是一个常见的做法，这个工具简化将一个git仓库下载到指定目录的过程。\n\n```javascript\ndownload(\n'https://mygitlab.com:flippidippi/download-git-repo-fixture#my-branch', \n'test/tmp', { clone: true }, function (err) {\n  console.log(err ? 'Error' : 'Success')\n})\n```\n\n### [plop](https://github.com%2Fplopjs%2Fplop \"https://github.com/plopjs/plop\")\n\n快速创建模板代码的工具，可以简单理解为[inquirer](https://github.com%2FSBoudrias%2FInquirer.js%2F \"https://github.com/SBoudrias/Inquirer.js/\") + [handlebar](https://github.com%2Fwycats%2Fhandlebars.js%2F \"https://github.com/wycats/handlebars.js/\")，当项目中有一些复杂且有标准的文件需要编写时，可以抽象这套标准通过template生成。\n\npackage.json\n\n```json\n \"scripts\": {\n    \"addComponent\": \"plop --plopfile ./plopfile.js\"\n  },\n  \"devDependencies\": {\n    \"change-case\": \"^4.1.2\",\n    \"plop\": \"^2.7.6\",\n  }\n```\n\nplopfile.js\n\n```php\nconst { pascalCase } = require(\"change-case\");\n\nmodule.exports = function (plop) {\n\tplop.setHelper('pascalCase', function (text) {\n\t\treturn pascalCase(text);\n\t});\n\tplop.setGenerator('component', {\n\t\t\n\t\tdescription: 'add a component',\n\t\tprompts: [{\n\t\t\ttype: 'input',\n\t\t\tname: 'name',\n\t\t\tmessage: 'component name'\n\t\t}],\n\t\tactions: [{\n\t\t\ttype: 'add',\n\t\t\tpath: 'src/components/{{pascalCase name}}/index.tsx',\n\t\t\ttemplateFile: 'templates/component.tsx.hbs'\n\t\t}]\n\t});\n};\n```\n\ntemplates/component.tsx.hbs\n\n```javascript\nimport { FC } from 'react';\nconst {{pascalCase name}}: FC = function (props) {\n  return <div>Component</div>;\n};\nexport default {{pascalCase name}};\n\n```\n\n运行命令\n\n```shell\n$ npm run addComponent\n\n> plop-demo@0.1.0 addComponent D:\\personal\\plop-demo\n> plop --plopfile ./plopfile.js\n\n? component name test\n✔  ++ \\src\\components\\Test\\index.tsx\n```\n\n生成文件\n\n![image.png](../imgs/f904fc883f7942fd809e7e09c84ac5ef.png)\n\n未完待续\n----\n\n以上就是文件和模板操作相关的几个常用第三方库。\n\n下一节介绍其他小工具。","source":"_posts/前端脚手架：从入门到进阶——CLI常用的npm包(二).md","raw":"---\n title: \"前端脚手架：从入门到进阶——CLI常用的npm包(二)\"\n date: 2021-11-11\n tags: [前端,JavaScript]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第11天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n上一节介绍了两个交互的库，这一节再介绍文件与模板操作的几个库\n\n文件操作\n----\n\n脚手架运行过程中的文件操作可能会比较繁杂，而node原生的fs api并不友好，借助优秀的文件操作库能帮助我们事半功倍。\n\n### [fs-extra](https://github.com%2Fjprichardson%2Fnode-fs-extra \"https://github.com/jprichardson/node-fs-extra\")\n\nfs-extra对原生的fs对象进行了扩展，增加了一些方便的api，比如创建多个目录，复制，移动、读写json等，api调用方式也很简单，支持同步和异步，并且增加了Promise支持：\n\n```javascript\nconst fs = require('fs-extra')\n\nconst src = '/tmp/file.txt'\nconst dest = '/tmp/this/path/does/not/exist/file.txt'\n// 移动\nfs.move(src, dest)\n.then(() => {\n  console.log('success!')\n})\n.catch(err => {\n  console.error(err)\n})\n// 复制\nasync function example () {\n  try {\n    await fs.copy('/tmp/myfile', '/tmp/mynewfile')\n    console.log('success!')\n  } catch (err) {\n    console.error(err)\n  }\n}\n\nexample()\n\n// 同步删除\nfs.emptyDirSync('/tmp/some/dir')\n```\n\n### [mem-fs-editor](https://github.com%2Fsboudrias%2Fmem-fs-editor \"https://github.com/sboudrias/mem-fs-editor\")\n\nYeoman内置的文件操作库就是men-fs-editor,不仅增加了一些友好的api，还能能方便我们对模板文件进行操作。\n\n```ini\nvar memFs = require(\"mem-fs\");\nvar editor = require(\"mem-fs-editor\");\n\nvar store = memFs.create();\nvar fs = editor.create(store);\n\nfs.write(\"somefile.js\", \"var a = 1;\");\n\n\n\n\n```\n\n它的模板语法为[ejs](http://ejs.co%2F \"http://ejs.co/\")\n\n```ini\nconst filepath = path.join(__dirname, 'fixtures/file-tpl.txt'); \nconst newPath = '/new/path/file.txt';  \nfs.copyTpl(filepath, newPath, {name: 'new content'});\n```\n\n另外它能对文件进行批操作全部完成后再一次性写入磁盘，能够避免过程中对文件的多次操作造成的意外冲突。\n\n```javascript\n\nconst filesystem = require('fs');\n\nfs.append('./append.txt', 'b', {create: true});\nfilesystem.stat('./append.txt',(err)=>{\n  if(err) {\n    console.log('commit前：文件不存在');\n    fs.commit(()=>{\n      console.log('commit后',filesystem.statSync('./append.txt'))\n    })\n  }\n\n})\n```\n\n![image.png](../imgs/744095f84fc54d0faa6a002ecd90045f.png)\n\n模板操作\n----\n\n### [handlebars](https://github.com%2Fhandlebars-lang%2Fhandlebars.js \"https://github.com/handlebars-lang/handlebars.js\")\n\nhandlebars也是一个常见的模板工具\n\n```css\nvar Handlebars = require('handlebars');\nvar source = \"<p>Hello, my name is {{name}}. I am from {{hometown}}. I have \" +\n             \"{{kids.length}} kids:</p>\" +\n             \"<ul>{{#kids}}<li>{{name}} is {{age}}</li>{{/kids}}</ul>\";\nvar template = Handlebars.compile(source);\n\nvar data = { \"name\": \"Alan\", \"hometown\": \"Somewhere, TX\",\n             \"kids\": [{\"name\": \"Jimmy\", \"age\": \"12\"}, {\"name\": \"Sally\", \"age\": \"4\"}]};\nvar result = template(data);\n```\n\n条件判断：\n\npostcss.config.js.hbs:\n\n```yaml\nmodule.exports = {\n\tplugins: [\n\t\trequire('autoprefixer')(){{#if h5}},\n\t\trequire('postcss-px-to-viewport')({\n\t\t\tviewportWidth: 375,\n\t\t\tviewportHeight: 667,\n\t\t\tunitPrecision: 5,\n\t\t\tviewportUnit: 'vw',\n\t\t\tselectorBlackList: ['NoVw'],\n\t\t\tminPixelValue: 1,\n\t\t\tmediaQuery: false\n\t\t})\n\t\t{{/if}}\n\t]\n};\n\n```\n\n### [download-git-repo](https://gitlab.com%2Fflippidippi%2Fdownload-git-repo%23readme \"https://gitlab.com/flippidippi/download-git-repo#readme\")\n\n用git仓库维护项目模板也是一个常见的做法，这个工具简化将一个git仓库下载到指定目录的过程。\n\n```javascript\ndownload(\n'https://mygitlab.com:flippidippi/download-git-repo-fixture#my-branch', \n'test/tmp', { clone: true }, function (err) {\n  console.log(err ? 'Error' : 'Success')\n})\n```\n\n### [plop](https://github.com%2Fplopjs%2Fplop \"https://github.com/plopjs/plop\")\n\n快速创建模板代码的工具，可以简单理解为[inquirer](https://github.com%2FSBoudrias%2FInquirer.js%2F \"https://github.com/SBoudrias/Inquirer.js/\") + [handlebar](https://github.com%2Fwycats%2Fhandlebars.js%2F \"https://github.com/wycats/handlebars.js/\")，当项目中有一些复杂且有标准的文件需要编写时，可以抽象这套标准通过template生成。\n\npackage.json\n\n```json\n \"scripts\": {\n    \"addComponent\": \"plop --plopfile ./plopfile.js\"\n  },\n  \"devDependencies\": {\n    \"change-case\": \"^4.1.2\",\n    \"plop\": \"^2.7.6\",\n  }\n```\n\nplopfile.js\n\n```php\nconst { pascalCase } = require(\"change-case\");\n\nmodule.exports = function (plop) {\n\tplop.setHelper('pascalCase', function (text) {\n\t\treturn pascalCase(text);\n\t});\n\tplop.setGenerator('component', {\n\t\t\n\t\tdescription: 'add a component',\n\t\tprompts: [{\n\t\t\ttype: 'input',\n\t\t\tname: 'name',\n\t\t\tmessage: 'component name'\n\t\t}],\n\t\tactions: [{\n\t\t\ttype: 'add',\n\t\t\tpath: 'src/components/{{pascalCase name}}/index.tsx',\n\t\t\ttemplateFile: 'templates/component.tsx.hbs'\n\t\t}]\n\t});\n};\n```\n\ntemplates/component.tsx.hbs\n\n```javascript\nimport { FC } from 'react';\nconst {{pascalCase name}}: FC = function (props) {\n  return <div>Component</div>;\n};\nexport default {{pascalCase name}};\n\n```\n\n运行命令\n\n```shell\n$ npm run addComponent\n\n> plop-demo@0.1.0 addComponent D:\\personal\\plop-demo\n> plop --plopfile ./plopfile.js\n\n? component name test\n✔  ++ \\src\\components\\Test\\index.tsx\n```\n\n生成文件\n\n![image.png](../imgs/f904fc883f7942fd809e7e09c84ac5ef.png)\n\n未完待续\n----\n\n以上就是文件和模板操作相关的几个常用第三方库。\n\n下一节介绍其他小工具。","slug":"前端脚手架：从入门到进阶——CLI常用的npm包(二)","published":1,"updated":"2024-04-04T15:27:03.276Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhy005mhajf0jloe7t3","content":"<p>这是我参与11月更文挑战的第11天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<p>上一节介绍了两个交互的库，这一节再介绍文件与模板操作的几个库</p>\n<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><p>脚手架运行过程中的文件操作可能会比较繁杂，而node原生的fs api并不友好，借助优秀的文件操作库能帮助我们事半功倍。</p>\n<h3 id=\"fs-extra\"><a href=\"#fs-extra\" class=\"headerlink\" title=\"fs-extra\"></a><a href=\"https://github.com%2Fjprichardson%2Fnode-fs-extra\" title=\"https://github.com/jprichardson/node-fs-extra\">fs-extra</a></h3><p>fs-extra对原生的fs对象进行了扩展，增加了一些方便的api，比如创建多个目录，复制，移动、读写json等，api调用方式也很简单，支持同步和异步，并且增加了Promise支持：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs-extra&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> src = <span class=\"string\">&#x27;/tmp/file.txt&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dest = <span class=\"string\">&#x27;/tmp/this/path/does/not/exist/file.txt&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 移动</span></span><br><span class=\"line\">fs.<span class=\"title function_\">move</span>(src, dest)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success!&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 复制</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">example</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> fs.<span class=\"title function_\">copy</span>(<span class=\"string\">&#x27;/tmp/myfile&#x27;</span>, <span class=\"string\">&#x27;/tmp/mynewfile&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success!&#x27;</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">example</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同步删除</span></span><br><span class=\"line\">fs.<span class=\"title function_\">emptyDirSync</span>(<span class=\"string\">&#x27;/tmp/some/dir&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mem-fs-editor\"><a href=\"#mem-fs-editor\" class=\"headerlink\" title=\"mem-fs-editor\"></a><a href=\"https://github.com%2Fsboudrias%2Fmem-fs-editor\" title=\"https://github.com/sboudrias/mem-fs-editor\">mem-fs-editor</a></h3><p>Yeoman内置的文件操作库就是men-fs-editor,不仅增加了一些友好的api，还能能方便我们对模板文件进行操作。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"attr\">memFs</span> = require(<span class=\"string\">&quot;mem-fs&quot;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">var <span class=\"attr\">editor</span> = require(<span class=\"string\">&quot;mem-fs-editor&quot;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">var <span class=\"attr\">store</span> = memFs.create()<span class=\"comment\">;</span></span><br><span class=\"line\">var <span class=\"attr\">fs</span> = editor.create(store)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">fs.write(&quot;somefile.js&quot;, &quot;var <span class=\"attr\">a</span> = <span class=\"number\">1</span><span class=\"comment\">;&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>它的模板语法为<a href=\"http://ejs.co%2F\" title=\"http://ejs.co/\">ejs</a></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">filepath</span> = path.join(__dirname, <span class=\"string\">&#x27;fixtures/file-tpl.txt&#x27;</span>)<span class=\"comment\">; </span></span><br><span class=\"line\">const <span class=\"attr\">newPath</span> = <span class=\"string\">&#x27;/new/path/file.txt&#x27;</span><span class=\"comment\">;  </span></span><br><span class=\"line\">fs.copyTpl(filepath, newPath, &#123;name: &#x27;new content&#x27;&#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>另外它能对文件进行批操作全部完成后再一次性写入磁盘，能够避免过程中对文件的多次操作造成的意外冲突。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> filesystem = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;./append.txt&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, &#123;<span class=\"attr\">create</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">filesystem.<span class=\"title function_\">stat</span>(<span class=\"string\">&#x27;./append.txt&#x27;</span>,<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;commit前：文件不存在&#x27;</span>);</span><br><span class=\"line\">    fs.<span class=\"title function_\">commit</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;commit后&#x27;</span>,filesystem.<span class=\"title function_\">statSync</span>(<span class=\"string\">&#x27;./append.txt&#x27;</span>))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/744095f84fc54d0faa6a002ecd90045f.png\" alt=\"image.png\"></p>\n<h2 id=\"模板操作\"><a href=\"#模板操作\" class=\"headerlink\" title=\"模板操作\"></a>模板操作</h2><h3 id=\"handlebars\"><a href=\"#handlebars\" class=\"headerlink\" title=\"handlebars\"></a><a href=\"https://github.com%2Fhandlebars-lang%2Fhandlebars.js\" title=\"https://github.com/handlebars-lang/handlebars.js\">handlebars</a></h3><p>handlebars也是一个常见的模板工具</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> Handlebars = require(&#x27;handlebars&#x27;);</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> source = &quot;&lt;<span class=\"selector-tag\">p</span>&gt;Hello, my name is &#123;&#123;name&#125;&#125;. <span class=\"selector-tag\">I</span> am <span class=\"selector-tag\">from</span> &#123;&#123;hometown&#125;&#125;. <span class=\"selector-tag\">I</span> have &quot; +</span><br><span class=\"line\">             &quot;&#123;&#123;kids<span class=\"selector-class\">.length</span>&#125;&#125; kids:&lt;/p&gt;<span class=\"string\">&quot; +</span></span><br><span class=\"line\"><span class=\"string\">             &quot;</span>&lt;ul&gt;&#123;&#123;<span class=\"selector-id\">#kids</span>&#125;&#125;&lt;<span class=\"selector-tag\">li</span>&gt;&#123;&#123;name&#125;&#125; is &#123;&#123;age&#125;&#125;&lt;/<span class=\"selector-tag\">li</span>&gt;&#123;&#123;/kids&#125;&#125;&lt;/<span class=\"selector-tag\">ul</span>&gt;&quot;;</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> template = Handlebars<span class=\"selector-class\">.compile</span>(source);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> data = &#123; &quot;name&quot;: <span class=\"string\">&quot;Alan&quot;</span>, <span class=\"string\">&quot;hometown&quot;</span>: <span class=\"string\">&quot;Somewhere, TX&quot;</span>,</span><br><span class=\"line\">             <span class=\"string\">&quot;kids&quot;</span>: [&#123;&quot;name&quot;: <span class=\"string\">&quot;Jimmy&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"string\">&quot;12&quot;</span>&#125;, &#123;&quot;name&quot;: <span class=\"string\">&quot;Sally&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"string\">&quot;4&quot;</span>&#125;]&#125;;</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> result = template(data);</span><br></pre></td></tr></table></figure>\n\n<p>条件判断：</p>\n<p>postcss.config.js.hbs:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">module.exports</span> <span class=\"string\">=</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins:</span> [</span><br><span class=\"line\">\t\t<span class=\"string\">require(&#x27;autoprefixer&#x27;)()<span class=\"template-variable\">&#123;&#123;#if h5&#125;&#125;</span></span>,</span><br><span class=\"line\">\t\t<span class=\"string\">require(&#x27;postcss-px-to-viewport&#x27;)(</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">viewportWidth:</span> <span class=\"number\">375</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">viewportHeight:</span> <span class=\"number\">667</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">unitPrecision:</span> <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">viewportUnit:</span> <span class=\"string\">&#x27;vw&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">selectorBlackList:</span> [<span class=\"string\">&#x27;NoVw&#x27;</span>],</span><br><span class=\"line\">\t\t\t<span class=\"attr\">minPixelValue:</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">mediaQuery:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;<span class=\"string\">)</span></span><br><span class=\"line\">\t\t&#123;&#123;<span class=\"string\">/if</span>&#125;&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;<span class=\"string\">;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"download-git-repo\"><a href=\"#download-git-repo\" class=\"headerlink\" title=\"download-git-repo\"></a><a href=\"https://gitlab.com%2Fflippidippi%2Fdownload-git-repo%23readme\" title=\"https://gitlab.com/flippidippi/download-git-repo#readme\">download-git-repo</a></h3><p>用git仓库维护项目模板也是一个常见的做法，这个工具简化将一个git仓库下载到指定目录的过程。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">download</span>(</span><br><span class=\"line\"><span class=\"string\">&#x27;https://mygitlab.com:flippidippi/download-git-repo-fixture#my-branch&#x27;</span>, </span><br><span class=\"line\"><span class=\"string\">&#x27;test/tmp&#x27;</span>, &#123; <span class=\"attr\">clone</span>: <span class=\"literal\">true</span> &#125;, <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err ? <span class=\"string\">&#x27;Error&#x27;</span> : <span class=\"string\">&#x27;Success&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"plop\"><a href=\"#plop\" class=\"headerlink\" title=\"plop\"></a><a href=\"https://github.com%2Fplopjs%2Fplop\" title=\"https://github.com/plopjs/plop\">plop</a></h3><p>快速创建模板代码的工具，可以简单理解为<a href=\"https://github.com%2FSBoudrias%2FInquirer.js%2F\" title=\"https://github.com/SBoudrias/Inquirer.js/\">inquirer</a> + <a href=\"https://github.com%2Fwycats%2Fhandlebars.js%2F\" title=\"https://github.com/wycats/handlebars.js/\">handlebar</a>，当项目中有一些复杂且有标准的文件需要编写时，可以抽象这套标准通过template生成。</p>\n<p>package.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">   <span class=\"attr\">&quot;addComponent&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;plop --plopfile ./plopfile.js&quot;</span></span><br><span class=\"line\"> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"> <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">   <span class=\"attr\">&quot;change-case&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^4.1.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">   <span class=\"attr\">&quot;plop&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.7.6&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"> <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>plopfile.js</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; pascalCase &#125; = <span class=\"keyword\">require</span>(<span class=\"string\">&quot;change-case&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">plop</span>) </span>&#123;</span><br><span class=\"line\">\tplop.<span class=\"title function_ invoke__\">setHelper</span>(<span class=\"string\">&#x27;pascalCase&#x27;</span>, function (text) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">pascalCase</span>(text);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tplop.<span class=\"title function_ invoke__\">setGenerator</span>(<span class=\"string\">&#x27;component&#x27;</span>, &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"attr\">description</span>: <span class=\"string\">&#x27;add a component&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">prompts</span>: [&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;name&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&#x27;component name&#x27;</span></span><br><span class=\"line\">\t\t&#125;],</span><br><span class=\"line\">\t\t<span class=\"attr\">actions</span>: [&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&#x27;add&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">path</span>: <span class=\"string\">&#x27;src/components/&#123;&#123;pascalCase name&#125;&#125;/index.tsx&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">templateFile</span>: <span class=\"string\">&#x27;templates/component.tsx.hbs&#x27;</span></span><br><span class=\"line\">\t\t&#125;]</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>templates&#x2F;component.tsx.hbs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">FC</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;&#123;pascalCase name&#125;&#125;: <span class=\"variable constant_\">FC</span> = <span class=\"keyword\">function</span> (<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Component<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;&#123;pascalCase name&#125;&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm run addComponent</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">plop-demo@0.1.0 addComponent D:\\personal\\plop-demo</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">plop --plopfile ./plopfile.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">? component name test</span><br><span class=\"line\">✔  ++ \\src\\components\\Test\\index.tsx</span><br></pre></td></tr></table></figure>\n\n<p>生成文件</p>\n<p><img src=\"/../imgs/f904fc883f7942fd809e7e09c84ac5ef.png\" alt=\"image.png\"></p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>以上就是文件和模板操作相关的几个常用第三方库。</p>\n<p>下一节介绍其他小工具。</p>\n","length":4484,"excerpt":"","more":"<p>这是我参与11月更文挑战的第11天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<p>上一节介绍了两个交互的库，这一节再介绍文件与模板操作的几个库</p>\n<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><p>脚手架运行过程中的文件操作可能会比较繁杂，而node原生的fs api并不友好，借助优秀的文件操作库能帮助我们事半功倍。</p>\n<h3 id=\"fs-extra\"><a href=\"#fs-extra\" class=\"headerlink\" title=\"fs-extra\"></a><a href=\"https://github.com%2Fjprichardson%2Fnode-fs-extra\" title=\"https://github.com/jprichardson/node-fs-extra\">fs-extra</a></h3><p>fs-extra对原生的fs对象进行了扩展，增加了一些方便的api，比如创建多个目录，复制，移动、读写json等，api调用方式也很简单，支持同步和异步，并且增加了Promise支持：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs-extra&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> src = <span class=\"string\">&#x27;/tmp/file.txt&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dest = <span class=\"string\">&#x27;/tmp/this/path/does/not/exist/file.txt&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 移动</span></span><br><span class=\"line\">fs.<span class=\"title function_\">move</span>(src, dest)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success!&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 复制</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">example</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> fs.<span class=\"title function_\">copy</span>(<span class=\"string\">&#x27;/tmp/myfile&#x27;</span>, <span class=\"string\">&#x27;/tmp/mynewfile&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success!&#x27;</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">example</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同步删除</span></span><br><span class=\"line\">fs.<span class=\"title function_\">emptyDirSync</span>(<span class=\"string\">&#x27;/tmp/some/dir&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mem-fs-editor\"><a href=\"#mem-fs-editor\" class=\"headerlink\" title=\"mem-fs-editor\"></a><a href=\"https://github.com%2Fsboudrias%2Fmem-fs-editor\" title=\"https://github.com/sboudrias/mem-fs-editor\">mem-fs-editor</a></h3><p>Yeoman内置的文件操作库就是men-fs-editor,不仅增加了一些友好的api，还能能方便我们对模板文件进行操作。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"attr\">memFs</span> = require(<span class=\"string\">&quot;mem-fs&quot;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">var <span class=\"attr\">editor</span> = require(<span class=\"string\">&quot;mem-fs-editor&quot;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">var <span class=\"attr\">store</span> = memFs.create()<span class=\"comment\">;</span></span><br><span class=\"line\">var <span class=\"attr\">fs</span> = editor.create(store)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">fs.write(&quot;somefile.js&quot;, &quot;var <span class=\"attr\">a</span> = <span class=\"number\">1</span><span class=\"comment\">;&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>它的模板语法为<a href=\"http://ejs.co%2F\" title=\"http://ejs.co/\">ejs</a></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">filepath</span> = path.join(__dirname, <span class=\"string\">&#x27;fixtures/file-tpl.txt&#x27;</span>)<span class=\"comment\">; </span></span><br><span class=\"line\">const <span class=\"attr\">newPath</span> = <span class=\"string\">&#x27;/new/path/file.txt&#x27;</span><span class=\"comment\">;  </span></span><br><span class=\"line\">fs.copyTpl(filepath, newPath, &#123;name: &#x27;new content&#x27;&#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>另外它能对文件进行批操作全部完成后再一次性写入磁盘，能够避免过程中对文件的多次操作造成的意外冲突。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> filesystem = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;./append.txt&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, &#123;<span class=\"attr\">create</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">filesystem.<span class=\"title function_\">stat</span>(<span class=\"string\">&#x27;./append.txt&#x27;</span>,<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;commit前：文件不存在&#x27;</span>);</span><br><span class=\"line\">    fs.<span class=\"title function_\">commit</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;commit后&#x27;</span>,filesystem.<span class=\"title function_\">statSync</span>(<span class=\"string\">&#x27;./append.txt&#x27;</span>))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/744095f84fc54d0faa6a002ecd90045f.png\" alt=\"image.png\"></p>\n<h2 id=\"模板操作\"><a href=\"#模板操作\" class=\"headerlink\" title=\"模板操作\"></a>模板操作</h2><h3 id=\"handlebars\"><a href=\"#handlebars\" class=\"headerlink\" title=\"handlebars\"></a><a href=\"https://github.com%2Fhandlebars-lang%2Fhandlebars.js\" title=\"https://github.com/handlebars-lang/handlebars.js\">handlebars</a></h3><p>handlebars也是一个常见的模板工具</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> Handlebars = require(&#x27;handlebars&#x27;);</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> source = &quot;&lt;<span class=\"selector-tag\">p</span>&gt;Hello, my name is &#123;&#123;name&#125;&#125;. <span class=\"selector-tag\">I</span> am <span class=\"selector-tag\">from</span> &#123;&#123;hometown&#125;&#125;. <span class=\"selector-tag\">I</span> have &quot; +</span><br><span class=\"line\">             &quot;&#123;&#123;kids<span class=\"selector-class\">.length</span>&#125;&#125; kids:&lt;/p&gt;<span class=\"string\">&quot; +</span></span><br><span class=\"line\"><span class=\"string\">             &quot;</span>&lt;ul&gt;&#123;&#123;<span class=\"selector-id\">#kids</span>&#125;&#125;&lt;<span class=\"selector-tag\">li</span>&gt;&#123;&#123;name&#125;&#125; is &#123;&#123;age&#125;&#125;&lt;/<span class=\"selector-tag\">li</span>&gt;&#123;&#123;/kids&#125;&#125;&lt;/<span class=\"selector-tag\">ul</span>&gt;&quot;;</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> template = Handlebars<span class=\"selector-class\">.compile</span>(source);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> data = &#123; &quot;name&quot;: <span class=\"string\">&quot;Alan&quot;</span>, <span class=\"string\">&quot;hometown&quot;</span>: <span class=\"string\">&quot;Somewhere, TX&quot;</span>,</span><br><span class=\"line\">             <span class=\"string\">&quot;kids&quot;</span>: [&#123;&quot;name&quot;: <span class=\"string\">&quot;Jimmy&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"string\">&quot;12&quot;</span>&#125;, &#123;&quot;name&quot;: <span class=\"string\">&quot;Sally&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"string\">&quot;4&quot;</span>&#125;]&#125;;</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> result = template(data);</span><br></pre></td></tr></table></figure>\n\n<p>条件判断：</p>\n<p>postcss.config.js.hbs:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">module.exports</span> <span class=\"string\">=</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins:</span> [</span><br><span class=\"line\">\t\t<span class=\"string\">require(&#x27;autoprefixer&#x27;)()<span class=\"template-variable\">&#123;&#123;#if h5&#125;&#125;</span></span>,</span><br><span class=\"line\">\t\t<span class=\"string\">require(&#x27;postcss-px-to-viewport&#x27;)(</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">viewportWidth:</span> <span class=\"number\">375</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">viewportHeight:</span> <span class=\"number\">667</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">unitPrecision:</span> <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">viewportUnit:</span> <span class=\"string\">&#x27;vw&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">selectorBlackList:</span> [<span class=\"string\">&#x27;NoVw&#x27;</span>],</span><br><span class=\"line\">\t\t\t<span class=\"attr\">minPixelValue:</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">mediaQuery:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;<span class=\"string\">)</span></span><br><span class=\"line\">\t\t&#123;&#123;<span class=\"string\">/if</span>&#125;&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;<span class=\"string\">;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"download-git-repo\"><a href=\"#download-git-repo\" class=\"headerlink\" title=\"download-git-repo\"></a><a href=\"https://gitlab.com%2Fflippidippi%2Fdownload-git-repo%23readme\" title=\"https://gitlab.com/flippidippi/download-git-repo#readme\">download-git-repo</a></h3><p>用git仓库维护项目模板也是一个常见的做法，这个工具简化将一个git仓库下载到指定目录的过程。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">download</span>(</span><br><span class=\"line\"><span class=\"string\">&#x27;https://mygitlab.com:flippidippi/download-git-repo-fixture#my-branch&#x27;</span>, </span><br><span class=\"line\"><span class=\"string\">&#x27;test/tmp&#x27;</span>, &#123; <span class=\"attr\">clone</span>: <span class=\"literal\">true</span> &#125;, <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err ? <span class=\"string\">&#x27;Error&#x27;</span> : <span class=\"string\">&#x27;Success&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"plop\"><a href=\"#plop\" class=\"headerlink\" title=\"plop\"></a><a href=\"https://github.com%2Fplopjs%2Fplop\" title=\"https://github.com/plopjs/plop\">plop</a></h3><p>快速创建模板代码的工具，可以简单理解为<a href=\"https://github.com%2FSBoudrias%2FInquirer.js%2F\" title=\"https://github.com/SBoudrias/Inquirer.js/\">inquirer</a> + <a href=\"https://github.com%2Fwycats%2Fhandlebars.js%2F\" title=\"https://github.com/wycats/handlebars.js/\">handlebar</a>，当项目中有一些复杂且有标准的文件需要编写时，可以抽象这套标准通过template生成。</p>\n<p>package.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">   <span class=\"attr\">&quot;addComponent&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;plop --plopfile ./plopfile.js&quot;</span></span><br><span class=\"line\"> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"> <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">   <span class=\"attr\">&quot;change-case&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^4.1.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">   <span class=\"attr\">&quot;plop&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.7.6&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"> <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>plopfile.js</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; pascalCase &#125; = <span class=\"keyword\">require</span>(<span class=\"string\">&quot;change-case&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">plop</span>) </span>&#123;</span><br><span class=\"line\">\tplop.<span class=\"title function_ invoke__\">setHelper</span>(<span class=\"string\">&#x27;pascalCase&#x27;</span>, function (text) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">pascalCase</span>(text);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tplop.<span class=\"title function_ invoke__\">setGenerator</span>(<span class=\"string\">&#x27;component&#x27;</span>, &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"attr\">description</span>: <span class=\"string\">&#x27;add a component&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">prompts</span>: [&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;name&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&#x27;component name&#x27;</span></span><br><span class=\"line\">\t\t&#125;],</span><br><span class=\"line\">\t\t<span class=\"attr\">actions</span>: [&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&#x27;add&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">path</span>: <span class=\"string\">&#x27;src/components/&#123;&#123;pascalCase name&#125;&#125;/index.tsx&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">templateFile</span>: <span class=\"string\">&#x27;templates/component.tsx.hbs&#x27;</span></span><br><span class=\"line\">\t\t&#125;]</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>templates&#x2F;component.tsx.hbs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">FC</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;&#123;pascalCase name&#125;&#125;: <span class=\"variable constant_\">FC</span> = <span class=\"keyword\">function</span> (<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Component<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;&#123;pascalCase name&#125;&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm run addComponent</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">plop-demo@0.1.0 addComponent D:\\personal\\plop-demo</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">plop --plopfile ./plopfile.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">? component name test</span><br><span class=\"line\">✔  ++ \\src\\components\\Test\\index.tsx</span><br></pre></td></tr></table></figure>\n\n<p>生成文件</p>\n<p><img src=\"/../imgs/f904fc883f7942fd809e7e09c84ac5ef.png\" alt=\"image.png\"></p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>以上就是文件和模板操作相关的几个常用第三方库。</p>\n<p>下一节介绍其他小工具。</p>\n"},{"title":"前端脚手架：从入门到进阶——Create React App源码解析（一）","date":"2021-11-03T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第 4 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n前言\n--\n\n我想每个Reacter都是这样开始接触react世界的：\n\n```perl\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\n即便多年多去了，各类新脚手架层出不穷，也越来越强大，但cra仍然占据着重要的位置。想要真正做一个企业级的脚手架，研究cra的源码是一个非常好的入门手段。\n\n目录结构和用途\n-------\n\ncreate-react-app是以learn组织的monorepo。主要代码都在packages下的各个包中。\n\n```arduino\n├───babel-plugin-named-asset-import/\n├───babel-preset-react-app/\n├───confusing-browser-globals/\n├───cra-template/\n├───cra-template-typescript/\n├───create-react-app/\n├───eslint-config-react-app/\n├───react-app-polyfill/\n├───react-dev-utils/\n├───react-error-overlay/\n└───react-scripts/\n```\n\n1.  create-react-app：命令的入口，主要职责如下\n    \n    *   提供了create-react-app命令及选项\n    *   检测环境：如node版本、cra版本、yarn还是npm、是否断网、是否开启pnp，以及yarn是否支持pnp\n    *   获取模板\n    *   下载依赖（react、react-dom以及模板）\n    *   执行react-scripts下的init方法\n2.  react-scripts：\n    \n    *   提供init方法：读取template包并生成项目；修改package.json；删除template依赖\n    *   提供项目内几个命令：start、build、test、eject\n3.  cra-template、cra-template-typescript：项目模板及依赖 以上三个是主要的包，剩下的几个并不在创建流程中，可以忽略\n    \n4.  babel-plugin-named-asset-import：[import named exports](https://github.com%2Ffacebook%2Fcreate-react-app%2Fissues%2F3722 \"https://github.com/facebook/create-react-app/issues/3722\") from non JS/CSS assets\n    \n5.  babel-preset-react-app: react相关babel preset，简化babel配置\n    \n6.  confusing-browser-globals： eslint的一个插件，限制全局变量的使用\n    \n7.  react-dev-utils：各种webpack插件\n    \n\n工作流程\n----\n\n运行create-react-app命令后的执行流程大致如下\n\nreact-scripts和template\n\n获取用户输入\n\n环境检查\n\n确定依赖\n\n安装依赖\n\n根据template生成文件\n\n结束\n\n这其中有非常多的细节，比如\n\n*   当node版本过低时将会降低react-scripts版本以尽可能成功\n*   支持yarn和npm，可选pnp特性，并且检查了用户环境是否支持这些命令和特性\n*   当用户离线时使用缓存安装\n*   检查项目名是否和package包名重复\n*   如果本地文件与生成的文件有冲突时进行了小心的处理\n*   ...\n\n下图讲述了其中的关键方法和主要功能\n\n![image.png](../imgs/09ade9d3689c4b748e2312b2030cf390.png)\n\n下一节将进入每个js文件详细分析。","source":"_posts/前端脚手架：从入门到进阶——Create React App源码解析（一）.md","raw":"---\n title: \"前端脚手架：从入门到进阶——Create React App源码解析（一）\"\n date: 2021-11-04\n tags: [前端,React.js]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第 4 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n前言\n--\n\n我想每个Reacter都是这样开始接触react世界的：\n\n```perl\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\n即便多年多去了，各类新脚手架层出不穷，也越来越强大，但cra仍然占据着重要的位置。想要真正做一个企业级的脚手架，研究cra的源码是一个非常好的入门手段。\n\n目录结构和用途\n-------\n\ncreate-react-app是以learn组织的monorepo。主要代码都在packages下的各个包中。\n\n```arduino\n├───babel-plugin-named-asset-import/\n├───babel-preset-react-app/\n├───confusing-browser-globals/\n├───cra-template/\n├───cra-template-typescript/\n├───create-react-app/\n├───eslint-config-react-app/\n├───react-app-polyfill/\n├───react-dev-utils/\n├───react-error-overlay/\n└───react-scripts/\n```\n\n1.  create-react-app：命令的入口，主要职责如下\n    \n    *   提供了create-react-app命令及选项\n    *   检测环境：如node版本、cra版本、yarn还是npm、是否断网、是否开启pnp，以及yarn是否支持pnp\n    *   获取模板\n    *   下载依赖（react、react-dom以及模板）\n    *   执行react-scripts下的init方法\n2.  react-scripts：\n    \n    *   提供init方法：读取template包并生成项目；修改package.json；删除template依赖\n    *   提供项目内几个命令：start、build、test、eject\n3.  cra-template、cra-template-typescript：项目模板及依赖 以上三个是主要的包，剩下的几个并不在创建流程中，可以忽略\n    \n4.  babel-plugin-named-asset-import：[import named exports](https://github.com%2Ffacebook%2Fcreate-react-app%2Fissues%2F3722 \"https://github.com/facebook/create-react-app/issues/3722\") from non JS/CSS assets\n    \n5.  babel-preset-react-app: react相关babel preset，简化babel配置\n    \n6.  confusing-browser-globals： eslint的一个插件，限制全局变量的使用\n    \n7.  react-dev-utils：各种webpack插件\n    \n\n工作流程\n----\n\n运行create-react-app命令后的执行流程大致如下\n\nreact-scripts和template\n\n获取用户输入\n\n环境检查\n\n确定依赖\n\n安装依赖\n\n根据template生成文件\n\n结束\n\n这其中有非常多的细节，比如\n\n*   当node版本过低时将会降低react-scripts版本以尽可能成功\n*   支持yarn和npm，可选pnp特性，并且检查了用户环境是否支持这些命令和特性\n*   当用户离线时使用缓存安装\n*   检查项目名是否和package包名重复\n*   如果本地文件与生成的文件有冲突时进行了小心的处理\n*   ...\n\n下图讲述了其中的关键方法和主要功能\n\n![image.png](../imgs/09ade9d3689c4b748e2312b2030cf390.png)\n\n下一节将进入每个js文件详细分析。","slug":"前端脚手架：从入门到进阶——Create React App源码解析（一）","published":1,"updated":"2024-04-04T15:27:03.308Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhz005phajfcexe481k","content":"<p>这是我参与11月更文挑战的第 4 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我想每个Reacter都是这样开始接触react世界的：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app <span class=\"keyword\">my</span>-app</span><br><span class=\"line\">cd <span class=\"keyword\">my</span>-app</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<p>即便多年多去了，各类新脚手架层出不穷，也越来越强大，但cra仍然占据着重要的位置。想要真正做一个企业级的脚手架，研究cra的源码是一个非常好的入门手段。</p>\n<h2 id=\"目录结构和用途\"><a href=\"#目录结构和用途\" class=\"headerlink\" title=\"目录结构和用途\"></a>目录结构和用途</h2><p>create-react-app是以learn组织的monorepo。主要代码都在packages下的各个包中。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├───babel-plugin-named-asset-<span class=\"keyword\">import</span>/</span><br><span class=\"line\">├───babel-preset-react-app/</span><br><span class=\"line\">├───confusing-browser-globals/</span><br><span class=\"line\">├───cra-<span class=\"keyword\">template</span>/</span><br><span class=\"line\">├───cra-<span class=\"keyword\">template</span>-typescript/</span><br><span class=\"line\">├───create-react-app/</span><br><span class=\"line\">├───eslint-config-react-app/</span><br><span class=\"line\">├───react-app-polyfill/</span><br><span class=\"line\">├───react-dev-utils/</span><br><span class=\"line\">├───react-error-overlay/</span><br><span class=\"line\">└───react-scripts/</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>create-react-app：命令的入口，主要职责如下</p>\n<ul>\n<li>提供了create-react-app命令及选项</li>\n<li>检测环境：如node版本、cra版本、yarn还是npm、是否断网、是否开启pnp，以及yarn是否支持pnp</li>\n<li>获取模板</li>\n<li>下载依赖（react、react-dom以及模板）</li>\n<li>执行react-scripts下的init方法</li>\n</ul>\n</li>\n<li><p>react-scripts：</p>\n<ul>\n<li>提供init方法：读取template包并生成项目；修改package.json；删除template依赖</li>\n<li>提供项目内几个命令：start、build、test、eject</li>\n</ul>\n</li>\n<li><p>cra-template、cra-template-typescript：项目模板及依赖 以上三个是主要的包，剩下的几个并不在创建流程中，可以忽略</p>\n</li>\n<li><p>babel-plugin-named-asset-import：<a href=\"https://github.com%2Ffacebook%2Fcreate-react-app%2Fissues%2F3722\" title=\"https://github.com/facebook/create-react-app/issues/3722\">import named exports</a> from non JS&#x2F;CSS assets</p>\n</li>\n<li><p>babel-preset-react-app: react相关babel preset，简化babel配置</p>\n</li>\n<li><p>confusing-browser-globals： eslint的一个插件，限制全局变量的使用</p>\n</li>\n<li><p>react-dev-utils：各种webpack插件</p>\n</li>\n</ol>\n<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><p>运行create-react-app命令后的执行流程大致如下</p>\n<p>react-scripts和template</p>\n<p>获取用户输入</p>\n<p>环境检查</p>\n<p>确定依赖</p>\n<p>安装依赖</p>\n<p>根据template生成文件</p>\n<p>结束</p>\n<p>这其中有非常多的细节，比如</p>\n<ul>\n<li>当node版本过低时将会降低react-scripts版本以尽可能成功</li>\n<li>支持yarn和npm，可选pnp特性，并且检查了用户环境是否支持这些命令和特性</li>\n<li>当用户离线时使用缓存安装</li>\n<li>检查项目名是否和package包名重复</li>\n<li>如果本地文件与生成的文件有冲突时进行了小心的处理</li>\n<li>…</li>\n</ul>\n<p>下图讲述了其中的关键方法和主要功能</p>\n<p><img src=\"/../imgs/09ade9d3689c4b748e2312b2030cf390.png\" alt=\"image.png\"></p>\n<p>下一节将进入每个js文件详细分析。</p>\n","length":1331,"excerpt":"","more":"<p>这是我参与11月更文挑战的第 4 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我想每个Reacter都是这样开始接触react世界的：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app <span class=\"keyword\">my</span>-app</span><br><span class=\"line\">cd <span class=\"keyword\">my</span>-app</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<p>即便多年多去了，各类新脚手架层出不穷，也越来越强大，但cra仍然占据着重要的位置。想要真正做一个企业级的脚手架，研究cra的源码是一个非常好的入门手段。</p>\n<h2 id=\"目录结构和用途\"><a href=\"#目录结构和用途\" class=\"headerlink\" title=\"目录结构和用途\"></a>目录结构和用途</h2><p>create-react-app是以learn组织的monorepo。主要代码都在packages下的各个包中。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├───babel-plugin-named-asset-<span class=\"keyword\">import</span>/</span><br><span class=\"line\">├───babel-preset-react-app/</span><br><span class=\"line\">├───confusing-browser-globals/</span><br><span class=\"line\">├───cra-<span class=\"keyword\">template</span>/</span><br><span class=\"line\">├───cra-<span class=\"keyword\">template</span>-typescript/</span><br><span class=\"line\">├───create-react-app/</span><br><span class=\"line\">├───eslint-config-react-app/</span><br><span class=\"line\">├───react-app-polyfill/</span><br><span class=\"line\">├───react-dev-utils/</span><br><span class=\"line\">├───react-error-overlay/</span><br><span class=\"line\">└───react-scripts/</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>create-react-app：命令的入口，主要职责如下</p>\n<ul>\n<li>提供了create-react-app命令及选项</li>\n<li>检测环境：如node版本、cra版本、yarn还是npm、是否断网、是否开启pnp，以及yarn是否支持pnp</li>\n<li>获取模板</li>\n<li>下载依赖（react、react-dom以及模板）</li>\n<li>执行react-scripts下的init方法</li>\n</ul>\n</li>\n<li><p>react-scripts：</p>\n<ul>\n<li>提供init方法：读取template包并生成项目；修改package.json；删除template依赖</li>\n<li>提供项目内几个命令：start、build、test、eject</li>\n</ul>\n</li>\n<li><p>cra-template、cra-template-typescript：项目模板及依赖 以上三个是主要的包，剩下的几个并不在创建流程中，可以忽略</p>\n</li>\n<li><p>babel-plugin-named-asset-import：<a href=\"https://github.com%2Ffacebook%2Fcreate-react-app%2Fissues%2F3722\" title=\"https://github.com/facebook/create-react-app/issues/3722\">import named exports</a> from non JS&#x2F;CSS assets</p>\n</li>\n<li><p>babel-preset-react-app: react相关babel preset，简化babel配置</p>\n</li>\n<li><p>confusing-browser-globals： eslint的一个插件，限制全局变量的使用</p>\n</li>\n<li><p>react-dev-utils：各种webpack插件</p>\n</li>\n</ol>\n<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><p>运行create-react-app命令后的执行流程大致如下</p>\n<p>react-scripts和template</p>\n<p>获取用户输入</p>\n<p>环境检查</p>\n<p>确定依赖</p>\n<p>安装依赖</p>\n<p>根据template生成文件</p>\n<p>结束</p>\n<p>这其中有非常多的细节，比如</p>\n<ul>\n<li>当node版本过低时将会降低react-scripts版本以尽可能成功</li>\n<li>支持yarn和npm，可选pnp特性，并且检查了用户环境是否支持这些命令和特性</li>\n<li>当用户离线时使用缓存安装</li>\n<li>检查项目名是否和package包名重复</li>\n<li>如果本地文件与生成的文件有冲突时进行了小心的处理</li>\n<li>…</li>\n</ul>\n<p>下图讲述了其中的关键方法和主要功能</p>\n<p><img src=\"/../imgs/09ade9d3689c4b748e2312b2030cf390.png\" alt=\"image.png\"></p>\n<p>下一节将进入每个js文件详细分析。</p>\n"},{"title":"前端脚手架：从入门到进阶——Create React App源码解析（三）","date":"2021-11-05T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第 6 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n回顾\n--\n\n上一节分析了createReactApp.js中的逻辑: ![image.png](../imgs/0ee7c29a050f4ff7b580e73d1d1932f7.png) 在开始react-scripts之前先看一下到目前为止cra生成的目录是什么样子的：\n\n![image.png](../imgs/0255ec42a61443f582afd734d41915cb.png)\n\ncra-template\n------------\n\n这个包目录如下，template中的便是模板\n\n```arduino\n├───template/\n│   ├───public/\n│   │   ├───favicon.ico\n│   │   ├───index.html\n│   │   ├───logo192.png\n│   │   ├───logo512.png\n│   │   ├───manifest.json\n│   │   └───robots.txt\n│   ├───src/\n│   │   ├───App.css\n│   │   ├───App.js\n│   │   ├───App.test.js\n│   │   ├───index.css\n│   │   ├───index.js\n│   │   ├───logo.svg\n│   │   ├───reportWebVitals.js\n│   │   └───setupTests.js\n│   ├───gitignore\n│   └───README.md\n├───package.json\n├───README.md\n└───template.json\n```\n\ntemplate目录下便是项目待copy的文件，而template.json则是这个template需要继续安装的依赖。 这些操作全都由react-scripts完成。\n\nreact-scripts\n-------------\n\npackage.json中可以看到，这个包提供了`react-scripts`的命令\n\n```json\n\"bin\": {\n    \"react-scripts\": \"./bin/react-scripts.js\"\n  },\n```\n\n而react-scripts提供了四种参数：build、eject、start、test，都是项目运行的命令，分别执行scripts目录想的相应文件\n\n![image.png](../imgs/1db5249a8fc94922ae2a429731b36262.png)\n\n而项目创建相关的init方法并不是由react-scripts命令提供的，只能通过require引入文件执行。\n\n### init.js\n\n这个文件400多行，主要代码从185行开始\n\n1.  更新package.json中的scripts ![image.png](../imgs/ac8f8d2c1c02487e9ae9489cefac018a.png)\n    \n2.  更新package.json中的eslintConfig和browserslist\n    \n\n![image.png](../imgs/324fd58b217e4370a03fdb879e935aa6.png)\n\n3.  git init\n\n![image.png](../imgs/dd6b2573899b44ba945a1763a0cfa88e.png)\n\n4.  拷贝template到项目中\n\n![image.png](../imgs/15e5c3208d1d4b9db3332d27f3c5490d.png)\n\n5.  确定执行的命令： ![image.png](../imgs/aeddca64831a45309a3e99a9d6ac3aa0.png)\n6.  进行安装\n\n```arduino\nconsole.log(`Installing template dependencies using ${command}...`);\n\nconst proc = spawn.sync(command, args, { stdio: 'inherit' });\n```\n\n这是cra运行过程中的第二次依赖安装，这一次安装的依赖来自于template\n\n```ini\n const dependenciesToInstall = Object.entries({\n    ...templatePackage.dependencies,\n    ...templatePackage.devDependencies,\n  });\n```\n\n7.  删除template包\n\n```arduino\n // Remove template\n  console.log(`Removing template package using ${command}...`);\n  console.log();\n\n  const proc = spawn.sync(command, [remove, templateName], {\n    stdio: 'inherit',\n  });\n```\n\n8.  git commit\n\n```arduino\n  // Create git commit if git repo was initialized\n  if (initializedGit && tryGitCommit(appPath)) {\n    console.log();\n    console.log('Created git commit.');\n  }\n```\n\n到这里就完成了项目的生成。\n\n![image.png](../imgs/6c32109e9dc845c1843613ffd8095fe1.png)","source":"_posts/前端脚手架：从入门到进阶——Create React App源码解析（三）.md","raw":"---\n title: \"前端脚手架：从入门到进阶——Create React App源码解析（三）\"\n date: 2021-11-06\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第 6 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n回顾\n--\n\n上一节分析了createReactApp.js中的逻辑: ![image.png](../imgs/0ee7c29a050f4ff7b580e73d1d1932f7.png) 在开始react-scripts之前先看一下到目前为止cra生成的目录是什么样子的：\n\n![image.png](../imgs/0255ec42a61443f582afd734d41915cb.png)\n\ncra-template\n------------\n\n这个包目录如下，template中的便是模板\n\n```arduino\n├───template/\n│   ├───public/\n│   │   ├───favicon.ico\n│   │   ├───index.html\n│   │   ├───logo192.png\n│   │   ├───logo512.png\n│   │   ├───manifest.json\n│   │   └───robots.txt\n│   ├───src/\n│   │   ├───App.css\n│   │   ├───App.js\n│   │   ├───App.test.js\n│   │   ├───index.css\n│   │   ├───index.js\n│   │   ├───logo.svg\n│   │   ├───reportWebVitals.js\n│   │   └───setupTests.js\n│   ├───gitignore\n│   └───README.md\n├───package.json\n├───README.md\n└───template.json\n```\n\ntemplate目录下便是项目待copy的文件，而template.json则是这个template需要继续安装的依赖。 这些操作全都由react-scripts完成。\n\nreact-scripts\n-------------\n\npackage.json中可以看到，这个包提供了`react-scripts`的命令\n\n```json\n\"bin\": {\n    \"react-scripts\": \"./bin/react-scripts.js\"\n  },\n```\n\n而react-scripts提供了四种参数：build、eject、start、test，都是项目运行的命令，分别执行scripts目录想的相应文件\n\n![image.png](../imgs/1db5249a8fc94922ae2a429731b36262.png)\n\n而项目创建相关的init方法并不是由react-scripts命令提供的，只能通过require引入文件执行。\n\n### init.js\n\n这个文件400多行，主要代码从185行开始\n\n1.  更新package.json中的scripts ![image.png](../imgs/ac8f8d2c1c02487e9ae9489cefac018a.png)\n    \n2.  更新package.json中的eslintConfig和browserslist\n    \n\n![image.png](../imgs/324fd58b217e4370a03fdb879e935aa6.png)\n\n3.  git init\n\n![image.png](../imgs/dd6b2573899b44ba945a1763a0cfa88e.png)\n\n4.  拷贝template到项目中\n\n![image.png](../imgs/15e5c3208d1d4b9db3332d27f3c5490d.png)\n\n5.  确定执行的命令： ![image.png](../imgs/aeddca64831a45309a3e99a9d6ac3aa0.png)\n6.  进行安装\n\n```arduino\nconsole.log(`Installing template dependencies using ${command}...`);\n\nconst proc = spawn.sync(command, args, { stdio: 'inherit' });\n```\n\n这是cra运行过程中的第二次依赖安装，这一次安装的依赖来自于template\n\n```ini\n const dependenciesToInstall = Object.entries({\n    ...templatePackage.dependencies,\n    ...templatePackage.devDependencies,\n  });\n```\n\n7.  删除template包\n\n```arduino\n // Remove template\n  console.log(`Removing template package using ${command}...`);\n  console.log();\n\n  const proc = spawn.sync(command, [remove, templateName], {\n    stdio: 'inherit',\n  });\n```\n\n8.  git commit\n\n```arduino\n  // Create git commit if git repo was initialized\n  if (initializedGit && tryGitCommit(appPath)) {\n    console.log();\n    console.log('Created git commit.');\n  }\n```\n\n到这里就完成了项目的生成。\n\n![image.png](../imgs/6c32109e9dc845c1843613ffd8095fe1.png)","slug":"前端脚手架：从入门到进阶——Create React App源码解析（三）","published":1,"updated":"2024-04-04T15:27:03.295Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhz005thajfdn356dd9","content":"<p>这是我参与11月更文挑战的第 6 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h2><p>上一节分析了createReactApp.js中的逻辑: <img src=\"/../imgs/0ee7c29a050f4ff7b580e73d1d1932f7.png\" alt=\"image.png\"> 在开始react-scripts之前先看一下到目前为止cra生成的目录是什么样子的：</p>\n<p><img src=\"/../imgs/0255ec42a61443f582afd734d41915cb.png\" alt=\"image.png\"></p>\n<h2 id=\"cra-template\"><a href=\"#cra-template\" class=\"headerlink\" title=\"cra-template\"></a>cra-template</h2><p>这个包目录如下，template中的便是模板</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├───<span class=\"keyword\">template</span>/</span><br><span class=\"line\">│   ├───<span class=\"keyword\">public</span>/</span><br><span class=\"line\">│   │   ├───favicon.ico</span><br><span class=\"line\">│   │   ├───index.html</span><br><span class=\"line\">│   │   ├───logo192.png</span><br><span class=\"line\">│   │   ├───logo512.png</span><br><span class=\"line\">│   │   ├───manifest.json</span><br><span class=\"line\">│   │   └───robots.txt</span><br><span class=\"line\">│   ├───src/</span><br><span class=\"line\">│   │   ├───App.css</span><br><span class=\"line\">│   │   ├───App.js</span><br><span class=\"line\">│   │   ├───App.test.js</span><br><span class=\"line\">│   │   ├───index.css</span><br><span class=\"line\">│   │   ├───index.js</span><br><span class=\"line\">│   │   ├───logo.svg</span><br><span class=\"line\">│   │   ├───reportWebVitals.js</span><br><span class=\"line\">│   │   └───setupTests.js</span><br><span class=\"line\">│   ├───gitignore</span><br><span class=\"line\">│   └───README.md</span><br><span class=\"line\">├───package.json</span><br><span class=\"line\">├───README.md</span><br><span class=\"line\">└───<span class=\"keyword\">template</span>.json</span><br></pre></td></tr></table></figure>\n\n<p>template目录下便是项目待copy的文件，而template.json则是这个template需要继续安装的依赖。 这些操作全都由react-scripts完成。</p>\n<h2 id=\"react-scripts\"><a href=\"#react-scripts\" class=\"headerlink\" title=\"react-scripts\"></a>react-scripts</h2><p>package.json中可以看到，这个包提供了<code>react-scripts</code>的命令</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;bin&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;react-scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./bin/react-scripts.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>而react-scripts提供了四种参数：build、eject、start、test，都是项目运行的命令，分别执行scripts目录想的相应文件</p>\n<p><img src=\"/../imgs/1db5249a8fc94922ae2a429731b36262.png\" alt=\"image.png\"></p>\n<p>而项目创建相关的init方法并不是由react-scripts命令提供的，只能通过require引入文件执行。</p>\n<h3 id=\"init-js\"><a href=\"#init-js\" class=\"headerlink\" title=\"init.js\"></a>init.js</h3><p>这个文件400多行，主要代码从185行开始</p>\n<ol>\n<li><p>更新package.json中的scripts <img src=\"/../imgs/ac8f8d2c1c02487e9ae9489cefac018a.png\" alt=\"image.png\"></p>\n</li>\n<li><p>更新package.json中的eslintConfig和browserslist</p>\n</li>\n</ol>\n<p><img src=\"/../imgs/324fd58b217e4370a03fdb879e935aa6.png\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>git init</li>\n</ol>\n<p><img src=\"/../imgs/dd6b2573899b44ba945a1763a0cfa88e.png\" alt=\"image.png\"></p>\n<ol start=\"4\">\n<li>拷贝template到项目中</li>\n</ol>\n<p><img src=\"/../imgs/15e5c3208d1d4b9db3332d27f3c5490d.png\" alt=\"image.png\"></p>\n<ol start=\"5\">\n<li>确定执行的命令： <img src=\"/../imgs/aeddca64831a45309a3e99a9d6ac3aa0.png\" alt=\"image.png\"></li>\n<li>进行安装</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.<span class=\"built_in\">log</span>(`Installing <span class=\"keyword\">template</span> dependencies <span class=\"keyword\">using</span> $&#123;command&#125;...`);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> proc = spawn.<span class=\"built_in\">sync</span>(command, args, &#123; stdio: <span class=\"string\">&#x27;inherit&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这是cra运行过程中的第二次依赖安装，这一次安装的依赖来自于template</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">dependenciesToInstall</span> = Object.entries(&#123;</span><br><span class=\"line\">   ...templatePackage.dependencies,</span><br><span class=\"line\">   ...templatePackage.devDependencies,</span><br><span class=\"line\"> &#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>删除template包</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Remove template</span></span><br><span class=\"line\"> console.<span class=\"built_in\">log</span>(`Removing <span class=\"keyword\">template</span> package <span class=\"keyword\">using</span> $&#123;command&#125;...`);</span><br><span class=\"line\"> console.<span class=\"built_in\">log</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">const</span> proc = spawn.<span class=\"built_in\">sync</span>(command, [remove, templateName], &#123;</span><br><span class=\"line\">   stdio: <span class=\"string\">&#x27;inherit&#x27;</span>,</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>git commit</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create git commit if git repo was initialized</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (initializedGit &amp;&amp; <span class=\"built_in\">tryGitCommit</span>(appPath)) &#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>();</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"string\">&#x27;Created git commit.&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里就完成了项目的生成。</p>\n<p><img src=\"/../imgs/6c32109e9dc845c1843613ffd8095fe1.png\" alt=\"image.png\"></p>\n","length":1703,"excerpt":"","more":"<p>这是我参与11月更文挑战的第 6 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h2><p>上一节分析了createReactApp.js中的逻辑: <img src=\"/../imgs/0ee7c29a050f4ff7b580e73d1d1932f7.png\" alt=\"image.png\"> 在开始react-scripts之前先看一下到目前为止cra生成的目录是什么样子的：</p>\n<p><img src=\"/../imgs/0255ec42a61443f582afd734d41915cb.png\" alt=\"image.png\"></p>\n<h2 id=\"cra-template\"><a href=\"#cra-template\" class=\"headerlink\" title=\"cra-template\"></a>cra-template</h2><p>这个包目录如下，template中的便是模板</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├───<span class=\"keyword\">template</span>/</span><br><span class=\"line\">│   ├───<span class=\"keyword\">public</span>/</span><br><span class=\"line\">│   │   ├───favicon.ico</span><br><span class=\"line\">│   │   ├───index.html</span><br><span class=\"line\">│   │   ├───logo192.png</span><br><span class=\"line\">│   │   ├───logo512.png</span><br><span class=\"line\">│   │   ├───manifest.json</span><br><span class=\"line\">│   │   └───robots.txt</span><br><span class=\"line\">│   ├───src/</span><br><span class=\"line\">│   │   ├───App.css</span><br><span class=\"line\">│   │   ├───App.js</span><br><span class=\"line\">│   │   ├───App.test.js</span><br><span class=\"line\">│   │   ├───index.css</span><br><span class=\"line\">│   │   ├───index.js</span><br><span class=\"line\">│   │   ├───logo.svg</span><br><span class=\"line\">│   │   ├───reportWebVitals.js</span><br><span class=\"line\">│   │   └───setupTests.js</span><br><span class=\"line\">│   ├───gitignore</span><br><span class=\"line\">│   └───README.md</span><br><span class=\"line\">├───package.json</span><br><span class=\"line\">├───README.md</span><br><span class=\"line\">└───<span class=\"keyword\">template</span>.json</span><br></pre></td></tr></table></figure>\n\n<p>template目录下便是项目待copy的文件，而template.json则是这个template需要继续安装的依赖。 这些操作全都由react-scripts完成。</p>\n<h2 id=\"react-scripts\"><a href=\"#react-scripts\" class=\"headerlink\" title=\"react-scripts\"></a>react-scripts</h2><p>package.json中可以看到，这个包提供了<code>react-scripts</code>的命令</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;bin&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;react-scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./bin/react-scripts.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>而react-scripts提供了四种参数：build、eject、start、test，都是项目运行的命令，分别执行scripts目录想的相应文件</p>\n<p><img src=\"/../imgs/1db5249a8fc94922ae2a429731b36262.png\" alt=\"image.png\"></p>\n<p>而项目创建相关的init方法并不是由react-scripts命令提供的，只能通过require引入文件执行。</p>\n<h3 id=\"init-js\"><a href=\"#init-js\" class=\"headerlink\" title=\"init.js\"></a>init.js</h3><p>这个文件400多行，主要代码从185行开始</p>\n<ol>\n<li><p>更新package.json中的scripts <img src=\"/../imgs/ac8f8d2c1c02487e9ae9489cefac018a.png\" alt=\"image.png\"></p>\n</li>\n<li><p>更新package.json中的eslintConfig和browserslist</p>\n</li>\n</ol>\n<p><img src=\"/../imgs/324fd58b217e4370a03fdb879e935aa6.png\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>git init</li>\n</ol>\n<p><img src=\"/../imgs/dd6b2573899b44ba945a1763a0cfa88e.png\" alt=\"image.png\"></p>\n<ol start=\"4\">\n<li>拷贝template到项目中</li>\n</ol>\n<p><img src=\"/../imgs/15e5c3208d1d4b9db3332d27f3c5490d.png\" alt=\"image.png\"></p>\n<ol start=\"5\">\n<li>确定执行的命令： <img src=\"/../imgs/aeddca64831a45309a3e99a9d6ac3aa0.png\" alt=\"image.png\"></li>\n<li>进行安装</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.<span class=\"built_in\">log</span>(`Installing <span class=\"keyword\">template</span> dependencies <span class=\"keyword\">using</span> $&#123;command&#125;...`);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> proc = spawn.<span class=\"built_in\">sync</span>(command, args, &#123; stdio: <span class=\"string\">&#x27;inherit&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这是cra运行过程中的第二次依赖安装，这一次安装的依赖来自于template</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">dependenciesToInstall</span> = Object.entries(&#123;</span><br><span class=\"line\">   ...templatePackage.dependencies,</span><br><span class=\"line\">   ...templatePackage.devDependencies,</span><br><span class=\"line\"> &#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>删除template包</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Remove template</span></span><br><span class=\"line\"> console.<span class=\"built_in\">log</span>(`Removing <span class=\"keyword\">template</span> package <span class=\"keyword\">using</span> $&#123;command&#125;...`);</span><br><span class=\"line\"> console.<span class=\"built_in\">log</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">const</span> proc = spawn.<span class=\"built_in\">sync</span>(command, [remove, templateName], &#123;</span><br><span class=\"line\">   stdio: <span class=\"string\">&#x27;inherit&#x27;</span>,</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>git commit</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create git commit if git repo was initialized</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (initializedGit &amp;&amp; <span class=\"built_in\">tryGitCommit</span>(appPath)) &#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>();</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"string\">&#x27;Created git commit.&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里就完成了项目的生成。</p>\n<p><img src=\"/../imgs/6c32109e9dc845c1843613ffd8095fe1.png\" alt=\"image.png\"></p>\n"},{"title":"前端脚手架：从入门到进阶——Create React App源码解析（二）","date":"2021-11-04T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第 5 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n序\n-\n\n在开始源码解析前我们先来认识一下cra。你可能思考过这些问题：\n\n### 为什么用npx而不是全局安装？\n\nnpm 5.2.0之后提供了npx命令，当调用`npx <command>`，而你的`$PATH`没有`<command>` 时，将会自动安装这个名字的包，并执行它。执行完后，这个安装下来的包会被清理掉。 使用npx执行cra，能够保证你执行的脚手架始终是最新的版本。关于npx具体的文档可以[参考这里](https://link.juejin.cn?target=url \"url\")[blog.npmjs.org/post/162869…](https://blog.npmjs.org%2Fpost%2F162869356040%2Fintroducing-npx-an-npm-package-runner \"https://blog.npmjs.org/post/162869356040/introducing-npx-an-npm-package-runner\")\n\n> This feature is ideal for things like generators, too. Tools like `yeoman` or `create-react-app` only ever get called once in a blue moon. By the time you run them again, they’ll already be far out of date, so you end up having to run an install every time you want to use them anyway.\n\n_这里的once in a blue moon是一个俚语，类似千载难逢的意思。_\n\n### create-react-app命令是如何提供的？\n\npackage.json中的bin属性指定了一个文件，当这个被全局安装时，这个文件将会被连接到全局的bin中，因此可以在任何地方调用。\n\n> A lot of packages have one or more executable files that they'd like to install into the PATH. npm makes this pretty easy ... To use this, supply a `bin` field in your package.json which is a map of command name to local file name. When this package is installed globally, that file will be linked where global bins go so it is available to run by name. 如果一个包中提供了多个命令，还可以指定`directories.bin`属性，npm会认为这个目录下的所有文件都是可执行的。\n\n### 为什么可以以npm init 命令执行\n\n> `npm init <initializer>` ...`initializer` in this case is an npm package named `create-<initializer>`, which will be installed by [`npx`](https://npm.im%2Fnpx \"https://npm.im/npx\"), and then have its main bin executed -- presumably creating or updating `package.json` and running any other initialization-related operations. `npm init xx` 其实就相当于`npx create-xx`\n\n### #!/usr/bin/env node 是什么\n\n> Please make sure that your file(s) referenced in `bin` starts with `#!/usr/bin/env node`, otherwise the scripts are started without the node executable! 这个`#!`叫做Shebang，这一行叫Shebang行。脚本第一行通常是指定解释器，`#!/usr/bin/env NAME`这个语法的意思是，让 Shell 查找`$PATH`环境变量里面第一个匹配的`NAME`。\n\n而且担心windows不支持Shebang行。如果是由npm安装的包，npm生成的链接其实是这样的： ![image.png](../imgs/026bf9f862e8483f86ecaaf73ec4cb44.png)\n\n这里指定了使用node执行。\n\nget到这些信息后我们就可以按图索骥，跟着package.json中bin属性指定的文件按顺序往下分析了。\n\ncreate-react-app/index.js\n-------------------------\n\n我们跟随package.json顺藤摸瓜来到index.js,这个文件很简单，判断了一下node版本，然后就执行了createReactApp.js中的init方法。\n\n```vbnet\nconst currentNodeVersion = process.versions.node;\nconst semver = currentNodeVersion.split('.');\nconst major = semver[0];\n\nif (major < 14) {\n  console.error(\n    'You are running Node ' +\n      currentNodeVersion +\n      '.\\n' +\n      'Create React App requires Node 14 or higher. \\n' +\n      'Please update your version of Node.'\n  );\n  process.exit(1);\n}\n\nconst { init } = require('./createReactApp');\n\ninit();\n\n```\n\n注意这里node版本低于14就退出了，其实早期的版本对node的要求没有这么新，当遇到一个低版本的node时还有降级方案，随着迭代这个降级代码有些多余了。\n\ncreate-react-app/createReactApp.js\n----------------------------------\n\n这个文件才是主要代码，一共1000多行，我们先来将它删减一下\n\n这个部分可以删掉，program.info来自于用户输入`--info`,只是打印了一些环境信息；没有projectName时只是进行了log后就退出了，都不影响主流程。 ![image.png](../imgs/fb244a2e456a42569d5f8887d5c3ca77.png)\n\n这个降级也可以删掉了，因为入口就判断了node小于14就退出了。\n\n![image.png](../imgs/2aec0f4ee07846c0b7eabf3672691b57.png)\n\n其他的各种log也可以删减，因为console.log不会换行，代码中可以看到各种\n\n```arduino\n    console.log(...);\n    console.log();\n```\n\n### init\n\n首先是解析用户输入的内容，代码如下： `const program = new commander.Command(packageJson.name)....option()....parse(process.argv)`\n\n注意`create-react-app`命令并不是commander提供的，commander起到的作用是解析用户输入的内容并给出反馈。\n\n这一步通过用户输入获取几个变量\n\n*   `projectName`\n*   `verbose`:print additional logs\n*   `scriptsVersion`:use a non-standard version of react-scripts\n*   `template`:specify a template for the created project\n*   `usePnp`\n\n另外后续通过 `(process.env.npm_config_user_agent || '').indexOf('yarn')`获取到了另一个重要变量`useYarn`;\n\n接下来就是检查cra的版本`checkForLatestVersion`,\n\n#### checkForLatestVersion\n\n获取cra最新版本号可以用两个办法：\n\n```csharp\n https\n      .get(\n        'https://registry.npmjs.org/-/package/create-react-app/dist-tags',\n        ...\n```\n\n出错时使用：\n\n```scss\nexecSync('npm view create-react-app version').toString().trim();\n```\n\ncra的版本遵循[semver规范https://semver.org/lang/zh-CN/](https://semver.org%2Flang%2Fzh-CN%2F \"https://semver.org/lang/zh-CN/\")\n\n这里判断是否是最新版本，不是就退出了。因此如果不是用npx来启动脚手架，很可能在这一步就终止了。 ![image.png](../imgs/578e5e1e1c6a4f34a9d30ab36f34dcce.png)\n\n接下来就进入createApp方法了，看名字就知道是个主要方法\n\n### createApp\n\n一上来就是一个很细心的操作：\n\n```ini\n  const root = path.resolve(name);\n  const appName = path.basename(root);\n```\n\n看着有些多余，但其实是考虑了输入的projectName中有路径的情况，比如'/aa/bb','./aa'。\n\n之后就是做一些检查：\n\n#### checkAppName\n\n主要是通过[validate-npm-package-name](https://www.npmjs.com%2Fpackage%2Fvalidate-npm-package-name \"https://www.npmjs.com/package/validate-npm-package-name\")检查，另外还检查了是否和`'react', 'react-dom', 'react-scripts'`重名。\n\n#### isSafeToCreateProjectIn\n\n待创建项目的目录下是否已经有了一些文件，除这些文件外，其他的文件都会认为可能有覆盖风险而终止命令 ![image.png](../imgs/702ab02646dc49fb893867edb9fd0142.png)\n\n#### 检查yarn、--cwd、pnp支持情况\n\n检查cwd是来自一个issue：[github.com/facebook/cr…](https://github.com%2Ffacebook%2Fcreate-react-app%2Fissues%2F3326 \"https://github.com/facebook/create-react-app/issues/3326\") 之后便是运行run\n\n### run\n\n这个也可以简化一下：\n\n```scss\nPromise.all([getInstallPackage(),getTemplateInstallPackage()])\n.then(()=>checkIfOnline())\n.then(()=>install())\n.then(()=>executeNodeScript())\n```\n\n#### 确定要安装的包\n\n*   确定要安装的react-scripts的版本，也支持其他的`react-scripts`\n*   确定template的包及版本，可以是cra-template，也支持其他的`template`\n*   安装的包还包括react、react-dom\n\n#### 检查网络\n\nyarn支持离线安装依赖\n\n### install\n\n确定安装命令和参数，分别有\n\n`yarnpkg add --exact --offline --enable-pnp --cwd --verbose ...`\n\n`npm install --no-audit --save --save-exact --loglevel error --verbose`\n\n这些参数都是根据上面的流程确定，以`spawn(command, args, { stdio: 'inherit' });`执行\n\n### executeNodeScript\n\n这一步就是执行了`react-scripts`包中的init方法，下一节再详细讲\n\n### 异常处理\n\n如果运行过程中出错，cra还贴心的将生成的文件删除\n\n```javascript\n console.log('Aborting installation.');\n// On 'exit' we will delete these files from target directory.\n...\n console.log(`Deleting generated file... ${chalk.cyan(file)}`);\n fs.removeSync(path.join(root, file));\n ...\n```\n\n备注：本系列cra版本为4.0.3","source":"_posts/前端脚手架：从入门到进阶——Create React App源码解析（二）.md","raw":"---\n title: \"前端脚手架：从入门到进阶——Create React App源码解析（二）\"\n date: 2021-11-05\n tags: [前端,React.js]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第 5 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n序\n-\n\n在开始源码解析前我们先来认识一下cra。你可能思考过这些问题：\n\n### 为什么用npx而不是全局安装？\n\nnpm 5.2.0之后提供了npx命令，当调用`npx <command>`，而你的`$PATH`没有`<command>` 时，将会自动安装这个名字的包，并执行它。执行完后，这个安装下来的包会被清理掉。 使用npx执行cra，能够保证你执行的脚手架始终是最新的版本。关于npx具体的文档可以[参考这里](https://link.juejin.cn?target=url \"url\")[blog.npmjs.org/post/162869…](https://blog.npmjs.org%2Fpost%2F162869356040%2Fintroducing-npx-an-npm-package-runner \"https://blog.npmjs.org/post/162869356040/introducing-npx-an-npm-package-runner\")\n\n> This feature is ideal for things like generators, too. Tools like `yeoman` or `create-react-app` only ever get called once in a blue moon. By the time you run them again, they’ll already be far out of date, so you end up having to run an install every time you want to use them anyway.\n\n_这里的once in a blue moon是一个俚语，类似千载难逢的意思。_\n\n### create-react-app命令是如何提供的？\n\npackage.json中的bin属性指定了一个文件，当这个被全局安装时，这个文件将会被连接到全局的bin中，因此可以在任何地方调用。\n\n> A lot of packages have one or more executable files that they'd like to install into the PATH. npm makes this pretty easy ... To use this, supply a `bin` field in your package.json which is a map of command name to local file name. When this package is installed globally, that file will be linked where global bins go so it is available to run by name. 如果一个包中提供了多个命令，还可以指定`directories.bin`属性，npm会认为这个目录下的所有文件都是可执行的。\n\n### 为什么可以以npm init 命令执行\n\n> `npm init <initializer>` ...`initializer` in this case is an npm package named `create-<initializer>`, which will be installed by [`npx`](https://npm.im%2Fnpx \"https://npm.im/npx\"), and then have its main bin executed -- presumably creating or updating `package.json` and running any other initialization-related operations. `npm init xx` 其实就相当于`npx create-xx`\n\n### #!/usr/bin/env node 是什么\n\n> Please make sure that your file(s) referenced in `bin` starts with `#!/usr/bin/env node`, otherwise the scripts are started without the node executable! 这个`#!`叫做Shebang，这一行叫Shebang行。脚本第一行通常是指定解释器，`#!/usr/bin/env NAME`这个语法的意思是，让 Shell 查找`$PATH`环境变量里面第一个匹配的`NAME`。\n\n而且担心windows不支持Shebang行。如果是由npm安装的包，npm生成的链接其实是这样的： ![image.png](../imgs/026bf9f862e8483f86ecaaf73ec4cb44.png)\n\n这里指定了使用node执行。\n\nget到这些信息后我们就可以按图索骥，跟着package.json中bin属性指定的文件按顺序往下分析了。\n\ncreate-react-app/index.js\n-------------------------\n\n我们跟随package.json顺藤摸瓜来到index.js,这个文件很简单，判断了一下node版本，然后就执行了createReactApp.js中的init方法。\n\n```vbnet\nconst currentNodeVersion = process.versions.node;\nconst semver = currentNodeVersion.split('.');\nconst major = semver[0];\n\nif (major < 14) {\n  console.error(\n    'You are running Node ' +\n      currentNodeVersion +\n      '.\\n' +\n      'Create React App requires Node 14 or higher. \\n' +\n      'Please update your version of Node.'\n  );\n  process.exit(1);\n}\n\nconst { init } = require('./createReactApp');\n\ninit();\n\n```\n\n注意这里node版本低于14就退出了，其实早期的版本对node的要求没有这么新，当遇到一个低版本的node时还有降级方案，随着迭代这个降级代码有些多余了。\n\ncreate-react-app/createReactApp.js\n----------------------------------\n\n这个文件才是主要代码，一共1000多行，我们先来将它删减一下\n\n这个部分可以删掉，program.info来自于用户输入`--info`,只是打印了一些环境信息；没有projectName时只是进行了log后就退出了，都不影响主流程。 ![image.png](../imgs/fb244a2e456a42569d5f8887d5c3ca77.png)\n\n这个降级也可以删掉了，因为入口就判断了node小于14就退出了。\n\n![image.png](../imgs/2aec0f4ee07846c0b7eabf3672691b57.png)\n\n其他的各种log也可以删减，因为console.log不会换行，代码中可以看到各种\n\n```arduino\n    console.log(...);\n    console.log();\n```\n\n### init\n\n首先是解析用户输入的内容，代码如下： `const program = new commander.Command(packageJson.name)....option()....parse(process.argv)`\n\n注意`create-react-app`命令并不是commander提供的，commander起到的作用是解析用户输入的内容并给出反馈。\n\n这一步通过用户输入获取几个变量\n\n*   `projectName`\n*   `verbose`:print additional logs\n*   `scriptsVersion`:use a non-standard version of react-scripts\n*   `template`:specify a template for the created project\n*   `usePnp`\n\n另外后续通过 `(process.env.npm_config_user_agent || '').indexOf('yarn')`获取到了另一个重要变量`useYarn`;\n\n接下来就是检查cra的版本`checkForLatestVersion`,\n\n#### checkForLatestVersion\n\n获取cra最新版本号可以用两个办法：\n\n```csharp\n https\n      .get(\n        'https://registry.npmjs.org/-/package/create-react-app/dist-tags',\n        ...\n```\n\n出错时使用：\n\n```scss\nexecSync('npm view create-react-app version').toString().trim();\n```\n\ncra的版本遵循[semver规范https://semver.org/lang/zh-CN/](https://semver.org%2Flang%2Fzh-CN%2F \"https://semver.org/lang/zh-CN/\")\n\n这里判断是否是最新版本，不是就退出了。因此如果不是用npx来启动脚手架，很可能在这一步就终止了。 ![image.png](../imgs/578e5e1e1c6a4f34a9d30ab36f34dcce.png)\n\n接下来就进入createApp方法了，看名字就知道是个主要方法\n\n### createApp\n\n一上来就是一个很细心的操作：\n\n```ini\n  const root = path.resolve(name);\n  const appName = path.basename(root);\n```\n\n看着有些多余，但其实是考虑了输入的projectName中有路径的情况，比如'/aa/bb','./aa'。\n\n之后就是做一些检查：\n\n#### checkAppName\n\n主要是通过[validate-npm-package-name](https://www.npmjs.com%2Fpackage%2Fvalidate-npm-package-name \"https://www.npmjs.com/package/validate-npm-package-name\")检查，另外还检查了是否和`'react', 'react-dom', 'react-scripts'`重名。\n\n#### isSafeToCreateProjectIn\n\n待创建项目的目录下是否已经有了一些文件，除这些文件外，其他的文件都会认为可能有覆盖风险而终止命令 ![image.png](../imgs/702ab02646dc49fb893867edb9fd0142.png)\n\n#### 检查yarn、--cwd、pnp支持情况\n\n检查cwd是来自一个issue：[github.com/facebook/cr…](https://github.com%2Ffacebook%2Fcreate-react-app%2Fissues%2F3326 \"https://github.com/facebook/create-react-app/issues/3326\") 之后便是运行run\n\n### run\n\n这个也可以简化一下：\n\n```scss\nPromise.all([getInstallPackage(),getTemplateInstallPackage()])\n.then(()=>checkIfOnline())\n.then(()=>install())\n.then(()=>executeNodeScript())\n```\n\n#### 确定要安装的包\n\n*   确定要安装的react-scripts的版本，也支持其他的`react-scripts`\n*   确定template的包及版本，可以是cra-template，也支持其他的`template`\n*   安装的包还包括react、react-dom\n\n#### 检查网络\n\nyarn支持离线安装依赖\n\n### install\n\n确定安装命令和参数，分别有\n\n`yarnpkg add --exact --offline --enable-pnp --cwd --verbose ...`\n\n`npm install --no-audit --save --save-exact --loglevel error --verbose`\n\n这些参数都是根据上面的流程确定，以`spawn(command, args, { stdio: 'inherit' });`执行\n\n### executeNodeScript\n\n这一步就是执行了`react-scripts`包中的init方法，下一节再详细讲\n\n### 异常处理\n\n如果运行过程中出错，cra还贴心的将生成的文件删除\n\n```javascript\n console.log('Aborting installation.');\n// On 'exit' we will delete these files from target directory.\n...\n console.log(`Deleting generated file... ${chalk.cyan(file)}`);\n fs.removeSync(path.join(root, file));\n ...\n```\n\n备注：本系列cra版本为4.0.3","slug":"前端脚手架：从入门到进阶——Create React App源码解析（二）","published":1,"updated":"2024-04-04T15:27:03.289Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhz005whajf74ai2lw5","content":"<p>这是我参与11月更文挑战的第 5 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>在开始源码解析前我们先来认识一下cra。你可能思考过这些问题：</p>\n<h3 id=\"为什么用npx而不是全局安装？\"><a href=\"#为什么用npx而不是全局安装？\" class=\"headerlink\" title=\"为什么用npx而不是全局安装？\"></a>为什么用npx而不是全局安装？</h3><p>npm 5.2.0之后提供了npx命令，当调用<code>npx &lt;command&gt;</code>，而你的<code>$PATH</code>没有<code>&lt;command&gt;</code> 时，将会自动安装这个名字的包，并执行它。执行完后，这个安装下来的包会被清理掉。 使用npx执行cra，能够保证你执行的脚手架始终是最新的版本。关于npx具体的文档可以<a href=\"https://link.juejin.cn/?target=url\" title=\"url\">参考这里</a><a href=\"https://blog.npmjs.org%2Fpost%2F162869356040%2Fintroducing-npx-an-npm-package-runner\" title=\"https://blog.npmjs.org/post/162869356040/introducing-npx-an-npm-package-runner\">blog.npmjs.org&#x2F;post&#x2F;162869…</a></p>\n<blockquote>\n<p>This feature is ideal for things like generators, too. Tools like <code>yeoman</code> or <code>create-react-app</code> only ever get called once in a blue moon. By the time you run them again, they’ll already be far out of date, so you end up having to run an install every time you want to use them anyway.</p>\n</blockquote>\n<p><em>这里的once in a blue moon是一个俚语，类似千载难逢的意思。</em></p>\n<h3 id=\"create-react-app命令是如何提供的？\"><a href=\"#create-react-app命令是如何提供的？\" class=\"headerlink\" title=\"create-react-app命令是如何提供的？\"></a>create-react-app命令是如何提供的？</h3><p>package.json中的bin属性指定了一个文件，当这个被全局安装时，这个文件将会被连接到全局的bin中，因此可以在任何地方调用。</p>\n<blockquote>\n<p>A lot of packages have one or more executable files that they’d like to install into the PATH. npm makes this pretty easy … To use this, supply a <code>bin</code> field in your package.json which is a map of command name to local file name. When this package is installed globally, that file will be linked where global bins go so it is available to run by name. 如果一个包中提供了多个命令，还可以指定<code>directories.bin</code>属性，npm会认为这个目录下的所有文件都是可执行的。</p>\n</blockquote>\n<h3 id=\"为什么可以以npm-init-命令执行\"><a href=\"#为什么可以以npm-init-命令执行\" class=\"headerlink\" title=\"为什么可以以npm init 命令执行\"></a>为什么可以以npm init 命令执行</h3><blockquote>\n<p><code>npm init &lt;initializer&gt;</code> …<code>initializer</code> in this case is an npm package named <code>create-&lt;initializer&gt;</code>, which will be installed by <a href=\"https://npm.im%2Fnpx\" title=\"https://npm.im/npx\"><code>npx</code></a>, and then have its main bin executed – presumably creating or updating <code>package.json</code> and running any other initialization-related operations. <code>npm init xx</code> 其实就相当于<code>npx create-xx</code></p>\n</blockquote>\n<h3 id=\"usr-bin-env-node-是什么\"><a href=\"#usr-bin-env-node-是什么\" class=\"headerlink\" title=\"#!&#x2F;usr&#x2F;bin&#x2F;env node 是什么\"></a>#!&#x2F;usr&#x2F;bin&#x2F;env node 是什么</h3><blockquote>\n<p>Please make sure that your file(s) referenced in <code>bin</code> starts with <code>#!/usr/bin/env node</code>, otherwise the scripts are started without the node executable! 这个<code>#!</code>叫做Shebang，这一行叫Shebang行。脚本第一行通常是指定解释器，<code>#!/usr/bin/env NAME</code>这个语法的意思是，让 Shell 查找<code>$PATH</code>环境变量里面第一个匹配的<code>NAME</code>。</p>\n</blockquote>\n<p>而且担心windows不支持Shebang行。如果是由npm安装的包，npm生成的链接其实是这样的： <img src=\"/../imgs/026bf9f862e8483f86ecaaf73ec4cb44.png\" alt=\"image.png\"></p>\n<p>这里指定了使用node执行。</p>\n<p>get到这些信息后我们就可以按图索骥，跟着package.json中bin属性指定的文件按顺序往下分析了。</p>\n<h2 id=\"create-react-app-index-js\"><a href=\"#create-react-app-index-js\" class=\"headerlink\" title=\"create-react-app&#x2F;index.js\"></a>create-react-app&#x2F;index.js</h2><p>我们跟随package.json顺藤摸瓜来到index.js,这个文件很简单，判断了一下node版本，然后就执行了createReactApp.js中的init方法。</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> currentNodeVersion = process.versions.node;</span><br><span class=\"line\"><span class=\"keyword\">const</span> semver = currentNodeVersion.split(<span class=\"comment\">&#x27;.&#x27;);</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> major = semver[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (major &lt; <span class=\"number\">14</span>) &#123;</span><br><span class=\"line\">  console.<span class=\"keyword\">error</span>(</span><br><span class=\"line\">    <span class=\"comment\">&#x27;You are running Node &#x27; +</span></span><br><span class=\"line\">      currentNodeVersion +</span><br><span class=\"line\">      <span class=\"comment\">&#x27;.\\n&#x27; +</span></span><br><span class=\"line\">      <span class=\"comment\">&#x27;Create React App requires Node 14 or higher. \\n&#x27; +</span></span><br><span class=\"line\">      <span class=\"comment\">&#x27;Please update your version of Node.&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  process.<span class=\"keyword\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; init &#125; = require(<span class=\"comment\">&#x27;./createReactApp&#x27;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">init();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意这里node版本低于14就退出了，其实早期的版本对node的要求没有这么新，当遇到一个低版本的node时还有降级方案，随着迭代这个降级代码有些多余了。</p>\n<h2 id=\"create-react-app-createReactApp-js\"><a href=\"#create-react-app-createReactApp-js\" class=\"headerlink\" title=\"create-react-app&#x2F;createReactApp.js\"></a>create-react-app&#x2F;createReactApp.js</h2><p>这个文件才是主要代码，一共1000多行，我们先来将它删减一下</p>\n<p>这个部分可以删掉，program.info来自于用户输入<code>--info</code>,只是打印了一些环境信息；没有projectName时只是进行了log后就退出了，都不影响主流程。 <img src=\"/../imgs/fb244a2e456a42569d5f8887d5c3ca77.png\" alt=\"image.png\"></p>\n<p>这个降级也可以删掉了，因为入口就判断了node小于14就退出了。</p>\n<p><img src=\"/../imgs/2aec0f4ee07846c0b7eabf3672691b57.png\" alt=\"image.png\"></p>\n<p>其他的各种log也可以删减，因为console.log不会换行，代码中可以看到各种</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.<span class=\"built_in\">log</span>(...);</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><p>首先是解析用户输入的内容，代码如下： <code>const program = new commander.Command(packageJson.name)....option()....parse(process.argv)</code></p>\n<p>注意<code>create-react-app</code>命令并不是commander提供的，commander起到的作用是解析用户输入的内容并给出反馈。</p>\n<p>这一步通过用户输入获取几个变量</p>\n<ul>\n<li><code>projectName</code></li>\n<li><code>verbose</code>:print additional logs</li>\n<li><code>scriptsVersion</code>:use a non-standard version of react-scripts</li>\n<li><code>template</code>:specify a template for the created project</li>\n<li><code>usePnp</code></li>\n</ul>\n<p>另外后续通过 <code>(process.env.npm_config_user_agent || &#39;&#39;).indexOf(&#39;yarn&#39;)</code>获取到了另一个重要变量<code>useYarn</code>;</p>\n<p>接下来就是检查cra的版本<code>checkForLatestVersion</code>,</p>\n<h4 id=\"checkForLatestVersion\"><a href=\"#checkForLatestVersion\" class=\"headerlink\" title=\"checkForLatestVersion\"></a>checkForLatestVersion</h4><p>获取cra最新版本号可以用两个办法：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https</span><br><span class=\"line\">     .<span class=\"keyword\">get</span>(</span><br><span class=\"line\">       <span class=\"string\">&#x27;https://registry.npmjs.org/-/package/create-react-app/dist-tags&#x27;</span>,</span><br><span class=\"line\">       ...</span><br></pre></td></tr></table></figure>\n\n<p>出错时使用：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">execSync</span>(&#x27;npm view create-react-app version&#x27;)<span class=\"selector-class\">.toString</span>()<span class=\"selector-class\">.trim</span>();</span><br></pre></td></tr></table></figure>\n\n<p>cra的版本遵循<a href=\"https://semver.org%2Flang%2Fzh-CN%2F\" title=\"https://semver.org/lang/zh-CN/\">semver规范https://semver.org/lang/zh-CN/</a></p>\n<p>这里判断是否是最新版本，不是就退出了。因此如果不是用npx来启动脚手架，很可能在这一步就终止了。 <img src=\"/../imgs/578e5e1e1c6a4f34a9d30ab36f34dcce.png\" alt=\"image.png\"></p>\n<p>接下来就进入createApp方法了，看名字就知道是个主要方法</p>\n<h3 id=\"createApp\"><a href=\"#createApp\" class=\"headerlink\" title=\"createApp\"></a>createApp</h3><p>一上来就是一个很细心的操作：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">root</span> = path.resolve(name)<span class=\"comment\">;</span></span><br><span class=\"line\">const <span class=\"attr\">appName</span> = path.basename(root)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>看着有些多余，但其实是考虑了输入的projectName中有路径的情况，比如’&#x2F;aa&#x2F;bb’,’.&#x2F;aa’。</p>\n<p>之后就是做一些检查：</p>\n<h4 id=\"checkAppName\"><a href=\"#checkAppName\" class=\"headerlink\" title=\"checkAppName\"></a>checkAppName</h4><p>主要是通过<a href=\"https://www.npmjs.com%2Fpackage%2Fvalidate-npm-package-name\" title=\"https://www.npmjs.com/package/validate-npm-package-name\">validate-npm-package-name</a>检查，另外还检查了是否和<code>&#39;react&#39;, &#39;react-dom&#39;, &#39;react-scripts&#39;</code>重名。</p>\n<h4 id=\"isSafeToCreateProjectIn\"><a href=\"#isSafeToCreateProjectIn\" class=\"headerlink\" title=\"isSafeToCreateProjectIn\"></a>isSafeToCreateProjectIn</h4><p>待创建项目的目录下是否已经有了一些文件，除这些文件外，其他的文件都会认为可能有覆盖风险而终止命令 <img src=\"/../imgs/702ab02646dc49fb893867edb9fd0142.png\" alt=\"image.png\"></p>\n<h4 id=\"检查yarn、–cwd、pnp支持情况\"><a href=\"#检查yarn、–cwd、pnp支持情况\" class=\"headerlink\" title=\"检查yarn、–cwd、pnp支持情况\"></a>检查yarn、–cwd、pnp支持情况</h4><p>检查cwd是来自一个issue：<a href=\"https://github.com%2Ffacebook%2Fcreate-react-app%2Fissues%2F3326\" title=\"https://github.com/facebook/create-react-app/issues/3326\">github.com&#x2F;facebook&#x2F;cr…</a> 之后便是运行run</p>\n<h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h3><p>这个也可以简化一下：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise<span class=\"selector-class\">.all</span>([getInstallPackage(),<span class=\"built_in\">getTemplateInstallPackage</span>()])</span><br><span class=\"line\"><span class=\"selector-class\">.then</span>(()=&gt;<span class=\"built_in\">checkIfOnline</span>())</span><br><span class=\"line\"><span class=\"selector-class\">.then</span>(()=&gt;<span class=\"built_in\">install</span>())</span><br><span class=\"line\"><span class=\"selector-class\">.then</span>(()=&gt;<span class=\"built_in\">executeNodeScript</span>())</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"确定要安装的包\"><a href=\"#确定要安装的包\" class=\"headerlink\" title=\"确定要安装的包\"></a>确定要安装的包</h4><ul>\n<li>确定要安装的react-scripts的版本，也支持其他的<code>react-scripts</code></li>\n<li>确定template的包及版本，可以是cra-template，也支持其他的<code>template</code></li>\n<li>安装的包还包括react、react-dom</li>\n</ul>\n<h4 id=\"检查网络\"><a href=\"#检查网络\" class=\"headerlink\" title=\"检查网络\"></a>检查网络</h4><p>yarn支持离线安装依赖</p>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><p>确定安装命令和参数，分别有</p>\n<p><code>yarnpkg add --exact --offline --enable-pnp --cwd --verbose ...</code></p>\n<p><code>npm install --no-audit --save --save-exact --loglevel error --verbose</code></p>\n<p>这些参数都是根据上面的流程确定，以<code>spawn(command, args, &#123; stdio: &#39;inherit&#39; &#125;);</code>执行</p>\n<h3 id=\"executeNodeScript\"><a href=\"#executeNodeScript\" class=\"headerlink\" title=\"executeNodeScript\"></a>executeNodeScript</h3><p>这一步就是执行了<code>react-scripts</code>包中的init方法，下一节再详细讲</p>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>如果运行过程中出错，cra还贴心的将生成的文件删除</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Aborting installation.&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// On &#x27;exit&#x27; we will delete these files from target directory.</span></span><br><span class=\"line\">...</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Deleting generated file... <span class=\"subst\">$&#123;chalk.cyan(file)&#125;</span>`</span>);</span><br><span class=\"line\"> fs.<span class=\"title function_\">removeSync</span>(path.<span class=\"title function_\">join</span>(root, file));</span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n\n<p>备注：本系列cra版本为4.0.3</p>\n","length":4575,"excerpt":"","more":"<p>这是我参与11月更文挑战的第 5 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>在开始源码解析前我们先来认识一下cra。你可能思考过这些问题：</p>\n<h3 id=\"为什么用npx而不是全局安装？\"><a href=\"#为什么用npx而不是全局安装？\" class=\"headerlink\" title=\"为什么用npx而不是全局安装？\"></a>为什么用npx而不是全局安装？</h3><p>npm 5.2.0之后提供了npx命令，当调用<code>npx &lt;command&gt;</code>，而你的<code>$PATH</code>没有<code>&lt;command&gt;</code> 时，将会自动安装这个名字的包，并执行它。执行完后，这个安装下来的包会被清理掉。 使用npx执行cra，能够保证你执行的脚手架始终是最新的版本。关于npx具体的文档可以<a href=\"https://link.juejin.cn/?target=url\" title=\"url\">参考这里</a><a href=\"https://blog.npmjs.org%2Fpost%2F162869356040%2Fintroducing-npx-an-npm-package-runner\" title=\"https://blog.npmjs.org/post/162869356040/introducing-npx-an-npm-package-runner\">blog.npmjs.org&#x2F;post&#x2F;162869…</a></p>\n<blockquote>\n<p>This feature is ideal for things like generators, too. Tools like <code>yeoman</code> or <code>create-react-app</code> only ever get called once in a blue moon. By the time you run them again, they’ll already be far out of date, so you end up having to run an install every time you want to use them anyway.</p>\n</blockquote>\n<p><em>这里的once in a blue moon是一个俚语，类似千载难逢的意思。</em></p>\n<h3 id=\"create-react-app命令是如何提供的？\"><a href=\"#create-react-app命令是如何提供的？\" class=\"headerlink\" title=\"create-react-app命令是如何提供的？\"></a>create-react-app命令是如何提供的？</h3><p>package.json中的bin属性指定了一个文件，当这个被全局安装时，这个文件将会被连接到全局的bin中，因此可以在任何地方调用。</p>\n<blockquote>\n<p>A lot of packages have one or more executable files that they’d like to install into the PATH. npm makes this pretty easy … To use this, supply a <code>bin</code> field in your package.json which is a map of command name to local file name. When this package is installed globally, that file will be linked where global bins go so it is available to run by name. 如果一个包中提供了多个命令，还可以指定<code>directories.bin</code>属性，npm会认为这个目录下的所有文件都是可执行的。</p>\n</blockquote>\n<h3 id=\"为什么可以以npm-init-命令执行\"><a href=\"#为什么可以以npm-init-命令执行\" class=\"headerlink\" title=\"为什么可以以npm init 命令执行\"></a>为什么可以以npm init 命令执行</h3><blockquote>\n<p><code>npm init &lt;initializer&gt;</code> …<code>initializer</code> in this case is an npm package named <code>create-&lt;initializer&gt;</code>, which will be installed by <a href=\"https://npm.im%2Fnpx\" title=\"https://npm.im/npx\"><code>npx</code></a>, and then have its main bin executed – presumably creating or updating <code>package.json</code> and running any other initialization-related operations. <code>npm init xx</code> 其实就相当于<code>npx create-xx</code></p>\n</blockquote>\n<h3 id=\"usr-bin-env-node-是什么\"><a href=\"#usr-bin-env-node-是什么\" class=\"headerlink\" title=\"#!&#x2F;usr&#x2F;bin&#x2F;env node 是什么\"></a>#!&#x2F;usr&#x2F;bin&#x2F;env node 是什么</h3><blockquote>\n<p>Please make sure that your file(s) referenced in <code>bin</code> starts with <code>#!/usr/bin/env node</code>, otherwise the scripts are started without the node executable! 这个<code>#!</code>叫做Shebang，这一行叫Shebang行。脚本第一行通常是指定解释器，<code>#!/usr/bin/env NAME</code>这个语法的意思是，让 Shell 查找<code>$PATH</code>环境变量里面第一个匹配的<code>NAME</code>。</p>\n</blockquote>\n<p>而且担心windows不支持Shebang行。如果是由npm安装的包，npm生成的链接其实是这样的： <img src=\"/../imgs/026bf9f862e8483f86ecaaf73ec4cb44.png\" alt=\"image.png\"></p>\n<p>这里指定了使用node执行。</p>\n<p>get到这些信息后我们就可以按图索骥，跟着package.json中bin属性指定的文件按顺序往下分析了。</p>\n<h2 id=\"create-react-app-index-js\"><a href=\"#create-react-app-index-js\" class=\"headerlink\" title=\"create-react-app&#x2F;index.js\"></a>create-react-app&#x2F;index.js</h2><p>我们跟随package.json顺藤摸瓜来到index.js,这个文件很简单，判断了一下node版本，然后就执行了createReactApp.js中的init方法。</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> currentNodeVersion = process.versions.node;</span><br><span class=\"line\"><span class=\"keyword\">const</span> semver = currentNodeVersion.split(<span class=\"comment\">&#x27;.&#x27;);</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> major = semver[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (major &lt; <span class=\"number\">14</span>) &#123;</span><br><span class=\"line\">  console.<span class=\"keyword\">error</span>(</span><br><span class=\"line\">    <span class=\"comment\">&#x27;You are running Node &#x27; +</span></span><br><span class=\"line\">      currentNodeVersion +</span><br><span class=\"line\">      <span class=\"comment\">&#x27;.\\n&#x27; +</span></span><br><span class=\"line\">      <span class=\"comment\">&#x27;Create React App requires Node 14 or higher. \\n&#x27; +</span></span><br><span class=\"line\">      <span class=\"comment\">&#x27;Please update your version of Node.&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  process.<span class=\"keyword\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; init &#125; = require(<span class=\"comment\">&#x27;./createReactApp&#x27;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">init();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意这里node版本低于14就退出了，其实早期的版本对node的要求没有这么新，当遇到一个低版本的node时还有降级方案，随着迭代这个降级代码有些多余了。</p>\n<h2 id=\"create-react-app-createReactApp-js\"><a href=\"#create-react-app-createReactApp-js\" class=\"headerlink\" title=\"create-react-app&#x2F;createReactApp.js\"></a>create-react-app&#x2F;createReactApp.js</h2><p>这个文件才是主要代码，一共1000多行，我们先来将它删减一下</p>\n<p>这个部分可以删掉，program.info来自于用户输入<code>--info</code>,只是打印了一些环境信息；没有projectName时只是进行了log后就退出了，都不影响主流程。 <img src=\"/../imgs/fb244a2e456a42569d5f8887d5c3ca77.png\" alt=\"image.png\"></p>\n<p>这个降级也可以删掉了，因为入口就判断了node小于14就退出了。</p>\n<p><img src=\"/../imgs/2aec0f4ee07846c0b7eabf3672691b57.png\" alt=\"image.png\"></p>\n<p>其他的各种log也可以删减，因为console.log不会换行，代码中可以看到各种</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.<span class=\"built_in\">log</span>(...);</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><p>首先是解析用户输入的内容，代码如下： <code>const program = new commander.Command(packageJson.name)....option()....parse(process.argv)</code></p>\n<p>注意<code>create-react-app</code>命令并不是commander提供的，commander起到的作用是解析用户输入的内容并给出反馈。</p>\n<p>这一步通过用户输入获取几个变量</p>\n<ul>\n<li><code>projectName</code></li>\n<li><code>verbose</code>:print additional logs</li>\n<li><code>scriptsVersion</code>:use a non-standard version of react-scripts</li>\n<li><code>template</code>:specify a template for the created project</li>\n<li><code>usePnp</code></li>\n</ul>\n<p>另外后续通过 <code>(process.env.npm_config_user_agent || &#39;&#39;).indexOf(&#39;yarn&#39;)</code>获取到了另一个重要变量<code>useYarn</code>;</p>\n<p>接下来就是检查cra的版本<code>checkForLatestVersion</code>,</p>\n<h4 id=\"checkForLatestVersion\"><a href=\"#checkForLatestVersion\" class=\"headerlink\" title=\"checkForLatestVersion\"></a>checkForLatestVersion</h4><p>获取cra最新版本号可以用两个办法：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https</span><br><span class=\"line\">     .<span class=\"keyword\">get</span>(</span><br><span class=\"line\">       <span class=\"string\">&#x27;https://registry.npmjs.org/-/package/create-react-app/dist-tags&#x27;</span>,</span><br><span class=\"line\">       ...</span><br></pre></td></tr></table></figure>\n\n<p>出错时使用：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">execSync</span>(&#x27;npm view create-react-app version&#x27;)<span class=\"selector-class\">.toString</span>()<span class=\"selector-class\">.trim</span>();</span><br></pre></td></tr></table></figure>\n\n<p>cra的版本遵循<a href=\"https://semver.org%2Flang%2Fzh-CN%2F\" title=\"https://semver.org/lang/zh-CN/\">semver规范https://semver.org/lang/zh-CN/</a></p>\n<p>这里判断是否是最新版本，不是就退出了。因此如果不是用npx来启动脚手架，很可能在这一步就终止了。 <img src=\"/../imgs/578e5e1e1c6a4f34a9d30ab36f34dcce.png\" alt=\"image.png\"></p>\n<p>接下来就进入createApp方法了，看名字就知道是个主要方法</p>\n<h3 id=\"createApp\"><a href=\"#createApp\" class=\"headerlink\" title=\"createApp\"></a>createApp</h3><p>一上来就是一个很细心的操作：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">root</span> = path.resolve(name)<span class=\"comment\">;</span></span><br><span class=\"line\">const <span class=\"attr\">appName</span> = path.basename(root)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>看着有些多余，但其实是考虑了输入的projectName中有路径的情况，比如’&#x2F;aa&#x2F;bb’,’.&#x2F;aa’。</p>\n<p>之后就是做一些检查：</p>\n<h4 id=\"checkAppName\"><a href=\"#checkAppName\" class=\"headerlink\" title=\"checkAppName\"></a>checkAppName</h4><p>主要是通过<a href=\"https://www.npmjs.com%2Fpackage%2Fvalidate-npm-package-name\" title=\"https://www.npmjs.com/package/validate-npm-package-name\">validate-npm-package-name</a>检查，另外还检查了是否和<code>&#39;react&#39;, &#39;react-dom&#39;, &#39;react-scripts&#39;</code>重名。</p>\n<h4 id=\"isSafeToCreateProjectIn\"><a href=\"#isSafeToCreateProjectIn\" class=\"headerlink\" title=\"isSafeToCreateProjectIn\"></a>isSafeToCreateProjectIn</h4><p>待创建项目的目录下是否已经有了一些文件，除这些文件外，其他的文件都会认为可能有覆盖风险而终止命令 <img src=\"/../imgs/702ab02646dc49fb893867edb9fd0142.png\" alt=\"image.png\"></p>\n<h4 id=\"检查yarn、–cwd、pnp支持情况\"><a href=\"#检查yarn、–cwd、pnp支持情况\" class=\"headerlink\" title=\"检查yarn、–cwd、pnp支持情况\"></a>检查yarn、–cwd、pnp支持情况</h4><p>检查cwd是来自一个issue：<a href=\"https://github.com%2Ffacebook%2Fcreate-react-app%2Fissues%2F3326\" title=\"https://github.com/facebook/create-react-app/issues/3326\">github.com&#x2F;facebook&#x2F;cr…</a> 之后便是运行run</p>\n<h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h3><p>这个也可以简化一下：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise<span class=\"selector-class\">.all</span>([getInstallPackage(),<span class=\"built_in\">getTemplateInstallPackage</span>()])</span><br><span class=\"line\"><span class=\"selector-class\">.then</span>(()=&gt;<span class=\"built_in\">checkIfOnline</span>())</span><br><span class=\"line\"><span class=\"selector-class\">.then</span>(()=&gt;<span class=\"built_in\">install</span>())</span><br><span class=\"line\"><span class=\"selector-class\">.then</span>(()=&gt;<span class=\"built_in\">executeNodeScript</span>())</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"确定要安装的包\"><a href=\"#确定要安装的包\" class=\"headerlink\" title=\"确定要安装的包\"></a>确定要安装的包</h4><ul>\n<li>确定要安装的react-scripts的版本，也支持其他的<code>react-scripts</code></li>\n<li>确定template的包及版本，可以是cra-template，也支持其他的<code>template</code></li>\n<li>安装的包还包括react、react-dom</li>\n</ul>\n<h4 id=\"检查网络\"><a href=\"#检查网络\" class=\"headerlink\" title=\"检查网络\"></a>检查网络</h4><p>yarn支持离线安装依赖</p>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><p>确定安装命令和参数，分别有</p>\n<p><code>yarnpkg add --exact --offline --enable-pnp --cwd --verbose ...</code></p>\n<p><code>npm install --no-audit --save --save-exact --loglevel error --verbose</code></p>\n<p>这些参数都是根据上面的流程确定，以<code>spawn(command, args, &#123; stdio: &#39;inherit&#39; &#125;);</code>执行</p>\n<h3 id=\"executeNodeScript\"><a href=\"#executeNodeScript\" class=\"headerlink\" title=\"executeNodeScript\"></a>executeNodeScript</h3><p>这一步就是执行了<code>react-scripts</code>包中的init方法，下一节再详细讲</p>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>如果运行过程中出错，cra还贴心的将生成的文件删除</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Aborting installation.&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// On &#x27;exit&#x27; we will delete these files from target directory.</span></span><br><span class=\"line\">...</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Deleting generated file... <span class=\"subst\">$&#123;chalk.cyan(file)&#125;</span>`</span>);</span><br><span class=\"line\"> fs.<span class=\"title function_\">removeSync</span>(path.<span class=\"title function_\">join</span>(root, file));</span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n\n<p>备注：本系列cra版本为4.0.3</p>\n"},{"title":"前端脚手架：从入门到进阶——Create React App源码解析（四）","date":"2021-11-14T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第 15 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\nCRA webpack配置\n-------------\n\n本文编写的时候react-scripts版本时4.0.3，还没有升级到webpack5，不过其仓库中已经有了webpack5相关的配置，因此下面的解析是基于其最新的代码。\n\ncreate-react-app的webpack配置基本上集中在react-scripts/config/webpack.config.js，development和production的不同环境配置都在这一个文件里进行判断，将它拆开后更好阅读些：\n\n首先是声明一些环境变量，这些变量基本集中在config目录下的paths.js、modules.js、env.js文件中，这里先进行一个预设：项目的入口为`D:\\cra-demo1\\src\\index.tsx`，后续入口相关的参数将替换为这个值，这样更方便理解\n\n*   最外层：导出的是一个函数\n\n```javascript\nmodule.exports = function (webpackEnv) {\n\n}\n\n```\n\nwebpack配置文件，可以导出一个对象，或者多个对象，也可以导出一个函数，或者一个promise，\n\n当导出一个函数时，可以传入两个参数，第一是环境对象environment，第二个是传给webpack的选项\n\n### target\n\ntarget: webpack中文文档已经过期了，如果项目中有browserslist配置，webpack将会用它 - 确定可用于生成运行时代码的 ES 功能 - 推断环境，可以不再配置output.environment\n\n```vbnet\ntarget: ['browserslist'],\n```\n\n### mode\n\nmode设置为`'production'`，会将 DefinePlugin 中 process.env.NODE\\_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。\n\n```arduino\n mode: isEnvProduction ? 'production' : isEnvDevelopment && 'development',,\n```\n\n### bail\n\nbail:在生产环境编译遇到错误直接抛出并终止\n\n```makefile\nbail: isEnvProduction,\n```\n\n### devtool\n\ndevtool: 生产环境使用`shouldUseSourceMap`控制是否需要source map。在实践中，生产环境打包可能需要生成source map方便监控或日志平台进行定位，但也可能不需要，因此这里设置了一个变量，由`process.env.GENERATE_SOURCEMAP`控制\n\n```vbnet\ndevtool: isEnvProduction\n    ? shouldUseSourceMap\n    ? 'source-map'\n    : false\n    : isEnvDevelopment && 'cheap-module-source-map',\n```\n\n### entry\n\nentry：入口文件，比如这里是'D:\\\\cra-demo1\\\\src\\\\index.tsx'\n\n```makefile\n\nentry: paths.appIndexJs,\n```\n\n### output\n\noutput:相关字段配置和解释如下\n\n```javascript\n output: {\n    // 输出目录，比如这里是'D:\\\\cra-demo1\\\\build'.\n    path: paths.appBuild,\n     // 开发环境输出代码里增加/* filename */注释\n    pathinfo: isEnvDevelopment,\n    // 主bundle\n    filename: isEnvProduction\n    ? 'static/js/[name].[contenthash:8].js'\n    : isEnvDevelopment && 'static/js/bundle.js',\n    // 代码分隔后的chunk 文件\n    chunkFilename: isEnvProduction\n    ? 'static/js/[name].[contenthash:8].chunk.js'\n    : isEnvDevelopment && 'static/js/[name].chunk.js',\n    assetModuleFilename: 'static/media/[name].[hash][ext]',\n    // 这里是'/'\n    publicPath: paths.publicUrlOrPath,\n    // source map路径\n    devtoolModuleFilenameTemplate: isEnvProduction\n    ? info =>\n        path\n            .relative(paths.appSrc, info.absoluteResourcePath)\n            .replace(/\\\\/g, '/')\n    : isEnvDevelopment &&\n        (info => path.resolve(info.absoluteResourcePath).replace(/\\\\/g, '/')),\n},\n```\n\n### cache\n\ncache: webpack5自带的缓存，加快构建速度\n\n```arduino\ncache: {\n    // 将缓存保存在文件中\n    type: 'filesystem',\n    // 缓存版本，版本更新将使原缓存失效\n    version: createEnvironmentHash(env.raw),\n    // 缓存的目录：node_modules/.cache\n    cacheDirectory: paths.appWebpackCache,\n    // 当编译器空闲时将数据存储在一个文件中，用于所有缓存项\n    store: 'pack',\n    // 缓存的依赖，这里的变更将使缓存失效\n    buildDependencies: {\n        defaultWebpack: ['webpack/lib/'],\n        config: [__filename],\n        tsconfig: [paths.appTsConfig, paths.appJsConfig].filter(f =>\n            fs.existsSync(f)\n        ),\n    },\n},\n```\n\n### infrastructureLogging\n\ninfrastructureLogging:基础日志级别，这里不开启，cra有自己的日志\n\n```css\ninfrastructureLogging: {\n    level: 'none',\n},\n```\n\n### optimization\n\n*   optimization: 代码优化，比如压缩、分割等\n\n```yaml\noptimization: {\n    // 生产环境进行压缩\n    minimize: isEnvProduction,\n    minimizer: [\n        js和css压缩...\n    ],\n},\n```\n\n*   js压缩\n\n```yaml\nnew TerserPlugin({\n    terserOptions: {\n    parse: {\n        // 以es8语法解析\n        ecma: 8,\n    },\n    compress: {\n        ecma: 5,\n        warnings: false,\n        comparisons: false,\n        inline: 2,\n    },\n    mangle: {\n        // 解决Safari 10中的一个bug\n        safari10: true,\n    },\n    // 是否保留classnames\n    keep_classnames: isEnvProductionProfile,\n    keep_fnames: isEnvProductionProfile,\n    output: {\n        ecma: 5,\n        comments: false,\n        ascii_only: true,\n    },\n    },\n}),\n```\n\n*   css 压缩\n\n```scss\n    new CssMinimizerPlugin(),\n```\n\n### resolve\n\nresolve:帮助找到模块的路径\n\n*   modules:从哪里找模块\n\n```css\nresolve: {\n    // 这个配置主要考虑了monorepo的场景\n    modules: ['node_modules', paths.appNodeModules].concat(\n        modules.additionalModulePaths || []\n    ),\n   ...\n},\n```\n\n*   extensions: 可以省略的后缀名，包含了： \\[ 'web.mjs', 'mjs', 'web.js', 'js', 'web.ts', 'ts', 'web.tsx', 'tsx', 'json', 'web.jsx', 'jsx', \\];\n\n```ini\n extensions: paths.moduleFileExtensions\n        .map(ext => `.${ext}`)\n        .filter(ext => useTypeScript || !ext.includes('ts')),\n    \n```\n\n*   alias:modules.webpackAliases中只有`src`\n\n```csharp\nalias: {\n        'react-native': 'react-native-web',\n        // Allows for better profiling with ReactDevTools\n        ...(isEnvProductionProfile && {\n            'react-dom$': 'react-dom/profiling',\n            'scheduler/tracing': 'scheduler/tracing-profiling',\n        }),\n        // 这里只设置了src\n        ...(modules.webpackAliases || {}),\n    },\n    \n```\n\n*   plugins:\n\n```arduino\nplugins: [\n    // 这个插件用来防止用户从src之外的地方导入文件\n        new ModuleScopePlugin(paths.appSrc, [\n            paths.appPackageJson,\n            reactRefreshRuntimeEntry,\n            reactRefreshWebpackPluginRuntimeEntry,\n            babelRuntimeEntry,\n            babelRuntimeEntryHelpers,\n            babelRuntimeRegenerator,\n        ]),\n    ],\n```\n\n### module\n\nmodule: 如何处理不同类型的模块\n\n*   strictExportPresence\n\n```arduino\nmodule: {\n    // 将缺失的导出作为error，而不是warning\n    strictExportPresence: true,\n    ...\n   \n},\n```\n\n*   rules: 这里用了`oneOf`api，遇到第一个匹配的就会终止，如果没有匹配的，就会执行最下面的\n\n```yaml\n rules: [\n        // 处理第三方库的source map\n        shouldUseSourceMap && {\n            enforce: 'pre',\n            exclude: /@babel(?:\\/|\\\\{1,2})runtime/,\n            test: /\\.(js|mjs|jsx|ts|tsx|css)$/,\n            loader: require.resolve('source-map-loader'),\n        },\n        {\n            // \"oneOf\" 遍历下面所有的loader，直到第一个符合的，如果没有找到，则使用最下面的'file loader'\n            // webpack5取消了file-loader，因此这里加了个引号\n            oneOf: [\n                {\n                    test: [/\\.avif$/],\n                    type: 'asset',\n                    mimetype: 'image/avif',\n                    // 这个是webpack5的配置，取消raw-loader、url-loader、file-loader\n                    parser: {\n                        dataUrlCondition: {\n                            maxSize: imageInlineSizeLimit,\n                        },\n                    },\n                },\n                {\n                    test: [/\\.bmp$/, /\\.gif$/, /\\.jpe?g$/, /\\.png$/],\n                    type: 'asset',\n                    parser: {\n                    dataUrlCondition: {\n                        maxSize: imageInlineSizeLimit,\n                    },\n                    },\n                },\n                {\n                    test: /\\.svg$/,\n                    use: [\n                        {\n                            //可以将svg以组件的形式导入 import Star from './star.svg'\n                            loader: require.resolve('@svgr/webpack'),\n                            options: {\n                                prettier: false,\n                                svgo: false,\n                                svgoConfig: {\n                                    plugins: [{ removeViewBox: false }],\n                                },\n                                titleProp: true,\n                                ref: true,\n                            },\n                        },\n                        {\n                            loader: require.resolve('file-loader'),\n                            options: {\n                            name: 'static/media/[name].[hash].[ext]',\n                            },\n                        },\n                    ],\n                    // 在这些条件中生效\n                    issuer: {\n                    and: [/\\.(ts|tsx|js|jsx|md|mdx)$/],\n                    },\n                },\n                {\n                    test: /\\.(js|mjs|jsx|ts|tsx)$/,\n                    include: paths.appSrc,\n                    loader: require.resolve('babel-loader'),\n                    options: {\n                        // babel-preset-react-app是cra自定义的preset,包括了 JSX, Flow, TypeScript, and some ESnext features\n                        customize: require.resolve(\n                            'babel-preset-react-app/webpack-overrides'\n                        ),\n                        presets: [\n                            [\n                            require.resolve('babel-preset-react-app'),\n                            {\n                                runtime: hasJsxRuntime ? 'automatic' : 'classic',\n                            },\n                            ],\n                        ],\n                        // 一下两个eject后会移除\n                        babelrc: false,\n                        configFile: false,\n                        // 确保 cache identifier的唯一性，eject后会移除\n                        cacheIdentifier: getCacheIdentifier(\n                            isEnvProduction\n                            ? 'production'\n                            : isEnvDevelopment && 'development',\n                            [\n                            'babel-plugin-named-asset-import',\n                            'babel-preset-react-app',\n                            'react-dev-utils',\n                            'react-scripts',\n                            ]\n                        ),\n                        plugins: [\n                            isEnvDevelopment &&\n                            shouldUseReactRefresh &&\n                            require.resolve('react-refresh/babel'),\n                        ].filter(Boolean),\n                        // babel-loader能将缓存保存在./node_modules/.cache/babel-loader/\n                        cacheDirectory: true,\n                        cacheCompression: false,\n                        compact: isEnvProduction,\n                    },\n                },\n                // 处理其他js\n                {\n                    test: /\\.(js|mjs)$/,\n                    exclude: /@babel(?:\\/|\\\\{1,2})runtime/,\n                    loader: require.resolve('babel-loader'),\n                    options: {\n                        ... 同上\n                    },\n                },\n                {\n                    test: cssRegex,\n                    exclude: cssModuleRegex,\n                    use: getStyleLoaders({\n                    importLoaders: 1,\n                    sourceMap: isEnvProduction\n                        ? shouldUseSourceMap\n                        : isEnvDevelopment,\n                    modules: {\n                        mode: 'icss',\n                    },\n                    }),\n                    sideEffects: true,\n                },\n                {\n                    test: cssModuleRegex,\n                    use: getStyleLoaders({\n                    importLoaders: 1,\n                    sourceMap: isEnvProduction\n                        ? shouldUseSourceMap\n                        : isEnvDevelopment,\n                    modules: {\n                        mode: 'local',\n                        getLocalIdent: getCSSModuleLocalIdent,\n                    },\n                    }),\n                },\n                {\n                    test: sassRegex,\n                    exclude: sassModuleRegex,\n                    use: getStyleLoaders(\n                    {\n                        importLoaders: 3,\n                        sourceMap: isEnvProduction\n                        ? shouldUseSourceMap\n                        : isEnvDevelopment,\n                        modules: {\n                        mode: 'icss',\n                        },\n                    },\n                    'sass-loader'\n                    ),\n                    sideEffects: true,\n                },\n                {\n                    test: sassModuleRegex,\n                    use: getStyleLoaders(\n                    {\n                        importLoaders: 3,\n                        sourceMap: isEnvProduction\n                        ? shouldUseSourceMap\n                        : isEnvDevelopment,\n                        modules: {\n                        mode: 'local',\n                        getLocalIdent: getCSSModuleLocalIdent,\n                        },\n                    },\n                    'sass-loader'\n                    ),\n                },\n                // 兜底的'file loader'\n                {\n                    exclude: [/^$/, /\\.(js|mjs|jsx|ts|tsx)$/, /\\.html$/, /\\.json$/],\n                    type: 'asset/resource',\n                },\n            ],\n        },\n    ].filter(Boolean),\n```\n\n### plugins:\n\nplugins:各种插件，作用见注释\n\n```yaml\nplugins: [\n    new HtmlWebpackPlugin(\n    Object.assign(\n        {},\n        {\n        inject: true,\n        template: paths.appHtml,\n        },\n        isEnvProduction\n        ? {\n            minify: {\n                removeComments: true,\n                collapseWhitespace: true,\n                removeRedundantAttributes: true,\n                useShortDoctype: true,\n                removeEmptyAttributes: true,\n                removeStyleLinkTypeAttributes: true,\n                keepClosingSlash: true,\n                minifyJS: true,\n                minifyCSS: true,\n                minifyURLs: true,\n            },\n            }\n        : undefined\n    )\n    ),\n    isEnvProduction &&\n    shouldInlineRuntimeChunk &&\n    new InlineChunkHtmlPlugin(HtmlWebpackPlugin, [/runtime-.+[.]js/]),\n    // 指定index.html中可以使用的变量，如<link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    new InterpolateHtmlPlugin(HtmlWebpackPlugin, env.raw),\n    new ModuleNotFoundPlugin(paths.appPath),\n    new webpack.DefinePlugin(env.stringified),\n    isEnvDevelopment &&\n    shouldUseReactRefresh &&\n    new ReactRefreshWebpackPlugin({\n        overlay: false,\n    }),\n    // 大小写敏感，这个插件挺有用的\n    isEnvDevelopment && new CaseSensitivePathsPlugin(),\n    isEnvProduction &&\n    new MiniCssExtractPlugin({\n        filename: 'static/css/[name].[contenthash:8].css',\n        chunkFilename: 'static/css/[name].[contenthash:8].chunk.css',\n    }),\n \n    new WebpackManifestPlugin({\n        fileName: 'asset-manifest.json',\n        publicPath: paths.publicUrlOrPath,\n        generate: (seed, files, entrypoints) => {\n            const manifestFiles = files.reduce((manifest, file) => {\n            manifest[file.name] = file.path;\n            return manifest;\n            }, seed);\n            const entrypointFiles = entrypoints.main.filter(\n            fileName => !fileName.endsWith('.map')\n            );\n\n            return {\n            files: manifestFiles,\n            entrypoints: entrypointFiles,\n            };\n        },\n    }),\n    // 不打包momentjs中的语言包\n    new webpack.IgnorePlugin({\n        resourceRegExp: /^\\.\\/locale$/,\n        contextRegExp: /moment$/,\n    }),\n    // service worker\n    isEnvProduction &&\n    fs.existsSync(swSrc) &&\n    new WorkboxWebpackPlugin.InjectManifest({\n        swSrc,\n        dontCacheBustURLsMatching: /\\.[0-9a-f]{8}\\./,\n        exclude: [/\\.map$/, /asset-manifest\\.json$/, /LICENSE/],\n        maximumFileSizeToCacheInBytes: 5 * 1024 * 1024,\n    }),\n    // 改动ts文件触发类型检查\n    useTypeScript &&\n    new ForkTsCheckerWebpackPlugin({\n        async: isEnvDevelopment,\n        typescript: {\n            typescriptPath: resolve.sync('typescript', {\n                basedir: paths.appNodeModules,\n            }),\n            configOverwrite: {\n                compilerOptions: {\n                sourceMap: isEnvProduction\n                    ? shouldUseSourceMap\n                    : isEnvDevelopment,\n                skipLibCheck: true,\n                inlineSourceMap: false,\n                declarationMap: false,\n                noEmit: true,\n                incremental: true,\n                tsBuildInfoFile: paths.appTsBuildInfoFile,\n                },\n            },\n            context: paths.appPath,\n            diagnosticOptions: {\n                syntactic: true,\n            },\n            mode: 'write-references',\n        },\n        issue: {\n            include: [\n                { file: '../**/src/**/*.{ts,tsx}' },\n                { file: '**/src/**/*.{ts,tsx}' },\n            ],\n            exclude: [\n                { file: '**/src/**/__tests__/**' },\n                { file: '**/src/**/?(*.){spec|test}.*' },\n                { file: '**/src/setupProxy.*' },\n                { file: '**/src/setupTests.*' },\n            ],\n        },\n        logger: {\n            infrastructure: 'silent',\n        },\n    }),\n    !disableESLintPlugin &&\n    new ESLintPlugin({\n        extensions: ['js', 'mjs', 'jsx', 'ts', 'tsx'],\n        formatter: require.resolve('react-dev-utils/eslintFormatter'),\n        eslintPath: require.resolve('eslint'),\n        failOnError: !(isEnvDevelopment && emitErrorsAsWarnings),\n        context: paths.appSrc,\n        cache: true,\n        cacheLocation: path.resolve(\n            paths.appNodeModules,\n            '.cache/.eslintcache'\n        ),\n        // ESLint class options\n        cwd: paths.appPath,\n        resolvePluginsRelativeTo: __dirname,\n        baseConfig: {\n        extends: [require.resolve('eslint-config-react-app/base')],\n        rules: {\n            ...(!hasJsxRuntime && {\n            'react/react-in-jsx-scope': 'error',\n            }),\n        },\n        },\n    }),\n].filter(Boolean),\n\n};\n```\n\n### performance\n\nperformance:CRA自带了FileSizeReporter\n\n```vbnet\nperformance: false,\n```\n\neject命令\n-------\n\neject命令并不复杂，主要也就是是将react-scripts中的文件输出出去，对于eject后不需要的内容，文件中都已经做了标记：\n\n```sql\n// @remove-on-eject-end\n...\n// @remove-on-eject-begin\n```\n\neject过程成中会用正则将这些标记的代码给删除，另外再删除掉react-scripts包，并修改package.json中的几个命令，如`\"start\": \"node scripts/start.js\",`\n\n结尾\n--\n\nCreate React App的源码解析就到这里，后续的文章将会介绍如何自己设计和搭建一个CLI,并不断将其改造完善成一个企业级的脚手架。","source":"_posts/前端脚手架：从入门到进阶——Create React App源码解析（四）.md","raw":"---\n title: \"前端脚手架：从入门到进阶——Create React App源码解析（四）\"\n date: 2021-11-15\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第 15 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\nCRA webpack配置\n-------------\n\n本文编写的时候react-scripts版本时4.0.3，还没有升级到webpack5，不过其仓库中已经有了webpack5相关的配置，因此下面的解析是基于其最新的代码。\n\ncreate-react-app的webpack配置基本上集中在react-scripts/config/webpack.config.js，development和production的不同环境配置都在这一个文件里进行判断，将它拆开后更好阅读些：\n\n首先是声明一些环境变量，这些变量基本集中在config目录下的paths.js、modules.js、env.js文件中，这里先进行一个预设：项目的入口为`D:\\cra-demo1\\src\\index.tsx`，后续入口相关的参数将替换为这个值，这样更方便理解\n\n*   最外层：导出的是一个函数\n\n```javascript\nmodule.exports = function (webpackEnv) {\n\n}\n\n```\n\nwebpack配置文件，可以导出一个对象，或者多个对象，也可以导出一个函数，或者一个promise，\n\n当导出一个函数时，可以传入两个参数，第一是环境对象environment，第二个是传给webpack的选项\n\n### target\n\ntarget: webpack中文文档已经过期了，如果项目中有browserslist配置，webpack将会用它 - 确定可用于生成运行时代码的 ES 功能 - 推断环境，可以不再配置output.environment\n\n```vbnet\ntarget: ['browserslist'],\n```\n\n### mode\n\nmode设置为`'production'`，会将 DefinePlugin 中 process.env.NODE\\_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。\n\n```arduino\n mode: isEnvProduction ? 'production' : isEnvDevelopment && 'development',,\n```\n\n### bail\n\nbail:在生产环境编译遇到错误直接抛出并终止\n\n```makefile\nbail: isEnvProduction,\n```\n\n### devtool\n\ndevtool: 生产环境使用`shouldUseSourceMap`控制是否需要source map。在实践中，生产环境打包可能需要生成source map方便监控或日志平台进行定位，但也可能不需要，因此这里设置了一个变量，由`process.env.GENERATE_SOURCEMAP`控制\n\n```vbnet\ndevtool: isEnvProduction\n    ? shouldUseSourceMap\n    ? 'source-map'\n    : false\n    : isEnvDevelopment && 'cheap-module-source-map',\n```\n\n### entry\n\nentry：入口文件，比如这里是'D:\\\\cra-demo1\\\\src\\\\index.tsx'\n\n```makefile\n\nentry: paths.appIndexJs,\n```\n\n### output\n\noutput:相关字段配置和解释如下\n\n```javascript\n output: {\n    // 输出目录，比如这里是'D:\\\\cra-demo1\\\\build'.\n    path: paths.appBuild,\n     // 开发环境输出代码里增加/* filename */注释\n    pathinfo: isEnvDevelopment,\n    // 主bundle\n    filename: isEnvProduction\n    ? 'static/js/[name].[contenthash:8].js'\n    : isEnvDevelopment && 'static/js/bundle.js',\n    // 代码分隔后的chunk 文件\n    chunkFilename: isEnvProduction\n    ? 'static/js/[name].[contenthash:8].chunk.js'\n    : isEnvDevelopment && 'static/js/[name].chunk.js',\n    assetModuleFilename: 'static/media/[name].[hash][ext]',\n    // 这里是'/'\n    publicPath: paths.publicUrlOrPath,\n    // source map路径\n    devtoolModuleFilenameTemplate: isEnvProduction\n    ? info =>\n        path\n            .relative(paths.appSrc, info.absoluteResourcePath)\n            .replace(/\\\\/g, '/')\n    : isEnvDevelopment &&\n        (info => path.resolve(info.absoluteResourcePath).replace(/\\\\/g, '/')),\n},\n```\n\n### cache\n\ncache: webpack5自带的缓存，加快构建速度\n\n```arduino\ncache: {\n    // 将缓存保存在文件中\n    type: 'filesystem',\n    // 缓存版本，版本更新将使原缓存失效\n    version: createEnvironmentHash(env.raw),\n    // 缓存的目录：node_modules/.cache\n    cacheDirectory: paths.appWebpackCache,\n    // 当编译器空闲时将数据存储在一个文件中，用于所有缓存项\n    store: 'pack',\n    // 缓存的依赖，这里的变更将使缓存失效\n    buildDependencies: {\n        defaultWebpack: ['webpack/lib/'],\n        config: [__filename],\n        tsconfig: [paths.appTsConfig, paths.appJsConfig].filter(f =>\n            fs.existsSync(f)\n        ),\n    },\n},\n```\n\n### infrastructureLogging\n\ninfrastructureLogging:基础日志级别，这里不开启，cra有自己的日志\n\n```css\ninfrastructureLogging: {\n    level: 'none',\n},\n```\n\n### optimization\n\n*   optimization: 代码优化，比如压缩、分割等\n\n```yaml\noptimization: {\n    // 生产环境进行压缩\n    minimize: isEnvProduction,\n    minimizer: [\n        js和css压缩...\n    ],\n},\n```\n\n*   js压缩\n\n```yaml\nnew TerserPlugin({\n    terserOptions: {\n    parse: {\n        // 以es8语法解析\n        ecma: 8,\n    },\n    compress: {\n        ecma: 5,\n        warnings: false,\n        comparisons: false,\n        inline: 2,\n    },\n    mangle: {\n        // 解决Safari 10中的一个bug\n        safari10: true,\n    },\n    // 是否保留classnames\n    keep_classnames: isEnvProductionProfile,\n    keep_fnames: isEnvProductionProfile,\n    output: {\n        ecma: 5,\n        comments: false,\n        ascii_only: true,\n    },\n    },\n}),\n```\n\n*   css 压缩\n\n```scss\n    new CssMinimizerPlugin(),\n```\n\n### resolve\n\nresolve:帮助找到模块的路径\n\n*   modules:从哪里找模块\n\n```css\nresolve: {\n    // 这个配置主要考虑了monorepo的场景\n    modules: ['node_modules', paths.appNodeModules].concat(\n        modules.additionalModulePaths || []\n    ),\n   ...\n},\n```\n\n*   extensions: 可以省略的后缀名，包含了： \\[ 'web.mjs', 'mjs', 'web.js', 'js', 'web.ts', 'ts', 'web.tsx', 'tsx', 'json', 'web.jsx', 'jsx', \\];\n\n```ini\n extensions: paths.moduleFileExtensions\n        .map(ext => `.${ext}`)\n        .filter(ext => useTypeScript || !ext.includes('ts')),\n    \n```\n\n*   alias:modules.webpackAliases中只有`src`\n\n```csharp\nalias: {\n        'react-native': 'react-native-web',\n        // Allows for better profiling with ReactDevTools\n        ...(isEnvProductionProfile && {\n            'react-dom$': 'react-dom/profiling',\n            'scheduler/tracing': 'scheduler/tracing-profiling',\n        }),\n        // 这里只设置了src\n        ...(modules.webpackAliases || {}),\n    },\n    \n```\n\n*   plugins:\n\n```arduino\nplugins: [\n    // 这个插件用来防止用户从src之外的地方导入文件\n        new ModuleScopePlugin(paths.appSrc, [\n            paths.appPackageJson,\n            reactRefreshRuntimeEntry,\n            reactRefreshWebpackPluginRuntimeEntry,\n            babelRuntimeEntry,\n            babelRuntimeEntryHelpers,\n            babelRuntimeRegenerator,\n        ]),\n    ],\n```\n\n### module\n\nmodule: 如何处理不同类型的模块\n\n*   strictExportPresence\n\n```arduino\nmodule: {\n    // 将缺失的导出作为error，而不是warning\n    strictExportPresence: true,\n    ...\n   \n},\n```\n\n*   rules: 这里用了`oneOf`api，遇到第一个匹配的就会终止，如果没有匹配的，就会执行最下面的\n\n```yaml\n rules: [\n        // 处理第三方库的source map\n        shouldUseSourceMap && {\n            enforce: 'pre',\n            exclude: /@babel(?:\\/|\\\\{1,2})runtime/,\n            test: /\\.(js|mjs|jsx|ts|tsx|css)$/,\n            loader: require.resolve('source-map-loader'),\n        },\n        {\n            // \"oneOf\" 遍历下面所有的loader，直到第一个符合的，如果没有找到，则使用最下面的'file loader'\n            // webpack5取消了file-loader，因此这里加了个引号\n            oneOf: [\n                {\n                    test: [/\\.avif$/],\n                    type: 'asset',\n                    mimetype: 'image/avif',\n                    // 这个是webpack5的配置，取消raw-loader、url-loader、file-loader\n                    parser: {\n                        dataUrlCondition: {\n                            maxSize: imageInlineSizeLimit,\n                        },\n                    },\n                },\n                {\n                    test: [/\\.bmp$/, /\\.gif$/, /\\.jpe?g$/, /\\.png$/],\n                    type: 'asset',\n                    parser: {\n                    dataUrlCondition: {\n                        maxSize: imageInlineSizeLimit,\n                    },\n                    },\n                },\n                {\n                    test: /\\.svg$/,\n                    use: [\n                        {\n                            //可以将svg以组件的形式导入 import Star from './star.svg'\n                            loader: require.resolve('@svgr/webpack'),\n                            options: {\n                                prettier: false,\n                                svgo: false,\n                                svgoConfig: {\n                                    plugins: [{ removeViewBox: false }],\n                                },\n                                titleProp: true,\n                                ref: true,\n                            },\n                        },\n                        {\n                            loader: require.resolve('file-loader'),\n                            options: {\n                            name: 'static/media/[name].[hash].[ext]',\n                            },\n                        },\n                    ],\n                    // 在这些条件中生效\n                    issuer: {\n                    and: [/\\.(ts|tsx|js|jsx|md|mdx)$/],\n                    },\n                },\n                {\n                    test: /\\.(js|mjs|jsx|ts|tsx)$/,\n                    include: paths.appSrc,\n                    loader: require.resolve('babel-loader'),\n                    options: {\n                        // babel-preset-react-app是cra自定义的preset,包括了 JSX, Flow, TypeScript, and some ESnext features\n                        customize: require.resolve(\n                            'babel-preset-react-app/webpack-overrides'\n                        ),\n                        presets: [\n                            [\n                            require.resolve('babel-preset-react-app'),\n                            {\n                                runtime: hasJsxRuntime ? 'automatic' : 'classic',\n                            },\n                            ],\n                        ],\n                        // 一下两个eject后会移除\n                        babelrc: false,\n                        configFile: false,\n                        // 确保 cache identifier的唯一性，eject后会移除\n                        cacheIdentifier: getCacheIdentifier(\n                            isEnvProduction\n                            ? 'production'\n                            : isEnvDevelopment && 'development',\n                            [\n                            'babel-plugin-named-asset-import',\n                            'babel-preset-react-app',\n                            'react-dev-utils',\n                            'react-scripts',\n                            ]\n                        ),\n                        plugins: [\n                            isEnvDevelopment &&\n                            shouldUseReactRefresh &&\n                            require.resolve('react-refresh/babel'),\n                        ].filter(Boolean),\n                        // babel-loader能将缓存保存在./node_modules/.cache/babel-loader/\n                        cacheDirectory: true,\n                        cacheCompression: false,\n                        compact: isEnvProduction,\n                    },\n                },\n                // 处理其他js\n                {\n                    test: /\\.(js|mjs)$/,\n                    exclude: /@babel(?:\\/|\\\\{1,2})runtime/,\n                    loader: require.resolve('babel-loader'),\n                    options: {\n                        ... 同上\n                    },\n                },\n                {\n                    test: cssRegex,\n                    exclude: cssModuleRegex,\n                    use: getStyleLoaders({\n                    importLoaders: 1,\n                    sourceMap: isEnvProduction\n                        ? shouldUseSourceMap\n                        : isEnvDevelopment,\n                    modules: {\n                        mode: 'icss',\n                    },\n                    }),\n                    sideEffects: true,\n                },\n                {\n                    test: cssModuleRegex,\n                    use: getStyleLoaders({\n                    importLoaders: 1,\n                    sourceMap: isEnvProduction\n                        ? shouldUseSourceMap\n                        : isEnvDevelopment,\n                    modules: {\n                        mode: 'local',\n                        getLocalIdent: getCSSModuleLocalIdent,\n                    },\n                    }),\n                },\n                {\n                    test: sassRegex,\n                    exclude: sassModuleRegex,\n                    use: getStyleLoaders(\n                    {\n                        importLoaders: 3,\n                        sourceMap: isEnvProduction\n                        ? shouldUseSourceMap\n                        : isEnvDevelopment,\n                        modules: {\n                        mode: 'icss',\n                        },\n                    },\n                    'sass-loader'\n                    ),\n                    sideEffects: true,\n                },\n                {\n                    test: sassModuleRegex,\n                    use: getStyleLoaders(\n                    {\n                        importLoaders: 3,\n                        sourceMap: isEnvProduction\n                        ? shouldUseSourceMap\n                        : isEnvDevelopment,\n                        modules: {\n                        mode: 'local',\n                        getLocalIdent: getCSSModuleLocalIdent,\n                        },\n                    },\n                    'sass-loader'\n                    ),\n                },\n                // 兜底的'file loader'\n                {\n                    exclude: [/^$/, /\\.(js|mjs|jsx|ts|tsx)$/, /\\.html$/, /\\.json$/],\n                    type: 'asset/resource',\n                },\n            ],\n        },\n    ].filter(Boolean),\n```\n\n### plugins:\n\nplugins:各种插件，作用见注释\n\n```yaml\nplugins: [\n    new HtmlWebpackPlugin(\n    Object.assign(\n        {},\n        {\n        inject: true,\n        template: paths.appHtml,\n        },\n        isEnvProduction\n        ? {\n            minify: {\n                removeComments: true,\n                collapseWhitespace: true,\n                removeRedundantAttributes: true,\n                useShortDoctype: true,\n                removeEmptyAttributes: true,\n                removeStyleLinkTypeAttributes: true,\n                keepClosingSlash: true,\n                minifyJS: true,\n                minifyCSS: true,\n                minifyURLs: true,\n            },\n            }\n        : undefined\n    )\n    ),\n    isEnvProduction &&\n    shouldInlineRuntimeChunk &&\n    new InlineChunkHtmlPlugin(HtmlWebpackPlugin, [/runtime-.+[.]js/]),\n    // 指定index.html中可以使用的变量，如<link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    new InterpolateHtmlPlugin(HtmlWebpackPlugin, env.raw),\n    new ModuleNotFoundPlugin(paths.appPath),\n    new webpack.DefinePlugin(env.stringified),\n    isEnvDevelopment &&\n    shouldUseReactRefresh &&\n    new ReactRefreshWebpackPlugin({\n        overlay: false,\n    }),\n    // 大小写敏感，这个插件挺有用的\n    isEnvDevelopment && new CaseSensitivePathsPlugin(),\n    isEnvProduction &&\n    new MiniCssExtractPlugin({\n        filename: 'static/css/[name].[contenthash:8].css',\n        chunkFilename: 'static/css/[name].[contenthash:8].chunk.css',\n    }),\n \n    new WebpackManifestPlugin({\n        fileName: 'asset-manifest.json',\n        publicPath: paths.publicUrlOrPath,\n        generate: (seed, files, entrypoints) => {\n            const manifestFiles = files.reduce((manifest, file) => {\n            manifest[file.name] = file.path;\n            return manifest;\n            }, seed);\n            const entrypointFiles = entrypoints.main.filter(\n            fileName => !fileName.endsWith('.map')\n            );\n\n            return {\n            files: manifestFiles,\n            entrypoints: entrypointFiles,\n            };\n        },\n    }),\n    // 不打包momentjs中的语言包\n    new webpack.IgnorePlugin({\n        resourceRegExp: /^\\.\\/locale$/,\n        contextRegExp: /moment$/,\n    }),\n    // service worker\n    isEnvProduction &&\n    fs.existsSync(swSrc) &&\n    new WorkboxWebpackPlugin.InjectManifest({\n        swSrc,\n        dontCacheBustURLsMatching: /\\.[0-9a-f]{8}\\./,\n        exclude: [/\\.map$/, /asset-manifest\\.json$/, /LICENSE/],\n        maximumFileSizeToCacheInBytes: 5 * 1024 * 1024,\n    }),\n    // 改动ts文件触发类型检查\n    useTypeScript &&\n    new ForkTsCheckerWebpackPlugin({\n        async: isEnvDevelopment,\n        typescript: {\n            typescriptPath: resolve.sync('typescript', {\n                basedir: paths.appNodeModules,\n            }),\n            configOverwrite: {\n                compilerOptions: {\n                sourceMap: isEnvProduction\n                    ? shouldUseSourceMap\n                    : isEnvDevelopment,\n                skipLibCheck: true,\n                inlineSourceMap: false,\n                declarationMap: false,\n                noEmit: true,\n                incremental: true,\n                tsBuildInfoFile: paths.appTsBuildInfoFile,\n                },\n            },\n            context: paths.appPath,\n            diagnosticOptions: {\n                syntactic: true,\n            },\n            mode: 'write-references',\n        },\n        issue: {\n            include: [\n                { file: '../**/src/**/*.{ts,tsx}' },\n                { file: '**/src/**/*.{ts,tsx}' },\n            ],\n            exclude: [\n                { file: '**/src/**/__tests__/**' },\n                { file: '**/src/**/?(*.){spec|test}.*' },\n                { file: '**/src/setupProxy.*' },\n                { file: '**/src/setupTests.*' },\n            ],\n        },\n        logger: {\n            infrastructure: 'silent',\n        },\n    }),\n    !disableESLintPlugin &&\n    new ESLintPlugin({\n        extensions: ['js', 'mjs', 'jsx', 'ts', 'tsx'],\n        formatter: require.resolve('react-dev-utils/eslintFormatter'),\n        eslintPath: require.resolve('eslint'),\n        failOnError: !(isEnvDevelopment && emitErrorsAsWarnings),\n        context: paths.appSrc,\n        cache: true,\n        cacheLocation: path.resolve(\n            paths.appNodeModules,\n            '.cache/.eslintcache'\n        ),\n        // ESLint class options\n        cwd: paths.appPath,\n        resolvePluginsRelativeTo: __dirname,\n        baseConfig: {\n        extends: [require.resolve('eslint-config-react-app/base')],\n        rules: {\n            ...(!hasJsxRuntime && {\n            'react/react-in-jsx-scope': 'error',\n            }),\n        },\n        },\n    }),\n].filter(Boolean),\n\n};\n```\n\n### performance\n\nperformance:CRA自带了FileSizeReporter\n\n```vbnet\nperformance: false,\n```\n\neject命令\n-------\n\neject命令并不复杂，主要也就是是将react-scripts中的文件输出出去，对于eject后不需要的内容，文件中都已经做了标记：\n\n```sql\n// @remove-on-eject-end\n...\n// @remove-on-eject-begin\n```\n\neject过程成中会用正则将这些标记的代码给删除，另外再删除掉react-scripts包，并修改package.json中的几个命令，如`\"start\": \"node scripts/start.js\",`\n\n结尾\n--\n\nCreate React App的源码解析就到这里，后续的文章将会介绍如何自己设计和搭建一个CLI,并不断将其改造完善成一个企业级的脚手架。","slug":"前端脚手架：从入门到进阶——Create React App源码解析（四）","published":1,"updated":"2024-04-04T15:27:03.301Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhz005zhajfcszlcjkd","content":"<p>这是我参与11月更文挑战的第 15 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"CRA-webpack配置\"><a href=\"#CRA-webpack配置\" class=\"headerlink\" title=\"CRA webpack配置\"></a>CRA webpack配置</h2><p>本文编写的时候react-scripts版本时4.0.3，还没有升级到webpack5，不过其仓库中已经有了webpack5相关的配置，因此下面的解析是基于其最新的代码。</p>\n<p>create-react-app的webpack配置基本上集中在react-scripts&#x2F;config&#x2F;webpack.config.js，development和production的不同环境配置都在这一个文件里进行判断，将它拆开后更好阅读些：</p>\n<p>首先是声明一些环境变量，这些变量基本集中在config目录下的paths.js、modules.js、env.js文件中，这里先进行一个预设：项目的入口为<code>D:\\cra-demo1\\src\\index.tsx</code>，后续入口相关的参数将替换为这个值，这样更方便理解</p>\n<ul>\n<li>最外层：导出的是一个函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">webpackEnv</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>webpack配置文件，可以导出一个对象，或者多个对象，也可以导出一个函数，或者一个promise，</p>\n<p>当导出一个函数时，可以传入两个参数，第一是环境对象environment，第二个是传给webpack的选项</p>\n<h3 id=\"target\"><a href=\"#target\" class=\"headerlink\" title=\"target\"></a>target</h3><p>target: webpack中文文档已经过期了，如果项目中有browserslist配置，webpack将会用它 - 确定可用于生成运行时代码的 ES 功能 - 推断环境，可以不再配置output.environment</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">target:</span> [<span class=\"comment\">&#x27;browserslist&#x27;],</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h3><p>mode设置为<code>&#39;production&#39;</code>，会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mode: isEnvProduction ? <span class=\"string\">&#x27;production&#x27;</span> : isEnvDevelopment &amp;&amp; <span class=\"string\">&#x27;development&#x27;</span>,,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bail\"><a href=\"#bail\" class=\"headerlink\" title=\"bail\"></a>bail</h3><p>bail:在生产环境编译遇到错误直接抛出并终止</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">bail: isEnvProduction,</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"devtool\"><a href=\"#devtool\" class=\"headerlink\" title=\"devtool\"></a>devtool</h3><p>devtool: 生产环境使用<code>shouldUseSourceMap</code>控制是否需要source map。在实践中，生产环境打包可能需要生成source map方便监控或日志平台进行定位，但也可能不需要，因此这里设置了一个变量，由<code>process.env.GENERATE_SOURCEMAP</code>控制</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">devtool:</span> isEnvProduction</span><br><span class=\"line\">    ? shouldUseSourceMap</span><br><span class=\"line\">    ? <span class=\"comment\">&#x27;source-map&#x27;</span></span><br><span class=\"line\">    : <span class=\"literal\">false</span></span><br><span class=\"line\">    : isEnvDevelopment &amp;&amp; <span class=\"comment\">&#x27;cheap-module-source-map&#x27;,</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"entry\"><a href=\"#entry\" class=\"headerlink\" title=\"entry\"></a>entry</h3><p>entry：入口文件，比如这里是’D:\\cra-demo1\\src\\index.tsx’</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">entry: paths.appIndexJs,</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"output\"><a href=\"#output\" class=\"headerlink\" title=\"output\"></a>output</h3><p>output:相关字段配置和解释如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出目录，比如这里是&#x27;D:\\\\cra-demo1\\\\build&#x27;.</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: paths.<span class=\"property\">appBuild</span>,</span><br><span class=\"line\">     <span class=\"comment\">// 开发环境输出代码里增加/* filename */注释</span></span><br><span class=\"line\">    <span class=\"attr\">pathinfo</span>: isEnvDevelopment,</span><br><span class=\"line\">    <span class=\"comment\">// 主bundle</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: isEnvProduction</span><br><span class=\"line\">    ? <span class=\"string\">&#x27;static/js/[name].[contenthash:8].js&#x27;</span></span><br><span class=\"line\">    : isEnvDevelopment &amp;&amp; <span class=\"string\">&#x27;static/js/bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 代码分隔后的chunk 文件</span></span><br><span class=\"line\">    <span class=\"attr\">chunkFilename</span>: isEnvProduction</span><br><span class=\"line\">    ? <span class=\"string\">&#x27;static/js/[name].[contenthash:8].chunk.js&#x27;</span></span><br><span class=\"line\">    : isEnvDevelopment &amp;&amp; <span class=\"string\">&#x27;static/js/[name].chunk.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">assetModuleFilename</span>: <span class=\"string\">&#x27;static/media/[name].[hash][ext]&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 这里是&#x27;/&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">publicPath</span>: paths.<span class=\"property\">publicUrlOrPath</span>,</span><br><span class=\"line\">    <span class=\"comment\">// source map路径</span></span><br><span class=\"line\">    <span class=\"attr\">devtoolModuleFilenameTemplate</span>: isEnvProduction</span><br><span class=\"line\">    ? <span class=\"function\"><span class=\"params\">info</span> =&gt;</span></span><br><span class=\"line\">        path</span><br><span class=\"line\">            .<span class=\"title function_\">relative</span>(paths.<span class=\"property\">appSrc</span>, info.<span class=\"property\">absoluteResourcePath</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\\\/g</span>, <span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">    : isEnvDevelopment &amp;&amp;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"params\">info</span> =&gt;</span> path.<span class=\"title function_\">resolve</span>(info.<span class=\"property\">absoluteResourcePath</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\\\/g</span>, <span class=\"string\">&#x27;/&#x27;</span>)),</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cache\"><a href=\"#cache\" class=\"headerlink\" title=\"cache\"></a>cache</h3><p>cache: webpack5自带的缓存，加快构建速度</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将缓存保存在文件中</span></span><br><span class=\"line\">    type: <span class=\"string\">&#x27;filesystem&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 缓存版本，版本更新将使原缓存失效</span></span><br><span class=\"line\">    version: <span class=\"built_in\">createEnvironmentHash</span>(env.raw),</span><br><span class=\"line\">    <span class=\"comment\">// 缓存的目录：node_modules/.cache</span></span><br><span class=\"line\">    cacheDirectory: paths.appWebpackCache,</span><br><span class=\"line\">    <span class=\"comment\">// 当编译器空闲时将数据存储在一个文件中，用于所有缓存项</span></span><br><span class=\"line\">    store: <span class=\"string\">&#x27;pack&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 缓存的依赖，这里的变更将使缓存失效</span></span><br><span class=\"line\">    buildDependencies: &#123;</span><br><span class=\"line\">        defaultWebpack: [<span class=\"string\">&#x27;webpack/lib/&#x27;</span>],</span><br><span class=\"line\">        config: [__filename],</span><br><span class=\"line\">        tsconfig: [paths.appTsConfig, paths.appJsConfig].<span class=\"built_in\">filter</span>(f =&gt;</span><br><span class=\"line\">            fs.<span class=\"built_in\">existsSync</span>(f)</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"infrastructureLogging\"><a href=\"#infrastructureLogging\" class=\"headerlink\" title=\"infrastructureLogging\"></a>infrastructureLogging</h3><p>infrastructureLogging:基础日志级别，这里不开启，cra有自己的日志</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">infrastructureLogging: &#123;</span><br><span class=\"line\">    level: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"optimization\"><a href=\"#optimization\" class=\"headerlink\" title=\"optimization\"></a>optimization</h3><ul>\n<li>optimization: 代码优化，比如压缩、分割等</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">optimization:</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">生产环境进行压缩</span></span><br><span class=\"line\">    <span class=\"attr\">minimize:</span> <span class=\"string\">isEnvProduction</span>,</span><br><span class=\"line\">    <span class=\"attr\">minimizer:</span> [</span><br><span class=\"line\">        <span class=\"string\">js和css压缩...</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;<span class=\"string\">,</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>js压缩</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">new</span> <span class=\"string\">TerserPlugin(&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">terserOptions:</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">parse:</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">//</span> <span class=\"string\">以es8语法解析</span></span><br><span class=\"line\">        <span class=\"attr\">ecma:</span> <span class=\"number\">8</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">compress:</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">ecma:</span> <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">warnings:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">comparisons:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">inline:</span> <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mangle:</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">//</span> <span class=\"string\">解决Safari</span> <span class=\"number\">10</span><span class=\"string\">中的一个bug</span></span><br><span class=\"line\">        <span class=\"attr\">safari10:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">是否保留classnames</span></span><br><span class=\"line\">    <span class=\"attr\">keep_classnames:</span> <span class=\"string\">isEnvProductionProfile</span>,</span><br><span class=\"line\">    <span class=\"attr\">keep_fnames:</span> <span class=\"string\">isEnvProductionProfile</span>,</span><br><span class=\"line\">    <span class=\"attr\">output:</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">ecma:</span> <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">comments:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">ascii_only:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#125;<span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"string\">&#125;),</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>css 压缩</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new <span class=\"built_in\">CssMinimizerPlugin</span>(),</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"resolve\"><a href=\"#resolve\" class=\"headerlink\" title=\"resolve\"></a>resolve</h3><p>resolve:帮助找到模块的路径</p>\n<ul>\n<li>modules:从哪里找模块</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">    // 这个配置主要考虑了monorepo的场景</span><br><span class=\"line\">    modules: [<span class=\"string\">&#x27;node_modules&#x27;</span>, paths.appNodeModules].<span class=\"built_in\">concat</span>(</span><br><span class=\"line\">        modules.additionalModulePaths || []</span><br><span class=\"line\">    ),</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>extensions: 可以省略的后缀名，包含了： [ ‘web.mjs’, ‘mjs’, ‘web.js’, ‘js’, ‘web.ts’, ‘ts’, ‘web.tsx’, ‘tsx’, ‘json’, ‘web.jsx’, ‘jsx’, ];</li>\n</ul>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extensions: paths.moduleFileExtensions</span><br><span class=\"line\">       .map(<span class=\"attr\">ext</span> =&gt; `.<span class=\"variable\">$&#123;ext&#125;</span>`)</span><br><span class=\"line\">       .filter(<span class=\"attr\">ext</span> =&gt; useTypeScript || !ext.includes(<span class=\"string\">&#x27;ts&#x27;</span>)),</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>alias:modules.webpackAliases中只有<code>src</code></li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alias</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;react-native&#x27;</span>: <span class=\"string\">&#x27;react-native-web&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// Allows for better profiling with ReactDevTools</span></span><br><span class=\"line\">        ...(isEnvProductionProfile &amp;&amp; &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;react-dom$&#x27;</span>: <span class=\"string\">&#x27;react-dom/profiling&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;scheduler/tracing&#x27;</span>: <span class=\"string\">&#x27;scheduler/tracing-profiling&#x27;</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"comment\">// 这里只设置了src</span></span><br><span class=\"line\">        ...(modules.webpackAliases || &#123;&#125;),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>plugins:</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// 这个插件用来防止用户从src之外的地方导入文件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"built_in\">ModuleScopePlugin</span>(paths.appSrc, [</span><br><span class=\"line\">            paths.appPackageJson,</span><br><span class=\"line\">            reactRefreshRuntimeEntry,</span><br><span class=\"line\">            reactRefreshWebpackPluginRuntimeEntry,</span><br><span class=\"line\">            babelRuntimeEntry,</span><br><span class=\"line\">            babelRuntimeEntryHelpers,</span><br><span class=\"line\">            babelRuntimeRegenerator,</span><br><span class=\"line\">        ]),</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h3><p>module: 如何处理不同类型的模块</p>\n<ul>\n<li>strictExportPresence</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将缺失的导出作为error，而不是warning</span></span><br><span class=\"line\">    strictExportPresence: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>rules: 这里用了<code>oneOf</code>api，遇到第一个匹配的就会终止，如果没有匹配的，就会执行最下面的</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rules:</span> [</span><br><span class=\"line\">       <span class=\"string\">//</span> <span class=\"string\">处理第三方库的source</span> <span class=\"string\">map</span></span><br><span class=\"line\">       <span class=\"string\">shouldUseSourceMap</span> <span class=\"string\">&amp;&amp;</span> &#123;</span><br><span class=\"line\">           <span class=\"attr\">enforce:</span> <span class=\"string\">&#x27;pre&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">exclude:</span> <span class=\"string\">/@babel(?:\\/|\\\\</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;<span class=\"string\">)runtime/</span>,</span><br><span class=\"line\">           <span class=\"attr\">test:</span> <span class=\"string\">/\\.(js|mjs|jsx|ts|tsx|css)$/</span>,</span><br><span class=\"line\">           <span class=\"attr\">loader:</span> <span class=\"string\">require.resolve(&#x27;source-map-loader&#x27;)</span>,</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"string\">//</span> <span class=\"string\">&quot;oneOf&quot;</span> <span class=\"string\">遍历下面所有的loader，直到第一个符合的，如果没有找到，则使用最下面的&#x27;file</span> <span class=\"string\">loader&#x27;</span></span><br><span class=\"line\">           <span class=\"string\">//</span> <span class=\"string\">webpack5取消了file-loader，因此这里加了个引号</span></span><br><span class=\"line\">           <span class=\"attr\">oneOf:</span> [</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> [<span class=\"string\">/\\.avif$/</span>],</span><br><span class=\"line\">                   <span class=\"attr\">type:</span> <span class=\"string\">&#x27;asset&#x27;</span>,</span><br><span class=\"line\">                   <span class=\"attr\">mimetype:</span> <span class=\"string\">&#x27;image/avif&#x27;</span>,</span><br><span class=\"line\">                   <span class=\"string\">//</span> <span class=\"string\">这个是webpack5的配置，取消raw-loader、url-loader、file-loader</span></span><br><span class=\"line\">                   <span class=\"attr\">parser:</span> &#123;</span><br><span class=\"line\">                       <span class=\"attr\">dataUrlCondition:</span> &#123;</span><br><span class=\"line\">                           <span class=\"attr\">maxSize:</span> <span class=\"string\">imageInlineSizeLimit</span>,</span><br><span class=\"line\">                       &#125;,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> [<span class=\"string\">/\\.bmp$/</span>, <span class=\"string\">/\\.gif$/</span>, <span class=\"string\">/\\.jpe?g$/</span>, <span class=\"string\">/\\.png$/</span>],</span><br><span class=\"line\">                   <span class=\"attr\">type:</span> <span class=\"string\">&#x27;asset&#x27;</span>,</span><br><span class=\"line\">                   <span class=\"attr\">parser:</span> &#123;</span><br><span class=\"line\">                   <span class=\"attr\">dataUrlCondition:</span> &#123;</span><br><span class=\"line\">                       <span class=\"attr\">maxSize:</span> <span class=\"string\">imageInlineSizeLimit</span>,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> <span class=\"string\">/\\.svg$/</span>,</span><br><span class=\"line\">                   <span class=\"attr\">use:</span> [</span><br><span class=\"line\">                       &#123;</span><br><span class=\"line\">                           <span class=\"string\">//可以将svg以组件的形式导入</span> <span class=\"string\">import</span> <span class=\"string\">Star</span> <span class=\"string\">from</span> <span class=\"string\">&#x27;./star.svg&#x27;</span></span><br><span class=\"line\">                           <span class=\"attr\">loader:</span> <span class=\"string\">require.resolve(&#x27;@svgr/webpack&#x27;)</span>,</span><br><span class=\"line\">                           <span class=\"attr\">options:</span> &#123;</span><br><span class=\"line\">                               <span class=\"attr\">prettier:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">                               <span class=\"attr\">svgo:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">                               <span class=\"attr\">svgoConfig:</span> &#123;</span><br><span class=\"line\">                                   <span class=\"attr\">plugins:</span> [&#123; <span class=\"attr\">removeViewBox:</span> <span class=\"literal\">false</span> &#125;],</span><br><span class=\"line\">                               &#125;,</span><br><span class=\"line\">                               <span class=\"attr\">titleProp:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                               <span class=\"attr\">ref:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                           &#125;,</span><br><span class=\"line\">                       &#125;,</span><br><span class=\"line\">                       &#123;</span><br><span class=\"line\">                           <span class=\"attr\">loader:</span> <span class=\"string\">require.resolve(&#x27;file-loader&#x27;)</span>,</span><br><span class=\"line\">                           <span class=\"attr\">options:</span> &#123;</span><br><span class=\"line\">                           <span class=\"attr\">name:</span> <span class=\"string\">&#x27;static/media/[name].[hash].[ext]&#x27;</span>,</span><br><span class=\"line\">                           &#125;,</span><br><span class=\"line\">                       &#125;,</span><br><span class=\"line\">                   ],</span><br><span class=\"line\">                   <span class=\"string\">//</span> <span class=\"string\">在这些条件中生效</span></span><br><span class=\"line\">                   <span class=\"attr\">issuer:</span> &#123;</span><br><span class=\"line\">                   <span class=\"attr\">and:</span> [<span class=\"string\">/\\.(ts|tsx|js|jsx|md|mdx)$/</span>],</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> <span class=\"string\">/\\.(js|mjs|jsx|ts|tsx)$/</span>,</span><br><span class=\"line\">                   <span class=\"attr\">include:</span> <span class=\"string\">paths.appSrc</span>,</span><br><span class=\"line\">                   <span class=\"attr\">loader:</span> <span class=\"string\">require.resolve(&#x27;babel-loader&#x27;)</span>,</span><br><span class=\"line\">                   <span class=\"attr\">options:</span> &#123;</span><br><span class=\"line\">                       <span class=\"string\">//</span> <span class=\"string\">babel-preset-react-app是cra自定义的preset</span>,<span class=\"string\">包括了</span> <span class=\"string\">JSX</span>, <span class=\"string\">Flow</span>, <span class=\"string\">TypeScript</span>, <span class=\"string\">and</span> <span class=\"string\">some</span> <span class=\"string\">ESnext</span> <span class=\"string\">features</span></span><br><span class=\"line\">                       <span class=\"attr\">customize:</span> <span class=\"string\">require.resolve(</span></span><br><span class=\"line\">                           <span class=\"string\">&#x27;babel-preset-react-app/webpack-overrides&#x27;</span></span><br><span class=\"line\">                       <span class=\"string\">)</span>,</span><br><span class=\"line\">                       <span class=\"attr\">presets:</span> [</span><br><span class=\"line\">                           [</span><br><span class=\"line\">                           <span class=\"string\">require.resolve(&#x27;babel-preset-react-app&#x27;)</span>,</span><br><span class=\"line\">                           &#123;</span><br><span class=\"line\">                               <span class=\"attr\">runtime:</span> <span class=\"string\">hasJsxRuntime</span> <span class=\"string\">?</span> <span class=\"string\">&#x27;automatic&#x27;</span> <span class=\"string\">:</span> <span class=\"string\">&#x27;classic&#x27;</span>,</span><br><span class=\"line\">                           &#125;,</span><br><span class=\"line\">                           ],</span><br><span class=\"line\">                       ],</span><br><span class=\"line\">                       <span class=\"string\">//</span> <span class=\"string\">一下两个eject后会移除</span></span><br><span class=\"line\">                       <span class=\"attr\">babelrc:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">                       <span class=\"attr\">configFile:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">                       <span class=\"string\">//</span> <span class=\"string\">确保</span> <span class=\"string\">cache</span> <span class=\"string\">identifier的唯一性，eject后会移除</span></span><br><span class=\"line\">                       <span class=\"attr\">cacheIdentifier:</span> <span class=\"string\">getCacheIdentifier(</span></span><br><span class=\"line\">                           <span class=\"string\">isEnvProduction</span></span><br><span class=\"line\">                           <span class=\"string\">?</span> <span class=\"string\">&#x27;production&#x27;</span></span><br><span class=\"line\">                           <span class=\"string\">:</span> <span class=\"string\">isEnvDevelopment</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">                           [</span><br><span class=\"line\">                           <span class=\"string\">&#x27;babel-plugin-named-asset-import&#x27;</span>,</span><br><span class=\"line\">                           <span class=\"string\">&#x27;babel-preset-react-app&#x27;</span>,</span><br><span class=\"line\">                           <span class=\"string\">&#x27;react-dev-utils&#x27;</span>,</span><br><span class=\"line\">                           <span class=\"string\">&#x27;react-scripts&#x27;</span>,</span><br><span class=\"line\">                           ]</span><br><span class=\"line\">                       <span class=\"string\">)</span>,</span><br><span class=\"line\">                       <span class=\"attr\">plugins:</span> [</span><br><span class=\"line\">                           <span class=\"string\">isEnvDevelopment</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">                           <span class=\"string\">shouldUseReactRefresh</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">                           <span class=\"string\">require.resolve(&#x27;react-refresh/babel&#x27;)</span>,</span><br><span class=\"line\">                       ]<span class=\"string\">.filter(Boolean)</span>,</span><br><span class=\"line\">                       <span class=\"string\">//</span> <span class=\"string\">babel-loader能将缓存保存在./node_modules/.cache/babel-loader/</span></span><br><span class=\"line\">                       <span class=\"attr\">cacheDirectory:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                       <span class=\"attr\">cacheCompression:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">                       <span class=\"attr\">compact:</span> <span class=\"string\">isEnvProduction</span>,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               <span class=\"string\">//</span> <span class=\"string\">处理其他js</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> <span class=\"string\">/\\.(js|mjs)$/</span>,</span><br><span class=\"line\">                   <span class=\"attr\">exclude:</span> <span class=\"string\">/@babel(?:\\/|\\\\</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;<span class=\"string\">)runtime/</span>,</span><br><span class=\"line\">                   <span class=\"attr\">loader:</span> <span class=\"string\">require.resolve(&#x27;babel-loader&#x27;)</span>,</span><br><span class=\"line\">                   <span class=\"attr\">options:</span> &#123;</span><br><span class=\"line\">                       <span class=\"string\">...</span> <span class=\"string\">同上</span></span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> <span class=\"string\">cssRegex</span>,</span><br><span class=\"line\">                   <span class=\"attr\">exclude:</span> <span class=\"string\">cssModuleRegex</span>,</span><br><span class=\"line\">                   <span class=\"attr\">use:</span> <span class=\"string\">getStyleLoaders(</span>&#123;</span><br><span class=\"line\">                   <span class=\"attr\">importLoaders:</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">                   <span class=\"attr\">sourceMap:</span> <span class=\"string\">isEnvProduction</span></span><br><span class=\"line\">                       <span class=\"string\">?</span> <span class=\"string\">shouldUseSourceMap</span></span><br><span class=\"line\">                       <span class=\"string\">:</span> <span class=\"string\">isEnvDevelopment</span>,</span><br><span class=\"line\">                   <span class=\"attr\">modules:</span> &#123;</span><br><span class=\"line\">                       <span class=\"attr\">mode:</span> <span class=\"string\">&#x27;icss&#x27;</span>,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">                   &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">                   <span class=\"attr\">sideEffects:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> <span class=\"string\">cssModuleRegex</span>,</span><br><span class=\"line\">                   <span class=\"attr\">use:</span> <span class=\"string\">getStyleLoaders(</span>&#123;</span><br><span class=\"line\">                   <span class=\"attr\">importLoaders:</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">                   <span class=\"attr\">sourceMap:</span> <span class=\"string\">isEnvProduction</span></span><br><span class=\"line\">                       <span class=\"string\">?</span> <span class=\"string\">shouldUseSourceMap</span></span><br><span class=\"line\">                       <span class=\"string\">:</span> <span class=\"string\">isEnvDevelopment</span>,</span><br><span class=\"line\">                   <span class=\"attr\">modules:</span> &#123;</span><br><span class=\"line\">                       <span class=\"attr\">mode:</span> <span class=\"string\">&#x27;local&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"attr\">getLocalIdent:</span> <span class=\"string\">getCSSModuleLocalIdent</span>,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">                   &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> <span class=\"string\">sassRegex</span>,</span><br><span class=\"line\">                   <span class=\"attr\">exclude:</span> <span class=\"string\">sassModuleRegex</span>,</span><br><span class=\"line\">                   <span class=\"attr\">use:</span> <span class=\"string\">getStyleLoaders(</span></span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       <span class=\"attr\">importLoaders:</span> <span class=\"number\">3</span>,</span><br><span class=\"line\">                       <span class=\"attr\">sourceMap:</span> <span class=\"string\">isEnvProduction</span></span><br><span class=\"line\">                       <span class=\"string\">?</span> <span class=\"string\">shouldUseSourceMap</span></span><br><span class=\"line\">                       <span class=\"string\">:</span> <span class=\"string\">isEnvDevelopment</span>,</span><br><span class=\"line\">                       <span class=\"attr\">modules:</span> &#123;</span><br><span class=\"line\">                       <span class=\"attr\">mode:</span> <span class=\"string\">&#x27;icss&#x27;</span>,</span><br><span class=\"line\">                       &#125;,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">                   <span class=\"string\">&#x27;sass-loader&#x27;</span></span><br><span class=\"line\">                   <span class=\"string\">)</span>,</span><br><span class=\"line\">                   <span class=\"attr\">sideEffects:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> <span class=\"string\">sassModuleRegex</span>,</span><br><span class=\"line\">                   <span class=\"attr\">use:</span> <span class=\"string\">getStyleLoaders(</span></span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       <span class=\"attr\">importLoaders:</span> <span class=\"number\">3</span>,</span><br><span class=\"line\">                       <span class=\"attr\">sourceMap:</span> <span class=\"string\">isEnvProduction</span></span><br><span class=\"line\">                       <span class=\"string\">?</span> <span class=\"string\">shouldUseSourceMap</span></span><br><span class=\"line\">                       <span class=\"string\">:</span> <span class=\"string\">isEnvDevelopment</span>,</span><br><span class=\"line\">                       <span class=\"attr\">modules:</span> &#123;</span><br><span class=\"line\">                       <span class=\"attr\">mode:</span> <span class=\"string\">&#x27;local&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"attr\">getLocalIdent:</span> <span class=\"string\">getCSSModuleLocalIdent</span>,</span><br><span class=\"line\">                       &#125;,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">                   <span class=\"string\">&#x27;sass-loader&#x27;</span></span><br><span class=\"line\">                   <span class=\"string\">)</span>,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               <span class=\"string\">//</span> <span class=\"string\">兜底的&#x27;file</span> <span class=\"string\">loader&#x27;</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">exclude:</span> [<span class=\"string\">/^$/</span>, <span class=\"string\">/\\.(js|mjs|jsx|ts|tsx)$/</span>, <span class=\"string\">/\\.html$/</span>, <span class=\"string\">/\\.json$/</span>],</span><br><span class=\"line\">                   <span class=\"attr\">type:</span> <span class=\"string\">&#x27;asset/resource&#x27;</span>,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">           ],</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">   ]<span class=\"string\">.filter(Boolean),</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins:\"></a>plugins:</h3><p>plugins:各种插件，作用见注释</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins:</span> [</span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">HtmlWebpackPlugin(</span></span><br><span class=\"line\">    <span class=\"string\">Object.assign(</span></span><br><span class=\"line\">        &#123;&#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"attr\">inject:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">template:</span> <span class=\"string\">paths.appHtml</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">isEnvProduction</span></span><br><span class=\"line\">        <span class=\"string\">?</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">minify:</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">removeComments:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">collapseWhitespace:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">removeRedundantAttributes:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">useShortDoctype:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">removeEmptyAttributes:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">removeStyleLinkTypeAttributes:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">keepClosingSlash:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">minifyJS:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">minifyCSS:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">minifyURLs:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"string\">:</span> <span class=\"string\">undefined</span></span><br><span class=\"line\">    <span class=\"string\">)</span></span><br><span class=\"line\">    <span class=\"string\">)</span>,</span><br><span class=\"line\">    <span class=\"string\">isEnvProduction</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">shouldInlineRuntimeChunk</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">InlineChunkHtmlPlugin(HtmlWebpackPlugin</span>, [<span class=\"string\">/runtime-.+</span>[<span class=\"string\">.</span>]<span class=\"string\">js/</span>]<span class=\"string\">)</span>,</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">指定index.html中可以使用的变量，如&lt;link</span> <span class=\"string\">rel=&quot;icon&quot;</span> <span class=\"string\">href=&quot;%PUBLIC_URL%/favicon.ico&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">InterpolateHtmlPlugin(HtmlWebpackPlugin</span>, <span class=\"string\">env.raw)</span>,</span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">ModuleNotFoundPlugin(paths.appPath)</span>,</span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">webpack.DefinePlugin(env.stringified)</span>,</span><br><span class=\"line\">    <span class=\"string\">isEnvDevelopment</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">shouldUseReactRefresh</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">ReactRefreshWebpackPlugin(</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">overlay:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">大小写敏感，这个插件挺有用的</span></span><br><span class=\"line\">    <span class=\"string\">isEnvDevelopment</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">new</span> <span class=\"string\">CaseSensitivePathsPlugin()</span>,</span><br><span class=\"line\">    <span class=\"string\">isEnvProduction</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">MiniCssExtractPlugin(</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">filename:</span> <span class=\"string\">&#x27;static/css/[name].[contenthash:8].css&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">chunkFilename:</span> <span class=\"string\">&#x27;static/css/[name].[contenthash:8].chunk.css&#x27;</span>,</span><br><span class=\"line\">    &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">WebpackManifestPlugin(</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">fileName:</span> <span class=\"string\">&#x27;asset-manifest.json&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">publicPath:</span> <span class=\"string\">paths.publicUrlOrPath</span>,</span><br><span class=\"line\">        <span class=\"attr\">generate:</span> <span class=\"string\">(seed</span>, <span class=\"string\">files</span>, <span class=\"string\">entrypoints)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">const</span> <span class=\"string\">manifestFiles</span> <span class=\"string\">=</span> <span class=\"string\">files.reduce((manifest</span>, <span class=\"string\">file)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">manifest</span>[<span class=\"string\">file.name</span>] <span class=\"string\">=</span> <span class=\"string\">file.path;</span></span><br><span class=\"line\">            <span class=\"string\">return</span> <span class=\"string\">manifest;</span></span><br><span class=\"line\">            &#125;, <span class=\"string\">seed);</span></span><br><span class=\"line\">            <span class=\"string\">const</span> <span class=\"string\">entrypointFiles</span> <span class=\"string\">=</span> <span class=\"string\">entrypoints.main.filter(</span></span><br><span class=\"line\">            <span class=\"string\">fileName</span> <span class=\"string\">=&gt;</span> <span class=\"type\">!fileName.endsWith(&#x27;.map&#x27;)</span></span><br><span class=\"line\">            <span class=\"string\">);</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">files:</span> <span class=\"string\">manifestFiles</span>,</span><br><span class=\"line\">            <span class=\"attr\">entrypoints:</span> <span class=\"string\">entrypointFiles</span>,</span><br><span class=\"line\">            &#125;<span class=\"string\">;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">不打包momentjs中的语言包</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">webpack.IgnorePlugin(</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">resourceRegExp:</span> <span class=\"string\">/^\\.\\/locale$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">contextRegExp:</span> <span class=\"string\">/moment$/</span>,</span><br><span class=\"line\">    &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">service</span> <span class=\"string\">worker</span></span><br><span class=\"line\">    <span class=\"string\">isEnvProduction</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">fs.existsSync(swSrc)</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">WorkboxWebpackPlugin.InjectManifest(</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">swSrc</span>,</span><br><span class=\"line\">        <span class=\"attr\">dontCacheBustURLsMatching:</span> <span class=\"string\">/\\.</span>[<span class=\"number\">0</span><span class=\"string\">-9a-f</span>]&#123;<span class=\"number\">8</span>&#125;<span class=\"string\">\\./</span>,</span><br><span class=\"line\">        <span class=\"attr\">exclude:</span> [<span class=\"string\">/\\.map$/</span>, <span class=\"string\">/asset-manifest\\.json$/</span>, <span class=\"string\">/LICENSE/</span>],</span><br><span class=\"line\">        <span class=\"attr\">maximumFileSizeToCacheInBytes:</span> <span class=\"number\">5</span> <span class=\"string\">*</span> <span class=\"number\">1024</span> <span class=\"string\">*</span> <span class=\"number\">1024</span>,</span><br><span class=\"line\">    &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">改动ts文件触发类型检查</span></span><br><span class=\"line\">    <span class=\"string\">useTypeScript</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">ForkTsCheckerWebpackPlugin(</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">async:</span> <span class=\"string\">isEnvDevelopment</span>,</span><br><span class=\"line\">        <span class=\"attr\">typescript:</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">typescriptPath:</span> <span class=\"string\">resolve.sync(&#x27;typescript&#x27;</span>, &#123;</span><br><span class=\"line\">                <span class=\"attr\">basedir:</span> <span class=\"string\">paths.appNodeModules</span>,</span><br><span class=\"line\">            &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">            <span class=\"attr\">configOverwrite:</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">compilerOptions:</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">sourceMap:</span> <span class=\"string\">isEnvProduction</span></span><br><span class=\"line\">                    <span class=\"string\">?</span> <span class=\"string\">shouldUseSourceMap</span></span><br><span class=\"line\">                    <span class=\"string\">:</span> <span class=\"string\">isEnvDevelopment</span>,</span><br><span class=\"line\">                <span class=\"attr\">skipLibCheck:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">inlineSourceMap:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">                <span class=\"attr\">declarationMap:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">                <span class=\"attr\">noEmit:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">incremental:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">tsBuildInfoFile:</span> <span class=\"string\">paths.appTsBuildInfoFile</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">context:</span> <span class=\"string\">paths.appPath</span>,</span><br><span class=\"line\">            <span class=\"attr\">diagnosticOptions:</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">syntactic:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">mode:</span> <span class=\"string\">&#x27;write-references&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">issue:</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">include:</span> [</span><br><span class=\"line\">                &#123; <span class=\"attr\">file:</span> <span class=\"string\">&#x27;../**/src/**/*.&#123;ts,tsx&#125;&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">file:</span> <span class=\"string\">&#x27;**/src/**/*.&#123;ts,tsx&#125;&#x27;</span> &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">exclude:</span> [</span><br><span class=\"line\">                &#123; <span class=\"attr\">file:</span> <span class=\"string\">&#x27;**/src/**/__tests__/**&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">file:</span> <span class=\"string\">&#x27;**/src/**/?(*.)&#123;spec|test&#125;.*&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">file:</span> <span class=\"string\">&#x27;**/src/setupProxy.*&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">file:</span> <span class=\"string\">&#x27;**/src/setupTests.*&#x27;</span> &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">logger:</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">infrastructure:</span> <span class=\"string\">&#x27;silent&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">    <span class=\"type\">!disableESLintPlugin</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">ESLintPlugin(</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">extensions:</span> [<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"string\">&#x27;mjs&#x27;</span>, <span class=\"string\">&#x27;jsx&#x27;</span>, <span class=\"string\">&#x27;ts&#x27;</span>, <span class=\"string\">&#x27;tsx&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">formatter:</span> <span class=\"string\">require.resolve(&#x27;react-dev-utils/eslintFormatter&#x27;)</span>,</span><br><span class=\"line\">        <span class=\"attr\">eslintPath:</span> <span class=\"string\">require.resolve(&#x27;eslint&#x27;)</span>,</span><br><span class=\"line\">        <span class=\"attr\">failOnError:</span> <span class=\"type\">!(isEnvDevelopment</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">emitErrorsAsWarnings)</span>,</span><br><span class=\"line\">        <span class=\"attr\">context:</span> <span class=\"string\">paths.appSrc</span>,</span><br><span class=\"line\">        <span class=\"attr\">cache:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">cacheLocation:</span> <span class=\"string\">path.resolve(</span></span><br><span class=\"line\">            <span class=\"string\">paths.appNodeModules</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;.cache/.eslintcache&#x27;</span></span><br><span class=\"line\">        <span class=\"string\">)</span>,</span><br><span class=\"line\">        <span class=\"string\">//</span> <span class=\"string\">ESLint</span> <span class=\"string\">class</span> <span class=\"string\">options</span></span><br><span class=\"line\">        <span class=\"attr\">cwd:</span> <span class=\"string\">paths.appPath</span>,</span><br><span class=\"line\">        <span class=\"attr\">resolvePluginsRelativeTo:</span> <span class=\"string\">__dirname</span>,</span><br><span class=\"line\">        <span class=\"attr\">baseConfig:</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">extends:</span> [<span class=\"string\">require.resolve(&#x27;eslint-config-react-app/base&#x27;)</span>],</span><br><span class=\"line\">        <span class=\"attr\">rules:</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">...(!hasJsxRuntime</span> <span class=\"string\">&amp;&amp;</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">&#x27;react/react-in-jsx-scope&#x27;:</span> <span class=\"string\">&#x27;error&#x27;</span>,</span><br><span class=\"line\">            &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">]<span class=\"string\">.filter(Boolean),</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#125;;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"performance\"><a href=\"#performance\" class=\"headerlink\" title=\"performance\"></a>performance</h3><p>performance:CRA自带了FileSizeReporter</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">performance:</span> <span class=\"literal\">false</span>,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"eject命令\"><a href=\"#eject命令\" class=\"headerlink\" title=\"eject命令\"></a>eject命令</h2><p>eject命令并不复杂，主要也就是是将react-scripts中的文件输出出去，对于eject后不需要的内容，文件中都已经做了标记：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span> <span class=\"variable\">@remove</span><span class=\"operator\">-</span><span class=\"keyword\">on</span><span class=\"operator\">-</span>eject<span class=\"operator\">-</span><span class=\"keyword\">end</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span> <span class=\"variable\">@remove</span><span class=\"operator\">-</span><span class=\"keyword\">on</span><span class=\"operator\">-</span>eject<span class=\"operator\">-</span><span class=\"keyword\">begin</span></span><br></pre></td></tr></table></figure>\n\n<p>eject过程成中会用正则将这些标记的代码给删除，另外再删除掉react-scripts包，并修改package.json中的几个命令，如<code>&quot;start&quot;: &quot;node scripts/start.js&quot;,</code></p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>Create React App的源码解析就到这里，后续的文章将会介绍如何自己设计和搭建一个CLI,并不断将其改造完善成一个企业级的脚手架。</p>\n","length":13153,"excerpt":"","more":"<p>这是我参与11月更文挑战的第 15 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"CRA-webpack配置\"><a href=\"#CRA-webpack配置\" class=\"headerlink\" title=\"CRA webpack配置\"></a>CRA webpack配置</h2><p>本文编写的时候react-scripts版本时4.0.3，还没有升级到webpack5，不过其仓库中已经有了webpack5相关的配置，因此下面的解析是基于其最新的代码。</p>\n<p>create-react-app的webpack配置基本上集中在react-scripts&#x2F;config&#x2F;webpack.config.js，development和production的不同环境配置都在这一个文件里进行判断，将它拆开后更好阅读些：</p>\n<p>首先是声明一些环境变量，这些变量基本集中在config目录下的paths.js、modules.js、env.js文件中，这里先进行一个预设：项目的入口为<code>D:\\cra-demo1\\src\\index.tsx</code>，后续入口相关的参数将替换为这个值，这样更方便理解</p>\n<ul>\n<li>最外层：导出的是一个函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">webpackEnv</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>webpack配置文件，可以导出一个对象，或者多个对象，也可以导出一个函数，或者一个promise，</p>\n<p>当导出一个函数时，可以传入两个参数，第一是环境对象environment，第二个是传给webpack的选项</p>\n<h3 id=\"target\"><a href=\"#target\" class=\"headerlink\" title=\"target\"></a>target</h3><p>target: webpack中文文档已经过期了，如果项目中有browserslist配置，webpack将会用它 - 确定可用于生成运行时代码的 ES 功能 - 推断环境，可以不再配置output.environment</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">target:</span> [<span class=\"comment\">&#x27;browserslist&#x27;],</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h3><p>mode设置为<code>&#39;production&#39;</code>，会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mode: isEnvProduction ? <span class=\"string\">&#x27;production&#x27;</span> : isEnvDevelopment &amp;&amp; <span class=\"string\">&#x27;development&#x27;</span>,,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bail\"><a href=\"#bail\" class=\"headerlink\" title=\"bail\"></a>bail</h3><p>bail:在生产环境编译遇到错误直接抛出并终止</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">bail: isEnvProduction,</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"devtool\"><a href=\"#devtool\" class=\"headerlink\" title=\"devtool\"></a>devtool</h3><p>devtool: 生产环境使用<code>shouldUseSourceMap</code>控制是否需要source map。在实践中，生产环境打包可能需要生成source map方便监控或日志平台进行定位，但也可能不需要，因此这里设置了一个变量，由<code>process.env.GENERATE_SOURCEMAP</code>控制</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">devtool:</span> isEnvProduction</span><br><span class=\"line\">    ? shouldUseSourceMap</span><br><span class=\"line\">    ? <span class=\"comment\">&#x27;source-map&#x27;</span></span><br><span class=\"line\">    : <span class=\"literal\">false</span></span><br><span class=\"line\">    : isEnvDevelopment &amp;&amp; <span class=\"comment\">&#x27;cheap-module-source-map&#x27;,</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"entry\"><a href=\"#entry\" class=\"headerlink\" title=\"entry\"></a>entry</h3><p>entry：入口文件，比如这里是’D:\\cra-demo1\\src\\index.tsx’</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">entry: paths.appIndexJs,</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"output\"><a href=\"#output\" class=\"headerlink\" title=\"output\"></a>output</h3><p>output:相关字段配置和解释如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出目录，比如这里是&#x27;D:\\\\cra-demo1\\\\build&#x27;.</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: paths.<span class=\"property\">appBuild</span>,</span><br><span class=\"line\">     <span class=\"comment\">// 开发环境输出代码里增加/* filename */注释</span></span><br><span class=\"line\">    <span class=\"attr\">pathinfo</span>: isEnvDevelopment,</span><br><span class=\"line\">    <span class=\"comment\">// 主bundle</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: isEnvProduction</span><br><span class=\"line\">    ? <span class=\"string\">&#x27;static/js/[name].[contenthash:8].js&#x27;</span></span><br><span class=\"line\">    : isEnvDevelopment &amp;&amp; <span class=\"string\">&#x27;static/js/bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 代码分隔后的chunk 文件</span></span><br><span class=\"line\">    <span class=\"attr\">chunkFilename</span>: isEnvProduction</span><br><span class=\"line\">    ? <span class=\"string\">&#x27;static/js/[name].[contenthash:8].chunk.js&#x27;</span></span><br><span class=\"line\">    : isEnvDevelopment &amp;&amp; <span class=\"string\">&#x27;static/js/[name].chunk.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">assetModuleFilename</span>: <span class=\"string\">&#x27;static/media/[name].[hash][ext]&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 这里是&#x27;/&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">publicPath</span>: paths.<span class=\"property\">publicUrlOrPath</span>,</span><br><span class=\"line\">    <span class=\"comment\">// source map路径</span></span><br><span class=\"line\">    <span class=\"attr\">devtoolModuleFilenameTemplate</span>: isEnvProduction</span><br><span class=\"line\">    ? <span class=\"function\"><span class=\"params\">info</span> =&gt;</span></span><br><span class=\"line\">        path</span><br><span class=\"line\">            .<span class=\"title function_\">relative</span>(paths.<span class=\"property\">appSrc</span>, info.<span class=\"property\">absoluteResourcePath</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\\\/g</span>, <span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">    : isEnvDevelopment &amp;&amp;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"params\">info</span> =&gt;</span> path.<span class=\"title function_\">resolve</span>(info.<span class=\"property\">absoluteResourcePath</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\\\/g</span>, <span class=\"string\">&#x27;/&#x27;</span>)),</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cache\"><a href=\"#cache\" class=\"headerlink\" title=\"cache\"></a>cache</h3><p>cache: webpack5自带的缓存，加快构建速度</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将缓存保存在文件中</span></span><br><span class=\"line\">    type: <span class=\"string\">&#x27;filesystem&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 缓存版本，版本更新将使原缓存失效</span></span><br><span class=\"line\">    version: <span class=\"built_in\">createEnvironmentHash</span>(env.raw),</span><br><span class=\"line\">    <span class=\"comment\">// 缓存的目录：node_modules/.cache</span></span><br><span class=\"line\">    cacheDirectory: paths.appWebpackCache,</span><br><span class=\"line\">    <span class=\"comment\">// 当编译器空闲时将数据存储在一个文件中，用于所有缓存项</span></span><br><span class=\"line\">    store: <span class=\"string\">&#x27;pack&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 缓存的依赖，这里的变更将使缓存失效</span></span><br><span class=\"line\">    buildDependencies: &#123;</span><br><span class=\"line\">        defaultWebpack: [<span class=\"string\">&#x27;webpack/lib/&#x27;</span>],</span><br><span class=\"line\">        config: [__filename],</span><br><span class=\"line\">        tsconfig: [paths.appTsConfig, paths.appJsConfig].<span class=\"built_in\">filter</span>(f =&gt;</span><br><span class=\"line\">            fs.<span class=\"built_in\">existsSync</span>(f)</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"infrastructureLogging\"><a href=\"#infrastructureLogging\" class=\"headerlink\" title=\"infrastructureLogging\"></a>infrastructureLogging</h3><p>infrastructureLogging:基础日志级别，这里不开启，cra有自己的日志</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">infrastructureLogging: &#123;</span><br><span class=\"line\">    level: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"optimization\"><a href=\"#optimization\" class=\"headerlink\" title=\"optimization\"></a>optimization</h3><ul>\n<li>optimization: 代码优化，比如压缩、分割等</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">optimization:</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">生产环境进行压缩</span></span><br><span class=\"line\">    <span class=\"attr\">minimize:</span> <span class=\"string\">isEnvProduction</span>,</span><br><span class=\"line\">    <span class=\"attr\">minimizer:</span> [</span><br><span class=\"line\">        <span class=\"string\">js和css压缩...</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;<span class=\"string\">,</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>js压缩</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">new</span> <span class=\"string\">TerserPlugin(&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">terserOptions:</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">parse:</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">//</span> <span class=\"string\">以es8语法解析</span></span><br><span class=\"line\">        <span class=\"attr\">ecma:</span> <span class=\"number\">8</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">compress:</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">ecma:</span> <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">warnings:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">comparisons:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">inline:</span> <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mangle:</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">//</span> <span class=\"string\">解决Safari</span> <span class=\"number\">10</span><span class=\"string\">中的一个bug</span></span><br><span class=\"line\">        <span class=\"attr\">safari10:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">是否保留classnames</span></span><br><span class=\"line\">    <span class=\"attr\">keep_classnames:</span> <span class=\"string\">isEnvProductionProfile</span>,</span><br><span class=\"line\">    <span class=\"attr\">keep_fnames:</span> <span class=\"string\">isEnvProductionProfile</span>,</span><br><span class=\"line\">    <span class=\"attr\">output:</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">ecma:</span> <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">comments:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">ascii_only:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#125;<span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"string\">&#125;),</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>css 压缩</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new <span class=\"built_in\">CssMinimizerPlugin</span>(),</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"resolve\"><a href=\"#resolve\" class=\"headerlink\" title=\"resolve\"></a>resolve</h3><p>resolve:帮助找到模块的路径</p>\n<ul>\n<li>modules:从哪里找模块</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">    // 这个配置主要考虑了monorepo的场景</span><br><span class=\"line\">    modules: [<span class=\"string\">&#x27;node_modules&#x27;</span>, paths.appNodeModules].<span class=\"built_in\">concat</span>(</span><br><span class=\"line\">        modules.additionalModulePaths || []</span><br><span class=\"line\">    ),</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>extensions: 可以省略的后缀名，包含了： [ ‘web.mjs’, ‘mjs’, ‘web.js’, ‘js’, ‘web.ts’, ‘ts’, ‘web.tsx’, ‘tsx’, ‘json’, ‘web.jsx’, ‘jsx’, ];</li>\n</ul>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extensions: paths.moduleFileExtensions</span><br><span class=\"line\">       .map(<span class=\"attr\">ext</span> =&gt; `.<span class=\"variable\">$&#123;ext&#125;</span>`)</span><br><span class=\"line\">       .filter(<span class=\"attr\">ext</span> =&gt; useTypeScript || !ext.includes(<span class=\"string\">&#x27;ts&#x27;</span>)),</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>alias:modules.webpackAliases中只有<code>src</code></li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alias</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;react-native&#x27;</span>: <span class=\"string\">&#x27;react-native-web&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// Allows for better profiling with ReactDevTools</span></span><br><span class=\"line\">        ...(isEnvProductionProfile &amp;&amp; &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;react-dom$&#x27;</span>: <span class=\"string\">&#x27;react-dom/profiling&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;scheduler/tracing&#x27;</span>: <span class=\"string\">&#x27;scheduler/tracing-profiling&#x27;</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"comment\">// 这里只设置了src</span></span><br><span class=\"line\">        ...(modules.webpackAliases || &#123;&#125;),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>plugins:</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// 这个插件用来防止用户从src之外的地方导入文件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"built_in\">ModuleScopePlugin</span>(paths.appSrc, [</span><br><span class=\"line\">            paths.appPackageJson,</span><br><span class=\"line\">            reactRefreshRuntimeEntry,</span><br><span class=\"line\">            reactRefreshWebpackPluginRuntimeEntry,</span><br><span class=\"line\">            babelRuntimeEntry,</span><br><span class=\"line\">            babelRuntimeEntryHelpers,</span><br><span class=\"line\">            babelRuntimeRegenerator,</span><br><span class=\"line\">        ]),</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h3><p>module: 如何处理不同类型的模块</p>\n<ul>\n<li>strictExportPresence</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将缺失的导出作为error，而不是warning</span></span><br><span class=\"line\">    strictExportPresence: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>rules: 这里用了<code>oneOf</code>api，遇到第一个匹配的就会终止，如果没有匹配的，就会执行最下面的</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rules:</span> [</span><br><span class=\"line\">       <span class=\"string\">//</span> <span class=\"string\">处理第三方库的source</span> <span class=\"string\">map</span></span><br><span class=\"line\">       <span class=\"string\">shouldUseSourceMap</span> <span class=\"string\">&amp;&amp;</span> &#123;</span><br><span class=\"line\">           <span class=\"attr\">enforce:</span> <span class=\"string\">&#x27;pre&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">exclude:</span> <span class=\"string\">/@babel(?:\\/|\\\\</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;<span class=\"string\">)runtime/</span>,</span><br><span class=\"line\">           <span class=\"attr\">test:</span> <span class=\"string\">/\\.(js|mjs|jsx|ts|tsx|css)$/</span>,</span><br><span class=\"line\">           <span class=\"attr\">loader:</span> <span class=\"string\">require.resolve(&#x27;source-map-loader&#x27;)</span>,</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"string\">//</span> <span class=\"string\">&quot;oneOf&quot;</span> <span class=\"string\">遍历下面所有的loader，直到第一个符合的，如果没有找到，则使用最下面的&#x27;file</span> <span class=\"string\">loader&#x27;</span></span><br><span class=\"line\">           <span class=\"string\">//</span> <span class=\"string\">webpack5取消了file-loader，因此这里加了个引号</span></span><br><span class=\"line\">           <span class=\"attr\">oneOf:</span> [</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> [<span class=\"string\">/\\.avif$/</span>],</span><br><span class=\"line\">                   <span class=\"attr\">type:</span> <span class=\"string\">&#x27;asset&#x27;</span>,</span><br><span class=\"line\">                   <span class=\"attr\">mimetype:</span> <span class=\"string\">&#x27;image/avif&#x27;</span>,</span><br><span class=\"line\">                   <span class=\"string\">//</span> <span class=\"string\">这个是webpack5的配置，取消raw-loader、url-loader、file-loader</span></span><br><span class=\"line\">                   <span class=\"attr\">parser:</span> &#123;</span><br><span class=\"line\">                       <span class=\"attr\">dataUrlCondition:</span> &#123;</span><br><span class=\"line\">                           <span class=\"attr\">maxSize:</span> <span class=\"string\">imageInlineSizeLimit</span>,</span><br><span class=\"line\">                       &#125;,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> [<span class=\"string\">/\\.bmp$/</span>, <span class=\"string\">/\\.gif$/</span>, <span class=\"string\">/\\.jpe?g$/</span>, <span class=\"string\">/\\.png$/</span>],</span><br><span class=\"line\">                   <span class=\"attr\">type:</span> <span class=\"string\">&#x27;asset&#x27;</span>,</span><br><span class=\"line\">                   <span class=\"attr\">parser:</span> &#123;</span><br><span class=\"line\">                   <span class=\"attr\">dataUrlCondition:</span> &#123;</span><br><span class=\"line\">                       <span class=\"attr\">maxSize:</span> <span class=\"string\">imageInlineSizeLimit</span>,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> <span class=\"string\">/\\.svg$/</span>,</span><br><span class=\"line\">                   <span class=\"attr\">use:</span> [</span><br><span class=\"line\">                       &#123;</span><br><span class=\"line\">                           <span class=\"string\">//可以将svg以组件的形式导入</span> <span class=\"string\">import</span> <span class=\"string\">Star</span> <span class=\"string\">from</span> <span class=\"string\">&#x27;./star.svg&#x27;</span></span><br><span class=\"line\">                           <span class=\"attr\">loader:</span> <span class=\"string\">require.resolve(&#x27;@svgr/webpack&#x27;)</span>,</span><br><span class=\"line\">                           <span class=\"attr\">options:</span> &#123;</span><br><span class=\"line\">                               <span class=\"attr\">prettier:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">                               <span class=\"attr\">svgo:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">                               <span class=\"attr\">svgoConfig:</span> &#123;</span><br><span class=\"line\">                                   <span class=\"attr\">plugins:</span> [&#123; <span class=\"attr\">removeViewBox:</span> <span class=\"literal\">false</span> &#125;],</span><br><span class=\"line\">                               &#125;,</span><br><span class=\"line\">                               <span class=\"attr\">titleProp:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                               <span class=\"attr\">ref:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                           &#125;,</span><br><span class=\"line\">                       &#125;,</span><br><span class=\"line\">                       &#123;</span><br><span class=\"line\">                           <span class=\"attr\">loader:</span> <span class=\"string\">require.resolve(&#x27;file-loader&#x27;)</span>,</span><br><span class=\"line\">                           <span class=\"attr\">options:</span> &#123;</span><br><span class=\"line\">                           <span class=\"attr\">name:</span> <span class=\"string\">&#x27;static/media/[name].[hash].[ext]&#x27;</span>,</span><br><span class=\"line\">                           &#125;,</span><br><span class=\"line\">                       &#125;,</span><br><span class=\"line\">                   ],</span><br><span class=\"line\">                   <span class=\"string\">//</span> <span class=\"string\">在这些条件中生效</span></span><br><span class=\"line\">                   <span class=\"attr\">issuer:</span> &#123;</span><br><span class=\"line\">                   <span class=\"attr\">and:</span> [<span class=\"string\">/\\.(ts|tsx|js|jsx|md|mdx)$/</span>],</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> <span class=\"string\">/\\.(js|mjs|jsx|ts|tsx)$/</span>,</span><br><span class=\"line\">                   <span class=\"attr\">include:</span> <span class=\"string\">paths.appSrc</span>,</span><br><span class=\"line\">                   <span class=\"attr\">loader:</span> <span class=\"string\">require.resolve(&#x27;babel-loader&#x27;)</span>,</span><br><span class=\"line\">                   <span class=\"attr\">options:</span> &#123;</span><br><span class=\"line\">                       <span class=\"string\">//</span> <span class=\"string\">babel-preset-react-app是cra自定义的preset</span>,<span class=\"string\">包括了</span> <span class=\"string\">JSX</span>, <span class=\"string\">Flow</span>, <span class=\"string\">TypeScript</span>, <span class=\"string\">and</span> <span class=\"string\">some</span> <span class=\"string\">ESnext</span> <span class=\"string\">features</span></span><br><span class=\"line\">                       <span class=\"attr\">customize:</span> <span class=\"string\">require.resolve(</span></span><br><span class=\"line\">                           <span class=\"string\">&#x27;babel-preset-react-app/webpack-overrides&#x27;</span></span><br><span class=\"line\">                       <span class=\"string\">)</span>,</span><br><span class=\"line\">                       <span class=\"attr\">presets:</span> [</span><br><span class=\"line\">                           [</span><br><span class=\"line\">                           <span class=\"string\">require.resolve(&#x27;babel-preset-react-app&#x27;)</span>,</span><br><span class=\"line\">                           &#123;</span><br><span class=\"line\">                               <span class=\"attr\">runtime:</span> <span class=\"string\">hasJsxRuntime</span> <span class=\"string\">?</span> <span class=\"string\">&#x27;automatic&#x27;</span> <span class=\"string\">:</span> <span class=\"string\">&#x27;classic&#x27;</span>,</span><br><span class=\"line\">                           &#125;,</span><br><span class=\"line\">                           ],</span><br><span class=\"line\">                       ],</span><br><span class=\"line\">                       <span class=\"string\">//</span> <span class=\"string\">一下两个eject后会移除</span></span><br><span class=\"line\">                       <span class=\"attr\">babelrc:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">                       <span class=\"attr\">configFile:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">                       <span class=\"string\">//</span> <span class=\"string\">确保</span> <span class=\"string\">cache</span> <span class=\"string\">identifier的唯一性，eject后会移除</span></span><br><span class=\"line\">                       <span class=\"attr\">cacheIdentifier:</span> <span class=\"string\">getCacheIdentifier(</span></span><br><span class=\"line\">                           <span class=\"string\">isEnvProduction</span></span><br><span class=\"line\">                           <span class=\"string\">?</span> <span class=\"string\">&#x27;production&#x27;</span></span><br><span class=\"line\">                           <span class=\"string\">:</span> <span class=\"string\">isEnvDevelopment</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">                           [</span><br><span class=\"line\">                           <span class=\"string\">&#x27;babel-plugin-named-asset-import&#x27;</span>,</span><br><span class=\"line\">                           <span class=\"string\">&#x27;babel-preset-react-app&#x27;</span>,</span><br><span class=\"line\">                           <span class=\"string\">&#x27;react-dev-utils&#x27;</span>,</span><br><span class=\"line\">                           <span class=\"string\">&#x27;react-scripts&#x27;</span>,</span><br><span class=\"line\">                           ]</span><br><span class=\"line\">                       <span class=\"string\">)</span>,</span><br><span class=\"line\">                       <span class=\"attr\">plugins:</span> [</span><br><span class=\"line\">                           <span class=\"string\">isEnvDevelopment</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">                           <span class=\"string\">shouldUseReactRefresh</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">                           <span class=\"string\">require.resolve(&#x27;react-refresh/babel&#x27;)</span>,</span><br><span class=\"line\">                       ]<span class=\"string\">.filter(Boolean)</span>,</span><br><span class=\"line\">                       <span class=\"string\">//</span> <span class=\"string\">babel-loader能将缓存保存在./node_modules/.cache/babel-loader/</span></span><br><span class=\"line\">                       <span class=\"attr\">cacheDirectory:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                       <span class=\"attr\">cacheCompression:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">                       <span class=\"attr\">compact:</span> <span class=\"string\">isEnvProduction</span>,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               <span class=\"string\">//</span> <span class=\"string\">处理其他js</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> <span class=\"string\">/\\.(js|mjs)$/</span>,</span><br><span class=\"line\">                   <span class=\"attr\">exclude:</span> <span class=\"string\">/@babel(?:\\/|\\\\</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;<span class=\"string\">)runtime/</span>,</span><br><span class=\"line\">                   <span class=\"attr\">loader:</span> <span class=\"string\">require.resolve(&#x27;babel-loader&#x27;)</span>,</span><br><span class=\"line\">                   <span class=\"attr\">options:</span> &#123;</span><br><span class=\"line\">                       <span class=\"string\">...</span> <span class=\"string\">同上</span></span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> <span class=\"string\">cssRegex</span>,</span><br><span class=\"line\">                   <span class=\"attr\">exclude:</span> <span class=\"string\">cssModuleRegex</span>,</span><br><span class=\"line\">                   <span class=\"attr\">use:</span> <span class=\"string\">getStyleLoaders(</span>&#123;</span><br><span class=\"line\">                   <span class=\"attr\">importLoaders:</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">                   <span class=\"attr\">sourceMap:</span> <span class=\"string\">isEnvProduction</span></span><br><span class=\"line\">                       <span class=\"string\">?</span> <span class=\"string\">shouldUseSourceMap</span></span><br><span class=\"line\">                       <span class=\"string\">:</span> <span class=\"string\">isEnvDevelopment</span>,</span><br><span class=\"line\">                   <span class=\"attr\">modules:</span> &#123;</span><br><span class=\"line\">                       <span class=\"attr\">mode:</span> <span class=\"string\">&#x27;icss&#x27;</span>,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">                   &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">                   <span class=\"attr\">sideEffects:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> <span class=\"string\">cssModuleRegex</span>,</span><br><span class=\"line\">                   <span class=\"attr\">use:</span> <span class=\"string\">getStyleLoaders(</span>&#123;</span><br><span class=\"line\">                   <span class=\"attr\">importLoaders:</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">                   <span class=\"attr\">sourceMap:</span> <span class=\"string\">isEnvProduction</span></span><br><span class=\"line\">                       <span class=\"string\">?</span> <span class=\"string\">shouldUseSourceMap</span></span><br><span class=\"line\">                       <span class=\"string\">:</span> <span class=\"string\">isEnvDevelopment</span>,</span><br><span class=\"line\">                   <span class=\"attr\">modules:</span> &#123;</span><br><span class=\"line\">                       <span class=\"attr\">mode:</span> <span class=\"string\">&#x27;local&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"attr\">getLocalIdent:</span> <span class=\"string\">getCSSModuleLocalIdent</span>,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">                   &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> <span class=\"string\">sassRegex</span>,</span><br><span class=\"line\">                   <span class=\"attr\">exclude:</span> <span class=\"string\">sassModuleRegex</span>,</span><br><span class=\"line\">                   <span class=\"attr\">use:</span> <span class=\"string\">getStyleLoaders(</span></span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       <span class=\"attr\">importLoaders:</span> <span class=\"number\">3</span>,</span><br><span class=\"line\">                       <span class=\"attr\">sourceMap:</span> <span class=\"string\">isEnvProduction</span></span><br><span class=\"line\">                       <span class=\"string\">?</span> <span class=\"string\">shouldUseSourceMap</span></span><br><span class=\"line\">                       <span class=\"string\">:</span> <span class=\"string\">isEnvDevelopment</span>,</span><br><span class=\"line\">                       <span class=\"attr\">modules:</span> &#123;</span><br><span class=\"line\">                       <span class=\"attr\">mode:</span> <span class=\"string\">&#x27;icss&#x27;</span>,</span><br><span class=\"line\">                       &#125;,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">                   <span class=\"string\">&#x27;sass-loader&#x27;</span></span><br><span class=\"line\">                   <span class=\"string\">)</span>,</span><br><span class=\"line\">                   <span class=\"attr\">sideEffects:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">test:</span> <span class=\"string\">sassModuleRegex</span>,</span><br><span class=\"line\">                   <span class=\"attr\">use:</span> <span class=\"string\">getStyleLoaders(</span></span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       <span class=\"attr\">importLoaders:</span> <span class=\"number\">3</span>,</span><br><span class=\"line\">                       <span class=\"attr\">sourceMap:</span> <span class=\"string\">isEnvProduction</span></span><br><span class=\"line\">                       <span class=\"string\">?</span> <span class=\"string\">shouldUseSourceMap</span></span><br><span class=\"line\">                       <span class=\"string\">:</span> <span class=\"string\">isEnvDevelopment</span>,</span><br><span class=\"line\">                       <span class=\"attr\">modules:</span> &#123;</span><br><span class=\"line\">                       <span class=\"attr\">mode:</span> <span class=\"string\">&#x27;local&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"attr\">getLocalIdent:</span> <span class=\"string\">getCSSModuleLocalIdent</span>,</span><br><span class=\"line\">                       &#125;,</span><br><span class=\"line\">                   &#125;,</span><br><span class=\"line\">                   <span class=\"string\">&#x27;sass-loader&#x27;</span></span><br><span class=\"line\">                   <span class=\"string\">)</span>,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               <span class=\"string\">//</span> <span class=\"string\">兜底的&#x27;file</span> <span class=\"string\">loader&#x27;</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">exclude:</span> [<span class=\"string\">/^$/</span>, <span class=\"string\">/\\.(js|mjs|jsx|ts|tsx)$/</span>, <span class=\"string\">/\\.html$/</span>, <span class=\"string\">/\\.json$/</span>],</span><br><span class=\"line\">                   <span class=\"attr\">type:</span> <span class=\"string\">&#x27;asset/resource&#x27;</span>,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">           ],</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">   ]<span class=\"string\">.filter(Boolean),</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins:\"></a>plugins:</h3><p>plugins:各种插件，作用见注释</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins:</span> [</span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">HtmlWebpackPlugin(</span></span><br><span class=\"line\">    <span class=\"string\">Object.assign(</span></span><br><span class=\"line\">        &#123;&#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"attr\">inject:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">template:</span> <span class=\"string\">paths.appHtml</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">isEnvProduction</span></span><br><span class=\"line\">        <span class=\"string\">?</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">minify:</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">removeComments:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">collapseWhitespace:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">removeRedundantAttributes:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">useShortDoctype:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">removeEmptyAttributes:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">removeStyleLinkTypeAttributes:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">keepClosingSlash:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">minifyJS:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">minifyCSS:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">minifyURLs:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"string\">:</span> <span class=\"string\">undefined</span></span><br><span class=\"line\">    <span class=\"string\">)</span></span><br><span class=\"line\">    <span class=\"string\">)</span>,</span><br><span class=\"line\">    <span class=\"string\">isEnvProduction</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">shouldInlineRuntimeChunk</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">InlineChunkHtmlPlugin(HtmlWebpackPlugin</span>, [<span class=\"string\">/runtime-.+</span>[<span class=\"string\">.</span>]<span class=\"string\">js/</span>]<span class=\"string\">)</span>,</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">指定index.html中可以使用的变量，如&lt;link</span> <span class=\"string\">rel=&quot;icon&quot;</span> <span class=\"string\">href=&quot;%PUBLIC_URL%/favicon.ico&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">InterpolateHtmlPlugin(HtmlWebpackPlugin</span>, <span class=\"string\">env.raw)</span>,</span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">ModuleNotFoundPlugin(paths.appPath)</span>,</span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">webpack.DefinePlugin(env.stringified)</span>,</span><br><span class=\"line\">    <span class=\"string\">isEnvDevelopment</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">shouldUseReactRefresh</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">ReactRefreshWebpackPlugin(</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">overlay:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">大小写敏感，这个插件挺有用的</span></span><br><span class=\"line\">    <span class=\"string\">isEnvDevelopment</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">new</span> <span class=\"string\">CaseSensitivePathsPlugin()</span>,</span><br><span class=\"line\">    <span class=\"string\">isEnvProduction</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">MiniCssExtractPlugin(</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">filename:</span> <span class=\"string\">&#x27;static/css/[name].[contenthash:8].css&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">chunkFilename:</span> <span class=\"string\">&#x27;static/css/[name].[contenthash:8].chunk.css&#x27;</span>,</span><br><span class=\"line\">    &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">WebpackManifestPlugin(</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">fileName:</span> <span class=\"string\">&#x27;asset-manifest.json&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">publicPath:</span> <span class=\"string\">paths.publicUrlOrPath</span>,</span><br><span class=\"line\">        <span class=\"attr\">generate:</span> <span class=\"string\">(seed</span>, <span class=\"string\">files</span>, <span class=\"string\">entrypoints)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">const</span> <span class=\"string\">manifestFiles</span> <span class=\"string\">=</span> <span class=\"string\">files.reduce((manifest</span>, <span class=\"string\">file)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">manifest</span>[<span class=\"string\">file.name</span>] <span class=\"string\">=</span> <span class=\"string\">file.path;</span></span><br><span class=\"line\">            <span class=\"string\">return</span> <span class=\"string\">manifest;</span></span><br><span class=\"line\">            &#125;, <span class=\"string\">seed);</span></span><br><span class=\"line\">            <span class=\"string\">const</span> <span class=\"string\">entrypointFiles</span> <span class=\"string\">=</span> <span class=\"string\">entrypoints.main.filter(</span></span><br><span class=\"line\">            <span class=\"string\">fileName</span> <span class=\"string\">=&gt;</span> <span class=\"type\">!fileName.endsWith(&#x27;.map&#x27;)</span></span><br><span class=\"line\">            <span class=\"string\">);</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">files:</span> <span class=\"string\">manifestFiles</span>,</span><br><span class=\"line\">            <span class=\"attr\">entrypoints:</span> <span class=\"string\">entrypointFiles</span>,</span><br><span class=\"line\">            &#125;<span class=\"string\">;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">不打包momentjs中的语言包</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">webpack.IgnorePlugin(</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">resourceRegExp:</span> <span class=\"string\">/^\\.\\/locale$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">contextRegExp:</span> <span class=\"string\">/moment$/</span>,</span><br><span class=\"line\">    &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">service</span> <span class=\"string\">worker</span></span><br><span class=\"line\">    <span class=\"string\">isEnvProduction</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">fs.existsSync(swSrc)</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">WorkboxWebpackPlugin.InjectManifest(</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">swSrc</span>,</span><br><span class=\"line\">        <span class=\"attr\">dontCacheBustURLsMatching:</span> <span class=\"string\">/\\.</span>[<span class=\"number\">0</span><span class=\"string\">-9a-f</span>]&#123;<span class=\"number\">8</span>&#125;<span class=\"string\">\\./</span>,</span><br><span class=\"line\">        <span class=\"attr\">exclude:</span> [<span class=\"string\">/\\.map$/</span>, <span class=\"string\">/asset-manifest\\.json$/</span>, <span class=\"string\">/LICENSE/</span>],</span><br><span class=\"line\">        <span class=\"attr\">maximumFileSizeToCacheInBytes:</span> <span class=\"number\">5</span> <span class=\"string\">*</span> <span class=\"number\">1024</span> <span class=\"string\">*</span> <span class=\"number\">1024</span>,</span><br><span class=\"line\">    &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">改动ts文件触发类型检查</span></span><br><span class=\"line\">    <span class=\"string\">useTypeScript</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">ForkTsCheckerWebpackPlugin(</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">async:</span> <span class=\"string\">isEnvDevelopment</span>,</span><br><span class=\"line\">        <span class=\"attr\">typescript:</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">typescriptPath:</span> <span class=\"string\">resolve.sync(&#x27;typescript&#x27;</span>, &#123;</span><br><span class=\"line\">                <span class=\"attr\">basedir:</span> <span class=\"string\">paths.appNodeModules</span>,</span><br><span class=\"line\">            &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">            <span class=\"attr\">configOverwrite:</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">compilerOptions:</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">sourceMap:</span> <span class=\"string\">isEnvProduction</span></span><br><span class=\"line\">                    <span class=\"string\">?</span> <span class=\"string\">shouldUseSourceMap</span></span><br><span class=\"line\">                    <span class=\"string\">:</span> <span class=\"string\">isEnvDevelopment</span>,</span><br><span class=\"line\">                <span class=\"attr\">skipLibCheck:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">inlineSourceMap:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">                <span class=\"attr\">declarationMap:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">                <span class=\"attr\">noEmit:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">incremental:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">tsBuildInfoFile:</span> <span class=\"string\">paths.appTsBuildInfoFile</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">context:</span> <span class=\"string\">paths.appPath</span>,</span><br><span class=\"line\">            <span class=\"attr\">diagnosticOptions:</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">syntactic:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">mode:</span> <span class=\"string\">&#x27;write-references&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">issue:</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">include:</span> [</span><br><span class=\"line\">                &#123; <span class=\"attr\">file:</span> <span class=\"string\">&#x27;../**/src/**/*.&#123;ts,tsx&#125;&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">file:</span> <span class=\"string\">&#x27;**/src/**/*.&#123;ts,tsx&#125;&#x27;</span> &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">exclude:</span> [</span><br><span class=\"line\">                &#123; <span class=\"attr\">file:</span> <span class=\"string\">&#x27;**/src/**/__tests__/**&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">file:</span> <span class=\"string\">&#x27;**/src/**/?(*.)&#123;spec|test&#125;.*&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">file:</span> <span class=\"string\">&#x27;**/src/setupProxy.*&#x27;</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">file:</span> <span class=\"string\">&#x27;**/src/setupTests.*&#x27;</span> &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">logger:</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">infrastructure:</span> <span class=\"string\">&#x27;silent&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">    <span class=\"type\">!disableESLintPlugin</span> <span class=\"string\">&amp;&amp;</span></span><br><span class=\"line\">    <span class=\"string\">new</span> <span class=\"string\">ESLintPlugin(</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">extensions:</span> [<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"string\">&#x27;mjs&#x27;</span>, <span class=\"string\">&#x27;jsx&#x27;</span>, <span class=\"string\">&#x27;ts&#x27;</span>, <span class=\"string\">&#x27;tsx&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">formatter:</span> <span class=\"string\">require.resolve(&#x27;react-dev-utils/eslintFormatter&#x27;)</span>,</span><br><span class=\"line\">        <span class=\"attr\">eslintPath:</span> <span class=\"string\">require.resolve(&#x27;eslint&#x27;)</span>,</span><br><span class=\"line\">        <span class=\"attr\">failOnError:</span> <span class=\"type\">!(isEnvDevelopment</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">emitErrorsAsWarnings)</span>,</span><br><span class=\"line\">        <span class=\"attr\">context:</span> <span class=\"string\">paths.appSrc</span>,</span><br><span class=\"line\">        <span class=\"attr\">cache:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">cacheLocation:</span> <span class=\"string\">path.resolve(</span></span><br><span class=\"line\">            <span class=\"string\">paths.appNodeModules</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;.cache/.eslintcache&#x27;</span></span><br><span class=\"line\">        <span class=\"string\">)</span>,</span><br><span class=\"line\">        <span class=\"string\">//</span> <span class=\"string\">ESLint</span> <span class=\"string\">class</span> <span class=\"string\">options</span></span><br><span class=\"line\">        <span class=\"attr\">cwd:</span> <span class=\"string\">paths.appPath</span>,</span><br><span class=\"line\">        <span class=\"attr\">resolvePluginsRelativeTo:</span> <span class=\"string\">__dirname</span>,</span><br><span class=\"line\">        <span class=\"attr\">baseConfig:</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">extends:</span> [<span class=\"string\">require.resolve(&#x27;eslint-config-react-app/base&#x27;)</span>],</span><br><span class=\"line\">        <span class=\"attr\">rules:</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">...(!hasJsxRuntime</span> <span class=\"string\">&amp;&amp;</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">&#x27;react/react-in-jsx-scope&#x27;:</span> <span class=\"string\">&#x27;error&#x27;</span>,</span><br><span class=\"line\">            &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;<span class=\"string\">)</span>,</span><br><span class=\"line\">]<span class=\"string\">.filter(Boolean),</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#125;;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"performance\"><a href=\"#performance\" class=\"headerlink\" title=\"performance\"></a>performance</h3><p>performance:CRA自带了FileSizeReporter</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">performance:</span> <span class=\"literal\">false</span>,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"eject命令\"><a href=\"#eject命令\" class=\"headerlink\" title=\"eject命令\"></a>eject命令</h2><p>eject命令并不复杂，主要也就是是将react-scripts中的文件输出出去，对于eject后不需要的内容，文件中都已经做了标记：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span> <span class=\"variable\">@remove</span><span class=\"operator\">-</span><span class=\"keyword\">on</span><span class=\"operator\">-</span>eject<span class=\"operator\">-</span><span class=\"keyword\">end</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span> <span class=\"variable\">@remove</span><span class=\"operator\">-</span><span class=\"keyword\">on</span><span class=\"operator\">-</span>eject<span class=\"operator\">-</span><span class=\"keyword\">begin</span></span><br></pre></td></tr></table></figure>\n\n<p>eject过程成中会用正则将这些标记的代码给删除，另外再删除掉react-scripts包，并修改package.json中的几个命令，如<code>&quot;start&quot;: &quot;node scripts/start.js&quot;,</code></p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>Create React App的源码解析就到这里，后续的文章将会介绍如何自己设计和搭建一个CLI,并不断将其改造完善成一个企业级的脚手架。</p>\n"},{"title":"前端脚手架：从入门到进阶——Yeoman Generator Api","date":"2021-11-01T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第 2 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\nwhat\n----\n\ngenerator是一个npm包，包名以`generator-`开头,如`generator-webapp`,全局安装后，执行命令`yo webapp`实际上就是执行该generator。\n\n目录\n--\n\npackage.json参考：\n\n```json\n{\n  \"name\": \"generator-name\",\n  \"version\": \"0.1.0\",\n  \"description\": \"\",\n  \"files\": [\n    \"generators\"\n  ],\n  \"keywords\": [\"yeoman-generator\"],\n  \"dependencies\": {\n    \"yeoman-generator\": \"^1.0.0\"\n  }\n}\n```\n\n目录结构：\n\n```go\n├───package.json\n└───generators/\n    ├───app/\n    │   └───index.js\n    └───router/\n        └───index.js\n```\n\nindex.js文件就是generator的主要代码，执行 `yo name`其实就是执行app/index.js，而如果有其他的子命令，可在app下面建同级目录，对这个例子来说，执行`yo name:router`就是执行router/index.js\n\n运行上下文\n-----\n\n一个generator大概是这个样子：\n\napp/index.js\n\n![image.png](../imgs/77e251176fed4a97a7ca946262916095.png)\n\n运行时的对象是这个class的实例，它的原型上的方法（不管是自定义的还是它提供的）都会按照一定的顺序执行，这个顺序就是它的运行上下文。\n\n### 执行顺序\n\n1.  `initializing` - 初始化，最先执行，可以做一些环境检查、配置获取等操作\n2.  `prompting` - 调用`this.prompt()`的地方，提供交互获取用户选项\n3.  `configuring` - 保存配置或创建项目配置文件 (如 `.editorconfig`或其他元文件)\n4.  `default` - 自定义的方法会进入这里执行.\n5.  `writing` - 生成文件\n6.  `conflicts` - 在这里解决冲突\n7.  `install` - 在这里执行install\n8.  `end` - 最后调用，可以处理资源释放等操作\n\n看代码会更清晰：app/index.js\n\n```javascript\nconst Generator = require('yeoman-generator');\nmodule.exports = class extends Generator {\n  constructor(args, opts) {\n    super(args, opts);\n  }\n   initializing() {\n    this.log('initializing');\n  }\n   prompting() {\n    this.log('prompting')\n  }\n \n  configuring() {this.log('configuring') }\n  default() { \n    this.log('default')\n  }\n  writing() {\n    this.log('writing')\n  }\n  conflicts() {this.log('conflicts') }\n  install() {\n    this.log('install')\n  }\n  end() {\n    this.log('end')\n   }\n  _private_method() {\n    this.log('private hey');\n  }\n  method1() {\n    this.log('method 1 just ran');\n  }\n  method2() {\n    this.log('method 2 just ran');\n  }\n};\n```\n\n执行`npm link`，然后找个地方执行`yo name`,\n\n![image.png](../imgs/476fc30fc2fc4d75b5ae6477ceeeba44.png)\n\n如图，自定义的method1和method2在default后，writing前执行，而如果我们不需要一个方法在上下文中被执行，则可以在方法名前加`_`，如`_private_method`\n\n常用api\n-----\n\n### log\n\nYeoman提供了`this.log`，不需要写`console.log`了\n\n### promot\n\nYeoman集成了[Inquirer.js](https://github.com%2FSBoudrias%2FInquirer.js \"https://github.com/SBoudrias/Inquirer.js\")，这是与用户交互的主要手段。 从promots获取的结果可以保存在this上，方便后续的方法中使用。\n\n### fs\n\nYeoman也集成了[mem-fs editor](https://github.com%2Fsboudrias%2Fmem-fs-editor \"https://github.com/sboudrias/mem-fs-editor\")，直接使用`this.fs`。 并且以[ejs template syntax](http://ejs.co%2F \"http://ejs.co/\")语法支持template：\n\ntemplate/index.html\n\n```xml\n<html>\n  <head>\n    <title><%= title %></title>\n  </head>\n</html>\n```\n\napp/index.js\n\n```kotlin\nthis.fs.copyTpl(\n      this.templatePath('index.html'),\n      this.destinationPath('public/index.html'),\n      { title: this.answers.title } // user answer `title` used\n    );\n```\n\n### path\n\nYemoman提供一些获取路径和拼接路径的简单api：\n\n`this.destinationRoot()`:当前运行命令的目录的绝对路径，可以传入一个参数拼接：`this.destinationPath('sub/path')`,当然也可以改变它`this.destinationRoot('new/path')`\n\n`this.sourceRoot()`:该generator template目录所在的绝对路径，也可以通过`this.templatePath('app/index.js')`传入一个参数拼接\n\n### dependencies & install\n\nYeoman提供了`this.packageJson`对象，它的`merge`方法能方便我们操作json对象；并且在write阶段后，这个对象将会生成package.json写到对应的位置。\n\n当然也可以自行组织json并写入对应的位置。\n\n在5.0.0版本后，generator在install环节会自动安装依赖，并且会嗅探到`this.env.cwd`目录下的package.json是否发生变更。\n\n如果`this.destinationRoot()`改变，则可能无法检测到package.json，此时可以通过`this.env.cwd = this.destinationRoot()`修复。\n\n### 命令\n\nYeoman提供了`spawnCommand`api，可以执行一些其他命令，比如手动安装依赖、执行git相关操作等等。\n\n实战\n--\n\n有了以上这些指示准备就可以进入实战环节了，下一篇将会讲generator的编写和发布。","source":"_posts/前端脚手架：从入门到进阶——Yeoman Generator Api.md","raw":"---\n title: \"前端脚手架：从入门到进阶——Yeoman Generator Api\"\n date: 2021-11-02\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第 2 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\nwhat\n----\n\ngenerator是一个npm包，包名以`generator-`开头,如`generator-webapp`,全局安装后，执行命令`yo webapp`实际上就是执行该generator。\n\n目录\n--\n\npackage.json参考：\n\n```json\n{\n  \"name\": \"generator-name\",\n  \"version\": \"0.1.0\",\n  \"description\": \"\",\n  \"files\": [\n    \"generators\"\n  ],\n  \"keywords\": [\"yeoman-generator\"],\n  \"dependencies\": {\n    \"yeoman-generator\": \"^1.0.0\"\n  }\n}\n```\n\n目录结构：\n\n```go\n├───package.json\n└───generators/\n    ├───app/\n    │   └───index.js\n    └───router/\n        └───index.js\n```\n\nindex.js文件就是generator的主要代码，执行 `yo name`其实就是执行app/index.js，而如果有其他的子命令，可在app下面建同级目录，对这个例子来说，执行`yo name:router`就是执行router/index.js\n\n运行上下文\n-----\n\n一个generator大概是这个样子：\n\napp/index.js\n\n![image.png](../imgs/77e251176fed4a97a7ca946262916095.png)\n\n运行时的对象是这个class的实例，它的原型上的方法（不管是自定义的还是它提供的）都会按照一定的顺序执行，这个顺序就是它的运行上下文。\n\n### 执行顺序\n\n1.  `initializing` - 初始化，最先执行，可以做一些环境检查、配置获取等操作\n2.  `prompting` - 调用`this.prompt()`的地方，提供交互获取用户选项\n3.  `configuring` - 保存配置或创建项目配置文件 (如 `.editorconfig`或其他元文件)\n4.  `default` - 自定义的方法会进入这里执行.\n5.  `writing` - 生成文件\n6.  `conflicts` - 在这里解决冲突\n7.  `install` - 在这里执行install\n8.  `end` - 最后调用，可以处理资源释放等操作\n\n看代码会更清晰：app/index.js\n\n```javascript\nconst Generator = require('yeoman-generator');\nmodule.exports = class extends Generator {\n  constructor(args, opts) {\n    super(args, opts);\n  }\n   initializing() {\n    this.log('initializing');\n  }\n   prompting() {\n    this.log('prompting')\n  }\n \n  configuring() {this.log('configuring') }\n  default() { \n    this.log('default')\n  }\n  writing() {\n    this.log('writing')\n  }\n  conflicts() {this.log('conflicts') }\n  install() {\n    this.log('install')\n  }\n  end() {\n    this.log('end')\n   }\n  _private_method() {\n    this.log('private hey');\n  }\n  method1() {\n    this.log('method 1 just ran');\n  }\n  method2() {\n    this.log('method 2 just ran');\n  }\n};\n```\n\n执行`npm link`，然后找个地方执行`yo name`,\n\n![image.png](../imgs/476fc30fc2fc4d75b5ae6477ceeeba44.png)\n\n如图，自定义的method1和method2在default后，writing前执行，而如果我们不需要一个方法在上下文中被执行，则可以在方法名前加`_`，如`_private_method`\n\n常用api\n-----\n\n### log\n\nYeoman提供了`this.log`，不需要写`console.log`了\n\n### promot\n\nYeoman集成了[Inquirer.js](https://github.com%2FSBoudrias%2FInquirer.js \"https://github.com/SBoudrias/Inquirer.js\")，这是与用户交互的主要手段。 从promots获取的结果可以保存在this上，方便后续的方法中使用。\n\n### fs\n\nYeoman也集成了[mem-fs editor](https://github.com%2Fsboudrias%2Fmem-fs-editor \"https://github.com/sboudrias/mem-fs-editor\")，直接使用`this.fs`。 并且以[ejs template syntax](http://ejs.co%2F \"http://ejs.co/\")语法支持template：\n\ntemplate/index.html\n\n```xml\n<html>\n  <head>\n    <title><%= title %></title>\n  </head>\n</html>\n```\n\napp/index.js\n\n```kotlin\nthis.fs.copyTpl(\n      this.templatePath('index.html'),\n      this.destinationPath('public/index.html'),\n      { title: this.answers.title } // user answer `title` used\n    );\n```\n\n### path\n\nYemoman提供一些获取路径和拼接路径的简单api：\n\n`this.destinationRoot()`:当前运行命令的目录的绝对路径，可以传入一个参数拼接：`this.destinationPath('sub/path')`,当然也可以改变它`this.destinationRoot('new/path')`\n\n`this.sourceRoot()`:该generator template目录所在的绝对路径，也可以通过`this.templatePath('app/index.js')`传入一个参数拼接\n\n### dependencies & install\n\nYeoman提供了`this.packageJson`对象，它的`merge`方法能方便我们操作json对象；并且在write阶段后，这个对象将会生成package.json写到对应的位置。\n\n当然也可以自行组织json并写入对应的位置。\n\n在5.0.0版本后，generator在install环节会自动安装依赖，并且会嗅探到`this.env.cwd`目录下的package.json是否发生变更。\n\n如果`this.destinationRoot()`改变，则可能无法检测到package.json，此时可以通过`this.env.cwd = this.destinationRoot()`修复。\n\n### 命令\n\nYeoman提供了`spawnCommand`api，可以执行一些其他命令，比如手动安装依赖、执行git相关操作等等。\n\n实战\n--\n\n有了以上这些指示准备就可以进入实战环节了，下一篇将会讲generator的编写和发布。","slug":"前端脚手架：从入门到进阶——Yeoman Generator Api","published":1,"updated":"2024-04-04T15:27:03.322Z","comments":1,"layout":"post","photos":[],"_id":"clulf0lhz0063hajf8bro4xsc","content":"<p>这是我参与11月更文挑战的第 2 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h2><p>generator是一个npm包，包名以<code>generator-</code>开头,如<code>generator-webapp</code>,全局安装后，执行命令<code>yo webapp</code>实际上就是执行该generator。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>package.json参考：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;generator-name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;generators&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;keywords&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;yeoman-generator&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;dependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;yeoman-generator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^1.0.0&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>目录结构：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├───<span class=\"keyword\">package</span>.json</span><br><span class=\"line\">└───generators/</span><br><span class=\"line\">    ├───app/</span><br><span class=\"line\">    │   └───index.js</span><br><span class=\"line\">    └───router/</span><br><span class=\"line\">        └───index.js</span><br></pre></td></tr></table></figure>\n\n<p>index.js文件就是generator的主要代码，执行 <code>yo name</code>其实就是执行app&#x2F;index.js，而如果有其他的子命令，可在app下面建同级目录，对这个例子来说，执行<code>yo name:router</code>就是执行router&#x2F;index.js</p>\n<h2 id=\"运行上下文\"><a href=\"#运行上下文\" class=\"headerlink\" title=\"运行上下文\"></a>运行上下文</h2><p>一个generator大概是这个样子：</p>\n<p>app&#x2F;index.js</p>\n<p><img src=\"/../imgs/77e251176fed4a97a7ca946262916095.png\" alt=\"image.png\"></p>\n<p>运行时的对象是这个class的实例，它的原型上的方法（不管是自定义的还是它提供的）都会按照一定的顺序执行，这个顺序就是它的运行上下文。</p>\n<h3 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h3><ol>\n<li><code>initializing</code> - 初始化，最先执行，可以做一些环境检查、配置获取等操作</li>\n<li><code>prompting</code> - 调用<code>this.prompt()</code>的地方，提供交互获取用户选项</li>\n<li><code>configuring</code> - 保存配置或创建项目配置文件 (如 <code>.editorconfig</code>或其他元文件)</li>\n<li><code>default</code> - 自定义的方法会进入这里执行.</li>\n<li><code>writing</code> - 生成文件</li>\n<li><code>conflicts</code> - 在这里解决冲突</li>\n<li><code>install</code> - 在这里执行install</li>\n<li><code>end</code> - 最后调用，可以处理资源释放等操作</li>\n</ol>\n<p>看代码会更清晰：app&#x2F;index.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Generator</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;yeoman-generator&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">args, opts</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(args, opts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   <span class=\"title function_\">initializing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;initializing&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   <span class=\"title function_\">prompting</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;prompting&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">configuring</span>(<span class=\"params\"></span>) &#123;<span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;configuring&#x27;</span>) &#125;</span><br><span class=\"line\">  <span class=\"title function_\">default</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;default&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">writing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;writing&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">conflicts</span>(<span class=\"params\"></span>) &#123;<span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;conflicts&#x27;</span>) &#125;</span><br><span class=\"line\">  <span class=\"title function_\">install</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;install&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">end</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;end&#x27;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"title function_\">_private_method</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;private hey&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">method1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;method 1 just ran&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">method2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;method 2 just ran&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>npm link</code>，然后找个地方执行<code>yo name</code>,</p>\n<p><img src=\"/../imgs/476fc30fc2fc4d75b5ae6477ceeeba44.png\" alt=\"image.png\"></p>\n<p>如图，自定义的method1和method2在default后，writing前执行，而如果我们不需要一个方法在上下文中被执行，则可以在方法名前加<code>_</code>，如<code>_private_method</code></p>\n<h2 id=\"常用api\"><a href=\"#常用api\" class=\"headerlink\" title=\"常用api\"></a>常用api</h2><h3 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h3><p>Yeoman提供了<code>this.log</code>，不需要写<code>console.log</code>了</p>\n<h3 id=\"promot\"><a href=\"#promot\" class=\"headerlink\" title=\"promot\"></a>promot</h3><p>Yeoman集成了<a href=\"https://github.com%2FSBoudrias%2FInquirer.js\" title=\"https://github.com/SBoudrias/Inquirer.js\">Inquirer.js</a>，这是与用户交互的主要手段。 从promots获取的结果可以保存在this上，方便后续的方法中使用。</p>\n<h3 id=\"fs\"><a href=\"#fs\" class=\"headerlink\" title=\"fs\"></a>fs</h3><p>Yeoman也集成了<a href=\"https://github.com%2Fsboudrias%2Fmem-fs-editor\" title=\"https://github.com/sboudrias/mem-fs-editor\">mem-fs editor</a>，直接使用<code>this.fs</code>。 并且以<a href=\"http://ejs.co%2F\" title=\"http://ejs.co/\">ejs template syntax</a>语法支持template：</p>\n<p>template&#x2F;index.html</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&lt;%= title %&gt;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>app&#x2F;index.js</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.fs.copyTpl(</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.templatePath(<span class=\"string\">&#x27;index.html&#x27;</span>),</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.destinationPath(<span class=\"string\">&#x27;public/index.html&#x27;</span>),</span><br><span class=\"line\">      &#123; title: <span class=\"keyword\">this</span>.answers.title &#125; <span class=\"comment\">// user answer `title` used</span></span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h3><p>Yemoman提供一些获取路径和拼接路径的简单api：</p>\n<p><code>this.destinationRoot()</code>:当前运行命令的目录的绝对路径，可以传入一个参数拼接：<code>this.destinationPath(&#39;sub/path&#39;)</code>,当然也可以改变它<code>this.destinationRoot(&#39;new/path&#39;)</code></p>\n<p><code>this.sourceRoot()</code>:该generator template目录所在的绝对路径，也可以通过<code>this.templatePath(&#39;app/index.js&#39;)</code>传入一个参数拼接</p>\n<h3 id=\"dependencies-install\"><a href=\"#dependencies-install\" class=\"headerlink\" title=\"dependencies &amp; install\"></a>dependencies &amp; install</h3><p>Yeoman提供了<code>this.packageJson</code>对象，它的<code>merge</code>方法能方便我们操作json对象；并且在write阶段后，这个对象将会生成package.json写到对应的位置。</p>\n<p>当然也可以自行组织json并写入对应的位置。</p>\n<p>在5.0.0版本后，generator在install环节会自动安装依赖，并且会嗅探到<code>this.env.cwd</code>目录下的package.json是否发生变更。</p>\n<p>如果<code>this.destinationRoot()</code>改变，则可能无法检测到package.json，此时可以通过<code>this.env.cwd = this.destinationRoot()</code>修复。</p>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>Yeoman提供了<code>spawnCommand</code>api，可以执行一些其他命令，比如手动安装依赖、执行git相关操作等等。</p>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><p>有了以上这些指示准备就可以进入实战环节了，下一篇将会讲generator的编写和发布。</p>\n","length":3149,"excerpt":"","more":"<p>这是我参与11月更文挑战的第 2 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h2><p>generator是一个npm包，包名以<code>generator-</code>开头,如<code>generator-webapp</code>,全局安装后，执行命令<code>yo webapp</code>实际上就是执行该generator。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>package.json参考：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;generator-name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;generators&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;keywords&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;yeoman-generator&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;dependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;yeoman-generator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^1.0.0&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>目录结构：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├───<span class=\"keyword\">package</span>.json</span><br><span class=\"line\">└───generators/</span><br><span class=\"line\">    ├───app/</span><br><span class=\"line\">    │   └───index.js</span><br><span class=\"line\">    └───router/</span><br><span class=\"line\">        └───index.js</span><br></pre></td></tr></table></figure>\n\n<p>index.js文件就是generator的主要代码，执行 <code>yo name</code>其实就是执行app&#x2F;index.js，而如果有其他的子命令，可在app下面建同级目录，对这个例子来说，执行<code>yo name:router</code>就是执行router&#x2F;index.js</p>\n<h2 id=\"运行上下文\"><a href=\"#运行上下文\" class=\"headerlink\" title=\"运行上下文\"></a>运行上下文</h2><p>一个generator大概是这个样子：</p>\n<p>app&#x2F;index.js</p>\n<p><img src=\"/../imgs/77e251176fed4a97a7ca946262916095.png\" alt=\"image.png\"></p>\n<p>运行时的对象是这个class的实例，它的原型上的方法（不管是自定义的还是它提供的）都会按照一定的顺序执行，这个顺序就是它的运行上下文。</p>\n<h3 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h3><ol>\n<li><code>initializing</code> - 初始化，最先执行，可以做一些环境检查、配置获取等操作</li>\n<li><code>prompting</code> - 调用<code>this.prompt()</code>的地方，提供交互获取用户选项</li>\n<li><code>configuring</code> - 保存配置或创建项目配置文件 (如 <code>.editorconfig</code>或其他元文件)</li>\n<li><code>default</code> - 自定义的方法会进入这里执行.</li>\n<li><code>writing</code> - 生成文件</li>\n<li><code>conflicts</code> - 在这里解决冲突</li>\n<li><code>install</code> - 在这里执行install</li>\n<li><code>end</code> - 最后调用，可以处理资源释放等操作</li>\n</ol>\n<p>看代码会更清晰：app&#x2F;index.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Generator</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;yeoman-generator&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">args, opts</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(args, opts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   <span class=\"title function_\">initializing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;initializing&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   <span class=\"title function_\">prompting</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;prompting&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">configuring</span>(<span class=\"params\"></span>) &#123;<span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;configuring&#x27;</span>) &#125;</span><br><span class=\"line\">  <span class=\"title function_\">default</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;default&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">writing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;writing&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">conflicts</span>(<span class=\"params\"></span>) &#123;<span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;conflicts&#x27;</span>) &#125;</span><br><span class=\"line\">  <span class=\"title function_\">install</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;install&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">end</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;end&#x27;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"title function_\">_private_method</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;private hey&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">method1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;method 1 just ran&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">method2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;method 2 just ran&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>npm link</code>，然后找个地方执行<code>yo name</code>,</p>\n<p><img src=\"/../imgs/476fc30fc2fc4d75b5ae6477ceeeba44.png\" alt=\"image.png\"></p>\n<p>如图，自定义的method1和method2在default后，writing前执行，而如果我们不需要一个方法在上下文中被执行，则可以在方法名前加<code>_</code>，如<code>_private_method</code></p>\n<h2 id=\"常用api\"><a href=\"#常用api\" class=\"headerlink\" title=\"常用api\"></a>常用api</h2><h3 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h3><p>Yeoman提供了<code>this.log</code>，不需要写<code>console.log</code>了</p>\n<h3 id=\"promot\"><a href=\"#promot\" class=\"headerlink\" title=\"promot\"></a>promot</h3><p>Yeoman集成了<a href=\"https://github.com%2FSBoudrias%2FInquirer.js\" title=\"https://github.com/SBoudrias/Inquirer.js\">Inquirer.js</a>，这是与用户交互的主要手段。 从promots获取的结果可以保存在this上，方便后续的方法中使用。</p>\n<h3 id=\"fs\"><a href=\"#fs\" class=\"headerlink\" title=\"fs\"></a>fs</h3><p>Yeoman也集成了<a href=\"https://github.com%2Fsboudrias%2Fmem-fs-editor\" title=\"https://github.com/sboudrias/mem-fs-editor\">mem-fs editor</a>，直接使用<code>this.fs</code>。 并且以<a href=\"http://ejs.co%2F\" title=\"http://ejs.co/\">ejs template syntax</a>语法支持template：</p>\n<p>template&#x2F;index.html</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&lt;%= title %&gt;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>app&#x2F;index.js</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.fs.copyTpl(</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.templatePath(<span class=\"string\">&#x27;index.html&#x27;</span>),</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.destinationPath(<span class=\"string\">&#x27;public/index.html&#x27;</span>),</span><br><span class=\"line\">      &#123; title: <span class=\"keyword\">this</span>.answers.title &#125; <span class=\"comment\">// user answer `title` used</span></span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h3><p>Yemoman提供一些获取路径和拼接路径的简单api：</p>\n<p><code>this.destinationRoot()</code>:当前运行命令的目录的绝对路径，可以传入一个参数拼接：<code>this.destinationPath(&#39;sub/path&#39;)</code>,当然也可以改变它<code>this.destinationRoot(&#39;new/path&#39;)</code></p>\n<p><code>this.sourceRoot()</code>:该generator template目录所在的绝对路径，也可以通过<code>this.templatePath(&#39;app/index.js&#39;)</code>传入一个参数拼接</p>\n<h3 id=\"dependencies-install\"><a href=\"#dependencies-install\" class=\"headerlink\" title=\"dependencies &amp; install\"></a>dependencies &amp; install</h3><p>Yeoman提供了<code>this.packageJson</code>对象，它的<code>merge</code>方法能方便我们操作json对象；并且在write阶段后，这个对象将会生成package.json写到对应的位置。</p>\n<p>当然也可以自行组织json并写入对应的位置。</p>\n<p>在5.0.0版本后，generator在install环节会自动安装依赖，并且会嗅探到<code>this.env.cwd</code>目录下的package.json是否发生变更。</p>\n<p>如果<code>this.destinationRoot()</code>改变，则可能无法检测到package.json，此时可以通过<code>this.env.cwd = this.destinationRoot()</code>修复。</p>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>Yeoman提供了<code>spawnCommand</code>api，可以执行一些其他命令，比如手动安装依赖、执行git相关操作等等。</p>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><p>有了以上这些指示准备就可以进入实战环节了，下一篇将会讲generator的编写和发布。</p>\n"},{"title":"前端脚手架：从入门到进阶——Yeoman 自定义Generator","date":"2021-11-02T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第 3 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n准备工作\n----\n\n首先要准备一个项目模板，其次设计模板选项，比如：\n\n我们有一个vue2-tailwind的项目可以简化为模板，可以选择是否需要使用tailwind,并且需要支持pc和h5不同平台的配置。\n\n快速开始\n----\n\n### 创建目录结构\n\n```arduino\nmkdir generator-vue2-tailwind\nnpm init -y\n```\n\n创建如下目录\n\n![image.png](../imgs/a71e28d5fa794601a6dd09a9f3832958.png)\n\n### 设置参数和交互选项\n\n命令`yo vue2-tailwind appname`得到项目名appname，当然也可以不输入，在promot中设置或修改。 promot中的`store: true,`可以记住该设置，并设为默认选项。此处务必要将根目录修改过来： `this.destinationRoot('./' + this.answers.name);this.env.cwd = this.destinationRoot()`\n\n```javascript\nvar Generator = require('yeoman-generator');\nvar yosay = require('yosay');\nconst commandExists = require('command-exists').sync;\nmodule.exports = class extends Generator {\n  constructor(args, opts) {\n    super(args, opts);\n    this.argument(\"appname\", { type: String, required: false });\n  }\n  async initializing() {\n    this.log(yosay('Welcome to the vue2-tailwind generator'));\n  }\n  async prompting() {\n    const answers = await this.prompt([\n      {\n        type: \"input\",\n        name: \"name\",\n        message: \"Your project name\",\n        default: this.options.appname // Default to current folder name\n      },\n      {\n        type: \"confirm\",\n        name: \"tailwind\", store: true,\n        message: \"Would you like to enable the tailwind?\"\n      },{\n        type:\"list\",\n        name: 'platform',\n        message: 'choose a platform',\n        choices:['pc','h5']\n      }\n    ])\n    this.answers = answers;\n    this.destinationRoot('./' + this.answers.name)\n    this.env.cwd = this.destinationRoot()\n  }\n \n...\n  \n};\n```\n\n### 文件操作\n\n对于一些需要根据用户数据才能确定内容的文件，可以使用ejs的模板语法：\n\n![image.png](../imgs/2e037560cee54fb099ac6ef1a7ab1817.png)\n\n`this.fs.copyTpl`，能够在拷贝文件的同时进行编译转换。 package.json可以自己写入相应的地方，也可以通过`this.packageJson.merge`方法进行操作，用这个api会在install阶段前自动写入相应的地方。\n\n```kotlin\n writing() {\n    this.fs.copyTpl(this.templatePath('vue2/**/*'),this.destinationPath(),this.answers,{},{processDestinationPath:(destinationFile)=>{\n      if(destinationFile.includes('tailwind')){\n        return destinationFile.replace(/(\\/|\\\\)(_no_tailwind)|(_tailwind)/,'');\n      } else {\n        return destinationFile;\n      }\n    },globOptions:{dot:true,ignore:[this.answers.tailwind?'**/_no_tailwind/**':'**/_tailwind/**']}})\n    \n    const pkgJson = {\n     ...\n    };\n    if (this.answers.tailwind) {\n      Object.assign( pkgJson.devDependencies,{\n        \"@tailwindcss/postcss7-compat\": \"^2.2.7\",\n        \"tailwindcss\": \"npm:@tailwindcss/postcss7-compat\",\n      })\n    }\n    if(this.answers.platform==='h5') {\n      Object.assign( pkgJson.devDependencies,{\n        \"postcss-pxtorem\": \"^5.1.1\"\n      })\n    }\n\n    this.fs.extendJSON(this.destinationPath('package.json'), pkgJson);\n   \n  }\n```\n\n### install\n\ninstall可以交给用户完成，当然也可以设置`install(){}`，由脚手架完成。 默认情况下会以npm安装，如果需要用yarn，得设置`this.env.options.nodePackageManager = 'yarn';`\n\n```kotlin\ninstall() {\n    const git = this.spawnCommandSync('git',['init'])\n    if(git.exitCode!==0){\n      this.log(git.stdout)\n    }\n    if(commandExists('yarn')) {\n      this.env.options.nodePackageManager = 'yarn';\n    } \n    \n  }\n```\n\n### 启动项目\n\n安装完成后自动启动项目，可以使用`this.spawnCommandSync`执行命令\n\n```javascript\n end() {\n    const start = this.spawnCommandSync('yarn',['serve'])\n    if(start.exitCode!==0){\n      this.log(start.stdout)\n    }\n  }\n```\n\n本地测试\n----\n\n在generator目录中\n\n```bash\nnpm link\n```\n\n其他目录\n\n```\nyo vue2-tailwind\n```\n\n确认项目结构、内容是否一致。 记得测试完成后`npm unlink`\n\n发布\n--\n\n```\nnpm login\nnpm publish\n```\n\n完整代码可见[www.npmjs.com/package/@br…](https://www.npmjs.com%2Fpackage%2F%40bressanone%2Fgenerator-vue2-tailwind \"https://www.npmjs.com/package/@bressanone/generator-vue2-tailwind\")\n\n常见问题\n----\n\n### 如何看到安装了哪些generator\n\n执行`yo`\n\n![image.png](../imgs/790c475ec884462bbe2151edd7b0fe43.png)\n\n### 报错\n\nWarning: Accessing non-existent property 'which' of module exports inside circular dependency npm： node版本过高，降到12可以","source":"_posts/前端脚手架：从入门到进阶——Yeoman 自定义Generator.md","raw":"---\n title: \"前端脚手架：从入门到进阶——Yeoman 自定义Generator\"\n date: 2021-11-03\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第 3 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n准备工作\n----\n\n首先要准备一个项目模板，其次设计模板选项，比如：\n\n我们有一个vue2-tailwind的项目可以简化为模板，可以选择是否需要使用tailwind,并且需要支持pc和h5不同平台的配置。\n\n快速开始\n----\n\n### 创建目录结构\n\n```arduino\nmkdir generator-vue2-tailwind\nnpm init -y\n```\n\n创建如下目录\n\n![image.png](../imgs/a71e28d5fa794601a6dd09a9f3832958.png)\n\n### 设置参数和交互选项\n\n命令`yo vue2-tailwind appname`得到项目名appname，当然也可以不输入，在promot中设置或修改。 promot中的`store: true,`可以记住该设置，并设为默认选项。此处务必要将根目录修改过来： `this.destinationRoot('./' + this.answers.name);this.env.cwd = this.destinationRoot()`\n\n```javascript\nvar Generator = require('yeoman-generator');\nvar yosay = require('yosay');\nconst commandExists = require('command-exists').sync;\nmodule.exports = class extends Generator {\n  constructor(args, opts) {\n    super(args, opts);\n    this.argument(\"appname\", { type: String, required: false });\n  }\n  async initializing() {\n    this.log(yosay('Welcome to the vue2-tailwind generator'));\n  }\n  async prompting() {\n    const answers = await this.prompt([\n      {\n        type: \"input\",\n        name: \"name\",\n        message: \"Your project name\",\n        default: this.options.appname // Default to current folder name\n      },\n      {\n        type: \"confirm\",\n        name: \"tailwind\", store: true,\n        message: \"Would you like to enable the tailwind?\"\n      },{\n        type:\"list\",\n        name: 'platform',\n        message: 'choose a platform',\n        choices:['pc','h5']\n      }\n    ])\n    this.answers = answers;\n    this.destinationRoot('./' + this.answers.name)\n    this.env.cwd = this.destinationRoot()\n  }\n \n...\n  \n};\n```\n\n### 文件操作\n\n对于一些需要根据用户数据才能确定内容的文件，可以使用ejs的模板语法：\n\n![image.png](../imgs/2e037560cee54fb099ac6ef1a7ab1817.png)\n\n`this.fs.copyTpl`，能够在拷贝文件的同时进行编译转换。 package.json可以自己写入相应的地方，也可以通过`this.packageJson.merge`方法进行操作，用这个api会在install阶段前自动写入相应的地方。\n\n```kotlin\n writing() {\n    this.fs.copyTpl(this.templatePath('vue2/**/*'),this.destinationPath(),this.answers,{},{processDestinationPath:(destinationFile)=>{\n      if(destinationFile.includes('tailwind')){\n        return destinationFile.replace(/(\\/|\\\\)(_no_tailwind)|(_tailwind)/,'');\n      } else {\n        return destinationFile;\n      }\n    },globOptions:{dot:true,ignore:[this.answers.tailwind?'**/_no_tailwind/**':'**/_tailwind/**']}})\n    \n    const pkgJson = {\n     ...\n    };\n    if (this.answers.tailwind) {\n      Object.assign( pkgJson.devDependencies,{\n        \"@tailwindcss/postcss7-compat\": \"^2.2.7\",\n        \"tailwindcss\": \"npm:@tailwindcss/postcss7-compat\",\n      })\n    }\n    if(this.answers.platform==='h5') {\n      Object.assign( pkgJson.devDependencies,{\n        \"postcss-pxtorem\": \"^5.1.1\"\n      })\n    }\n\n    this.fs.extendJSON(this.destinationPath('package.json'), pkgJson);\n   \n  }\n```\n\n### install\n\ninstall可以交给用户完成，当然也可以设置`install(){}`，由脚手架完成。 默认情况下会以npm安装，如果需要用yarn，得设置`this.env.options.nodePackageManager = 'yarn';`\n\n```kotlin\ninstall() {\n    const git = this.spawnCommandSync('git',['init'])\n    if(git.exitCode!==0){\n      this.log(git.stdout)\n    }\n    if(commandExists('yarn')) {\n      this.env.options.nodePackageManager = 'yarn';\n    } \n    \n  }\n```\n\n### 启动项目\n\n安装完成后自动启动项目，可以使用`this.spawnCommandSync`执行命令\n\n```javascript\n end() {\n    const start = this.spawnCommandSync('yarn',['serve'])\n    if(start.exitCode!==0){\n      this.log(start.stdout)\n    }\n  }\n```\n\n本地测试\n----\n\n在generator目录中\n\n```bash\nnpm link\n```\n\n其他目录\n\n```\nyo vue2-tailwind\n```\n\n确认项目结构、内容是否一致。 记得测试完成后`npm unlink`\n\n发布\n--\n\n```\nnpm login\nnpm publish\n```\n\n完整代码可见[www.npmjs.com/package/@br…](https://www.npmjs.com%2Fpackage%2F%40bressanone%2Fgenerator-vue2-tailwind \"https://www.npmjs.com/package/@bressanone/generator-vue2-tailwind\")\n\n常见问题\n----\n\n### 如何看到安装了哪些generator\n\n执行`yo`\n\n![image.png](../imgs/790c475ec884462bbe2151edd7b0fe43.png)\n\n### 报错\n\nWarning: Accessing non-existent property 'which' of module exports inside circular dependency npm： node版本过高，降到12可以","slug":"前端脚手架：从入门到进阶——Yeoman 自定义Generator","published":1,"updated":"2024-04-04T15:27:03.315Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li00066hajf7rbxfm5e","content":"<p>这是我参与11月更文挑战的第 3 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>首先要准备一个项目模板，其次设计模板选项，比如：</p>\n<p>我们有一个vue2-tailwind的项目可以简化为模板，可以选择是否需要使用tailwind,并且需要支持pc和h5不同平台的配置。</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"创建目录结构\"><a href=\"#创建目录结构\" class=\"headerlink\" title=\"创建目录结构\"></a>创建目录结构</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir generator-vue2-tailwind</span><br><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<p>创建如下目录</p>\n<p><img src=\"/../imgs/a71e28d5fa794601a6dd09a9f3832958.png\" alt=\"image.png\"></p>\n<h3 id=\"设置参数和交互选项\"><a href=\"#设置参数和交互选项\" class=\"headerlink\" title=\"设置参数和交互选项\"></a>设置参数和交互选项</h3><p>命令<code>yo vue2-tailwind appname</code>得到项目名appname，当然也可以不输入，在promot中设置或修改。 promot中的<code>store: true,</code>可以记住该设置，并设为默认选项。此处务必要将根目录修改过来： <code>this.destinationRoot(&#39;./&#39; + this.answers.name);this.env.cwd = this.destinationRoot()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Generator</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;yeoman-generator&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> yosay = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;yosay&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> commandExists = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;command-exists&#x27;</span>).<span class=\"property\">sync</span>;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">args, opts</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(args, opts);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">argument</span>(<span class=\"string\">&quot;appname&quot;</span>, &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">initializing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">yosay</span>(<span class=\"string\">&#x27;Welcome to the vue2-tailwind generator&#x27;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">prompting</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> answers = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">prompt</span>([</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;input&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;name&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&quot;Your project name&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">default</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">options</span>.<span class=\"property\">appname</span> <span class=\"comment\">// Default to current folder name</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;confirm&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;tailwind&quot;</span>, <span class=\"attr\">store</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&quot;Would you like to enable the tailwind?&quot;</span></span><br><span class=\"line\">      &#125;,&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>:<span class=\"string\">&quot;list&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;platform&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;choose a platform&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">choices</span>:[<span class=\"string\">&#x27;pc&#x27;</span>,<span class=\"string\">&#x27;h5&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">answers</span> = answers;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">destinationRoot</span>(<span class=\"string\">&#x27;./&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">answers</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">env</span>.<span class=\"property\">cwd</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">destinationRoot</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><p>对于一些需要根据用户数据才能确定内容的文件，可以使用ejs的模板语法：</p>\n<p><img src=\"/../imgs/2e037560cee54fb099ac6ef1a7ab1817.png\" alt=\"image.png\"></p>\n<p><code>this.fs.copyTpl</code>，能够在拷贝文件的同时进行编译转换。 package.json可以自己写入相应的地方，也可以通过<code>this.packageJson.merge</code>方法进行操作，用这个api会在install阶段前自动写入相应的地方。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writing() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.fs.copyTpl(<span class=\"keyword\">this</span>.templatePath(<span class=\"string\">&#x27;vue2/**/*&#x27;</span>),<span class=\"keyword\">this</span>.destinationPath(),<span class=\"keyword\">this</span>.answers,&#123;&#125;,&#123;processDestinationPath:(destinationFile)=&gt;&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(destinationFile.includes(<span class=\"string\">&#x27;tailwind&#x27;</span>))&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> destinationFile.replace(/(\\/|\\\\)(_no_tailwind)|(_tailwind)/,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> destinationFile;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,globOptions:&#123;dot:<span class=\"literal\">true</span>,ignore:[<span class=\"keyword\">this</span>.answers.tailwind?<span class=\"string\">&#x27;**/_no_tailwind/**&#x27;</span>:<span class=\"string\">&#x27;**/_tailwind/**&#x27;</span>]&#125;&#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">const</span> pkgJson = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.answers.tailwind) &#123;</span><br><span class=\"line\">     Object.assign( pkgJson.devDependencies,&#123;</span><br><span class=\"line\">       <span class=\"string\">&quot;@tailwindcss/postcss7-compat&quot;</span>: <span class=\"string\">&quot;^2.2.7&quot;</span>,</span><br><span class=\"line\">       <span class=\"string\">&quot;tailwindcss&quot;</span>: <span class=\"string\">&quot;npm:@tailwindcss/postcss7-compat&quot;</span>,</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.answers.platform===<span class=\"string\">&#x27;h5&#x27;</span>) &#123;</span><br><span class=\"line\">     Object.assign( pkgJson.devDependencies,&#123;</span><br><span class=\"line\">       <span class=\"string\">&quot;postcss-pxtorem&quot;</span>: <span class=\"string\">&quot;^5.1.1&quot;</span></span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.fs.extendJSON(<span class=\"keyword\">this</span>.destinationPath(<span class=\"string\">&#x27;package.json&#x27;</span>), pkgJson);</span><br><span class=\"line\">  </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><p>install可以交给用户完成，当然也可以设置<code>install()&#123;&#125;</code>，由脚手架完成。 默认情况下会以npm安装，如果需要用yarn，得设置<code>this.env.options.nodePackageManager = &#39;yarn&#39;;</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">install() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> git = <span class=\"keyword\">this</span>.spawnCommandSync(<span class=\"string\">&#x27;git&#x27;</span>,[<span class=\"string\">&#x27;init&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(git.exitCode!==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.log(git.stdout)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(commandExists(<span class=\"string\">&#x27;yarn&#x27;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.env.options.nodePackageManager = <span class=\"string\">&#x27;yarn&#x27;</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><p>安装完成后自动启动项目，可以使用<code>this.spawnCommandSync</code>执行命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">end</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> start = <span class=\"variable language_\">this</span>.<span class=\"title function_\">spawnCommandSync</span>(<span class=\"string\">&#x27;yarn&#x27;</span>,[<span class=\"string\">&#x27;serve&#x27;</span>])</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(start.<span class=\"property\">exitCode</span>!==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(start.<span class=\"property\">stdout</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h2><p>在generator目录中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">link</span></span><br></pre></td></tr></table></figure>\n\n<p>其他目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo vue2-tailwind</span><br></pre></td></tr></table></figure>\n\n<p>确认项目结构、内容是否一致。 记得测试完成后<code>npm unlink</code></p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n<p>完整代码可见<a href=\"https://www.npmjs.com%2Fpackage%2F%40bressanone%2Fgenerator-vue2-tailwind\" title=\"https://www.npmjs.com/package/@bressanone/generator-vue2-tailwind\">www.npmjs.com&#x2F;package&#x2F;@br…</a></p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"如何看到安装了哪些generator\"><a href=\"#如何看到安装了哪些generator\" class=\"headerlink\" title=\"如何看到安装了哪些generator\"></a>如何看到安装了哪些generator</h3><p>执行<code>yo</code></p>\n<p><img src=\"/../imgs/790c475ec884462bbe2151edd7b0fe43.png\" alt=\"image.png\"></p>\n<h3 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h3><p>Warning: Accessing non-existent property ‘which’ of module exports inside circular dependency npm： node版本过高，降到12可以</p>\n","length":3485,"excerpt":"","more":"<p>这是我参与11月更文挑战的第 3 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>首先要准备一个项目模板，其次设计模板选项，比如：</p>\n<p>我们有一个vue2-tailwind的项目可以简化为模板，可以选择是否需要使用tailwind,并且需要支持pc和h5不同平台的配置。</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"创建目录结构\"><a href=\"#创建目录结构\" class=\"headerlink\" title=\"创建目录结构\"></a>创建目录结构</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir generator-vue2-tailwind</span><br><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<p>创建如下目录</p>\n<p><img src=\"/../imgs/a71e28d5fa794601a6dd09a9f3832958.png\" alt=\"image.png\"></p>\n<h3 id=\"设置参数和交互选项\"><a href=\"#设置参数和交互选项\" class=\"headerlink\" title=\"设置参数和交互选项\"></a>设置参数和交互选项</h3><p>命令<code>yo vue2-tailwind appname</code>得到项目名appname，当然也可以不输入，在promot中设置或修改。 promot中的<code>store: true,</code>可以记住该设置，并设为默认选项。此处务必要将根目录修改过来： <code>this.destinationRoot(&#39;./&#39; + this.answers.name);this.env.cwd = this.destinationRoot()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Generator</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;yeoman-generator&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> yosay = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;yosay&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> commandExists = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;command-exists&#x27;</span>).<span class=\"property\">sync</span>;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">args, opts</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(args, opts);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">argument</span>(<span class=\"string\">&quot;appname&quot;</span>, &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">initializing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">yosay</span>(<span class=\"string\">&#x27;Welcome to the vue2-tailwind generator&#x27;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">prompting</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> answers = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">prompt</span>([</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;input&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;name&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&quot;Your project name&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">default</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">options</span>.<span class=\"property\">appname</span> <span class=\"comment\">// Default to current folder name</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;confirm&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;tailwind&quot;</span>, <span class=\"attr\">store</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&quot;Would you like to enable the tailwind?&quot;</span></span><br><span class=\"line\">      &#125;,&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>:<span class=\"string\">&quot;list&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;platform&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;choose a platform&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">choices</span>:[<span class=\"string\">&#x27;pc&#x27;</span>,<span class=\"string\">&#x27;h5&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">answers</span> = answers;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">destinationRoot</span>(<span class=\"string\">&#x27;./&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">answers</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">env</span>.<span class=\"property\">cwd</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">destinationRoot</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><p>对于一些需要根据用户数据才能确定内容的文件，可以使用ejs的模板语法：</p>\n<p><img src=\"/../imgs/2e037560cee54fb099ac6ef1a7ab1817.png\" alt=\"image.png\"></p>\n<p><code>this.fs.copyTpl</code>，能够在拷贝文件的同时进行编译转换。 package.json可以自己写入相应的地方，也可以通过<code>this.packageJson.merge</code>方法进行操作，用这个api会在install阶段前自动写入相应的地方。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writing() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.fs.copyTpl(<span class=\"keyword\">this</span>.templatePath(<span class=\"string\">&#x27;vue2/**/*&#x27;</span>),<span class=\"keyword\">this</span>.destinationPath(),<span class=\"keyword\">this</span>.answers,&#123;&#125;,&#123;processDestinationPath:(destinationFile)=&gt;&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(destinationFile.includes(<span class=\"string\">&#x27;tailwind&#x27;</span>))&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> destinationFile.replace(/(\\/|\\\\)(_no_tailwind)|(_tailwind)/,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> destinationFile;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,globOptions:&#123;dot:<span class=\"literal\">true</span>,ignore:[<span class=\"keyword\">this</span>.answers.tailwind?<span class=\"string\">&#x27;**/_no_tailwind/**&#x27;</span>:<span class=\"string\">&#x27;**/_tailwind/**&#x27;</span>]&#125;&#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">const</span> pkgJson = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.answers.tailwind) &#123;</span><br><span class=\"line\">     Object.assign( pkgJson.devDependencies,&#123;</span><br><span class=\"line\">       <span class=\"string\">&quot;@tailwindcss/postcss7-compat&quot;</span>: <span class=\"string\">&quot;^2.2.7&quot;</span>,</span><br><span class=\"line\">       <span class=\"string\">&quot;tailwindcss&quot;</span>: <span class=\"string\">&quot;npm:@tailwindcss/postcss7-compat&quot;</span>,</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.answers.platform===<span class=\"string\">&#x27;h5&#x27;</span>) &#123;</span><br><span class=\"line\">     Object.assign( pkgJson.devDependencies,&#123;</span><br><span class=\"line\">       <span class=\"string\">&quot;postcss-pxtorem&quot;</span>: <span class=\"string\">&quot;^5.1.1&quot;</span></span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.fs.extendJSON(<span class=\"keyword\">this</span>.destinationPath(<span class=\"string\">&#x27;package.json&#x27;</span>), pkgJson);</span><br><span class=\"line\">  </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><p>install可以交给用户完成，当然也可以设置<code>install()&#123;&#125;</code>，由脚手架完成。 默认情况下会以npm安装，如果需要用yarn，得设置<code>this.env.options.nodePackageManager = &#39;yarn&#39;;</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">install() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> git = <span class=\"keyword\">this</span>.spawnCommandSync(<span class=\"string\">&#x27;git&#x27;</span>,[<span class=\"string\">&#x27;init&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(git.exitCode!==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.log(git.stdout)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(commandExists(<span class=\"string\">&#x27;yarn&#x27;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.env.options.nodePackageManager = <span class=\"string\">&#x27;yarn&#x27;</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><p>安装完成后自动启动项目，可以使用<code>this.spawnCommandSync</code>执行命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">end</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> start = <span class=\"variable language_\">this</span>.<span class=\"title function_\">spawnCommandSync</span>(<span class=\"string\">&#x27;yarn&#x27;</span>,[<span class=\"string\">&#x27;serve&#x27;</span>])</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(start.<span class=\"property\">exitCode</span>!==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(start.<span class=\"property\">stdout</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h2><p>在generator目录中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">link</span></span><br></pre></td></tr></table></figure>\n\n<p>其他目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo vue2-tailwind</span><br></pre></td></tr></table></figure>\n\n<p>确认项目结构、内容是否一致。 记得测试完成后<code>npm unlink</code></p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n<p>完整代码可见<a href=\"https://www.npmjs.com%2Fpackage%2F%40bressanone%2Fgenerator-vue2-tailwind\" title=\"https://www.npmjs.com/package/@bressanone/generator-vue2-tailwind\">www.npmjs.com&#x2F;package&#x2F;@br…</a></p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"如何看到安装了哪些generator\"><a href=\"#如何看到安装了哪些generator\" class=\"headerlink\" title=\"如何看到安装了哪些generator\"></a>如何看到安装了哪些generator</h3><p>执行<code>yo</code></p>\n<p><img src=\"/../imgs/790c475ec884462bbe2151edd7b0fe43.png\" alt=\"image.png\"></p>\n<h3 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h3><p>Warning: Accessing non-existent property ‘which’ of module exports inside circular dependency npm： node版本过高，降到12可以</p>\n"},{"title":"前端脚手架：从入门到进阶——Yeoman","date":"2021-10-31T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第 1 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n前言\n==\n\n前端脚手架是前端工程化的一个重要里程碑，而Yeoman是快速实现脚手架的一个重要工具。同时，yeoman的设计理念，对我们自己开发一个脚手架也有很好的启发。\n\nYeoman是什么\n---------\n\n我们先来看一下官网的说明：\n\n\"Yeoman可以帮助你快速开始一个新的项目，定制最佳实践和工具来帮助你保持高效。我们提供一个generator生态系统，generator是可以被`yo`命令运行的插件，能够搭建完整的项目或有用的部分\"\n\n> Yeoman helps you to kickstart new projects, prescribing best practices and tools to help you stay productive.\n\n> To do so, we provide a generator ecosystem. A generator is basically a plugin that can be run with the `yo` command to scaffold complete projects or useful parts.\n\n简单来说，Yeoman提供了一个叫`yo`的命令，能利用generator插件快速生成项目。同时提供了一个生态，你可以去选择某个generator使用或者自己创建一个generator。\n\n从这个描述可以推测，Yeoman不仅提供了一个`yo`命令，还有generator相关的api，能够帮助我们创建目录、文件、管理依赖等，简化项目生成创建的操作。因此可以将它理解为_脚手架的脚手架_。\n\n快速入门\n----\n\n安装yo命令\n\n```\nnpm install -g yo\n```\n\n安装一个generator,我们可以先去官网找一个[yeoman.io/generators/](https://yeoman.io%2Fgenerators%2F \"https://yeoman.io/generators/\")\n\n搜索vue,可以看到有好几个generator，我们可以选一个vue-starter ![image.png](../imgs/fe65e292fc9e40da8d37030a0f290c18.png)\n\n```\nnpm install -g generator-vue-starter\n```\n\n安装好后就可以执行这个generator了\n\n```\nyo vue-starter\n```\n\n我们可以看一下生成的内容\n\n![image.png](../imgs/f3e0b8a534b7484eb21fba6411ff6353.png)\n\n这些内容就是这个generator提供的。可以看到这个generator时间比较久了，依赖配置都过时了。我们也不必安装依赖运行它，因为接下来我们就要自己开发一个generator。","source":"_posts/前端脚手架：从入门到进阶——Yeoman.md","raw":"---\n title: \"前端脚手架：从入门到进阶——Yeoman\"\n date: 2021-11-01\n tags: [前端,Yeoman]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第 1 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n前言\n==\n\n前端脚手架是前端工程化的一个重要里程碑，而Yeoman是快速实现脚手架的一个重要工具。同时，yeoman的设计理念，对我们自己开发一个脚手架也有很好的启发。\n\nYeoman是什么\n---------\n\n我们先来看一下官网的说明：\n\n\"Yeoman可以帮助你快速开始一个新的项目，定制最佳实践和工具来帮助你保持高效。我们提供一个generator生态系统，generator是可以被`yo`命令运行的插件，能够搭建完整的项目或有用的部分\"\n\n> Yeoman helps you to kickstart new projects, prescribing best practices and tools to help you stay productive.\n\n> To do so, we provide a generator ecosystem. A generator is basically a plugin that can be run with the `yo` command to scaffold complete projects or useful parts.\n\n简单来说，Yeoman提供了一个叫`yo`的命令，能利用generator插件快速生成项目。同时提供了一个生态，你可以去选择某个generator使用或者自己创建一个generator。\n\n从这个描述可以推测，Yeoman不仅提供了一个`yo`命令，还有generator相关的api，能够帮助我们创建目录、文件、管理依赖等，简化项目生成创建的操作。因此可以将它理解为_脚手架的脚手架_。\n\n快速入门\n----\n\n安装yo命令\n\n```\nnpm install -g yo\n```\n\n安装一个generator,我们可以先去官网找一个[yeoman.io/generators/](https://yeoman.io%2Fgenerators%2F \"https://yeoman.io/generators/\")\n\n搜索vue,可以看到有好几个generator，我们可以选一个vue-starter ![image.png](../imgs/fe65e292fc9e40da8d37030a0f290c18.png)\n\n```\nnpm install -g generator-vue-starter\n```\n\n安装好后就可以执行这个generator了\n\n```\nyo vue-starter\n```\n\n我们可以看一下生成的内容\n\n![image.png](../imgs/f3e0b8a534b7484eb21fba6411ff6353.png)\n\n这些内容就是这个generator提供的。可以看到这个generator时间比较久了，依赖配置都过时了。我们也不必安装依赖运行它，因为接下来我们就要自己开发一个generator。","slug":"前端脚手架：从入门到进阶——Yeoman","published":1,"updated":"2024-04-04T15:27:03.329Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li0006ahajfausve6bs","content":"<p>这是我参与11月更文挑战的第 1 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前端脚手架是前端工程化的一个重要里程碑，而Yeoman是快速实现脚手架的一个重要工具。同时，yeoman的设计理念，对我们自己开发一个脚手架也有很好的启发。</p>\n<h2 id=\"Yeoman是什么\"><a href=\"#Yeoman是什么\" class=\"headerlink\" title=\"Yeoman是什么\"></a>Yeoman是什么</h2><p>我们先来看一下官网的说明：</p>\n<p>“Yeoman可以帮助你快速开始一个新的项目，定制最佳实践和工具来帮助你保持高效。我们提供一个generator生态系统，generator是可以被<code>yo</code>命令运行的插件，能够搭建完整的项目或有用的部分”</p>\n<blockquote>\n<p>Yeoman helps you to kickstart new projects, prescribing best practices and tools to help you stay productive.</p>\n</blockquote>\n<blockquote>\n<p>To do so, we provide a generator ecosystem. A generator is basically a plugin that can be run with the <code>yo</code> command to scaffold complete projects or useful parts.</p>\n</blockquote>\n<p>简单来说，Yeoman提供了一个叫<code>yo</code>的命令，能利用generator插件快速生成项目。同时提供了一个生态，你可以去选择某个generator使用或者自己创建一个generator。</p>\n<p>从这个描述可以推测，Yeoman不仅提供了一个<code>yo</code>命令，还有generator相关的api，能够帮助我们创建目录、文件、管理依赖等，简化项目生成创建的操作。因此可以将它理解为_脚手架的脚手架_。</p>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>安装yo命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yo</span><br></pre></td></tr></table></figure>\n\n<p>安装一个generator,我们可以先去官网找一个<a href=\"https://yeoman.io%2Fgenerators%2F\" title=\"https://yeoman.io/generators/\">yeoman.io&#x2F;generators&#x2F;</a></p>\n<p>搜索vue,可以看到有好几个generator，我们可以选一个vue-starter <img src=\"/../imgs/fe65e292fc9e40da8d37030a0f290c18.png\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g generator-vue-starter</span><br></pre></td></tr></table></figure>\n\n<p>安装好后就可以执行这个generator了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo vue-starter</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看一下生成的内容</p>\n<p><img src=\"/../imgs/f3e0b8a534b7484eb21fba6411ff6353.png\" alt=\"image.png\"></p>\n<p>这些内容就是这个generator提供的。可以看到这个generator时间比较久了，依赖配置都过时了。我们也不必安装依赖运行它，因为接下来我们就要自己开发一个generator。</p>\n","length":945,"excerpt":"","more":"<p>这是我参与11月更文挑战的第 1 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前端脚手架是前端工程化的一个重要里程碑，而Yeoman是快速实现脚手架的一个重要工具。同时，yeoman的设计理念，对我们自己开发一个脚手架也有很好的启发。</p>\n<h2 id=\"Yeoman是什么\"><a href=\"#Yeoman是什么\" class=\"headerlink\" title=\"Yeoman是什么\"></a>Yeoman是什么</h2><p>我们先来看一下官网的说明：</p>\n<p>“Yeoman可以帮助你快速开始一个新的项目，定制最佳实践和工具来帮助你保持高效。我们提供一个generator生态系统，generator是可以被<code>yo</code>命令运行的插件，能够搭建完整的项目或有用的部分”</p>\n<blockquote>\n<p>Yeoman helps you to kickstart new projects, prescribing best practices and tools to help you stay productive.</p>\n</blockquote>\n<blockquote>\n<p>To do so, we provide a generator ecosystem. A generator is basically a plugin that can be run with the <code>yo</code> command to scaffold complete projects or useful parts.</p>\n</blockquote>\n<p>简单来说，Yeoman提供了一个叫<code>yo</code>的命令，能利用generator插件快速生成项目。同时提供了一个生态，你可以去选择某个generator使用或者自己创建一个generator。</p>\n<p>从这个描述可以推测，Yeoman不仅提供了一个<code>yo</code>命令，还有generator相关的api，能够帮助我们创建目录、文件、管理依赖等，简化项目生成创建的操作。因此可以将它理解为_脚手架的脚手架_。</p>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>安装yo命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yo</span><br></pre></td></tr></table></figure>\n\n<p>安装一个generator,我们可以先去官网找一个<a href=\"https://yeoman.io%2Fgenerators%2F\" title=\"https://yeoman.io/generators/\">yeoman.io&#x2F;generators&#x2F;</a></p>\n<p>搜索vue,可以看到有好几个generator，我们可以选一个vue-starter <img src=\"/../imgs/fe65e292fc9e40da8d37030a0f290c18.png\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g generator-vue-starter</span><br></pre></td></tr></table></figure>\n\n<p>安装好后就可以执行这个generator了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo vue-starter</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看一下生成的内容</p>\n<p><img src=\"/../imgs/f3e0b8a534b7484eb21fba6411ff6353.png\" alt=\"image.png\"></p>\n<p>这些内容就是这个generator提供的。可以看到这个generator时间比较久了，依赖配置都过时了。我们也不必安装依赖运行它，因为接下来我们就要自己开发一个generator。</p>\n"},{"title":"前端面试官进阶指南(上)","date":"2021-12-18T16:00:00.000Z","_content":"\n前言\n--\n\n这篇文章主要是写给那些团队处于快速发展的新晋技术面试官，也欢迎各位有经验的面试官们分享自己的想法。另外也希望能够对一些准备面试的候选人有所帮助。 2020年，我作为面试官，面了100多个候选人。2021年，我作为候选人，经历了17家公司的面试。这个过程中我发现，很多面试都仅仅是看似严格，流于形式，看重候选人的履历和背景，最后等入职了，才发现各种不合适。\n\n网上教人找工作的面经比比皆是，但是教你如何做面试官的攻略却鲜有。有些人可能会觉得，只要技术能力强，项目经验都，便可以当好一个面试官了。那可以试着看看这三个问题：作为面试官，你会如何向候选人介绍自己？你所问的问题，是考察候选人哪方面的能力？你的面试，能够给候选人带来什么帮助？\n\n先于一切的面试准备\n---------\n\n作为一个面试官，首要的是有相对过硬的技术能力（技术面试）或足够的项目及管理经验（综合面试）。这一点我想没有人会有疑问。但问题是你要招的并不是一个与自己能力相似的人，而是一个“合适”的人。\n\n在你去面试之前，除了能力，_认知上和工具上也都应做好准备_。\n\n### 你要招什么样的人\n\n这并不是一个简单的问题，也没有万金油的方法论可以遵循。我是从三个点切入去考虑：**时间**，**环境**和**能力**。_说得虚一点，就是天时、地利、人和_。\n\n所谓**时间**，是要看到当前这个时间段，你们的正在进行的业务与将来可能的变化。\n\n比如有些公司在Q1Q2季度业务并不会很忙，那么这时候可能会进行各种技术规划的落地；而Q3Q4季度，因为各种节日，或业绩冲关等原因，会有大量的需求进入排期。处于前一阶段，则需要重点考察候选人的技术匹配度、技术广度和技术落地能力；后一阶段需要考察项目匹配度、技术深度和业务理解能力。\n\n所谓**环境**，就是整个团队的味道。如果公司重视并进行过企业文化的建设，那么这个味道主要来自于公司。如果公司并没有很强的组织能力和文化，那么这个味道会以团队的leader为主（这里假设leader是与团队磨合过的）。\n\n比如有些公司或团队有很强的工程师文化，对技术能力与专业素养始终有较高的追求，并且也推崇这些能力。有些团队看重与业务和产品的协作，对设计能力、业务或产品思维有一定的要求。总之，你一定能够从你的团队里总结出一些**关键词**来，比如追求极致、始终创业、勇气协作、皮实、本分等。\n\n你可以去找一个与团队味道一致的人，这个人能够更快地适应团队，也更稳定；当然也可以招与团队味道不一致的人，并借助这个人改变团队中一些不好的现象。这一切的关键在于你对团队的认识。\n\n所谓**能力**，都有一个前提：做什么事情。\n\n比如莫言，在文字演绎能力上一定很强，可你要让他去面试发动机设计师，我想一定也会获得一个能力不足的婉拒。如果你只是希望一个人能过来分担那些增删改查、简单页面，那只要考察他对api的记忆、使用，常见的算法，大致的原理和运行，抗压能力，大不必考察深层机制和实现原理。又比如想做一个低代码平台，而自己有没有相关的经验，那么招一个有过深度参与的经验的p6可能会比一个没有相应思考的p7更合适。又比如，如果你觉得团队技术能力弱，或者人才储备弱，那就得重点考察候选人的技术能力和发展潜力。\n\n### 结构化面试题\n\n很多时候，你可能并不能很清晰的描述出你希望的人的能力模型，或者单纯想要一个综合能力强，可以放到多个位置的人（比如”皮实“的人才官里就暗含了这一个要求）。\n\n那么**结构化的面试题**就是一个很好的工具。**所谓结构，是设定不同的能力维度和权重**，并以此设置考核细项和题目。\n\n考核维度\n\n考核权重\n\n考核细项\n\n专业能力（70）\n\n20%\n\n如js基础、框架api\n\n20%\n\n如框架原理、性能优化\n\n15%\n\n如攻坚能力\n\n15%\n\n如设计能力\n\n管理能力（30）\n\n20%\n\n如团队管理\n\n10%\n\n如项目管理\n\n价值观（10）\n\n5%\n\n始终创业\n\n5%\n\n求真务实\n\n5%\n\n拥抱变化\n\n我们可以据此设计不同模块下的面试题，根据候选人表现打分，并以此作为是否通过的依据。\n\n比如100分制，70分通过。设计的细项总比例可以略微超过100%，总会有一方面突出，另一方面薄弱的人，超过的就算突出加分项。当要招一个api熟练的外包，那么提高专业能力中基础知识的比重，而要招一个高潜做leader培养，则需要提高设计能力和管理能力的比重。\n\n最后我们也可以通过候选人的数据表现，_来确定他更适合的业务线以及人才落地及培养方案。_","source":"_posts/前端面试官进阶指南(上).md","raw":"---\n title: \"前端面试官进阶指南(上)\"\n date: 2021-12-19\n tags: [面试]\n categories: [前端笔记]\n---\n\n前言\n--\n\n这篇文章主要是写给那些团队处于快速发展的新晋技术面试官，也欢迎各位有经验的面试官们分享自己的想法。另外也希望能够对一些准备面试的候选人有所帮助。 2020年，我作为面试官，面了100多个候选人。2021年，我作为候选人，经历了17家公司的面试。这个过程中我发现，很多面试都仅仅是看似严格，流于形式，看重候选人的履历和背景，最后等入职了，才发现各种不合适。\n\n网上教人找工作的面经比比皆是，但是教你如何做面试官的攻略却鲜有。有些人可能会觉得，只要技术能力强，项目经验都，便可以当好一个面试官了。那可以试着看看这三个问题：作为面试官，你会如何向候选人介绍自己？你所问的问题，是考察候选人哪方面的能力？你的面试，能够给候选人带来什么帮助？\n\n先于一切的面试准备\n---------\n\n作为一个面试官，首要的是有相对过硬的技术能力（技术面试）或足够的项目及管理经验（综合面试）。这一点我想没有人会有疑问。但问题是你要招的并不是一个与自己能力相似的人，而是一个“合适”的人。\n\n在你去面试之前，除了能力，_认知上和工具上也都应做好准备_。\n\n### 你要招什么样的人\n\n这并不是一个简单的问题，也没有万金油的方法论可以遵循。我是从三个点切入去考虑：**时间**，**环境**和**能力**。_说得虚一点，就是天时、地利、人和_。\n\n所谓**时间**，是要看到当前这个时间段，你们的正在进行的业务与将来可能的变化。\n\n比如有些公司在Q1Q2季度业务并不会很忙，那么这时候可能会进行各种技术规划的落地；而Q3Q4季度，因为各种节日，或业绩冲关等原因，会有大量的需求进入排期。处于前一阶段，则需要重点考察候选人的技术匹配度、技术广度和技术落地能力；后一阶段需要考察项目匹配度、技术深度和业务理解能力。\n\n所谓**环境**，就是整个团队的味道。如果公司重视并进行过企业文化的建设，那么这个味道主要来自于公司。如果公司并没有很强的组织能力和文化，那么这个味道会以团队的leader为主（这里假设leader是与团队磨合过的）。\n\n比如有些公司或团队有很强的工程师文化，对技术能力与专业素养始终有较高的追求，并且也推崇这些能力。有些团队看重与业务和产品的协作，对设计能力、业务或产品思维有一定的要求。总之，你一定能够从你的团队里总结出一些**关键词**来，比如追求极致、始终创业、勇气协作、皮实、本分等。\n\n你可以去找一个与团队味道一致的人，这个人能够更快地适应团队，也更稳定；当然也可以招与团队味道不一致的人，并借助这个人改变团队中一些不好的现象。这一切的关键在于你对团队的认识。\n\n所谓**能力**，都有一个前提：做什么事情。\n\n比如莫言，在文字演绎能力上一定很强，可你要让他去面试发动机设计师，我想一定也会获得一个能力不足的婉拒。如果你只是希望一个人能过来分担那些增删改查、简单页面，那只要考察他对api的记忆、使用，常见的算法，大致的原理和运行，抗压能力，大不必考察深层机制和实现原理。又比如想做一个低代码平台，而自己有没有相关的经验，那么招一个有过深度参与的经验的p6可能会比一个没有相应思考的p7更合适。又比如，如果你觉得团队技术能力弱，或者人才储备弱，那就得重点考察候选人的技术能力和发展潜力。\n\n### 结构化面试题\n\n很多时候，你可能并不能很清晰的描述出你希望的人的能力模型，或者单纯想要一个综合能力强，可以放到多个位置的人（比如”皮实“的人才官里就暗含了这一个要求）。\n\n那么**结构化的面试题**就是一个很好的工具。**所谓结构，是设定不同的能力维度和权重**，并以此设置考核细项和题目。\n\n考核维度\n\n考核权重\n\n考核细项\n\n专业能力（70）\n\n20%\n\n如js基础、框架api\n\n20%\n\n如框架原理、性能优化\n\n15%\n\n如攻坚能力\n\n15%\n\n如设计能力\n\n管理能力（30）\n\n20%\n\n如团队管理\n\n10%\n\n如项目管理\n\n价值观（10）\n\n5%\n\n始终创业\n\n5%\n\n求真务实\n\n5%\n\n拥抱变化\n\n我们可以据此设计不同模块下的面试题，根据候选人表现打分，并以此作为是否通过的依据。\n\n比如100分制，70分通过。设计的细项总比例可以略微超过100%，总会有一方面突出，另一方面薄弱的人，超过的就算突出加分项。当要招一个api熟练的外包，那么提高专业能力中基础知识的比重，而要招一个高潜做leader培养，则需要提高设计能力和管理能力的比重。\n\n最后我们也可以通过候选人的数据表现，_来确定他更适合的业务线以及人才落地及培养方案。_","slug":"前端面试官进阶指南(上)","published":1,"updated":"2024-04-04T15:27:03.337Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li0006dhajf0k4hbn7a","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这篇文章主要是写给那些团队处于快速发展的新晋技术面试官，也欢迎各位有经验的面试官们分享自己的想法。另外也希望能够对一些准备面试的候选人有所帮助。 2020年，我作为面试官，面了100多个候选人。2021年，我作为候选人，经历了17家公司的面试。这个过程中我发现，很多面试都仅仅是看似严格，流于形式，看重候选人的履历和背景，最后等入职了，才发现各种不合适。</p>\n<p>网上教人找工作的面经比比皆是，但是教你如何做面试官的攻略却鲜有。有些人可能会觉得，只要技术能力强，项目经验都，便可以当好一个面试官了。那可以试着看看这三个问题：作为面试官，你会如何向候选人介绍自己？你所问的问题，是考察候选人哪方面的能力？你的面试，能够给候选人带来什么帮助？</p>\n<h2 id=\"先于一切的面试准备\"><a href=\"#先于一切的面试准备\" class=\"headerlink\" title=\"先于一切的面试准备\"></a>先于一切的面试准备</h2><p>作为一个面试官，首要的是有相对过硬的技术能力（技术面试）或足够的项目及管理经验（综合面试）。这一点我想没有人会有疑问。但问题是你要招的并不是一个与自己能力相似的人，而是一个“合适”的人。</p>\n<p>在你去面试之前，除了能力，_认知上和工具上也都应做好准备_。</p>\n<h3 id=\"你要招什么样的人\"><a href=\"#你要招什么样的人\" class=\"headerlink\" title=\"你要招什么样的人\"></a>你要招什么样的人</h3><p>这并不是一个简单的问题，也没有万金油的方法论可以遵循。我是从三个点切入去考虑：<strong>时间</strong>，<strong>环境</strong>和<strong>能力</strong>。_说得虚一点，就是天时、地利、人和_。</p>\n<p>所谓<strong>时间</strong>，是要看到当前这个时间段，你们的正在进行的业务与将来可能的变化。</p>\n<p>比如有些公司在Q1Q2季度业务并不会很忙，那么这时候可能会进行各种技术规划的落地；而Q3Q4季度，因为各种节日，或业绩冲关等原因，会有大量的需求进入排期。处于前一阶段，则需要重点考察候选人的技术匹配度、技术广度和技术落地能力；后一阶段需要考察项目匹配度、技术深度和业务理解能力。</p>\n<p>所谓<strong>环境</strong>，就是整个团队的味道。如果公司重视并进行过企业文化的建设，那么这个味道主要来自于公司。如果公司并没有很强的组织能力和文化，那么这个味道会以团队的leader为主（这里假设leader是与团队磨合过的）。</p>\n<p>比如有些公司或团队有很强的工程师文化，对技术能力与专业素养始终有较高的追求，并且也推崇这些能力。有些团队看重与业务和产品的协作，对设计能力、业务或产品思维有一定的要求。总之，你一定能够从你的团队里总结出一些<strong>关键词</strong>来，比如追求极致、始终创业、勇气协作、皮实、本分等。</p>\n<p>你可以去找一个与团队味道一致的人，这个人能够更快地适应团队，也更稳定；当然也可以招与团队味道不一致的人，并借助这个人改变团队中一些不好的现象。这一切的关键在于你对团队的认识。</p>\n<p>所谓<strong>能力</strong>，都有一个前提：做什么事情。</p>\n<p>比如莫言，在文字演绎能力上一定很强，可你要让他去面试发动机设计师，我想一定也会获得一个能力不足的婉拒。如果你只是希望一个人能过来分担那些增删改查、简单页面，那只要考察他对api的记忆、使用，常见的算法，大致的原理和运行，抗压能力，大不必考察深层机制和实现原理。又比如想做一个低代码平台，而自己有没有相关的经验，那么招一个有过深度参与的经验的p6可能会比一个没有相应思考的p7更合适。又比如，如果你觉得团队技术能力弱，或者人才储备弱，那就得重点考察候选人的技术能力和发展潜力。</p>\n<h3 id=\"结构化面试题\"><a href=\"#结构化面试题\" class=\"headerlink\" title=\"结构化面试题\"></a>结构化面试题</h3><p>很多时候，你可能并不能很清晰的描述出你希望的人的能力模型，或者单纯想要一个综合能力强，可以放到多个位置的人（比如”皮实“的人才官里就暗含了这一个要求）。</p>\n<p>那么<strong>结构化的面试题</strong>就是一个很好的工具。<strong>所谓结构，是设定不同的能力维度和权重</strong>，并以此设置考核细项和题目。</p>\n<p>考核维度</p>\n<p>考核权重</p>\n<p>考核细项</p>\n<p>专业能力（70）</p>\n<p>20%</p>\n<p>如js基础、框架api</p>\n<p>20%</p>\n<p>如框架原理、性能优化</p>\n<p>15%</p>\n<p>如攻坚能力</p>\n<p>15%</p>\n<p>如设计能力</p>\n<p>管理能力（30）</p>\n<p>20%</p>\n<p>如团队管理</p>\n<p>10%</p>\n<p>如项目管理</p>\n<p>价值观（10）</p>\n<p>5%</p>\n<p>始终创业</p>\n<p>5%</p>\n<p>求真务实</p>\n<p>5%</p>\n<p>拥抱变化</p>\n<p>我们可以据此设计不同模块下的面试题，根据候选人表现打分，并以此作为是否通过的依据。</p>\n<p>比如100分制，70分通过。设计的细项总比例可以略微超过100%，总会有一方面突出，另一方面薄弱的人，超过的就算突出加分项。当要招一个api熟练的外包，那么提高专业能力中基础知识的比重，而要招一个高潜做leader培养，则需要提高设计能力和管理能力的比重。</p>\n<p>最后我们也可以通过候选人的数据表现，<em>来确定他更适合的业务线以及人才落地及培养方案。</em></p>\n","length":1731,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这篇文章主要是写给那些团队处于快速发展的新晋技术面试官，也欢迎各位有经验的面试官们分享自己的想法。另外也希望能够对一些准备面试的候选人有所帮助。 2020年，我作为面试官，面了100多个候选人。2021年，我作为候选人，经历了17家公司的面试。这个过程中我发现，很多面试都仅仅是看似严格，流于形式，看重候选人的履历和背景，最后等入职了，才发现各种不合适。</p>\n<p>网上教人找工作的面经比比皆是，但是教你如何做面试官的攻略却鲜有。有些人可能会觉得，只要技术能力强，项目经验都，便可以当好一个面试官了。那可以试着看看这三个问题：作为面试官，你会如何向候选人介绍自己？你所问的问题，是考察候选人哪方面的能力？你的面试，能够给候选人带来什么帮助？</p>\n<h2 id=\"先于一切的面试准备\"><a href=\"#先于一切的面试准备\" class=\"headerlink\" title=\"先于一切的面试准备\"></a>先于一切的面试准备</h2><p>作为一个面试官，首要的是有相对过硬的技术能力（技术面试）或足够的项目及管理经验（综合面试）。这一点我想没有人会有疑问。但问题是你要招的并不是一个与自己能力相似的人，而是一个“合适”的人。</p>\n<p>在你去面试之前，除了能力，_认知上和工具上也都应做好准备_。</p>\n<h3 id=\"你要招什么样的人\"><a href=\"#你要招什么样的人\" class=\"headerlink\" title=\"你要招什么样的人\"></a>你要招什么样的人</h3><p>这并不是一个简单的问题，也没有万金油的方法论可以遵循。我是从三个点切入去考虑：<strong>时间</strong>，<strong>环境</strong>和<strong>能力</strong>。_说得虚一点，就是天时、地利、人和_。</p>\n<p>所谓<strong>时间</strong>，是要看到当前这个时间段，你们的正在进行的业务与将来可能的变化。</p>\n<p>比如有些公司在Q1Q2季度业务并不会很忙，那么这时候可能会进行各种技术规划的落地；而Q3Q4季度，因为各种节日，或业绩冲关等原因，会有大量的需求进入排期。处于前一阶段，则需要重点考察候选人的技术匹配度、技术广度和技术落地能力；后一阶段需要考察项目匹配度、技术深度和业务理解能力。</p>\n<p>所谓<strong>环境</strong>，就是整个团队的味道。如果公司重视并进行过企业文化的建设，那么这个味道主要来自于公司。如果公司并没有很强的组织能力和文化，那么这个味道会以团队的leader为主（这里假设leader是与团队磨合过的）。</p>\n<p>比如有些公司或团队有很强的工程师文化，对技术能力与专业素养始终有较高的追求，并且也推崇这些能力。有些团队看重与业务和产品的协作，对设计能力、业务或产品思维有一定的要求。总之，你一定能够从你的团队里总结出一些<strong>关键词</strong>来，比如追求极致、始终创业、勇气协作、皮实、本分等。</p>\n<p>你可以去找一个与团队味道一致的人，这个人能够更快地适应团队，也更稳定；当然也可以招与团队味道不一致的人，并借助这个人改变团队中一些不好的现象。这一切的关键在于你对团队的认识。</p>\n<p>所谓<strong>能力</strong>，都有一个前提：做什么事情。</p>\n<p>比如莫言，在文字演绎能力上一定很强，可你要让他去面试发动机设计师，我想一定也会获得一个能力不足的婉拒。如果你只是希望一个人能过来分担那些增删改查、简单页面，那只要考察他对api的记忆、使用，常见的算法，大致的原理和运行，抗压能力，大不必考察深层机制和实现原理。又比如想做一个低代码平台，而自己有没有相关的经验，那么招一个有过深度参与的经验的p6可能会比一个没有相应思考的p7更合适。又比如，如果你觉得团队技术能力弱，或者人才储备弱，那就得重点考察候选人的技术能力和发展潜力。</p>\n<h3 id=\"结构化面试题\"><a href=\"#结构化面试题\" class=\"headerlink\" title=\"结构化面试题\"></a>结构化面试题</h3><p>很多时候，你可能并不能很清晰的描述出你希望的人的能力模型，或者单纯想要一个综合能力强，可以放到多个位置的人（比如”皮实“的人才官里就暗含了这一个要求）。</p>\n<p>那么<strong>结构化的面试题</strong>就是一个很好的工具。<strong>所谓结构，是设定不同的能力维度和权重</strong>，并以此设置考核细项和题目。</p>\n<p>考核维度</p>\n<p>考核权重</p>\n<p>考核细项</p>\n<p>专业能力（70）</p>\n<p>20%</p>\n<p>如js基础、框架api</p>\n<p>20%</p>\n<p>如框架原理、性能优化</p>\n<p>15%</p>\n<p>如攻坚能力</p>\n<p>15%</p>\n<p>如设计能力</p>\n<p>管理能力（30）</p>\n<p>20%</p>\n<p>如团队管理</p>\n<p>10%</p>\n<p>如项目管理</p>\n<p>价值观（10）</p>\n<p>5%</p>\n<p>始终创业</p>\n<p>5%</p>\n<p>求真务实</p>\n<p>5%</p>\n<p>拥抱变化</p>\n<p>我们可以据此设计不同模块下的面试题，根据候选人表现打分，并以此作为是否通过的依据。</p>\n<p>比如100分制，70分通过。设计的细项总比例可以略微超过100%，总会有一方面突出，另一方面薄弱的人，超过的就算突出加分项。当要招一个api熟练的外包，那么提高专业能力中基础知识的比重，而要招一个高潜做leader培养，则需要提高设计能力和管理能力的比重。</p>\n<p>最后我们也可以通过候选人的数据表现，<em>来确定他更适合的业务线以及人才落地及培养方案。</em></p>\n"},{"title":"前端面试官进阶指南(下)","date":"2021-12-22T16:00:00.000Z","_content":"\n从简历建立初印象\n--------\n\n拿到简历后，首先我们应该对这个候选人建立一个初步的印象：\n\n*   用过，以及最近用过哪些**技术栈** 这里关注的是候选人技术栈的广度，以及对哪些技术更熟练，面试应该侧重他更熟悉的方面考察。如果对方熟悉的却是自己并不知道的技术栈，应该在面试前大致了解一下。\n    \n*   做过哪些**项目** 有些人项目经验可能很多，但都是类似的技术栈和场景，因此我需要合并同类项，对这个人的项目做个分类，比如toB还是toC，pc还是mobile，工具类还是社交类。并且还需要思考这些项目，如果是自己来做，会有哪些技术选型偏好，或者可能会遇到哪些技术难题。\n    \n*   **深度思考**过哪些问题 深度思考的问题，可能是技术攻坚、源码解析，或者业务、产品、管理上的思考心得。从他思考的问题可以看出，这个人的兴趣是偏技术还是偏向产品，亦或是管理。\n    \n\n题库的准备与调整\n--------\n\n我们对不同级别的技术岗位总有一套**核心题库**。比如用vue的岗位，如果答不上来双向绑定，那么可以确定他不适合p5级别的岗位，但若常见api都答不上来，可以确定连外包岗都无法胜任了。\n\n但是匹配公司业务的题库，未必匹配候选人的经历。**面试的目的之一，是明确候选人的能力。而能力，往往承载于他所做过的事情中。因此我们往往需要结合候选人的经历调整面试题。**\n\n比如，一般对高级别的技术岗，只掌握一个框架是不够的，但如果候选人过去三年只用了一个框架是否一定不合适这个岗位？如果公司的技术栈是react，但是候选人只有过vue的经验，我们并不能按部就班的根据标准题库设问，从而得出一个react经验不足，无法胜任的结论。\n\n_如果学习能力优秀，对已有的知识深入掌握，便能举一反三_，只要两三天就可以上手一个新框架。我们不如设计一些vue相关的题目，看候选人的理解是否已经触及了框架的设计核心，或者看候选人能否在引导下理解框架间不同的设计理念：比如基于依赖收集和基于diff的更新策略优缺点，更新合并的异步与同步实现。如果候选人能够答上来，说明他只需极少的时间就可以胜任不同框架的项目，我们可以考虑往下进一步考察。\n\n另外，**基于候选人的经历设计问题，也能够让他更好地表现自己的能力**。比如性能优化，如果是pc端开发者，可以从长列表优化开始切入，对移动端开发者，可以从首字节时间切入。这些问题并不是要候选人回答出所有场景的优化手段，而是看候选人对性能有没有意识以及思路是否正确。如果意识和思路都有问题，即便是有经验，再次面临类似的问题，仍难免会陷入困境。\n\n总之，面试题应该结合候选人的经历进行设计或调整，找到对方擅长的点，不断深挖他的边界。\n\n从自我介绍开始面试\n---------\n\n题目有了，候选人也到了，你是否会以”请做个自我介绍吧“开始面试？等候选人介绍完了就无缝进入技术面试了？同样一个问题，你面向cto、hr还是面向一线技术官，解释的角度乃至比喻的方式总会不一样吧。如果让你与一个陌生人认识，你大概会和对方相互介绍一下自己，面试也是同理。\n\n接到候选人后，我会先做个自我介绍，xx公司，xx部门，在做xx业务，是本次的技术面试官。面试的岗位是xx，时长大概多久，是否有机试，是否有旁听，录音等。这样候选人对这场面试和面试官有个更清楚的认识，后续可以用双方都能够理解的方式来沟通。我还遇到很多次，候选人投的是中级岗位，但是却安排了高级岗位的面试，有了这样的简短介绍，也能帮双方减少误会，节省不少时间。\n\n及时给出反馈\n------\n\n一般情况下面试当场就可以得出这个候选人能不能通过本轮的结论，当然有些情况可能会需要和用人部门沟通后才能确定。**但无论是否通过，都应该由hr来通知候选人。**\n\n不过我通常会在最后给出本次面试表现的反馈：你这次面试，哪些部分理解不足，哪个方面的能力需要加强。我觉得反馈是对这场面试双方所花费的时间的尊重。有心的候选人会从反馈中更好的认识自己，即使没有通过，也能以更好的状态面对其他面试。\n\n常见的问题\n-----\n\n*   候选人能力比自己强不少\n\n不管面试什么样的候选人，面试官一定不要心虚，多根据对方的经历设计问题，即便是遇到了一些大神，也能对等的交流。\n\n如果对方确实比你厉害，那么可以抛出一些你曾经深度思考过的问题与之讨论，注意这里是讨论，不是提问也不是请教。如果你真的思考过这些问题并有自己的答案，那么与对方思辨的过程中可以更加确定对方是只高出你一点点还是高出你很多。\n\n_面对一个比你强的人，没必要试图测试出他的能力边界_，面试后在评价里备注上这个人的能力评价以及可能适合的职级，交给后续的面试流程即可。\n\n*   如何识别有潜力的候选人 首先有潜力的候选人，能力必定是超出同年限的平均能力的。除了这个我们还需要去寻找技术外的亮点，比如坚持博客、反思复盘的习惯、跳出自己的角色多角度看待问题、良好的沟通能力、时间管理。同时还要帮他考虑，他所面的岗位，是否能够让他将这些亮点更多的发挥出来。面试的过程中总会遇到一些自己欣赏的人，但始终不要忘记因岗择人。","source":"_posts/前端面试官进阶指南(下).md","raw":"---\n title: \"前端面试官进阶指南(下)\"\n date: 2021-12-23\n tags: [面试]\n categories: [前端笔记]\n---\n\n从简历建立初印象\n--------\n\n拿到简历后，首先我们应该对这个候选人建立一个初步的印象：\n\n*   用过，以及最近用过哪些**技术栈** 这里关注的是候选人技术栈的广度，以及对哪些技术更熟练，面试应该侧重他更熟悉的方面考察。如果对方熟悉的却是自己并不知道的技术栈，应该在面试前大致了解一下。\n    \n*   做过哪些**项目** 有些人项目经验可能很多，但都是类似的技术栈和场景，因此我需要合并同类项，对这个人的项目做个分类，比如toB还是toC，pc还是mobile，工具类还是社交类。并且还需要思考这些项目，如果是自己来做，会有哪些技术选型偏好，或者可能会遇到哪些技术难题。\n    \n*   **深度思考**过哪些问题 深度思考的问题，可能是技术攻坚、源码解析，或者业务、产品、管理上的思考心得。从他思考的问题可以看出，这个人的兴趣是偏技术还是偏向产品，亦或是管理。\n    \n\n题库的准备与调整\n--------\n\n我们对不同级别的技术岗位总有一套**核心题库**。比如用vue的岗位，如果答不上来双向绑定，那么可以确定他不适合p5级别的岗位，但若常见api都答不上来，可以确定连外包岗都无法胜任了。\n\n但是匹配公司业务的题库，未必匹配候选人的经历。**面试的目的之一，是明确候选人的能力。而能力，往往承载于他所做过的事情中。因此我们往往需要结合候选人的经历调整面试题。**\n\n比如，一般对高级别的技术岗，只掌握一个框架是不够的，但如果候选人过去三年只用了一个框架是否一定不合适这个岗位？如果公司的技术栈是react，但是候选人只有过vue的经验，我们并不能按部就班的根据标准题库设问，从而得出一个react经验不足，无法胜任的结论。\n\n_如果学习能力优秀，对已有的知识深入掌握，便能举一反三_，只要两三天就可以上手一个新框架。我们不如设计一些vue相关的题目，看候选人的理解是否已经触及了框架的设计核心，或者看候选人能否在引导下理解框架间不同的设计理念：比如基于依赖收集和基于diff的更新策略优缺点，更新合并的异步与同步实现。如果候选人能够答上来，说明他只需极少的时间就可以胜任不同框架的项目，我们可以考虑往下进一步考察。\n\n另外，**基于候选人的经历设计问题，也能够让他更好地表现自己的能力**。比如性能优化，如果是pc端开发者，可以从长列表优化开始切入，对移动端开发者，可以从首字节时间切入。这些问题并不是要候选人回答出所有场景的优化手段，而是看候选人对性能有没有意识以及思路是否正确。如果意识和思路都有问题，即便是有经验，再次面临类似的问题，仍难免会陷入困境。\n\n总之，面试题应该结合候选人的经历进行设计或调整，找到对方擅长的点，不断深挖他的边界。\n\n从自我介绍开始面试\n---------\n\n题目有了，候选人也到了，你是否会以”请做个自我介绍吧“开始面试？等候选人介绍完了就无缝进入技术面试了？同样一个问题，你面向cto、hr还是面向一线技术官，解释的角度乃至比喻的方式总会不一样吧。如果让你与一个陌生人认识，你大概会和对方相互介绍一下自己，面试也是同理。\n\n接到候选人后，我会先做个自我介绍，xx公司，xx部门，在做xx业务，是本次的技术面试官。面试的岗位是xx，时长大概多久，是否有机试，是否有旁听，录音等。这样候选人对这场面试和面试官有个更清楚的认识，后续可以用双方都能够理解的方式来沟通。我还遇到很多次，候选人投的是中级岗位，但是却安排了高级岗位的面试，有了这样的简短介绍，也能帮双方减少误会，节省不少时间。\n\n及时给出反馈\n------\n\n一般情况下面试当场就可以得出这个候选人能不能通过本轮的结论，当然有些情况可能会需要和用人部门沟通后才能确定。**但无论是否通过，都应该由hr来通知候选人。**\n\n不过我通常会在最后给出本次面试表现的反馈：你这次面试，哪些部分理解不足，哪个方面的能力需要加强。我觉得反馈是对这场面试双方所花费的时间的尊重。有心的候选人会从反馈中更好的认识自己，即使没有通过，也能以更好的状态面对其他面试。\n\n常见的问题\n-----\n\n*   候选人能力比自己强不少\n\n不管面试什么样的候选人，面试官一定不要心虚，多根据对方的经历设计问题，即便是遇到了一些大神，也能对等的交流。\n\n如果对方确实比你厉害，那么可以抛出一些你曾经深度思考过的问题与之讨论，注意这里是讨论，不是提问也不是请教。如果你真的思考过这些问题并有自己的答案，那么与对方思辨的过程中可以更加确定对方是只高出你一点点还是高出你很多。\n\n_面对一个比你强的人，没必要试图测试出他的能力边界_，面试后在评价里备注上这个人的能力评价以及可能适合的职级，交给后续的面试流程即可。\n\n*   如何识别有潜力的候选人 首先有潜力的候选人，能力必定是超出同年限的平均能力的。除了这个我们还需要去寻找技术外的亮点，比如坚持博客、反思复盘的习惯、跳出自己的角色多角度看待问题、良好的沟通能力、时间管理。同时还要帮他考虑，他所面的岗位，是否能够让他将这些亮点更多的发挥出来。面试的过程中总会遇到一些自己欣赏的人，但始终不要忘记因岗择人。","slug":"前端面试官进阶指南(下)","published":1,"updated":"2024-04-04T15:27:03.344Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li0006hhajfcikn1k4t","content":"<h2 id=\"从简历建立初印象\"><a href=\"#从简历建立初印象\" class=\"headerlink\" title=\"从简历建立初印象\"></a>从简历建立初印象</h2><p>拿到简历后，首先我们应该对这个候选人建立一个初步的印象：</p>\n<ul>\n<li><p>用过，以及最近用过哪些<strong>技术栈</strong> 这里关注的是候选人技术栈的广度，以及对哪些技术更熟练，面试应该侧重他更熟悉的方面考察。如果对方熟悉的却是自己并不知道的技术栈，应该在面试前大致了解一下。</p>\n</li>\n<li><p>做过哪些<strong>项目</strong> 有些人项目经验可能很多，但都是类似的技术栈和场景，因此我需要合并同类项，对这个人的项目做个分类，比如toB还是toC，pc还是mobile，工具类还是社交类。并且还需要思考这些项目，如果是自己来做，会有哪些技术选型偏好，或者可能会遇到哪些技术难题。</p>\n</li>\n<li><p><strong>深度思考</strong>过哪些问题 深度思考的问题，可能是技术攻坚、源码解析，或者业务、产品、管理上的思考心得。从他思考的问题可以看出，这个人的兴趣是偏技术还是偏向产品，亦或是管理。</p>\n</li>\n</ul>\n<h2 id=\"题库的准备与调整\"><a href=\"#题库的准备与调整\" class=\"headerlink\" title=\"题库的准备与调整\"></a>题库的准备与调整</h2><p>我们对不同级别的技术岗位总有一套<strong>核心题库</strong>。比如用vue的岗位，如果答不上来双向绑定，那么可以确定他不适合p5级别的岗位，但若常见api都答不上来，可以确定连外包岗都无法胜任了。</p>\n<p>但是匹配公司业务的题库，未必匹配候选人的经历。<strong>面试的目的之一，是明确候选人的能力。而能力，往往承载于他所做过的事情中。因此我们往往需要结合候选人的经历调整面试题。</strong></p>\n<p>比如，一般对高级别的技术岗，只掌握一个框架是不够的，但如果候选人过去三年只用了一个框架是否一定不合适这个岗位？如果公司的技术栈是react，但是候选人只有过vue的经验，我们并不能按部就班的根据标准题库设问，从而得出一个react经验不足，无法胜任的结论。</p>\n<p>_如果学习能力优秀，对已有的知识深入掌握，便能举一反三_，只要两三天就可以上手一个新框架。我们不如设计一些vue相关的题目，看候选人的理解是否已经触及了框架的设计核心，或者看候选人能否在引导下理解框架间不同的设计理念：比如基于依赖收集和基于diff的更新策略优缺点，更新合并的异步与同步实现。如果候选人能够答上来，说明他只需极少的时间就可以胜任不同框架的项目，我们可以考虑往下进一步考察。</p>\n<p>另外，<strong>基于候选人的经历设计问题，也能够让他更好地表现自己的能力</strong>。比如性能优化，如果是pc端开发者，可以从长列表优化开始切入，对移动端开发者，可以从首字节时间切入。这些问题并不是要候选人回答出所有场景的优化手段，而是看候选人对性能有没有意识以及思路是否正确。如果意识和思路都有问题，即便是有经验，再次面临类似的问题，仍难免会陷入困境。</p>\n<p>总之，面试题应该结合候选人的经历进行设计或调整，找到对方擅长的点，不断深挖他的边界。</p>\n<h2 id=\"从自我介绍开始面试\"><a href=\"#从自我介绍开始面试\" class=\"headerlink\" title=\"从自我介绍开始面试\"></a>从自我介绍开始面试</h2><p>题目有了，候选人也到了，你是否会以”请做个自我介绍吧“开始面试？等候选人介绍完了就无缝进入技术面试了？同样一个问题，你面向cto、hr还是面向一线技术官，解释的角度乃至比喻的方式总会不一样吧。如果让你与一个陌生人认识，你大概会和对方相互介绍一下自己，面试也是同理。</p>\n<p>接到候选人后，我会先做个自我介绍，xx公司，xx部门，在做xx业务，是本次的技术面试官。面试的岗位是xx，时长大概多久，是否有机试，是否有旁听，录音等。这样候选人对这场面试和面试官有个更清楚的认识，后续可以用双方都能够理解的方式来沟通。我还遇到很多次，候选人投的是中级岗位，但是却安排了高级岗位的面试，有了这样的简短介绍，也能帮双方减少误会，节省不少时间。</p>\n<h2 id=\"及时给出反馈\"><a href=\"#及时给出反馈\" class=\"headerlink\" title=\"及时给出反馈\"></a>及时给出反馈</h2><p>一般情况下面试当场就可以得出这个候选人能不能通过本轮的结论，当然有些情况可能会需要和用人部门沟通后才能确定。<strong>但无论是否通过，都应该由hr来通知候选人。</strong></p>\n<p>不过我通常会在最后给出本次面试表现的反馈：你这次面试，哪些部分理解不足，哪个方面的能力需要加强。我觉得反馈是对这场面试双方所花费的时间的尊重。有心的候选人会从反馈中更好的认识自己，即使没有通过，也能以更好的状态面对其他面试。</p>\n<h2 id=\"常见的问题\"><a href=\"#常见的问题\" class=\"headerlink\" title=\"常见的问题\"></a>常见的问题</h2><ul>\n<li>候选人能力比自己强不少</li>\n</ul>\n<p>不管面试什么样的候选人，面试官一定不要心虚，多根据对方的经历设计问题，即便是遇到了一些大神，也能对等的交流。</p>\n<p>如果对方确实比你厉害，那么可以抛出一些你曾经深度思考过的问题与之讨论，注意这里是讨论，不是提问也不是请教。如果你真的思考过这些问题并有自己的答案，那么与对方思辨的过程中可以更加确定对方是只高出你一点点还是高出你很多。</p>\n<p>_面对一个比你强的人，没必要试图测试出他的能力边界_，面试后在评价里备注上这个人的能力评价以及可能适合的职级，交给后续的面试流程即可。</p>\n<ul>\n<li>如何识别有潜力的候选人 首先有潜力的候选人，能力必定是超出同年限的平均能力的。除了这个我们还需要去寻找技术外的亮点，比如坚持博客、反思复盘的习惯、跳出自己的角色多角度看待问题、良好的沟通能力、时间管理。同时还要帮他考虑，他所面的岗位，是否能够让他将这些亮点更多的发挥出来。面试的过程中总会遇到一些自己欣赏的人，但始终不要忘记因岗择人。</li>\n</ul>\n","length":1968,"excerpt":"","more":"<h2 id=\"从简历建立初印象\"><a href=\"#从简历建立初印象\" class=\"headerlink\" title=\"从简历建立初印象\"></a>从简历建立初印象</h2><p>拿到简历后，首先我们应该对这个候选人建立一个初步的印象：</p>\n<ul>\n<li><p>用过，以及最近用过哪些<strong>技术栈</strong> 这里关注的是候选人技术栈的广度，以及对哪些技术更熟练，面试应该侧重他更熟悉的方面考察。如果对方熟悉的却是自己并不知道的技术栈，应该在面试前大致了解一下。</p>\n</li>\n<li><p>做过哪些<strong>项目</strong> 有些人项目经验可能很多，但都是类似的技术栈和场景，因此我需要合并同类项，对这个人的项目做个分类，比如toB还是toC，pc还是mobile，工具类还是社交类。并且还需要思考这些项目，如果是自己来做，会有哪些技术选型偏好，或者可能会遇到哪些技术难题。</p>\n</li>\n<li><p><strong>深度思考</strong>过哪些问题 深度思考的问题，可能是技术攻坚、源码解析，或者业务、产品、管理上的思考心得。从他思考的问题可以看出，这个人的兴趣是偏技术还是偏向产品，亦或是管理。</p>\n</li>\n</ul>\n<h2 id=\"题库的准备与调整\"><a href=\"#题库的准备与调整\" class=\"headerlink\" title=\"题库的准备与调整\"></a>题库的准备与调整</h2><p>我们对不同级别的技术岗位总有一套<strong>核心题库</strong>。比如用vue的岗位，如果答不上来双向绑定，那么可以确定他不适合p5级别的岗位，但若常见api都答不上来，可以确定连外包岗都无法胜任了。</p>\n<p>但是匹配公司业务的题库，未必匹配候选人的经历。<strong>面试的目的之一，是明确候选人的能力。而能力，往往承载于他所做过的事情中。因此我们往往需要结合候选人的经历调整面试题。</strong></p>\n<p>比如，一般对高级别的技术岗，只掌握一个框架是不够的，但如果候选人过去三年只用了一个框架是否一定不合适这个岗位？如果公司的技术栈是react，但是候选人只有过vue的经验，我们并不能按部就班的根据标准题库设问，从而得出一个react经验不足，无法胜任的结论。</p>\n<p>_如果学习能力优秀，对已有的知识深入掌握，便能举一反三_，只要两三天就可以上手一个新框架。我们不如设计一些vue相关的题目，看候选人的理解是否已经触及了框架的设计核心，或者看候选人能否在引导下理解框架间不同的设计理念：比如基于依赖收集和基于diff的更新策略优缺点，更新合并的异步与同步实现。如果候选人能够答上来，说明他只需极少的时间就可以胜任不同框架的项目，我们可以考虑往下进一步考察。</p>\n<p>另外，<strong>基于候选人的经历设计问题，也能够让他更好地表现自己的能力</strong>。比如性能优化，如果是pc端开发者，可以从长列表优化开始切入，对移动端开发者，可以从首字节时间切入。这些问题并不是要候选人回答出所有场景的优化手段，而是看候选人对性能有没有意识以及思路是否正确。如果意识和思路都有问题，即便是有经验，再次面临类似的问题，仍难免会陷入困境。</p>\n<p>总之，面试题应该结合候选人的经历进行设计或调整，找到对方擅长的点，不断深挖他的边界。</p>\n<h2 id=\"从自我介绍开始面试\"><a href=\"#从自我介绍开始面试\" class=\"headerlink\" title=\"从自我介绍开始面试\"></a>从自我介绍开始面试</h2><p>题目有了，候选人也到了，你是否会以”请做个自我介绍吧“开始面试？等候选人介绍完了就无缝进入技术面试了？同样一个问题，你面向cto、hr还是面向一线技术官，解释的角度乃至比喻的方式总会不一样吧。如果让你与一个陌生人认识，你大概会和对方相互介绍一下自己，面试也是同理。</p>\n<p>接到候选人后，我会先做个自我介绍，xx公司，xx部门，在做xx业务，是本次的技术面试官。面试的岗位是xx，时长大概多久，是否有机试，是否有旁听，录音等。这样候选人对这场面试和面试官有个更清楚的认识，后续可以用双方都能够理解的方式来沟通。我还遇到很多次，候选人投的是中级岗位，但是却安排了高级岗位的面试，有了这样的简短介绍，也能帮双方减少误会，节省不少时间。</p>\n<h2 id=\"及时给出反馈\"><a href=\"#及时给出反馈\" class=\"headerlink\" title=\"及时给出反馈\"></a>及时给出反馈</h2><p>一般情况下面试当场就可以得出这个候选人能不能通过本轮的结论，当然有些情况可能会需要和用人部门沟通后才能确定。<strong>但无论是否通过，都应该由hr来通知候选人。</strong></p>\n<p>不过我通常会在最后给出本次面试表现的反馈：你这次面试，哪些部分理解不足，哪个方面的能力需要加强。我觉得反馈是对这场面试双方所花费的时间的尊重。有心的候选人会从反馈中更好的认识自己，即使没有通过，也能以更好的状态面对其他面试。</p>\n<h2 id=\"常见的问题\"><a href=\"#常见的问题\" class=\"headerlink\" title=\"常见的问题\"></a>常见的问题</h2><ul>\n<li>候选人能力比自己强不少</li>\n</ul>\n<p>不管面试什么样的候选人，面试官一定不要心虚，多根据对方的经历设计问题，即便是遇到了一些大神，也能对等的交流。</p>\n<p>如果对方确实比你厉害，那么可以抛出一些你曾经深度思考过的问题与之讨论，注意这里是讨论，不是提问也不是请教。如果你真的思考过这些问题并有自己的答案，那么与对方思辨的过程中可以更加确定对方是只高出你一点点还是高出你很多。</p>\n<p>_面对一个比你强的人，没必要试图测试出他的能力边界_，面试后在评价里备注上这个人的能力评价以及可能适合的职级，交给后续的面试流程即可。</p>\n<ul>\n<li>如何识别有潜力的候选人 首先有潜力的候选人，能力必定是超出同年限的平均能力的。除了这个我们还需要去寻找技术外的亮点，比如坚持博客、反思复盘的习惯、跳出自己的角色多角度看待问题、良好的沟通能力、时间管理。同时还要帮他考虑，他所面的岗位，是否能够让他将这些亮点更多的发挥出来。面试的过程中总会遇到一些自己欣赏的人，但始终不要忘记因岗择人。</li>\n</ul>\n"},{"title":"响应式网页设计之响应式图片(一)","date":"2021-11-06T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第 7 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n什么是响应式图片\n--------\n\n我想大家都知道响应式网页设计，利用弹性布局、百分百布局、rem、媒体查询等使得一个网页能够在多个终端显示合适的布局。而其中一个重要的组成设计————响应式图片，却很常被大家忽略。\n\n那么什么是响应式图片？\n\n响应式图片是一种根据显示密度、页面中图像元素的大小或其他各种因素为浏览器提供多个图像源的方法。\n\n> A method for providing the browser with multiple image sources depending on display density, size of the image element in the page, or any number of other factors.\n\n是不是有些不好理解？举几个例子就懂了。\n\n常见场景：\n-----\n\n### 图片缩放\n\n![image.png](../imgs/b2f374a4c4bc4e7c8220819ea727b931.png) 这是同一张图片的三种大小，针对不同大小、分辨率的设备，你往往希望浏览器能够显示不同的图片。\n\n### 图片裁剪\n\n![image.png](../imgs/68b2855217d14296af6aa3e10dfa18d7.png)\n\n这张奥巴马演讲的图片显然适合用在大屏设备上，而如果屏幕较小时该怎么处理呢？\n\n你一定会想到将图片等比例缩放：\n\n![image.png](../imgs/8fc2530298d944708d0ab28d9deca363.png)\n\n这是我们最常见、最简单的做法，对于大多数场景来说这么做已经足够了，但并不能因为一个做法能够适应多数场景而不去思考这种做法在当下这个场景是否合适。\n\n当这张图等比缩放后，显得重点不够突出，即看不清演讲者，背景又会让人有些费解。这种情况下不如考虑图片裁剪：\n\n![image.png](../imgs/a2876bf6aa8c48179ab7bf61cc768452.png)\n\n这么处理可以较为清楚得看到演讲者，显然比上一种做法更合适。\n\n### 图片调整\n\n看下面这张图：它含有三个图片、一段文本、一个图章、还有一些徽标等。 ![image.png](../imgs/b30c992919e44b42b5837344a3ee85f5.png)\n\n在pc上这么显示没有任何问题，但是如果在移动端呢？如果粗暴地使用缩放，用户看到的很可能是这样一张图片：\n\n![image.png](../imgs/081f77e8e6d6428f80387f303c750866.png)\n\n这时候既不适合缩放，也不适合裁剪。裁剪的目的是突出重点，而这张图作为一个整体，显然没办法切割掉其中任何一个部分。 这个时候就需要考虑是否更换这张图片，\"更换\"并不是找一张完全不同的图片代替，而是重新思考这张图片的设计、布局、内容，并做调整和筛选。 ![image.png](../imgs/93c65034030940bca0c2f06a6cb5a3d2.png)\n\n前端做什么\n-----\n\n上面讲的内容似乎是设计师需要考虑的，那么我们前端该怎么做呢？媒体查询+自适应布局？\n\n如果设计师提供一张图片，那么就用自适应布局，如果提供多张图片，那么设置媒体查询以显示不同的图片。\n\n虽然这么做也能实现需求，但是还有一种更简单的办法：利用`img`标签的`srcset`和`sizes`\n\n![image.png](../imgs/83ac44a2a5984f138e3b756c1675d8be.png)\n\n这一节我们主要认识了响应式图片的几种场景，下一节我们将具体展开介绍`sizes`和`srcset`属性的设置。","source":"_posts/响应式网页设计之响应式图片(一).md","raw":"---\n title: \"响应式网页设计之响应式图片(一)\"\n date: 2021-11-07\n tags: [前端]\n categories: \n---\n\n这是我参与11月更文挑战的第 7 天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n什么是响应式图片\n--------\n\n我想大家都知道响应式网页设计，利用弹性布局、百分百布局、rem、媒体查询等使得一个网页能够在多个终端显示合适的布局。而其中一个重要的组成设计————响应式图片，却很常被大家忽略。\n\n那么什么是响应式图片？\n\n响应式图片是一种根据显示密度、页面中图像元素的大小或其他各种因素为浏览器提供多个图像源的方法。\n\n> A method for providing the browser with multiple image sources depending on display density, size of the image element in the page, or any number of other factors.\n\n是不是有些不好理解？举几个例子就懂了。\n\n常见场景：\n-----\n\n### 图片缩放\n\n![image.png](../imgs/b2f374a4c4bc4e7c8220819ea727b931.png) 这是同一张图片的三种大小，针对不同大小、分辨率的设备，你往往希望浏览器能够显示不同的图片。\n\n### 图片裁剪\n\n![image.png](../imgs/68b2855217d14296af6aa3e10dfa18d7.png)\n\n这张奥巴马演讲的图片显然适合用在大屏设备上，而如果屏幕较小时该怎么处理呢？\n\n你一定会想到将图片等比例缩放：\n\n![image.png](../imgs/8fc2530298d944708d0ab28d9deca363.png)\n\n这是我们最常见、最简单的做法，对于大多数场景来说这么做已经足够了，但并不能因为一个做法能够适应多数场景而不去思考这种做法在当下这个场景是否合适。\n\n当这张图等比缩放后，显得重点不够突出，即看不清演讲者，背景又会让人有些费解。这种情况下不如考虑图片裁剪：\n\n![image.png](../imgs/a2876bf6aa8c48179ab7bf61cc768452.png)\n\n这么处理可以较为清楚得看到演讲者，显然比上一种做法更合适。\n\n### 图片调整\n\n看下面这张图：它含有三个图片、一段文本、一个图章、还有一些徽标等。 ![image.png](../imgs/b30c992919e44b42b5837344a3ee85f5.png)\n\n在pc上这么显示没有任何问题，但是如果在移动端呢？如果粗暴地使用缩放，用户看到的很可能是这样一张图片：\n\n![image.png](../imgs/081f77e8e6d6428f80387f303c750866.png)\n\n这时候既不适合缩放，也不适合裁剪。裁剪的目的是突出重点，而这张图作为一个整体，显然没办法切割掉其中任何一个部分。 这个时候就需要考虑是否更换这张图片，\"更换\"并不是找一张完全不同的图片代替，而是重新思考这张图片的设计、布局、内容，并做调整和筛选。 ![image.png](../imgs/93c65034030940bca0c2f06a6cb5a3d2.png)\n\n前端做什么\n-----\n\n上面讲的内容似乎是设计师需要考虑的，那么我们前端该怎么做呢？媒体查询+自适应布局？\n\n如果设计师提供一张图片，那么就用自适应布局，如果提供多张图片，那么设置媒体查询以显示不同的图片。\n\n虽然这么做也能实现需求，但是还有一种更简单的办法：利用`img`标签的`srcset`和`sizes`\n\n![image.png](../imgs/83ac44a2a5984f138e3b756c1675d8be.png)\n\n这一节我们主要认识了响应式图片的几种场景，下一节我们将具体展开介绍`sizes`和`srcset`属性的设置。","slug":"响应式网页设计之响应式图片(一)","published":1,"updated":"2024-04-04T15:27:03.458Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li0006khajfhwcob2wi","content":"<p>这是我参与11月更文挑战的第 7 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"什么是响应式图片\"><a href=\"#什么是响应式图片\" class=\"headerlink\" title=\"什么是响应式图片\"></a>什么是响应式图片</h2><p>我想大家都知道响应式网页设计，利用弹性布局、百分百布局、rem、媒体查询等使得一个网页能够在多个终端显示合适的布局。而其中一个重要的组成设计————响应式图片，却很常被大家忽略。</p>\n<p>那么什么是响应式图片？</p>\n<p>响应式图片是一种根据显示密度、页面中图像元素的大小或其他各种因素为浏览器提供多个图像源的方法。</p>\n<blockquote>\n<p>A method for providing the browser with multiple image sources depending on display density, size of the image element in the page, or any number of other factors.</p>\n</blockquote>\n<p>是不是有些不好理解？举几个例子就懂了。</p>\n<h2 id=\"常见场景：\"><a href=\"#常见场景：\" class=\"headerlink\" title=\"常见场景：\"></a>常见场景：</h2><h3 id=\"图片缩放\"><a href=\"#图片缩放\" class=\"headerlink\" title=\"图片缩放\"></a>图片缩放</h3><p><img src=\"/../imgs/b2f374a4c4bc4e7c8220819ea727b931.png\" alt=\"image.png\"> 这是同一张图片的三种大小，针对不同大小、分辨率的设备，你往往希望浏览器能够显示不同的图片。</p>\n<h3 id=\"图片裁剪\"><a href=\"#图片裁剪\" class=\"headerlink\" title=\"图片裁剪\"></a>图片裁剪</h3><p><img src=\"/../imgs/68b2855217d14296af6aa3e10dfa18d7.png\" alt=\"image.png\"></p>\n<p>这张奥巴马演讲的图片显然适合用在大屏设备上，而如果屏幕较小时该怎么处理呢？</p>\n<p>你一定会想到将图片等比例缩放：</p>\n<p><img src=\"/../imgs/8fc2530298d944708d0ab28d9deca363.png\" alt=\"image.png\"></p>\n<p>这是我们最常见、最简单的做法，对于大多数场景来说这么做已经足够了，但并不能因为一个做法能够适应多数场景而不去思考这种做法在当下这个场景是否合适。</p>\n<p>当这张图等比缩放后，显得重点不够突出，即看不清演讲者，背景又会让人有些费解。这种情况下不如考虑图片裁剪：</p>\n<p><img src=\"/../imgs/a2876bf6aa8c48179ab7bf61cc768452.png\" alt=\"image.png\"></p>\n<p>这么处理可以较为清楚得看到演讲者，显然比上一种做法更合适。</p>\n<h3 id=\"图片调整\"><a href=\"#图片调整\" class=\"headerlink\" title=\"图片调整\"></a>图片调整</h3><p>看下面这张图：它含有三个图片、一段文本、一个图章、还有一些徽标等。 <img src=\"/../imgs/b30c992919e44b42b5837344a3ee85f5.png\" alt=\"image.png\"></p>\n<p>在pc上这么显示没有任何问题，但是如果在移动端呢？如果粗暴地使用缩放，用户看到的很可能是这样一张图片：</p>\n<p><img src=\"/../imgs/081f77e8e6d6428f80387f303c750866.png\" alt=\"image.png\"></p>\n<p>这时候既不适合缩放，也不适合裁剪。裁剪的目的是突出重点，而这张图作为一个整体，显然没办法切割掉其中任何一个部分。 这个时候就需要考虑是否更换这张图片，”更换”并不是找一张完全不同的图片代替，而是重新思考这张图片的设计、布局、内容，并做调整和筛选。 <img src=\"/../imgs/93c65034030940bca0c2f06a6cb5a3d2.png\" alt=\"image.png\"></p>\n<h2 id=\"前端做什么\"><a href=\"#前端做什么\" class=\"headerlink\" title=\"前端做什么\"></a>前端做什么</h2><p>上面讲的内容似乎是设计师需要考虑的，那么我们前端该怎么做呢？媒体查询+自适应布局？</p>\n<p>如果设计师提供一张图片，那么就用自适应布局，如果提供多张图片，那么设置媒体查询以显示不同的图片。</p>\n<p>虽然这么做也能实现需求，但是还有一种更简单的办法：利用<code>img</code>标签的<code>srcset</code>和<code>sizes</code></p>\n<p><img src=\"/../imgs/83ac44a2a5984f138e3b756c1675d8be.png\" alt=\"image.png\"></p>\n<p>这一节我们主要认识了响应式图片的几种场景，下一节我们将具体展开介绍<code>sizes</code>和<code>srcset</code>属性的设置。</p>\n","length":1009,"excerpt":"","more":"<p>这是我参与11月更文挑战的第 7 天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"什么是响应式图片\"><a href=\"#什么是响应式图片\" class=\"headerlink\" title=\"什么是响应式图片\"></a>什么是响应式图片</h2><p>我想大家都知道响应式网页设计，利用弹性布局、百分百布局、rem、媒体查询等使得一个网页能够在多个终端显示合适的布局。而其中一个重要的组成设计————响应式图片，却很常被大家忽略。</p>\n<p>那么什么是响应式图片？</p>\n<p>响应式图片是一种根据显示密度、页面中图像元素的大小或其他各种因素为浏览器提供多个图像源的方法。</p>\n<blockquote>\n<p>A method for providing the browser with multiple image sources depending on display density, size of the image element in the page, or any number of other factors.</p>\n</blockquote>\n<p>是不是有些不好理解？举几个例子就懂了。</p>\n<h2 id=\"常见场景：\"><a href=\"#常见场景：\" class=\"headerlink\" title=\"常见场景：\"></a>常见场景：</h2><h3 id=\"图片缩放\"><a href=\"#图片缩放\" class=\"headerlink\" title=\"图片缩放\"></a>图片缩放</h3><p><img src=\"/../imgs/b2f374a4c4bc4e7c8220819ea727b931.png\" alt=\"image.png\"> 这是同一张图片的三种大小，针对不同大小、分辨率的设备，你往往希望浏览器能够显示不同的图片。</p>\n<h3 id=\"图片裁剪\"><a href=\"#图片裁剪\" class=\"headerlink\" title=\"图片裁剪\"></a>图片裁剪</h3><p><img src=\"/../imgs/68b2855217d14296af6aa3e10dfa18d7.png\" alt=\"image.png\"></p>\n<p>这张奥巴马演讲的图片显然适合用在大屏设备上，而如果屏幕较小时该怎么处理呢？</p>\n<p>你一定会想到将图片等比例缩放：</p>\n<p><img src=\"/../imgs/8fc2530298d944708d0ab28d9deca363.png\" alt=\"image.png\"></p>\n<p>这是我们最常见、最简单的做法，对于大多数场景来说这么做已经足够了，但并不能因为一个做法能够适应多数场景而不去思考这种做法在当下这个场景是否合适。</p>\n<p>当这张图等比缩放后，显得重点不够突出，即看不清演讲者，背景又会让人有些费解。这种情况下不如考虑图片裁剪：</p>\n<p><img src=\"/../imgs/a2876bf6aa8c48179ab7bf61cc768452.png\" alt=\"image.png\"></p>\n<p>这么处理可以较为清楚得看到演讲者，显然比上一种做法更合适。</p>\n<h3 id=\"图片调整\"><a href=\"#图片调整\" class=\"headerlink\" title=\"图片调整\"></a>图片调整</h3><p>看下面这张图：它含有三个图片、一段文本、一个图章、还有一些徽标等。 <img src=\"/../imgs/b30c992919e44b42b5837344a3ee85f5.png\" alt=\"image.png\"></p>\n<p>在pc上这么显示没有任何问题，但是如果在移动端呢？如果粗暴地使用缩放，用户看到的很可能是这样一张图片：</p>\n<p><img src=\"/../imgs/081f77e8e6d6428f80387f303c750866.png\" alt=\"image.png\"></p>\n<p>这时候既不适合缩放，也不适合裁剪。裁剪的目的是突出重点，而这张图作为一个整体，显然没办法切割掉其中任何一个部分。 这个时候就需要考虑是否更换这张图片，”更换”并不是找一张完全不同的图片代替，而是重新思考这张图片的设计、布局、内容，并做调整和筛选。 <img src=\"/../imgs/93c65034030940bca0c2f06a6cb5a3d2.png\" alt=\"image.png\"></p>\n<h2 id=\"前端做什么\"><a href=\"#前端做什么\" class=\"headerlink\" title=\"前端做什么\"></a>前端做什么</h2><p>上面讲的内容似乎是设计师需要考虑的，那么我们前端该怎么做呢？媒体查询+自适应布局？</p>\n<p>如果设计师提供一张图片，那么就用自适应布局，如果提供多张图片，那么设置媒体查询以显示不同的图片。</p>\n<p>虽然这么做也能实现需求，但是还有一种更简单的办法：利用<code>img</code>标签的<code>srcset</code>和<code>sizes</code></p>\n<p><img src=\"/../imgs/83ac44a2a5984f138e3b756c1675d8be.png\" alt=\"image.png\"></p>\n<p>这一节我们主要认识了响应式图片的几种场景，下一节我们将具体展开介绍<code>sizes</code>和<code>srcset</code>属性的设置。</p>\n"},{"title":"在React中优雅地使用弹窗——useModal","date":"2021-11-17T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第18天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n前言\n--\n\n上一篇文章中介绍了以HOC的方法封装一个`withModal`api，将代码量压缩了一半。但是我们再思考一下这段代码：\n\n```javascript\nexport default function TestPage() {\n  const [visiable, setVisiable] = useState(false);\n  // 打开弹窗\n  const open = () => {\n    setVisiable(true);\n  };\n  //关闭弹窗\n  const close = () => {\n    setVisiable(false);\n  };\n  //点击确定提交表单\n  const submit = (ref: MutableRefObject<FormInstance>) => {\n    ref.current.submit();\n  };\n  const afterSubmit = () => {\n    close();\n  };\n  const UserFormModal = withModal({ title: '新建用户' }, { afterSubmit })(React.forwardRef(UserForm));\n\n  return (\n    <div>\n      <div className=\"text-center\">\n        <Button type=\"primary\" onClick={open}>\n          新建\n        </Button>\n      </div>\n      <UserFormModal visible={visiable} onCancel={close} onOk={submit} />\n    </div>\n  );\n}\n```\n\n`TestPage`作为一个`Page`组件，需要关心`Modal`的关闭吗？\n\n关注点分离\n-----\n\n对于这个表单弹窗，`TestPage`关心的是`open`，至于取消、提交、请求，这些操作的发生点都在组件内，因此也不应该由`TestPage`关心。 我们希望的调用方式是：\n\n```tsx\nconst {open,Modal} = useModal(...)\n...\n<Button type=\"primary\" onClick={open}>新建</Button>\n```\n\nuseModal\n--------\n\n### 思路\n\n控制弹窗显示的是Modal的visiable属性，如果利用hooks的`useState`api控制`visiable`，那么我们只要将`setVisiable`暴露出去便是外层想要的`open`方法了。\n\n另外这里的弹窗，需要和表单进行交互，这并不是通用弹窗的必须逻辑，因此不如直接将这个Modal定位为FormModal，不再背负通用Modal的设计负担，这样无论是语义还是使用方式，都会简单很多。\n\n### useFormModal\n\n```tsx\nimport type { ModalProps } from 'antd';\nimport { Modal } from 'antd';\nimport type { FormInstance } from 'antd/es/form';\nimport React, { useState } from 'react';\n\nconst useFormModal = (modalProps: ModalProps, Slot: React.FC<any>) => {\n  const [visiable, setVisiable] = useState(false);\n  const open = () => {\n    setVisiable(true);\n  };\n  const close = () => {\n    setVisiable(false);\n  };\n  const FormModal = (slotProps: any) => {\n    const onCancel = () => {\n      close();\n    };\n\n    const ref = React.useRef<FormInstance>();\n    const ok = () => {\n      ref.current?.submit()\n    };\n    return (\n      <Modal\n        onCancel={onCancel}\n        onOk={ok}\n        visible={visiable}\n        wrapClassName=\"modal-wrap\"\n        okText=\"提交\"\n        cancelButtonProps={{ shape: 'round' }}\n        okButtonProps={{ shape: 'round' }}\n        width={600}\n        {...modalProps}\n      >\n        <Slot ref={ref} {...slotProps} afterSubmit={close} />\n      </Modal>\n    );\n  };\n\n  return {\n    FormModal,\n    open,\n  };\n};\nexport default useFormModal;\n\n```\n\n可以看到FormModal内部处理了表单提交和弹窗关闭的逻辑，同时还支持使用者传入自定义的Modal和Form组件的props，做到了高内聚和可扩展。\n\n使用效果\n----\n\n```tsx\nexport default function TestPage() {\n\n\n  const {open,FormModal: UserModal} = useFormModal({title:'新建用户'},React.forwardRef(UserForm))\n\n  return (\n    <div>\n      <div className=\"text-center\">\n        <Button type=\"primary\" onClick={open}>\n          新建\n        </Button>\n      </div>\n      <UserModal />\n    </div>\n  );\n}\n```\n\n至此，我们成功地将一个70行左右的代码，压缩到15行以内。而干净的调用方式，给我们带来的，不仅是本次迭代工作量的减负，代码越少，可读性和可维护性越高，即便后续有多次迭代和需求变更，也可以尽可能地通过小范围改动安全地完成。","source":"_posts/在React中优雅地使用弹窗——useModal.md","raw":"---\n title: \"在React中优雅地使用弹窗——useModal\"\n date: 2021-11-18\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第18天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n前言\n--\n\n上一篇文章中介绍了以HOC的方法封装一个`withModal`api，将代码量压缩了一半。但是我们再思考一下这段代码：\n\n```javascript\nexport default function TestPage() {\n  const [visiable, setVisiable] = useState(false);\n  // 打开弹窗\n  const open = () => {\n    setVisiable(true);\n  };\n  //关闭弹窗\n  const close = () => {\n    setVisiable(false);\n  };\n  //点击确定提交表单\n  const submit = (ref: MutableRefObject<FormInstance>) => {\n    ref.current.submit();\n  };\n  const afterSubmit = () => {\n    close();\n  };\n  const UserFormModal = withModal({ title: '新建用户' }, { afterSubmit })(React.forwardRef(UserForm));\n\n  return (\n    <div>\n      <div className=\"text-center\">\n        <Button type=\"primary\" onClick={open}>\n          新建\n        </Button>\n      </div>\n      <UserFormModal visible={visiable} onCancel={close} onOk={submit} />\n    </div>\n  );\n}\n```\n\n`TestPage`作为一个`Page`组件，需要关心`Modal`的关闭吗？\n\n关注点分离\n-----\n\n对于这个表单弹窗，`TestPage`关心的是`open`，至于取消、提交、请求，这些操作的发生点都在组件内，因此也不应该由`TestPage`关心。 我们希望的调用方式是：\n\n```tsx\nconst {open,Modal} = useModal(...)\n...\n<Button type=\"primary\" onClick={open}>新建</Button>\n```\n\nuseModal\n--------\n\n### 思路\n\n控制弹窗显示的是Modal的visiable属性，如果利用hooks的`useState`api控制`visiable`，那么我们只要将`setVisiable`暴露出去便是外层想要的`open`方法了。\n\n另外这里的弹窗，需要和表单进行交互，这并不是通用弹窗的必须逻辑，因此不如直接将这个Modal定位为FormModal，不再背负通用Modal的设计负担，这样无论是语义还是使用方式，都会简单很多。\n\n### useFormModal\n\n```tsx\nimport type { ModalProps } from 'antd';\nimport { Modal } from 'antd';\nimport type { FormInstance } from 'antd/es/form';\nimport React, { useState } from 'react';\n\nconst useFormModal = (modalProps: ModalProps, Slot: React.FC<any>) => {\n  const [visiable, setVisiable] = useState(false);\n  const open = () => {\n    setVisiable(true);\n  };\n  const close = () => {\n    setVisiable(false);\n  };\n  const FormModal = (slotProps: any) => {\n    const onCancel = () => {\n      close();\n    };\n\n    const ref = React.useRef<FormInstance>();\n    const ok = () => {\n      ref.current?.submit()\n    };\n    return (\n      <Modal\n        onCancel={onCancel}\n        onOk={ok}\n        visible={visiable}\n        wrapClassName=\"modal-wrap\"\n        okText=\"提交\"\n        cancelButtonProps={{ shape: 'round' }}\n        okButtonProps={{ shape: 'round' }}\n        width={600}\n        {...modalProps}\n      >\n        <Slot ref={ref} {...slotProps} afterSubmit={close} />\n      </Modal>\n    );\n  };\n\n  return {\n    FormModal,\n    open,\n  };\n};\nexport default useFormModal;\n\n```\n\n可以看到FormModal内部处理了表单提交和弹窗关闭的逻辑，同时还支持使用者传入自定义的Modal和Form组件的props，做到了高内聚和可扩展。\n\n使用效果\n----\n\n```tsx\nexport default function TestPage() {\n\n\n  const {open,FormModal: UserModal} = useFormModal({title:'新建用户'},React.forwardRef(UserForm))\n\n  return (\n    <div>\n      <div className=\"text-center\">\n        <Button type=\"primary\" onClick={open}>\n          新建\n        </Button>\n      </div>\n      <UserModal />\n    </div>\n  );\n}\n```\n\n至此，我们成功地将一个70行左右的代码，压缩到15行以内。而干净的调用方式，给我们带来的，不仅是本次迭代工作量的减负，代码越少，可读性和可维护性越高，即便后续有多次迭代和需求变更，也可以尽可能地通过小范围改动安全地完成。","slug":"在React中优雅地使用弹窗——useModal","published":1,"updated":"2024-04-04T15:27:03.475Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li1006ohajf1a5r0dvb","content":"<p>这是我参与11月更文挑战的第18天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上一篇文章中介绍了以HOC的方法封装一个<code>withModal</code>api，将代码量压缩了一半。但是我们再思考一下这段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">TestPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [visiable, setVisiable] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 打开弹窗</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">open</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//关闭弹窗</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">close</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//点击确定提交表单</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">submit</span> = (<span class=\"params\">ref: MutableRefObject&lt;FormInstance&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">    ref.<span class=\"property\">current</span>.<span class=\"title function_\">submit</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">afterSubmit</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">close</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">UserFormModal</span> = <span class=\"title function_\">withModal</span>(&#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;新建用户&#x27;</span> &#125;, &#123; afterSubmit &#125;)(<span class=\"title class_\">React</span>.<span class=\"title function_\">forwardRef</span>(<span class=\"title class_\">UserForm</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;open&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          新建</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">UserFormModal</span> <span class=\"attr\">visible</span>=<span class=\"string\">&#123;visiable&#125;</span> <span class=\"attr\">onCancel</span>=<span class=\"string\">&#123;close&#125;</span> <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;submit&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>TestPage</code>作为一个<code>Page</code>组件，需要关心<code>Modal</code>的关闭吗？</p>\n<h2 id=\"关注点分离\"><a href=\"#关注点分离\" class=\"headerlink\" title=\"关注点分离\"></a>关注点分离</h2><p>对于这个表单弹窗，<code>TestPage</code>关心的是<code>open</code>，至于取消、提交、请求，这些操作的发生点都在组件内，因此也不应该由<code>TestPage</code>关心。 我们希望的调用方式是：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;open,<span class=\"title class_\">Modal</span>&#125; = <span class=\"title function_\">useModal</span>(...)</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;<span class=\"title class_\">Button</span> <span class=\"keyword\">type</span>=<span class=\"string\">&quot;primary&quot;</span> onClick=&#123;open&#125;&gt;新建&lt;/<span class=\"title class_\">Button</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useModal\"><a href=\"#useModal\" class=\"headerlink\" title=\"useModal\"></a>useModal</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>控制弹窗显示的是Modal的visiable属性，如果利用hooks的<code>useState</code>api控制<code>visiable</code>，那么我们只要将<code>setVisiable</code>暴露出去便是外层想要的<code>open</code>方法了。</p>\n<p>另外这里的弹窗，需要和表单进行交互，这并不是通用弹窗的必须逻辑，因此不如直接将这个Modal定位为FormModal，不再背负通用Modal的设计负担，这样无论是语义还是使用方式，都会简单很多。</p>\n<h3 id=\"useFormModal\"><a href=\"#useFormModal\" class=\"headerlink\" title=\"useFormModal\"></a>useFormModal</h3><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">ModalProps</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Modal</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">FormInstance</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd/es/form&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">useFormModal</span> = (<span class=\"params\">modalProps: ModalProps, Slot: React.FC&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [visiable, setVisiable] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">open</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">close</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">FormModal</span> = (<span class=\"params\">slotProps: <span class=\"built_in\">any</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">onCancel</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"title function_\">close</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = <span class=\"title class_\">React</span>.<span class=\"property\">useRef</span>&lt;<span class=\"title class_\">FormInstance</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">ok</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      ref.<span class=\"property\">current</span>?.<span class=\"title function_\">submit</span>()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Modal</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onCancel</span>=<span class=\"string\">&#123;onCancel&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;ok&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">visible</span>=<span class=\"string\">&#123;visiable&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">wrapClassName</span>=<span class=\"string\">&quot;modal-wrap&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">okText</span>=<span class=\"string\">&quot;提交&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">cancelButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">okButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">width</span>=<span class=\"string\">&#123;600&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &#123;<span class=\"attr\">...modalProps</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Slot</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span> &#123;<span class=\"attr\">...slotProps</span>&#125; <span class=\"attr\">afterSubmit</span>=<span class=\"string\">&#123;close&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">FormModal</span>,</span><br><span class=\"line\">    open,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> useFormModal;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到FormModal内部处理了表单提交和弹窗关闭的逻辑，同时还支持使用者传入自定义的Modal和Form组件的props，做到了高内聚和可扩展。</p>\n<h2 id=\"使用效果\"><a href=\"#使用效果\" class=\"headerlink\" title=\"使用效果\"></a>使用效果</h2><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">TestPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;open,<span class=\"title class_\">FormModal</span>: <span class=\"title class_\">UserModal</span>&#125; = <span class=\"title function_\">useFormModal</span>(&#123;<span class=\"attr\">title</span>:<span class=\"string\">&#x27;新建用户&#x27;</span>&#125;,<span class=\"title class_\">React</span>.<span class=\"title function_\">forwardRef</span>(<span class=\"title class_\">UserForm</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;open&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          新建</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">UserModal</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，我们成功地将一个70行左右的代码，压缩到15行以内。而干净的调用方式，给我们带来的，不仅是本次迭代工作量的减负，代码越少，可读性和可维护性越高，即便后续有多次迭代和需求变更，也可以尽可能地通过小范围改动安全地完成。</p>\n","length":3081,"excerpt":"","more":"<p>这是我参与11月更文挑战的第18天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上一篇文章中介绍了以HOC的方法封装一个<code>withModal</code>api，将代码量压缩了一半。但是我们再思考一下这段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">TestPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [visiable, setVisiable] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 打开弹窗</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">open</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//关闭弹窗</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">close</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//点击确定提交表单</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">submit</span> = (<span class=\"params\">ref: MutableRefObject&lt;FormInstance&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">    ref.<span class=\"property\">current</span>.<span class=\"title function_\">submit</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">afterSubmit</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">close</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">UserFormModal</span> = <span class=\"title function_\">withModal</span>(&#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;新建用户&#x27;</span> &#125;, &#123; afterSubmit &#125;)(<span class=\"title class_\">React</span>.<span class=\"title function_\">forwardRef</span>(<span class=\"title class_\">UserForm</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;open&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          新建</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">UserFormModal</span> <span class=\"attr\">visible</span>=<span class=\"string\">&#123;visiable&#125;</span> <span class=\"attr\">onCancel</span>=<span class=\"string\">&#123;close&#125;</span> <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;submit&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>TestPage</code>作为一个<code>Page</code>组件，需要关心<code>Modal</code>的关闭吗？</p>\n<h2 id=\"关注点分离\"><a href=\"#关注点分离\" class=\"headerlink\" title=\"关注点分离\"></a>关注点分离</h2><p>对于这个表单弹窗，<code>TestPage</code>关心的是<code>open</code>，至于取消、提交、请求，这些操作的发生点都在组件内，因此也不应该由<code>TestPage</code>关心。 我们希望的调用方式是：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;open,<span class=\"title class_\">Modal</span>&#125; = <span class=\"title function_\">useModal</span>(...)</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;<span class=\"title class_\">Button</span> <span class=\"keyword\">type</span>=<span class=\"string\">&quot;primary&quot;</span> onClick=&#123;open&#125;&gt;新建&lt;/<span class=\"title class_\">Button</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useModal\"><a href=\"#useModal\" class=\"headerlink\" title=\"useModal\"></a>useModal</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>控制弹窗显示的是Modal的visiable属性，如果利用hooks的<code>useState</code>api控制<code>visiable</code>，那么我们只要将<code>setVisiable</code>暴露出去便是外层想要的<code>open</code>方法了。</p>\n<p>另外这里的弹窗，需要和表单进行交互，这并不是通用弹窗的必须逻辑，因此不如直接将这个Modal定位为FormModal，不再背负通用Modal的设计负担，这样无论是语义还是使用方式，都会简单很多。</p>\n<h3 id=\"useFormModal\"><a href=\"#useFormModal\" class=\"headerlink\" title=\"useFormModal\"></a>useFormModal</h3><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">ModalProps</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Modal</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">FormInstance</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd/es/form&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">useFormModal</span> = (<span class=\"params\">modalProps: ModalProps, Slot: React.FC&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [visiable, setVisiable] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">open</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">close</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">FormModal</span> = (<span class=\"params\">slotProps: <span class=\"built_in\">any</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">onCancel</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"title function_\">close</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = <span class=\"title class_\">React</span>.<span class=\"property\">useRef</span>&lt;<span class=\"title class_\">FormInstance</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">ok</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      ref.<span class=\"property\">current</span>?.<span class=\"title function_\">submit</span>()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Modal</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onCancel</span>=<span class=\"string\">&#123;onCancel&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;ok&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">visible</span>=<span class=\"string\">&#123;visiable&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">wrapClassName</span>=<span class=\"string\">&quot;modal-wrap&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">okText</span>=<span class=\"string\">&quot;提交&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">cancelButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">okButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">width</span>=<span class=\"string\">&#123;600&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &#123;<span class=\"attr\">...modalProps</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Slot</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span> &#123;<span class=\"attr\">...slotProps</span>&#125; <span class=\"attr\">afterSubmit</span>=<span class=\"string\">&#123;close&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">FormModal</span>,</span><br><span class=\"line\">    open,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> useFormModal;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到FormModal内部处理了表单提交和弹窗关闭的逻辑，同时还支持使用者传入自定义的Modal和Form组件的props，做到了高内聚和可扩展。</p>\n<h2 id=\"使用效果\"><a href=\"#使用效果\" class=\"headerlink\" title=\"使用效果\"></a>使用效果</h2><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">TestPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;open,<span class=\"title class_\">FormModal</span>: <span class=\"title class_\">UserModal</span>&#125; = <span class=\"title function_\">useFormModal</span>(&#123;<span class=\"attr\">title</span>:<span class=\"string\">&#x27;新建用户&#x27;</span>&#125;,<span class=\"title class_\">React</span>.<span class=\"title function_\">forwardRef</span>(<span class=\"title class_\">UserForm</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;open&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          新建</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">UserModal</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，我们成功地将一个70行左右的代码，压缩到15行以内。而干净的调用方式，给我们带来的，不仅是本次迭代工作量的减负，代码越少，可读性和可维护性越高，即便后续有多次迭代和需求变更，也可以尽可能地通过小范围改动安全地完成。</p>\n"},{"title":"在React中优雅地使用弹窗——useModal的优化","date":"2021-11-18T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第19天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n接上文，之前介绍了useModal的简单封装思路，但是这种方法有一个副作用：弹窗的关闭的动效没了。如果说这可以勉强接受的话，那么再看下面这个效果：\n\n加了一个confirmLoading的效果，弹窗先关闭，又开启。\n\n![modal-loading.gif](../imgs/29b6b15893e049a78bcfd9dababd7be7.png) 代码如下： TestPage.tsx\n\n```tsx\nexport default function TestPage() {\n  const {open,FormModal: UserModal} = useFormModal({title:'新建用户'},React.forwardRef(UserForm))\n\n  return (\n    <div>\n      <div className=\"text-center\">\n        <Button type=\"primary\" onClick={open}>\n          新增\n        </Button>\n      </div>\n      <UserModal depart={1}   />\n    </div>\n  );\n}\n\n```\n\nuseFormModal.tsx\n\n```tsx\nconst useFormModal = function <T>(modalProps: ModalProps, Slot: React.ComponentType<T>) {\n  const [visiable, setVisiable] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const open = () => {\n    setVisiable(true);\n  };\n  const close = () => {\n    setVisiable(false);\n  };\n  const FormModal = (slotProps: T) => {\n    const onCancel = () => {\n      close();\n    };\n    const ref = React.useRef<FormInstance>();\n    const ok = () => {\n      ref.current?.submit();\n    };\n    return (\n      <Modal\n        onCancel={onCancel}\n        onOk={ok}\n        visible={visiable}\n        wrapClassName=\"modal-wrap\"\n        okText=\"提交\"\n        cancelButtonProps={{ shape: 'round' }}\n        okButtonProps={{ shape: 'round' }}\n        confirmLoading={loading}\n        width={600}\n        {...modalProps}\n      >\n        <Slot\n          ref={ref}\n          {...slotProps}\n          afterSubmit={() => {\n            setLoading(false);\n            close();\n          }}\n          beforeSubmit={() => setLoading(true)}\n        />\n      </Modal>\n    );\n  };\n\n  return {\n    FormModal,\n    open,\n  };\n};\nexport default useFormModal;\n```\n\nUserForm.tsx\n\n```tsx\ninterface UserFormPropsType {\n  depart?: number;\n  beforeSubmit?: (values: any) => void;\n  afterSubmit?: (values: any, form: FormInstance<any>) => void;\n}\nconst UserForm = (props: React.PropsWithChildren<UserFormPropsType>, ref?: React.ForwardedRef<FormInstance>) => {\n  const [form] = Form.useForm();\n\n  const onSubmit = async (values: any) => {\n    props.beforeSubmit?.(values);\n    // 模拟请求\n    await new Promise((r) => {\n      setTimeout(r, 3000);\n    });\n    props.afterSubmit?.(values, form);\n    message.success('操作完成~')\n    form.resetFields();\n  };\n  return (\n    <div className=\"form\">\n      <Form\n        onFinish={onSubmit}\n        ref={ref}\n        form={form}\n        labelCol={{ span: 4 }}\n        wrapperCol={{ span: 16 }}\n      >\n        <Form.Item\n          label=\"用户名\"\n          name=\"uname\"\n          rules={[{ required: true, message: 'Please input  username!' }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"用户邮箱\"\n          name=\"mail\"\n          rules={[{ required: true, message: 'Please input mail!' }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"部门\"\n          name=\"depart\"\n          rules={[{ required: true, message: 'Please input depart!' }]}\n          initialValue={props.depart}\n        >\n          <Select>\n            <Select.Option value={1}>市场部</Select.Option>\n            <Select.Option value={2}>财务部</Select.Option>\n            <Select.Option value={3}>研发部</Select.Option>\n          </Select>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n```\n\n这两个bug的原因都是一样的\n\n原因及解决\n-----\n\n问题代码在这里：\n\n```tsx\n...\nconst useFormModal = function(){\n    const [visiable, setVisiable] = useState(false);\n    const [loading, setLoading] = useState(false);\n      ...\n    const FormModal = (slotProps: T) => {\n        return  <Modal  \n                    visible={visiable}\n                    confirmLoading={loading}\n                >...</Modal>\n    }\n}\n \n```\n\n不管是调用setVisiable还是setLoading，都会导致 `const FormModal= ...`被重新执行一次，渲染后的弹窗不再是之前的弹窗了。\n\n因此只要能够保持FormModal函数实例，就可以解决这个问题。但如果我们使用`useCallback`或者`useMemo`：\n\n```ini\n const FormModal = () =>{}\nreturn {\n    FormModal: useCallback(FormModal,[]),\n    open,\n  };\n```\n\n这么写会导致组件完全不更新，因此我们还需将\n\n```scss\n    const [visiable, setVisiable] = useState(false);\n    const [loading, setLoading] = useState(false);\n```\n\n放到FormModal内。而对外如何开放打开弹窗的api呢？用ref\n\n### useRef、forwardRef和useImperativeHandle\n\n*   首先是用useRef创建一个ref指向FormModal ![image.png](../imgs/1854cdecb8204130ae6ede9bf856cd64.png) 注意这里最好**不要用createRef**,后续文章再解释几个ref api的不同作用\n    \n*   这个ref还需要对外开放出去，使用useImperativeHandle给它增加open、close方法，供外部调用\n    \n\n![image.png](../imgs/f75403f63adc4770be663b727db0dc72.png)\n\n*   外部调用方式：\n\n![image.png](../imgs/0b528985f9c84a71a7c80cbc171fc351.png)\n\nopen的参数可以作为表单组件的初始props，是可选的。\n\n代码比较简单，但是类型定义有些复杂，整体见代码参考：\n\n### 代码参考\n\nuseFormModal.tsx\n\n```tsx\n\ntype ModalRefType<T> = { open: (initProp?: Partial<T>) => void; close: () => void } | undefined;\n\nconst useFormModal = function <T>(modalProps: Partial<ModalProps>, Slot: React.ComponentType<T>) {\n  const modalRef = useRef<ModalRefType<T>>();\n\n  const FormModal = forwardRef<ModalRefType<T>, T>((slotProps, mRef) => {\n    const [visiable, setVisiable] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [slotInitProp, setSlotInitProp] = useState<Partial<T>>();\n    const open = (initProp?: Partial<T>) => {\n      if (initProp) {\n        setSlotInitProp(initProp);\n      }\n      setVisiable(true);\n    };\n    const close = () => {\n      setVisiable(false);\n    };\n    useImperativeHandle(mRef, () => ({ open, close }));\n    const onCancel = () => {\n      close();\n    };\n    const formRef = React.useRef<FormInstance>();\n    const ok = () => {\n      formRef.current?.submit();\n    };\n    return (\n      <Modal\n        onCancel={onCancel}\n        onOk={ok}\n        visible={visiable}\n        wrapClassName=\"modal-wrap\"\n        okText=\"提交\"\n        cancelButtonProps={{ shape: 'round' }}\n        okButtonProps={{ shape: 'round' }}\n        confirmLoading={loading}\n        width={600}\n        {...modalProps}\n      >\n        <Slot\n          ref={formRef}\n          {...slotProps}\n          {...slotInitProp}\n          afterSubmit={() => {\n            setLoading(false);\n            close();\n          }}\n          beforeSubmit={() => setLoading(true)}\n        />\n      </Modal>\n    );\n  });\n  return {\n    FormModal: useCallback((props: PropsWithoutRef<T>) => {\n      return <FormModal ref={modalRef} {...props} />;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []),\n    modalRef,\n  };\n};\n```\n\nTestPage.tsx\n\n```tsx\nexport default function TestPage() {\n  const { modalRef, FormModal: UserModal } = useFormModal(\n    { title: '新建用户' },\n    React.forwardRef(UserForm),\n  );\n\n  return (\n    <div>\n      <div className=\"text-center\">\n        <Button type=\"primary\" onClick={()=>modalRef.current?.open({depart:1})}>\n          新增\n        </Button>\n      </div>\n      <UserModal  />\n    </div>\n  );\n}\n```","source":"_posts/在React中优雅地使用弹窗——useModal的优化.md","raw":"---\n title: \"在React中优雅地使用弹窗——useModal的优化\"\n date: 2021-11-19\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第19天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n接上文，之前介绍了useModal的简单封装思路，但是这种方法有一个副作用：弹窗的关闭的动效没了。如果说这可以勉强接受的话，那么再看下面这个效果：\n\n加了一个confirmLoading的效果，弹窗先关闭，又开启。\n\n![modal-loading.gif](../imgs/29b6b15893e049a78bcfd9dababd7be7.png) 代码如下： TestPage.tsx\n\n```tsx\nexport default function TestPage() {\n  const {open,FormModal: UserModal} = useFormModal({title:'新建用户'},React.forwardRef(UserForm))\n\n  return (\n    <div>\n      <div className=\"text-center\">\n        <Button type=\"primary\" onClick={open}>\n          新增\n        </Button>\n      </div>\n      <UserModal depart={1}   />\n    </div>\n  );\n}\n\n```\n\nuseFormModal.tsx\n\n```tsx\nconst useFormModal = function <T>(modalProps: ModalProps, Slot: React.ComponentType<T>) {\n  const [visiable, setVisiable] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const open = () => {\n    setVisiable(true);\n  };\n  const close = () => {\n    setVisiable(false);\n  };\n  const FormModal = (slotProps: T) => {\n    const onCancel = () => {\n      close();\n    };\n    const ref = React.useRef<FormInstance>();\n    const ok = () => {\n      ref.current?.submit();\n    };\n    return (\n      <Modal\n        onCancel={onCancel}\n        onOk={ok}\n        visible={visiable}\n        wrapClassName=\"modal-wrap\"\n        okText=\"提交\"\n        cancelButtonProps={{ shape: 'round' }}\n        okButtonProps={{ shape: 'round' }}\n        confirmLoading={loading}\n        width={600}\n        {...modalProps}\n      >\n        <Slot\n          ref={ref}\n          {...slotProps}\n          afterSubmit={() => {\n            setLoading(false);\n            close();\n          }}\n          beforeSubmit={() => setLoading(true)}\n        />\n      </Modal>\n    );\n  };\n\n  return {\n    FormModal,\n    open,\n  };\n};\nexport default useFormModal;\n```\n\nUserForm.tsx\n\n```tsx\ninterface UserFormPropsType {\n  depart?: number;\n  beforeSubmit?: (values: any) => void;\n  afterSubmit?: (values: any, form: FormInstance<any>) => void;\n}\nconst UserForm = (props: React.PropsWithChildren<UserFormPropsType>, ref?: React.ForwardedRef<FormInstance>) => {\n  const [form] = Form.useForm();\n\n  const onSubmit = async (values: any) => {\n    props.beforeSubmit?.(values);\n    // 模拟请求\n    await new Promise((r) => {\n      setTimeout(r, 3000);\n    });\n    props.afterSubmit?.(values, form);\n    message.success('操作完成~')\n    form.resetFields();\n  };\n  return (\n    <div className=\"form\">\n      <Form\n        onFinish={onSubmit}\n        ref={ref}\n        form={form}\n        labelCol={{ span: 4 }}\n        wrapperCol={{ span: 16 }}\n      >\n        <Form.Item\n          label=\"用户名\"\n          name=\"uname\"\n          rules={[{ required: true, message: 'Please input  username!' }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"用户邮箱\"\n          name=\"mail\"\n          rules={[{ required: true, message: 'Please input mail!' }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"部门\"\n          name=\"depart\"\n          rules={[{ required: true, message: 'Please input depart!' }]}\n          initialValue={props.depart}\n        >\n          <Select>\n            <Select.Option value={1}>市场部</Select.Option>\n            <Select.Option value={2}>财务部</Select.Option>\n            <Select.Option value={3}>研发部</Select.Option>\n          </Select>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n```\n\n这两个bug的原因都是一样的\n\n原因及解决\n-----\n\n问题代码在这里：\n\n```tsx\n...\nconst useFormModal = function(){\n    const [visiable, setVisiable] = useState(false);\n    const [loading, setLoading] = useState(false);\n      ...\n    const FormModal = (slotProps: T) => {\n        return  <Modal  \n                    visible={visiable}\n                    confirmLoading={loading}\n                >...</Modal>\n    }\n}\n \n```\n\n不管是调用setVisiable还是setLoading，都会导致 `const FormModal= ...`被重新执行一次，渲染后的弹窗不再是之前的弹窗了。\n\n因此只要能够保持FormModal函数实例，就可以解决这个问题。但如果我们使用`useCallback`或者`useMemo`：\n\n```ini\n const FormModal = () =>{}\nreturn {\n    FormModal: useCallback(FormModal,[]),\n    open,\n  };\n```\n\n这么写会导致组件完全不更新，因此我们还需将\n\n```scss\n    const [visiable, setVisiable] = useState(false);\n    const [loading, setLoading] = useState(false);\n```\n\n放到FormModal内。而对外如何开放打开弹窗的api呢？用ref\n\n### useRef、forwardRef和useImperativeHandle\n\n*   首先是用useRef创建一个ref指向FormModal ![image.png](../imgs/1854cdecb8204130ae6ede9bf856cd64.png) 注意这里最好**不要用createRef**,后续文章再解释几个ref api的不同作用\n    \n*   这个ref还需要对外开放出去，使用useImperativeHandle给它增加open、close方法，供外部调用\n    \n\n![image.png](../imgs/f75403f63adc4770be663b727db0dc72.png)\n\n*   外部调用方式：\n\n![image.png](../imgs/0b528985f9c84a71a7c80cbc171fc351.png)\n\nopen的参数可以作为表单组件的初始props，是可选的。\n\n代码比较简单，但是类型定义有些复杂，整体见代码参考：\n\n### 代码参考\n\nuseFormModal.tsx\n\n```tsx\n\ntype ModalRefType<T> = { open: (initProp?: Partial<T>) => void; close: () => void } | undefined;\n\nconst useFormModal = function <T>(modalProps: Partial<ModalProps>, Slot: React.ComponentType<T>) {\n  const modalRef = useRef<ModalRefType<T>>();\n\n  const FormModal = forwardRef<ModalRefType<T>, T>((slotProps, mRef) => {\n    const [visiable, setVisiable] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [slotInitProp, setSlotInitProp] = useState<Partial<T>>();\n    const open = (initProp?: Partial<T>) => {\n      if (initProp) {\n        setSlotInitProp(initProp);\n      }\n      setVisiable(true);\n    };\n    const close = () => {\n      setVisiable(false);\n    };\n    useImperativeHandle(mRef, () => ({ open, close }));\n    const onCancel = () => {\n      close();\n    };\n    const formRef = React.useRef<FormInstance>();\n    const ok = () => {\n      formRef.current?.submit();\n    };\n    return (\n      <Modal\n        onCancel={onCancel}\n        onOk={ok}\n        visible={visiable}\n        wrapClassName=\"modal-wrap\"\n        okText=\"提交\"\n        cancelButtonProps={{ shape: 'round' }}\n        okButtonProps={{ shape: 'round' }}\n        confirmLoading={loading}\n        width={600}\n        {...modalProps}\n      >\n        <Slot\n          ref={formRef}\n          {...slotProps}\n          {...slotInitProp}\n          afterSubmit={() => {\n            setLoading(false);\n            close();\n          }}\n          beforeSubmit={() => setLoading(true)}\n        />\n      </Modal>\n    );\n  });\n  return {\n    FormModal: useCallback((props: PropsWithoutRef<T>) => {\n      return <FormModal ref={modalRef} {...props} />;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []),\n    modalRef,\n  };\n};\n```\n\nTestPage.tsx\n\n```tsx\nexport default function TestPage() {\n  const { modalRef, FormModal: UserModal } = useFormModal(\n    { title: '新建用户' },\n    React.forwardRef(UserForm),\n  );\n\n  return (\n    <div>\n      <div className=\"text-center\">\n        <Button type=\"primary\" onClick={()=>modalRef.current?.open({depart:1})}>\n          新增\n        </Button>\n      </div>\n      <UserModal  />\n    </div>\n  );\n}\n```","slug":"在React中优雅地使用弹窗——useModal的优化","published":1,"updated":"2024-04-04T15:27:03.483Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li1006rhajff78z970l","content":"<p>这是我参与11月更文挑战的第19天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<p>接上文，之前介绍了useModal的简单封装思路，但是这种方法有一个副作用：弹窗的关闭的动效没了。如果说这可以勉强接受的话，那么再看下面这个效果：</p>\n<p>加了一个confirmLoading的效果，弹窗先关闭，又开启。</p>\n<p><img src=\"/../imgs/29b6b15893e049a78bcfd9dababd7be7.png\" alt=\"modal-loading.gif\"> 代码如下： TestPage.tsx</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">TestPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;open,<span class=\"title class_\">FormModal</span>: <span class=\"title class_\">UserModal</span>&#125; = <span class=\"title function_\">useFormModal</span>(&#123;<span class=\"attr\">title</span>:<span class=\"string\">&#x27;新建用户&#x27;</span>&#125;,<span class=\"title class_\">React</span>.<span class=\"title function_\">forwardRef</span>(<span class=\"title class_\">UserForm</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;open&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          新增</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">UserModal</span> <span class=\"attr\">depart</span>=<span class=\"string\">&#123;1&#125;</span>   /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>useFormModal.tsx</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> useFormModal = <span class=\"keyword\">function</span> &lt;T&gt;(<span class=\"attr\">modalProps</span>: <span class=\"title class_\">ModalProps</span>, <span class=\"title class_\">Slot</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;T&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [visiable, setVisiable] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [loading, setLoading] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">open</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">close</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">FormModal</span> = (<span class=\"params\">slotProps: T</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">onCancel</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"title function_\">close</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = <span class=\"title class_\">React</span>.<span class=\"property\">useRef</span>&lt;<span class=\"title class_\">FormInstance</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">ok</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      ref.<span class=\"property\">current</span>?.<span class=\"title function_\">submit</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Modal</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onCancel</span>=<span class=\"string\">&#123;onCancel&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;ok&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">visible</span>=<span class=\"string\">&#123;visiable&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">wrapClassName</span>=<span class=\"string\">&quot;modal-wrap&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">okText</span>=<span class=\"string\">&quot;提交&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">cancelButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">okButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">confirmLoading</span>=<span class=\"string\">&#123;loading&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">width</span>=<span class=\"string\">&#123;600&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &#123;<span class=\"attr\">...modalProps</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Slot</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          &#123;<span class=\"attr\">...slotProps</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">afterSubmit</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            setLoading(false);</span></span><br><span class=\"line\"><span class=\"language-xml\">            close();</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          beforeSubmit=&#123;() =&gt; setLoading(true)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">FormModal</span>,</span><br><span class=\"line\">    open,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> useFormModal;</span><br></pre></td></tr></table></figure>\n\n<p>UserForm.tsx</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">UserFormPropsType</span> &#123;</span><br><span class=\"line\">  depart?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  beforeSubmit?: <span class=\"function\">(<span class=\"params\">values: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  afterSubmit?: <span class=\"function\">(<span class=\"params\">values: <span class=\"built_in\">any</span>, form: FormInstance&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">UserForm</span> = (<span class=\"params\">props: React.PropsWithChildren&lt;UserFormPropsType&gt;, ref?: React.ForwardedRef&lt;FormInstance&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [form] = <span class=\"title class_\">Form</span>.<span class=\"title function_\">useForm</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onSubmit</span> = <span class=\"keyword\">async</span> (<span class=\"params\">values: <span class=\"built_in\">any</span></span>) =&gt; &#123;</span><br><span class=\"line\">    props.<span class=\"property\">beforeSubmit</span>?.(values);</span><br><span class=\"line\">    <span class=\"comment\">// 模拟请求</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(r, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    props.<span class=\"property\">afterSubmit</span>?.(values, form);</span><br><span class=\"line\">    message.<span class=\"title function_\">success</span>(<span class=\"string\">&#x27;操作完成~&#x27;</span>)</span><br><span class=\"line\">    form.<span class=\"title function_\">resetFields</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Form</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onFinish</span>=<span class=\"string\">&#123;onSubmit&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">form</span>=<span class=\"string\">&#123;form&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">labelCol</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">span:</span> <span class=\"attr\">4</span> &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">wrapperCol</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">span:</span> <span class=\"attr\">16</span> &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;用户名&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">name</span>=<span class=\"string\">&quot;uname&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span>  <span class=\"attr\">username</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;用户邮箱&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">name</span>=<span class=\"string\">&quot;mail&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span> <span class=\"attr\">mail</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;部门&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">name</span>=<span class=\"string\">&quot;depart&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span> <span class=\"attr\">depart</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">initialValue</span>=<span class=\"string\">&#123;props.depart&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;1&#125;</span>&gt;</span>市场部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;2&#125;</span>&gt;</span>财务部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;3&#125;</span>&gt;</span>研发部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这两个bug的原因都是一样的</p>\n<h2 id=\"原因及解决\"><a href=\"#原因及解决\" class=\"headerlink\" title=\"原因及解决\"></a>原因及解决</h2><p>问题代码在这里：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> useFormModal = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [visiable, setVisiable] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [loading, setLoading] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">FormModal</span> = (<span class=\"params\">slotProps: T</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Modal</span>  </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">visible</span>=<span class=\"string\">&#123;visiable&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">confirmLoading</span>=<span class=\"string\">&#123;loading&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                &gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>不管是调用setVisiable还是setLoading，都会导致 <code>const FormModal= ...</code>被重新执行一次，渲染后的弹窗不再是之前的弹窗了。</p>\n<p>因此只要能够保持FormModal函数实例，就可以解决这个问题。但如果我们使用<code>useCallback</code>或者<code>useMemo</code>：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> const <span class=\"attr\">FormModal</span> = () =&gt;&#123;&#125;</span><br><span class=\"line\">return &#123;</span><br><span class=\"line\">    FormModal: useCallback(FormModal,<span class=\"section\">[]</span>),</span><br><span class=\"line\">    open,</span><br><span class=\"line\">  &#125;<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>这么写会导致组件完全不更新，因此我们还需将</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"selector-attr\">[visiable, setVisiable]</span> = <span class=\"built_in\">useState</span>(false);</span><br><span class=\"line\">const <span class=\"selector-attr\">[loading, setLoading]</span> = <span class=\"built_in\">useState</span>(false);</span><br></pre></td></tr></table></figure>\n\n<p>放到FormModal内。而对外如何开放打开弹窗的api呢？用ref</p>\n<h3 id=\"useRef、forwardRef和useImperativeHandle\"><a href=\"#useRef、forwardRef和useImperativeHandle\" class=\"headerlink\" title=\"useRef、forwardRef和useImperativeHandle\"></a>useRef、forwardRef和useImperativeHandle</h3><ul>\n<li><p>首先是用useRef创建一个ref指向FormModal <img src=\"/../imgs/1854cdecb8204130ae6ede9bf856cd64.png\" alt=\"image.png\"> 注意这里最好<strong>不要用createRef</strong>,后续文章再解释几个ref api的不同作用</p>\n</li>\n<li><p>这个ref还需要对外开放出去，使用useImperativeHandle给它增加open、close方法，供外部调用</p>\n</li>\n</ul>\n<p><img src=\"/../imgs/f75403f63adc4770be663b727db0dc72.png\" alt=\"image.png\"></p>\n<ul>\n<li>外部调用方式：</li>\n</ul>\n<p><img src=\"/../imgs/0b528985f9c84a71a7c80cbc171fc351.png\" alt=\"image.png\"></p>\n<p>open的参数可以作为表单组件的初始props，是可选的。</p>\n<p>代码比较简单，但是类型定义有些复杂，整体见代码参考：</p>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><p>useFormModal.tsx</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ModalRefType</span>&lt;T&gt; = &#123; <span class=\"attr\">open</span>: <span class=\"function\">(<span class=\"params\">initProp?: Partial&lt;T&gt;</span>) =&gt;</span> <span class=\"built_in\">void</span>; <span class=\"attr\">close</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span> &#125; | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> useFormModal = <span class=\"keyword\">function</span> &lt;T&gt;(<span class=\"attr\">modalProps</span>: <span class=\"title class_\">Partial</span>&lt;<span class=\"title class_\">ModalProps</span>&gt;, <span class=\"title class_\">Slot</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;T&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> modalRef = useRef&lt;<span class=\"title class_\">ModalRefType</span>&lt;T&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FormModal</span> = forwardRef&lt;<span class=\"title class_\">ModalRefType</span>&lt;T&gt;, T&gt;(<span class=\"function\">(<span class=\"params\">slotProps, mRef</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [visiable, setVisiable] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [loading, setLoading] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [slotInitProp, setSlotInitProp] = useState&lt;<span class=\"title class_\">Partial</span>&lt;T&gt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">open</span> = (<span class=\"params\">initProp?: Partial&lt;T&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (initProp) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setSlotInitProp</span>(initProp);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">close</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">useImperativeHandle</span>(mRef, <span class=\"function\">() =&gt;</span> (&#123; open, close &#125;));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">onCancel</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"title function_\">close</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formRef = <span class=\"title class_\">React</span>.<span class=\"property\">useRef</span>&lt;<span class=\"title class_\">FormInstance</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">ok</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      formRef.<span class=\"property\">current</span>?.<span class=\"title function_\">submit</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Modal</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onCancel</span>=<span class=\"string\">&#123;onCancel&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;ok&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">visible</span>=<span class=\"string\">&#123;visiable&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">wrapClassName</span>=<span class=\"string\">&quot;modal-wrap&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">okText</span>=<span class=\"string\">&quot;提交&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">cancelButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">okButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">confirmLoading</span>=<span class=\"string\">&#123;loading&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">width</span>=<span class=\"string\">&#123;600&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &#123;<span class=\"attr\">...modalProps</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Slot</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">ref</span>=<span class=\"string\">&#123;formRef&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          &#123;<span class=\"attr\">...slotProps</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          &#123;<span class=\"attr\">...slotInitProp</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">afterSubmit</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            setLoading(false);</span></span><br><span class=\"line\"><span class=\"language-xml\">            close();</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          beforeSubmit=&#123;() =&gt; setLoading(true)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">FormModal</span>: <span class=\"title function_\">useCallback</span>(<span class=\"function\">(<span class=\"params\">props: PropsWithoutRef&lt;T&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">FormModal</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;modalRef&#125;</span> &#123;<span class=\"attr\">...props</span>&#125; /&gt;</span></span>;</span><br><span class=\"line\">      <span class=\"comment\">// eslint-disable-next-line react-hooks/exhaustive-deps</span></span><br><span class=\"line\">    &#125;, []),</span><br><span class=\"line\">    modalRef,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>TestPage.tsx</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">TestPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; modalRef, <span class=\"title class_\">FormModal</span>: <span class=\"title class_\">UserModal</span> &#125; = <span class=\"title function_\">useFormModal</span>(</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;新建用户&#x27;</span> &#125;,</span><br><span class=\"line\">    <span class=\"title class_\">React</span>.<span class=\"title function_\">forwardRef</span>(<span class=\"title class_\">UserForm</span>),</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>modalRef.current?.open(&#123;depart:1&#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          新增</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">UserModal</span>  /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","length":6592,"excerpt":"","more":"<p>这是我参与11月更文挑战的第19天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<p>接上文，之前介绍了useModal的简单封装思路，但是这种方法有一个副作用：弹窗的关闭的动效没了。如果说这可以勉强接受的话，那么再看下面这个效果：</p>\n<p>加了一个confirmLoading的效果，弹窗先关闭，又开启。</p>\n<p><img src=\"/../imgs/29b6b15893e049a78bcfd9dababd7be7.png\" alt=\"modal-loading.gif\"> 代码如下： TestPage.tsx</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">TestPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;open,<span class=\"title class_\">FormModal</span>: <span class=\"title class_\">UserModal</span>&#125; = <span class=\"title function_\">useFormModal</span>(&#123;<span class=\"attr\">title</span>:<span class=\"string\">&#x27;新建用户&#x27;</span>&#125;,<span class=\"title class_\">React</span>.<span class=\"title function_\">forwardRef</span>(<span class=\"title class_\">UserForm</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;open&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          新增</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">UserModal</span> <span class=\"attr\">depart</span>=<span class=\"string\">&#123;1&#125;</span>   /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>useFormModal.tsx</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> useFormModal = <span class=\"keyword\">function</span> &lt;T&gt;(<span class=\"attr\">modalProps</span>: <span class=\"title class_\">ModalProps</span>, <span class=\"title class_\">Slot</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;T&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [visiable, setVisiable] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [loading, setLoading] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">open</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">close</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">FormModal</span> = (<span class=\"params\">slotProps: T</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">onCancel</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"title function_\">close</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = <span class=\"title class_\">React</span>.<span class=\"property\">useRef</span>&lt;<span class=\"title class_\">FormInstance</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">ok</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      ref.<span class=\"property\">current</span>?.<span class=\"title function_\">submit</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Modal</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onCancel</span>=<span class=\"string\">&#123;onCancel&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;ok&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">visible</span>=<span class=\"string\">&#123;visiable&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">wrapClassName</span>=<span class=\"string\">&quot;modal-wrap&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">okText</span>=<span class=\"string\">&quot;提交&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">cancelButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">okButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">confirmLoading</span>=<span class=\"string\">&#123;loading&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">width</span>=<span class=\"string\">&#123;600&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &#123;<span class=\"attr\">...modalProps</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Slot</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          &#123;<span class=\"attr\">...slotProps</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">afterSubmit</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            setLoading(false);</span></span><br><span class=\"line\"><span class=\"language-xml\">            close();</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          beforeSubmit=&#123;() =&gt; setLoading(true)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">FormModal</span>,</span><br><span class=\"line\">    open,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> useFormModal;</span><br></pre></td></tr></table></figure>\n\n<p>UserForm.tsx</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">UserFormPropsType</span> &#123;</span><br><span class=\"line\">  depart?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  beforeSubmit?: <span class=\"function\">(<span class=\"params\">values: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  afterSubmit?: <span class=\"function\">(<span class=\"params\">values: <span class=\"built_in\">any</span>, form: FormInstance&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">UserForm</span> = (<span class=\"params\">props: React.PropsWithChildren&lt;UserFormPropsType&gt;, ref?: React.ForwardedRef&lt;FormInstance&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [form] = <span class=\"title class_\">Form</span>.<span class=\"title function_\">useForm</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onSubmit</span> = <span class=\"keyword\">async</span> (<span class=\"params\">values: <span class=\"built_in\">any</span></span>) =&gt; &#123;</span><br><span class=\"line\">    props.<span class=\"property\">beforeSubmit</span>?.(values);</span><br><span class=\"line\">    <span class=\"comment\">// 模拟请求</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(r, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    props.<span class=\"property\">afterSubmit</span>?.(values, form);</span><br><span class=\"line\">    message.<span class=\"title function_\">success</span>(<span class=\"string\">&#x27;操作完成~&#x27;</span>)</span><br><span class=\"line\">    form.<span class=\"title function_\">resetFields</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Form</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onFinish</span>=<span class=\"string\">&#123;onSubmit&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">form</span>=<span class=\"string\">&#123;form&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">labelCol</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">span:</span> <span class=\"attr\">4</span> &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">wrapperCol</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">span:</span> <span class=\"attr\">16</span> &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;用户名&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">name</span>=<span class=\"string\">&quot;uname&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span>  <span class=\"attr\">username</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;用户邮箱&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">name</span>=<span class=\"string\">&quot;mail&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span> <span class=\"attr\">mail</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;部门&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">name</span>=<span class=\"string\">&quot;depart&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span> <span class=\"attr\">depart</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">initialValue</span>=<span class=\"string\">&#123;props.depart&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;1&#125;</span>&gt;</span>市场部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;2&#125;</span>&gt;</span>财务部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;3&#125;</span>&gt;</span>研发部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这两个bug的原因都是一样的</p>\n<h2 id=\"原因及解决\"><a href=\"#原因及解决\" class=\"headerlink\" title=\"原因及解决\"></a>原因及解决</h2><p>问题代码在这里：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> useFormModal = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [visiable, setVisiable] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [loading, setLoading] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">FormModal</span> = (<span class=\"params\">slotProps: T</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Modal</span>  </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">visible</span>=<span class=\"string\">&#123;visiable&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">confirmLoading</span>=<span class=\"string\">&#123;loading&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                &gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>不管是调用setVisiable还是setLoading，都会导致 <code>const FormModal= ...</code>被重新执行一次，渲染后的弹窗不再是之前的弹窗了。</p>\n<p>因此只要能够保持FormModal函数实例，就可以解决这个问题。但如果我们使用<code>useCallback</code>或者<code>useMemo</code>：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> const <span class=\"attr\">FormModal</span> = () =&gt;&#123;&#125;</span><br><span class=\"line\">return &#123;</span><br><span class=\"line\">    FormModal: useCallback(FormModal,<span class=\"section\">[]</span>),</span><br><span class=\"line\">    open,</span><br><span class=\"line\">  &#125;<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>这么写会导致组件完全不更新，因此我们还需将</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"selector-attr\">[visiable, setVisiable]</span> = <span class=\"built_in\">useState</span>(false);</span><br><span class=\"line\">const <span class=\"selector-attr\">[loading, setLoading]</span> = <span class=\"built_in\">useState</span>(false);</span><br></pre></td></tr></table></figure>\n\n<p>放到FormModal内。而对外如何开放打开弹窗的api呢？用ref</p>\n<h3 id=\"useRef、forwardRef和useImperativeHandle\"><a href=\"#useRef、forwardRef和useImperativeHandle\" class=\"headerlink\" title=\"useRef、forwardRef和useImperativeHandle\"></a>useRef、forwardRef和useImperativeHandle</h3><ul>\n<li><p>首先是用useRef创建一个ref指向FormModal <img src=\"/../imgs/1854cdecb8204130ae6ede9bf856cd64.png\" alt=\"image.png\"> 注意这里最好<strong>不要用createRef</strong>,后续文章再解释几个ref api的不同作用</p>\n</li>\n<li><p>这个ref还需要对外开放出去，使用useImperativeHandle给它增加open、close方法，供外部调用</p>\n</li>\n</ul>\n<p><img src=\"/../imgs/f75403f63adc4770be663b727db0dc72.png\" alt=\"image.png\"></p>\n<ul>\n<li>外部调用方式：</li>\n</ul>\n<p><img src=\"/../imgs/0b528985f9c84a71a7c80cbc171fc351.png\" alt=\"image.png\"></p>\n<p>open的参数可以作为表单组件的初始props，是可选的。</p>\n<p>代码比较简单，但是类型定义有些复杂，整体见代码参考：</p>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><p>useFormModal.tsx</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ModalRefType</span>&lt;T&gt; = &#123; <span class=\"attr\">open</span>: <span class=\"function\">(<span class=\"params\">initProp?: Partial&lt;T&gt;</span>) =&gt;</span> <span class=\"built_in\">void</span>; <span class=\"attr\">close</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span> &#125; | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> useFormModal = <span class=\"keyword\">function</span> &lt;T&gt;(<span class=\"attr\">modalProps</span>: <span class=\"title class_\">Partial</span>&lt;<span class=\"title class_\">ModalProps</span>&gt;, <span class=\"title class_\">Slot</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;T&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> modalRef = useRef&lt;<span class=\"title class_\">ModalRefType</span>&lt;T&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FormModal</span> = forwardRef&lt;<span class=\"title class_\">ModalRefType</span>&lt;T&gt;, T&gt;(<span class=\"function\">(<span class=\"params\">slotProps, mRef</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [visiable, setVisiable] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [loading, setLoading] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [slotInitProp, setSlotInitProp] = useState&lt;<span class=\"title class_\">Partial</span>&lt;T&gt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">open</span> = (<span class=\"params\">initProp?: Partial&lt;T&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (initProp) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setSlotInitProp</span>(initProp);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">close</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">useImperativeHandle</span>(mRef, <span class=\"function\">() =&gt;</span> (&#123; open, close &#125;));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">onCancel</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"title function_\">close</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formRef = <span class=\"title class_\">React</span>.<span class=\"property\">useRef</span>&lt;<span class=\"title class_\">FormInstance</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">ok</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      formRef.<span class=\"property\">current</span>?.<span class=\"title function_\">submit</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Modal</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onCancel</span>=<span class=\"string\">&#123;onCancel&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;ok&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">visible</span>=<span class=\"string\">&#123;visiable&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">wrapClassName</span>=<span class=\"string\">&quot;modal-wrap&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">okText</span>=<span class=\"string\">&quot;提交&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">cancelButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">okButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">confirmLoading</span>=<span class=\"string\">&#123;loading&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">width</span>=<span class=\"string\">&#123;600&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &#123;<span class=\"attr\">...modalProps</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Slot</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">ref</span>=<span class=\"string\">&#123;formRef&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          &#123;<span class=\"attr\">...slotProps</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          &#123;<span class=\"attr\">...slotInitProp</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">afterSubmit</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            setLoading(false);</span></span><br><span class=\"line\"><span class=\"language-xml\">            close();</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          beforeSubmit=&#123;() =&gt; setLoading(true)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">FormModal</span>: <span class=\"title function_\">useCallback</span>(<span class=\"function\">(<span class=\"params\">props: PropsWithoutRef&lt;T&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">FormModal</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;modalRef&#125;</span> &#123;<span class=\"attr\">...props</span>&#125; /&gt;</span></span>;</span><br><span class=\"line\">      <span class=\"comment\">// eslint-disable-next-line react-hooks/exhaustive-deps</span></span><br><span class=\"line\">    &#125;, []),</span><br><span class=\"line\">    modalRef,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>TestPage.tsx</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">TestPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; modalRef, <span class=\"title class_\">FormModal</span>: <span class=\"title class_\">UserModal</span> &#125; = <span class=\"title function_\">useFormModal</span>(</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;新建用户&#x27;</span> &#125;,</span><br><span class=\"line\">    <span class=\"title class_\">React</span>.<span class=\"title function_\">forwardRef</span>(<span class=\"title class_\">UserForm</span>),</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>modalRef.current?.open(&#123;depart:1&#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          新增</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">UserModal</span>  /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"在React中优雅地使用弹窗——withModal","date":"2021-11-16T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第17天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n如何快速地写弹窗\n--------\n\n如果有这么一个需求：点击新建按钮，弹出表单并提交，你会怎么写？\n\n![image.png](../imgs/32f696318ea74823ae25ef6f8c51453b.png) 很简单，六七十行代码就实现了。\n\n```tsx\nimport { Button, Form, Input, Modal, Select } from 'antd';\nimport './style.less';\nimport { useState } from 'react';\n\nexport default function TestPage() {\n  const [visiable, setVisiable] = useState(false);\n  const [form] = Form.useForm();\n  // 打开弹窗\n  const open = () => {\n    setVisiable(true);\n  };\n  //关闭弹窗\n  const close = () => {\n    setVisiable(false);\n  };\n  //点击确定提交表单\n  const submit = ()=>{\n    form.submit()\n  }\n  // 提交后获取表单数据，请求接口，重置表单并关闭\n  const onSubmit = (values) =>{\n    console.log(values)\n    //await  fetch ...\n    form.resetFields();\n    close()\n  }\n  return (\n    <div>\n      <div className=\"text-center\">\n        <Button type=\"primary\" onClick={open}>\n          新建\n        </Button>\n      </div>\n      <Modal \n          wrapClassName=\"modal-wrap\"\n          okText=\"提交\"\n          cancelButtonProps={{ shape: 'round' }}\n          okButtonProps={{ shape: 'round' }}\n          width={600}\n          visible={visiable}\n          title=\"新建用户\" \n          onCancel={close} \n          onOk={submit}\n      >\n        <div className=\"form\">\n          <Form form={form} labelCol={{ span: 4 }} wrapperCol={{ span: 16 }} onFinish={onSubmit}>\n            <Form.Item\n              label=\"用户名\"\n              name=\"username\"\n              rules={[{ required: true, message: 'Please input  username!' }]}\n            >\n              <Input />\n            </Form.Item>\n            <Form.Item\n              label=\"用户邮箱\"\n              name=\"mail\"\n              rules={[{ required: true, message: 'Please input mail!' }]}\n            >\n              <Input />\n            </Form.Item>\n            <Form.Item\n              label=\"部门\"\n              name=\"depart\"\n              rules={[{ required: true, message: 'Please input depart!' }]}\n            >\n              <Select>\n                <Select.Option value={1}>市场部</Select.Option>\n                <Select.Option value={2}>财务部</Select.Option>\n                <Select.Option value={3}>研发部</Select.Option>\n              </Select>\n            </Form.Item>\n          </Form>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n```\n\n有问题吗？没有问题。\n\n但是现在又来了一个需求，**有10个地方都需要打开这个新建用户的弹窗**。怎么办？copy呗！\n\n这么做有问题吗？没有问题。\n\n这时候又来了个需求：**还需要一个新建部门的表单弹窗**。怎么办？继续copy呗！\n\n弹窗的标题改一下，表单的字段和提交改一下。\n\ncopy这么多有关系吗？没有关系。因为快啊。\n\n可是现在又来了个需求：新建用户的表单要加一个字段\n\n那么问题来了！我怎么知道我copy的代码分散在哪些文件？会不会改漏？\n\n这时候就想起来了，我们还有一个杀手锏，叫**复用**\n\n那么问题来了，怎么复用？\n\n组件复用复用三部曲\n---------\n\n**组件复用**，看起来简单，但很多人要么起来简单，用起来痛苦；要么做起来痛苦，用起来复杂。\n\n就拿复用这个新建用户的弹窗来说吧，首先一个问题是**你要复用什么**？\n\n### 理清对象，确定复用内容\n\n我们这里有三个对象:新建用户页面`Page`，打开弹窗的`Button`，弹窗`Modal`，表单`From`， 这三个对象分别有一些功能：\n\n*   Page:提供弹窗打开关闭的功能（open/close），提供触发表单提交的方法（submit），提供form对象（Form.useForm()）、接收表单输出并提交server\n*   Button: 打开弹窗（调用open）\n*   Modal: 提供点击取消和确定的事件（onCancel/onOk）\n*   Form: 表单校验，提供onFinish事件输出表单值\n\n这里最复杂、可变的就是弹窗和弹窗的内容，因此最需要复用的就是弹窗和它的内容（表单）。\n\n那么阻碍我们的是什么呢？\n\nPage需要form对象来提交Form，Form提交后需要关闭Modal。这些行为到底归属谁？\n\n### 确定边界\n\n这里最简单的对象就是`Button`了，它是个傻子，只有一个onClick动作，至于干啥，全看页面。\n\n`Modal`也不复杂，它提供取消和确定的回调，至于内容也是外部提供的。我们复用一个Modal，就是用它的样式配置\n\n`Form`:我们复用一个表单，自然也是希望能复用这个表单的提交逻辑。因此，除了表单校验外，它还应该承担请求server的职责。\n\n### 拆离组件\n\n### 封装useModal，拆离Modal:\n\nuseModal.tsx:\n\n```tsx\nimport { Modal } from 'antd';\nimport type { ModalProps } from 'antd';\nimport * as React from 'react';\nimport type { MutableRefObject } from 'react';\ninterface PropsType<T> extends Omit<ModalProps, 'onOk'> {\n  onOk: (ref: MutableRefObject<T | undefined>) => void;\n}\nfunction withModal<T = any>(modalProps?: ModalProps, slotProps?: any) {\n  return function (Slot: React.FC<any>) {\n    return (props?: PropsType<T>) => {\n      const ref = React.useRef<T>();\n      return (\n        <div>\n          <Modal\n            wrapClassName=\"modal-wrap\"\n            okText=\"提交\"\n            cancelButtonProps={{ shape: 'round' }}\n            okButtonProps={{ shape: 'round' }}\n            width={600}\n            {...modalProps}\n            {...props}\n            onOk={() => props?.onOk?.(ref)}\n          >\n            <Slot {...slotProps} ref={ref} close={props?.onCancel} />\n          </Modal>\n        </div>\n      );\n    };\n  };\n}\nexport default withModal;\n\n```\n\n### 拆离表单，暴露ref\n\nUserForm.tsx:\n\n```tsx\nimport { Form, Input, Select } from 'antd';\nimport type { FormInstance } from 'antd/es/form';\nimport React from 'react';\ntype PropsType = React.PropsWithChildren<{\n  afterSubmit?: (values: any, form: FormInstance<any>) => void;\n}>;\nconst UserForm = (props: PropsType, ref?: React.ForwardedRef<FormInstance>) => {\n  const [form] = Form.useForm();\n  // 提交后获取表单数据，请求接口，重置表单并关闭\n  const onSubmit = (values: any) => {\n    console.log(values);\n    //await  fetch ...\n    form.resetFields();\n    props.afterSubmit?.(values, form);\n  };\n  return (\n    <div className=\"form\">\n      <Form\n        onFinish={onSubmit}\n        ref={ref}\n        form={form}\n        labelCol={{ span: 4 }}\n        wrapperCol={{ span: 16 }}\n      >\n        <Form.Item\n          label=\"用户名\"\n          name=\"username\"\n          rules={[{ required: true, message: 'Please input  username!' }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"用户邮箱\"\n          name=\"mail\"\n          rules={[{ required: true, message: 'Please input mail!' }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"部门\"\n          name=\"depart\"\n          rules={[{ required: true, message: 'Please input depart!' }]}\n        >\n          <Select>\n            <Select.Option value={1}>市场部</Select.Option>\n            <Select.Option value={2}>财务部</Select.Option>\n            <Select.Option value={3}>研发部</Select.Option>\n          </Select>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\nexport default UserForm;\n\n```\n\n### forwardRef\n\n针对这里的特殊场景，form的提交由useModal控制，因此需要暴露form或ref；当然也可以由form自身提供submit按钮，并隐藏modal的footer，但这么做当表单较多时并不划算。\n\n使用useModal：\n\n```ini\n const UserFormModal = withModal({ 弹窗的props }, { 弹窗内容组件（表单）的props })(React.forwardRef(UserForm));\n```\n\n最后再来看效果，这个页面少了一半的代码\n\n```javascript\nexport default function TestPage() {\n  const [visiable, setVisiable] = useState(false);\n  // 打开弹窗\n  const open = () => {\n    setVisiable(true);\n  };\n  //关闭弹窗\n  const close = () => {\n    setVisiable(false);\n  };\n  //点击确定提交表单\n  const submit = (ref: MutableRefObject<FormInstance>) => {\n    ref.current.submit();\n  };\n  const afterSubmit = () => {\n    close();\n  };\n  const UserFormModal = withModal({ title: '新建用户' }, { afterSubmit })(React.forwardRef(UserForm));\n\n  return (\n    <div>\n      <div className=\"text-center\">\n        <Button type=\"primary\" onClick={open}>\n          新建\n        </Button>\n      </div>\n      <UserFormModal visible={visiable} onCancel={close} onOk={submit} />\n    </div>\n  );\n}\n```\n\n拥抱hooks\n-------\n\n上述的做法是典型的HOC思想，如果我们用hooks，上面的代码还能再减掉50%，下一篇将介绍如何封装useModal","source":"_posts/在React中优雅地使用弹窗——withModal.md","raw":"---\n title: \"在React中优雅地使用弹窗——withModal\"\n date: 2021-11-17\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第17天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n如何快速地写弹窗\n--------\n\n如果有这么一个需求：点击新建按钮，弹出表单并提交，你会怎么写？\n\n![image.png](../imgs/32f696318ea74823ae25ef6f8c51453b.png) 很简单，六七十行代码就实现了。\n\n```tsx\nimport { Button, Form, Input, Modal, Select } from 'antd';\nimport './style.less';\nimport { useState } from 'react';\n\nexport default function TestPage() {\n  const [visiable, setVisiable] = useState(false);\n  const [form] = Form.useForm();\n  // 打开弹窗\n  const open = () => {\n    setVisiable(true);\n  };\n  //关闭弹窗\n  const close = () => {\n    setVisiable(false);\n  };\n  //点击确定提交表单\n  const submit = ()=>{\n    form.submit()\n  }\n  // 提交后获取表单数据，请求接口，重置表单并关闭\n  const onSubmit = (values) =>{\n    console.log(values)\n    //await  fetch ...\n    form.resetFields();\n    close()\n  }\n  return (\n    <div>\n      <div className=\"text-center\">\n        <Button type=\"primary\" onClick={open}>\n          新建\n        </Button>\n      </div>\n      <Modal \n          wrapClassName=\"modal-wrap\"\n          okText=\"提交\"\n          cancelButtonProps={{ shape: 'round' }}\n          okButtonProps={{ shape: 'round' }}\n          width={600}\n          visible={visiable}\n          title=\"新建用户\" \n          onCancel={close} \n          onOk={submit}\n      >\n        <div className=\"form\">\n          <Form form={form} labelCol={{ span: 4 }} wrapperCol={{ span: 16 }} onFinish={onSubmit}>\n            <Form.Item\n              label=\"用户名\"\n              name=\"username\"\n              rules={[{ required: true, message: 'Please input  username!' }]}\n            >\n              <Input />\n            </Form.Item>\n            <Form.Item\n              label=\"用户邮箱\"\n              name=\"mail\"\n              rules={[{ required: true, message: 'Please input mail!' }]}\n            >\n              <Input />\n            </Form.Item>\n            <Form.Item\n              label=\"部门\"\n              name=\"depart\"\n              rules={[{ required: true, message: 'Please input depart!' }]}\n            >\n              <Select>\n                <Select.Option value={1}>市场部</Select.Option>\n                <Select.Option value={2}>财务部</Select.Option>\n                <Select.Option value={3}>研发部</Select.Option>\n              </Select>\n            </Form.Item>\n          </Form>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n```\n\n有问题吗？没有问题。\n\n但是现在又来了一个需求，**有10个地方都需要打开这个新建用户的弹窗**。怎么办？copy呗！\n\n这么做有问题吗？没有问题。\n\n这时候又来了个需求：**还需要一个新建部门的表单弹窗**。怎么办？继续copy呗！\n\n弹窗的标题改一下，表单的字段和提交改一下。\n\ncopy这么多有关系吗？没有关系。因为快啊。\n\n可是现在又来了个需求：新建用户的表单要加一个字段\n\n那么问题来了！我怎么知道我copy的代码分散在哪些文件？会不会改漏？\n\n这时候就想起来了，我们还有一个杀手锏，叫**复用**\n\n那么问题来了，怎么复用？\n\n组件复用复用三部曲\n---------\n\n**组件复用**，看起来简单，但很多人要么起来简单，用起来痛苦；要么做起来痛苦，用起来复杂。\n\n就拿复用这个新建用户的弹窗来说吧，首先一个问题是**你要复用什么**？\n\n### 理清对象，确定复用内容\n\n我们这里有三个对象:新建用户页面`Page`，打开弹窗的`Button`，弹窗`Modal`，表单`From`， 这三个对象分别有一些功能：\n\n*   Page:提供弹窗打开关闭的功能（open/close），提供触发表单提交的方法（submit），提供form对象（Form.useForm()）、接收表单输出并提交server\n*   Button: 打开弹窗（调用open）\n*   Modal: 提供点击取消和确定的事件（onCancel/onOk）\n*   Form: 表单校验，提供onFinish事件输出表单值\n\n这里最复杂、可变的就是弹窗和弹窗的内容，因此最需要复用的就是弹窗和它的内容（表单）。\n\n那么阻碍我们的是什么呢？\n\nPage需要form对象来提交Form，Form提交后需要关闭Modal。这些行为到底归属谁？\n\n### 确定边界\n\n这里最简单的对象就是`Button`了，它是个傻子，只有一个onClick动作，至于干啥，全看页面。\n\n`Modal`也不复杂，它提供取消和确定的回调，至于内容也是外部提供的。我们复用一个Modal，就是用它的样式配置\n\n`Form`:我们复用一个表单，自然也是希望能复用这个表单的提交逻辑。因此，除了表单校验外，它还应该承担请求server的职责。\n\n### 拆离组件\n\n### 封装useModal，拆离Modal:\n\nuseModal.tsx:\n\n```tsx\nimport { Modal } from 'antd';\nimport type { ModalProps } from 'antd';\nimport * as React from 'react';\nimport type { MutableRefObject } from 'react';\ninterface PropsType<T> extends Omit<ModalProps, 'onOk'> {\n  onOk: (ref: MutableRefObject<T | undefined>) => void;\n}\nfunction withModal<T = any>(modalProps?: ModalProps, slotProps?: any) {\n  return function (Slot: React.FC<any>) {\n    return (props?: PropsType<T>) => {\n      const ref = React.useRef<T>();\n      return (\n        <div>\n          <Modal\n            wrapClassName=\"modal-wrap\"\n            okText=\"提交\"\n            cancelButtonProps={{ shape: 'round' }}\n            okButtonProps={{ shape: 'round' }}\n            width={600}\n            {...modalProps}\n            {...props}\n            onOk={() => props?.onOk?.(ref)}\n          >\n            <Slot {...slotProps} ref={ref} close={props?.onCancel} />\n          </Modal>\n        </div>\n      );\n    };\n  };\n}\nexport default withModal;\n\n```\n\n### 拆离表单，暴露ref\n\nUserForm.tsx:\n\n```tsx\nimport { Form, Input, Select } from 'antd';\nimport type { FormInstance } from 'antd/es/form';\nimport React from 'react';\ntype PropsType = React.PropsWithChildren<{\n  afterSubmit?: (values: any, form: FormInstance<any>) => void;\n}>;\nconst UserForm = (props: PropsType, ref?: React.ForwardedRef<FormInstance>) => {\n  const [form] = Form.useForm();\n  // 提交后获取表单数据，请求接口，重置表单并关闭\n  const onSubmit = (values: any) => {\n    console.log(values);\n    //await  fetch ...\n    form.resetFields();\n    props.afterSubmit?.(values, form);\n  };\n  return (\n    <div className=\"form\">\n      <Form\n        onFinish={onSubmit}\n        ref={ref}\n        form={form}\n        labelCol={{ span: 4 }}\n        wrapperCol={{ span: 16 }}\n      >\n        <Form.Item\n          label=\"用户名\"\n          name=\"username\"\n          rules={[{ required: true, message: 'Please input  username!' }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"用户邮箱\"\n          name=\"mail\"\n          rules={[{ required: true, message: 'Please input mail!' }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"部门\"\n          name=\"depart\"\n          rules={[{ required: true, message: 'Please input depart!' }]}\n        >\n          <Select>\n            <Select.Option value={1}>市场部</Select.Option>\n            <Select.Option value={2}>财务部</Select.Option>\n            <Select.Option value={3}>研发部</Select.Option>\n          </Select>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\nexport default UserForm;\n\n```\n\n### forwardRef\n\n针对这里的特殊场景，form的提交由useModal控制，因此需要暴露form或ref；当然也可以由form自身提供submit按钮，并隐藏modal的footer，但这么做当表单较多时并不划算。\n\n使用useModal：\n\n```ini\n const UserFormModal = withModal({ 弹窗的props }, { 弹窗内容组件（表单）的props })(React.forwardRef(UserForm));\n```\n\n最后再来看效果，这个页面少了一半的代码\n\n```javascript\nexport default function TestPage() {\n  const [visiable, setVisiable] = useState(false);\n  // 打开弹窗\n  const open = () => {\n    setVisiable(true);\n  };\n  //关闭弹窗\n  const close = () => {\n    setVisiable(false);\n  };\n  //点击确定提交表单\n  const submit = (ref: MutableRefObject<FormInstance>) => {\n    ref.current.submit();\n  };\n  const afterSubmit = () => {\n    close();\n  };\n  const UserFormModal = withModal({ title: '新建用户' }, { afterSubmit })(React.forwardRef(UserForm));\n\n  return (\n    <div>\n      <div className=\"text-center\">\n        <Button type=\"primary\" onClick={open}>\n          新建\n        </Button>\n      </div>\n      <UserFormModal visible={visiable} onCancel={close} onOk={submit} />\n    </div>\n  );\n}\n```\n\n拥抱hooks\n-------\n\n上述的做法是典型的HOC思想，如果我们用hooks，上面的代码还能再减掉50%，下一篇将介绍如何封装useModal","slug":"在React中优雅地使用弹窗——withModal","published":1,"updated":"2024-04-04T15:27:03.491Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li1006vhajfeibk30lp","content":"<p>这是我参与11月更文挑战的第17天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"如何快速地写弹窗\"><a href=\"#如何快速地写弹窗\" class=\"headerlink\" title=\"如何快速地写弹窗\"></a>如何快速地写弹窗</h2><p>如果有这么一个需求：点击新建按钮，弹出表单并提交，你会怎么写？</p>\n<p><img src=\"/../imgs/32f696318ea74823ae25ef6f8c51453b.png\" alt=\"image.png\"> 很简单，六七十行代码就实现了。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Button</span>, <span class=\"title class_\">Form</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">Modal</span>, <span class=\"title class_\">Select</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./style.less&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">TestPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [visiable, setVisiable] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [form] = <span class=\"title class_\">Form</span>.<span class=\"title function_\">useForm</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 打开弹窗</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">open</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//关闭弹窗</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">close</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//点击确定提交表单</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">submit</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    form.<span class=\"title function_\">submit</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 提交后获取表单数据，请求接口，重置表单并关闭</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onSubmit</span> = (<span class=\"params\">values</span>) =&gt;&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(values)</span><br><span class=\"line\">    <span class=\"comment\">//await  fetch ...</span></span><br><span class=\"line\">    form.<span class=\"title function_\">resetFields</span>();</span><br><span class=\"line\">    <span class=\"title function_\">close</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;open&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          新建</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Modal</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">wrapClassName</span>=<span class=\"string\">&quot;modal-wrap&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">okText</span>=<span class=\"string\">&quot;提交&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">cancelButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">okButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">width</span>=<span class=\"string\">&#123;600&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">visible</span>=<span class=\"string\">&#123;visiable&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">title</span>=<span class=\"string\">&quot;新建用户&quot;</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onCancel</span>=<span class=\"string\">&#123;close&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;submit&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Form</span> <span class=\"attr\">form</span>=<span class=\"string\">&#123;form&#125;</span> <span class=\"attr\">labelCol</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">span:</span> <span class=\"attr\">4</span> &#125;&#125; <span class=\"attr\">wrapperCol</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">span:</span> <span class=\"attr\">16</span> &#125;&#125; <span class=\"attr\">onFinish</span>=<span class=\"string\">&#123;onSubmit&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">label</span>=<span class=\"string\">&quot;用户名&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span>  <span class=\"attr\">username</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">label</span>=<span class=\"string\">&quot;用户邮箱&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">name</span>=<span class=\"string\">&quot;mail&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span> <span class=\"attr\">mail</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">label</span>=<span class=\"string\">&quot;部门&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">name</span>=<span class=\"string\">&quot;depart&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span> <span class=\"attr\">depart</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;1&#125;</span>&gt;</span>市场部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;2&#125;</span>&gt;</span>财务部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;3&#125;</span>&gt;</span>研发部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;/<span class=\"name\">Select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有问题吗？没有问题。</p>\n<p>但是现在又来了一个需求，<strong>有10个地方都需要打开这个新建用户的弹窗</strong>。怎么办？copy呗！</p>\n<p>这么做有问题吗？没有问题。</p>\n<p>这时候又来了个需求：<strong>还需要一个新建部门的表单弹窗</strong>。怎么办？继续copy呗！</p>\n<p>弹窗的标题改一下，表单的字段和提交改一下。</p>\n<p>copy这么多有关系吗？没有关系。因为快啊。</p>\n<p>可是现在又来了个需求：新建用户的表单要加一个字段</p>\n<p>那么问题来了！我怎么知道我copy的代码分散在哪些文件？会不会改漏？</p>\n<p>这时候就想起来了，我们还有一个杀手锏，叫<strong>复用</strong></p>\n<p>那么问题来了，怎么复用？</p>\n<h2 id=\"组件复用复用三部曲\"><a href=\"#组件复用复用三部曲\" class=\"headerlink\" title=\"组件复用复用三部曲\"></a>组件复用复用三部曲</h2><p><strong>组件复用</strong>，看起来简单，但很多人要么起来简单，用起来痛苦；要么做起来痛苦，用起来复杂。</p>\n<p>就拿复用这个新建用户的弹窗来说吧，首先一个问题是<strong>你要复用什么</strong>？</p>\n<h3 id=\"理清对象，确定复用内容\"><a href=\"#理清对象，确定复用内容\" class=\"headerlink\" title=\"理清对象，确定复用内容\"></a>理清对象，确定复用内容</h3><p>我们这里有三个对象:新建用户页面<code>Page</code>，打开弹窗的<code>Button</code>，弹窗<code>Modal</code>，表单<code>From</code>， 这三个对象分别有一些功能：</p>\n<ul>\n<li>Page:提供弹窗打开关闭的功能（open&#x2F;close），提供触发表单提交的方法（submit），提供form对象（Form.useForm()）、接收表单输出并提交server</li>\n<li>Button: 打开弹窗（调用open）</li>\n<li>Modal: 提供点击取消和确定的事件（onCancel&#x2F;onOk）</li>\n<li>Form: 表单校验，提供onFinish事件输出表单值</li>\n</ul>\n<p>这里最复杂、可变的就是弹窗和弹窗的内容，因此最需要复用的就是弹窗和它的内容（表单）。</p>\n<p>那么阻碍我们的是什么呢？</p>\n<p>Page需要form对象来提交Form，Form提交后需要关闭Modal。这些行为到底归属谁？</p>\n<h3 id=\"确定边界\"><a href=\"#确定边界\" class=\"headerlink\" title=\"确定边界\"></a>确定边界</h3><p>这里最简单的对象就是<code>Button</code>了，它是个傻子，只有一个onClick动作，至于干啥，全看页面。</p>\n<p><code>Modal</code>也不复杂，它提供取消和确定的回调，至于内容也是外部提供的。我们复用一个Modal，就是用它的样式配置</p>\n<p><code>Form</code>:我们复用一个表单，自然也是希望能复用这个表单的提交逻辑。因此，除了表单校验外，它还应该承担请求server的职责。</p>\n<h3 id=\"拆离组件\"><a href=\"#拆离组件\" class=\"headerlink\" title=\"拆离组件\"></a>拆离组件</h3><h3 id=\"封装useModal，拆离Modal\"><a href=\"#封装useModal，拆离Modal\" class=\"headerlink\" title=\"封装useModal，拆离Modal:\"></a>封装useModal，拆离Modal:</h3><p>useModal.tsx:</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Modal</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">ModalProps</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">MutableRefObject</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PropsType</span>&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">Omit</span>&lt;<span class=\"title class_\">ModalProps</span>, &#x27;onOk&#x27;&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">onOk</span>: <span class=\"function\">(<span class=\"params\">ref: MutableRefObject&lt;T | <span class=\"literal\">undefined</span>&gt;</span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> withModal&lt;T = <span class=\"built_in\">any</span>&gt;(modalProps?: <span class=\"title class_\">ModalProps</span>, slotProps?: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">Slot: React.FC&lt;<span class=\"built_in\">any</span>&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">props?: PropsType&lt;T&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ref = <span class=\"title class_\">React</span>.<span class=\"property\">useRef</span>&lt;T&gt;();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Modal</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">wrapClassName</span>=<span class=\"string\">&quot;modal-wrap&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">okText</span>=<span class=\"string\">&quot;提交&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">cancelButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">okButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">width</span>=<span class=\"string\">&#123;600&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &#123;<span class=\"attr\">...modalProps</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &#123;<span class=\"attr\">...props</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;()</span> =&gt;</span> props?.onOk?.(ref)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Slot</span> &#123;<span class=\"attr\">...slotProps</span>&#125; <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span> <span class=\"attr\">close</span>=<span class=\"string\">&#123;props?.onCancel&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withModal;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拆离表单，暴露ref\"><a href=\"#拆离表单，暴露ref\" class=\"headerlink\" title=\"拆离表单，暴露ref\"></a>拆离表单，暴露ref</h3><p>UserForm.tsx:</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Form</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">Select</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">FormInstance</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd/es/form&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PropsType</span> = <span class=\"title class_\">React</span>.<span class=\"property\">PropsWithChildren</span>&lt;&#123;</span><br><span class=\"line\">  afterSubmit?: <span class=\"function\">(<span class=\"params\">values: <span class=\"built_in\">any</span>, form: FormInstance&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;&gt;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">UserForm</span> = (<span class=\"params\">props: PropsType, ref?: React.ForwardedRef&lt;FormInstance&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [form] = <span class=\"title class_\">Form</span>.<span class=\"title function_\">useForm</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 提交后获取表单数据，请求接口，重置表单并关闭</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onSubmit</span> = (<span class=\"params\">values: <span class=\"built_in\">any</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(values);</span><br><span class=\"line\">    <span class=\"comment\">//await  fetch ...</span></span><br><span class=\"line\">    form.<span class=\"title function_\">resetFields</span>();</span><br><span class=\"line\">    props.<span class=\"property\">afterSubmit</span>?.(values, form);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Form</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onFinish</span>=<span class=\"string\">&#123;onSubmit&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">form</span>=<span class=\"string\">&#123;form&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">labelCol</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">span:</span> <span class=\"attr\">4</span> &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">wrapperCol</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">span:</span> <span class=\"attr\">16</span> &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;用户名&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span>  <span class=\"attr\">username</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;用户邮箱&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">name</span>=<span class=\"string\">&quot;mail&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span> <span class=\"attr\">mail</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;部门&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">name</span>=<span class=\"string\">&quot;depart&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span> <span class=\"attr\">depart</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;1&#125;</span>&gt;</span>市场部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;2&#125;</span>&gt;</span>财务部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;3&#125;</span>&gt;</span>研发部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UserForm</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"forwardRef\"><a href=\"#forwardRef\" class=\"headerlink\" title=\"forwardRef\"></a>forwardRef</h3><p>针对这里的特殊场景，form的提交由useModal控制，因此需要暴露form或ref；当然也可以由form自身提供submit按钮，并隐藏modal的footer，但这么做当表单较多时并不划算。</p>\n<p>使用useModal：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">UserFormModal</span> = withModal(&#123; 弹窗的props &#125;, &#123; 弹窗内容组件（表单）的props &#125;)(React.forwardRef(UserForm))<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后再来看效果，这个页面少了一半的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">TestPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [visiable, setVisiable] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 打开弹窗</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">open</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//关闭弹窗</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">close</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//点击确定提交表单</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">submit</span> = (<span class=\"params\">ref: MutableRefObject&lt;FormInstance&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">    ref.<span class=\"property\">current</span>.<span class=\"title function_\">submit</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">afterSubmit</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">close</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">UserFormModal</span> = <span class=\"title function_\">withModal</span>(&#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;新建用户&#x27;</span> &#125;, &#123; afterSubmit &#125;)(<span class=\"title class_\">React</span>.<span class=\"title function_\">forwardRef</span>(<span class=\"title class_\">UserForm</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;open&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          新建</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">UserFormModal</span> <span class=\"attr\">visible</span>=<span class=\"string\">&#123;visiable&#125;</span> <span class=\"attr\">onCancel</span>=<span class=\"string\">&#123;close&#125;</span> <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;submit&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拥抱hooks\"><a href=\"#拥抱hooks\" class=\"headerlink\" title=\"拥抱hooks\"></a>拥抱hooks</h2><p>上述的做法是典型的HOC思想，如果我们用hooks，上面的代码还能再减掉50%，下一篇将介绍如何封装useModal</p>\n","length":6933,"excerpt":"","more":"<p>这是我参与11月更文挑战的第17天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"如何快速地写弹窗\"><a href=\"#如何快速地写弹窗\" class=\"headerlink\" title=\"如何快速地写弹窗\"></a>如何快速地写弹窗</h2><p>如果有这么一个需求：点击新建按钮，弹出表单并提交，你会怎么写？</p>\n<p><img src=\"/../imgs/32f696318ea74823ae25ef6f8c51453b.png\" alt=\"image.png\"> 很简单，六七十行代码就实现了。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Button</span>, <span class=\"title class_\">Form</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">Modal</span>, <span class=\"title class_\">Select</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./style.less&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">TestPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [visiable, setVisiable] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [form] = <span class=\"title class_\">Form</span>.<span class=\"title function_\">useForm</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 打开弹窗</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">open</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//关闭弹窗</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">close</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//点击确定提交表单</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">submit</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    form.<span class=\"title function_\">submit</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 提交后获取表单数据，请求接口，重置表单并关闭</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onSubmit</span> = (<span class=\"params\">values</span>) =&gt;&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(values)</span><br><span class=\"line\">    <span class=\"comment\">//await  fetch ...</span></span><br><span class=\"line\">    form.<span class=\"title function_\">resetFields</span>();</span><br><span class=\"line\">    <span class=\"title function_\">close</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;open&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          新建</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Modal</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">wrapClassName</span>=<span class=\"string\">&quot;modal-wrap&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">okText</span>=<span class=\"string\">&quot;提交&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">cancelButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">okButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">width</span>=<span class=\"string\">&#123;600&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">visible</span>=<span class=\"string\">&#123;visiable&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">title</span>=<span class=\"string\">&quot;新建用户&quot;</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onCancel</span>=<span class=\"string\">&#123;close&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;submit&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Form</span> <span class=\"attr\">form</span>=<span class=\"string\">&#123;form&#125;</span> <span class=\"attr\">labelCol</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">span:</span> <span class=\"attr\">4</span> &#125;&#125; <span class=\"attr\">wrapperCol</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">span:</span> <span class=\"attr\">16</span> &#125;&#125; <span class=\"attr\">onFinish</span>=<span class=\"string\">&#123;onSubmit&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">label</span>=<span class=\"string\">&quot;用户名&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span>  <span class=\"attr\">username</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">label</span>=<span class=\"string\">&quot;用户邮箱&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">name</span>=<span class=\"string\">&quot;mail&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span> <span class=\"attr\">mail</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">label</span>=<span class=\"string\">&quot;部门&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">name</span>=<span class=\"string\">&quot;depart&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span> <span class=\"attr\">depart</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;1&#125;</span>&gt;</span>市场部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;2&#125;</span>&gt;</span>财务部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;3&#125;</span>&gt;</span>研发部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;/<span class=\"name\">Select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有问题吗？没有问题。</p>\n<p>但是现在又来了一个需求，<strong>有10个地方都需要打开这个新建用户的弹窗</strong>。怎么办？copy呗！</p>\n<p>这么做有问题吗？没有问题。</p>\n<p>这时候又来了个需求：<strong>还需要一个新建部门的表单弹窗</strong>。怎么办？继续copy呗！</p>\n<p>弹窗的标题改一下，表单的字段和提交改一下。</p>\n<p>copy这么多有关系吗？没有关系。因为快啊。</p>\n<p>可是现在又来了个需求：新建用户的表单要加一个字段</p>\n<p>那么问题来了！我怎么知道我copy的代码分散在哪些文件？会不会改漏？</p>\n<p>这时候就想起来了，我们还有一个杀手锏，叫<strong>复用</strong></p>\n<p>那么问题来了，怎么复用？</p>\n<h2 id=\"组件复用复用三部曲\"><a href=\"#组件复用复用三部曲\" class=\"headerlink\" title=\"组件复用复用三部曲\"></a>组件复用复用三部曲</h2><p><strong>组件复用</strong>，看起来简单，但很多人要么起来简单，用起来痛苦；要么做起来痛苦，用起来复杂。</p>\n<p>就拿复用这个新建用户的弹窗来说吧，首先一个问题是<strong>你要复用什么</strong>？</p>\n<h3 id=\"理清对象，确定复用内容\"><a href=\"#理清对象，确定复用内容\" class=\"headerlink\" title=\"理清对象，确定复用内容\"></a>理清对象，确定复用内容</h3><p>我们这里有三个对象:新建用户页面<code>Page</code>，打开弹窗的<code>Button</code>，弹窗<code>Modal</code>，表单<code>From</code>， 这三个对象分别有一些功能：</p>\n<ul>\n<li>Page:提供弹窗打开关闭的功能（open&#x2F;close），提供触发表单提交的方法（submit），提供form对象（Form.useForm()）、接收表单输出并提交server</li>\n<li>Button: 打开弹窗（调用open）</li>\n<li>Modal: 提供点击取消和确定的事件（onCancel&#x2F;onOk）</li>\n<li>Form: 表单校验，提供onFinish事件输出表单值</li>\n</ul>\n<p>这里最复杂、可变的就是弹窗和弹窗的内容，因此最需要复用的就是弹窗和它的内容（表单）。</p>\n<p>那么阻碍我们的是什么呢？</p>\n<p>Page需要form对象来提交Form，Form提交后需要关闭Modal。这些行为到底归属谁？</p>\n<h3 id=\"确定边界\"><a href=\"#确定边界\" class=\"headerlink\" title=\"确定边界\"></a>确定边界</h3><p>这里最简单的对象就是<code>Button</code>了，它是个傻子，只有一个onClick动作，至于干啥，全看页面。</p>\n<p><code>Modal</code>也不复杂，它提供取消和确定的回调，至于内容也是外部提供的。我们复用一个Modal，就是用它的样式配置</p>\n<p><code>Form</code>:我们复用一个表单，自然也是希望能复用这个表单的提交逻辑。因此，除了表单校验外，它还应该承担请求server的职责。</p>\n<h3 id=\"拆离组件\"><a href=\"#拆离组件\" class=\"headerlink\" title=\"拆离组件\"></a>拆离组件</h3><h3 id=\"封装useModal，拆离Modal\"><a href=\"#封装useModal，拆离Modal\" class=\"headerlink\" title=\"封装useModal，拆离Modal:\"></a>封装useModal，拆离Modal:</h3><p>useModal.tsx:</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Modal</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">ModalProps</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">MutableRefObject</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PropsType</span>&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">Omit</span>&lt;<span class=\"title class_\">ModalProps</span>, &#x27;onOk&#x27;&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">onOk</span>: <span class=\"function\">(<span class=\"params\">ref: MutableRefObject&lt;T | <span class=\"literal\">undefined</span>&gt;</span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> withModal&lt;T = <span class=\"built_in\">any</span>&gt;(modalProps?: <span class=\"title class_\">ModalProps</span>, slotProps?: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">Slot: React.FC&lt;<span class=\"built_in\">any</span>&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">props?: PropsType&lt;T&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ref = <span class=\"title class_\">React</span>.<span class=\"property\">useRef</span>&lt;T&gt;();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Modal</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">wrapClassName</span>=<span class=\"string\">&quot;modal-wrap&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">okText</span>=<span class=\"string\">&quot;提交&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">cancelButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">okButtonProps</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">shape:</span> &#x27;<span class=\"attr\">round</span>&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">width</span>=<span class=\"string\">&#123;600&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &#123;<span class=\"attr\">...modalProps</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &#123;<span class=\"attr\">...props</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;()</span> =&gt;</span> props?.onOk?.(ref)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Slot</span> &#123;<span class=\"attr\">...slotProps</span>&#125; <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span> <span class=\"attr\">close</span>=<span class=\"string\">&#123;props?.onCancel&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Modal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withModal;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拆离表单，暴露ref\"><a href=\"#拆离表单，暴露ref\" class=\"headerlink\" title=\"拆离表单，暴露ref\"></a>拆离表单，暴露ref</h3><p>UserForm.tsx:</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Form</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">Select</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">FormInstance</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;antd/es/form&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PropsType</span> = <span class=\"title class_\">React</span>.<span class=\"property\">PropsWithChildren</span>&lt;&#123;</span><br><span class=\"line\">  afterSubmit?: <span class=\"function\">(<span class=\"params\">values: <span class=\"built_in\">any</span>, form: FormInstance&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;&gt;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">UserForm</span> = (<span class=\"params\">props: PropsType, ref?: React.ForwardedRef&lt;FormInstance&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [form] = <span class=\"title class_\">Form</span>.<span class=\"title function_\">useForm</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 提交后获取表单数据，请求接口，重置表单并关闭</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onSubmit</span> = (<span class=\"params\">values: <span class=\"built_in\">any</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(values);</span><br><span class=\"line\">    <span class=\"comment\">//await  fetch ...</span></span><br><span class=\"line\">    form.<span class=\"title function_\">resetFields</span>();</span><br><span class=\"line\">    props.<span class=\"property\">afterSubmit</span>?.(values, form);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Form</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onFinish</span>=<span class=\"string\">&#123;onSubmit&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">form</span>=<span class=\"string\">&#123;form&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">labelCol</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">span:</span> <span class=\"attr\">4</span> &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">wrapperCol</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">span:</span> <span class=\"attr\">16</span> &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;用户名&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span>  <span class=\"attr\">username</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;用户邮箱&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">name</span>=<span class=\"string\">&quot;mail&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span> <span class=\"attr\">mail</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Form.Item</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;部门&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">name</span>=<span class=\"string\">&quot;depart&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">rules</span>=<span class=\"string\">&#123;[&#123;</span> <span class=\"attr\">required:</span> <span class=\"attr\">true</span>, <span class=\"attr\">message:</span> &#x27;<span class=\"attr\">Please</span> <span class=\"attr\">input</span> <span class=\"attr\">depart</span>!&#x27; &#125;]&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;1&#125;</span>&gt;</span>市场部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;2&#125;</span>&gt;</span>财务部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Select.Option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;3&#125;</span>&gt;</span>研发部<span class=\"tag\">&lt;/<span class=\"name\">Select.Option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">Select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Form.Item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UserForm</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"forwardRef\"><a href=\"#forwardRef\" class=\"headerlink\" title=\"forwardRef\"></a>forwardRef</h3><p>针对这里的特殊场景，form的提交由useModal控制，因此需要暴露form或ref；当然也可以由form自身提供submit按钮，并隐藏modal的footer，但这么做当表单较多时并不划算。</p>\n<p>使用useModal：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">UserFormModal</span> = withModal(&#123; 弹窗的props &#125;, &#123; 弹窗内容组件（表单）的props &#125;)(React.forwardRef(UserForm))<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后再来看效果，这个页面少了一半的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">TestPage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [visiable, setVisiable] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 打开弹窗</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">open</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//关闭弹窗</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">close</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setVisiable</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//点击确定提交表单</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">submit</span> = (<span class=\"params\">ref: MutableRefObject&lt;FormInstance&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">    ref.<span class=\"property\">current</span>.<span class=\"title function_\">submit</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">afterSubmit</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">close</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">UserFormModal</span> = <span class=\"title function_\">withModal</span>(&#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;新建用户&#x27;</span> &#125;, &#123; afterSubmit &#125;)(<span class=\"title class_\">React</span>.<span class=\"title function_\">forwardRef</span>(<span class=\"title class_\">UserForm</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;open&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          新建</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">UserFormModal</span> <span class=\"attr\">visible</span>=<span class=\"string\">&#123;visiable&#125;</span> <span class=\"attr\">onCancel</span>=<span class=\"string\">&#123;close&#125;</span> <span class=\"attr\">onOk</span>=<span class=\"string\">&#123;submit&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拥抱hooks\"><a href=\"#拥抱hooks\" class=\"headerlink\" title=\"拥抱hooks\"></a>拥抱hooks</h2><p>上述的做法是典型的HOC思想，如果我们用hooks，上面的代码还能再减掉50%，下一篇将介绍如何封装useModal</p>\n"},{"title":"基于swagger和AST的轻量级mock方案","date":"2021-07-28T16:00:00.000Z","_content":"\n目前主流的mock方案\n-----------\n\n目前大多数公司都会搭建自己的mock server或接口平台，比如yapi;或者使用第三方的api管理平台，通常也会带mock功能。\n\n前后端协作过程中，后端将接口写入或者用用swagger.json导入接口平台，前端在接口平台编辑mock数据，并配置dev server的proxy代理到接口平台。\n\n然而，当项目进项到小范围迭代时，由于需要配置多个服务的多个接口的代理,当然每次配置修改，还得重启dev server，有些时候过于麻烦，不如跳过请求，直接模拟接口返回的数据。可是这些测试数据，一旦忘了删除，又会引起不小的事故。\n\n更轻量的mock方案\n----------\n\n我想要mock，但是又不想走mock server，又不想在代码里写测试数据，那么有没有办法呢？有的！\n\n通常情况下，如果公司后端能够提供swagger，那么前端可以根据json文件生成接口请求的统一代码。 比如\n\n![image.png](../imgs/10c5f00eda3c48d29258f27106bdd07d.png) 或者 ![image.png](../imgs/60e2c179cd9d4caa9cfd576459bd8a08.png)\n\n当然如果项目是用ts的，那么各种类型定义也可以生成，注释块中也不用写这么多内容。\n\n**既然返回信息都已经在注释中了，那么是否可以更进一步，支持mock呢？** 比如新增一个@mock符号，根据@returns中的类型定义，将mock好的数据注入进来。\n\n![image.png](../imgs/0be2614c9e344dae9bfddf91d293525b.png)\n\n**理论上可以，但是现实不允许**，就比如截图中，各种字段没有任何注释，result到底是什么结构也不清楚。上述想法只能在后端比较规范的情况下实施。\n\n**那么退而求其次，前端指定mock**。\n\n![image.png](../imgs/0e8108de34d14efdb7b72d13e37121ac.png)\n\n这样可行性就很高了，我们可以操作一下。\n\n自定义babel-plugin\n---------------\n\n生成的代码都是包含了\n\n```csharp\nconst res = await ...\nreturn res;\n```\n\n通过babel转换ast，我们可以将这个代码变为\n\n```php\nconst res = Mock.mock({code:0,msg:'@string'})\nreturn res;\n```\n\nplugin大致这个样子\n\n![image.png](../imgs/76bd8f8d77934079b3d1921ee8c65baa.png) process.env.NODE\\_ENV判断只有在开发环境下才会转换，对开发者来说，由于@mock是写在注释里的，他们不用关心提测上线的时候有没有把它去掉。\n\n### ast的几个重要概念\n\nnode： ast是一个树状结构，因此有很多节点，每个节点就是一个node，node是有类型的，一个node对应一个代码片段。\n\npath: 用来连接node的一个对象，node在path下，通过path可以找到其他的path，从而找到其他的node\n\nnode也是一个树形的数据结构，可以通过node的属性不断往下访问，但是这种方式，只能访问到下面的node，获取不到这个node对应的path； 而通过path.get得到的则是path\n\nvisitor以及visitor下面的方法：\n\n![image.png](../imgs/1902c6bb31c6405ca1c5c77e9f35fe1a.png)\n\nvisitor下的几个方法，基本上对应的是node的类型，进入某个节点后，会相应执行这个node的type对应的方法。第一个参数是path，第二个参数state可以获取文件名、plugin的选项等等。\n\n![image.png](../imgs/fb8618145de9463981c94d9afcd58dab.png)\n\n### ast的操作\n\nast是一个很复杂的对象，首先必备ast可视化工具 [astexplorer.net/](https://astexplorer.net%2F \"https://astexplorer.net/\")\n\n1.  遍历： 可以通过path.get或者通过path.traverse(visitor),当需要查询子path时用后者会比较方便\n2.  停止遍历 path.stop()\n3.  ast修改、替换 通过node我们可以得到某个ast片段，我们要修改这个片段，则可以通过@babel/type提供的方法，一点点构造ast，这个@babel/types 也就是截图中的{types:t},它的api可以参考包中的d.ts声明文件，挺清楚的。\n\n用@babel/types构造ast是很痛苦的，不过babel还有个工具可以直接将字符串转化为ast:@babel/parser\n\n`const { parseExpression } = require('@babel/parser')`\n\n![image.png](../imgs/e27249efe15b4c27b00bb6e5096c23d9.png)\n\n具体代码\n----\n\n![image.png](../imgs/a7c6fea42810464aa34b8a331ac925af.png)\n\n总结\n--\n\n这套方案胜在轻量灵活，可以很好地和mock server互补。并不是推荐用这种方式替换掉mock server，当然团队没有mock server时，编写个插件的成本肯定是很小的。另外如果团队文档规范的话，这套方案可以发挥更大的潜力。\n\n不要再说学了ast没处用，掌握ast，真的可以为所欲为！","source":"_posts/基于swagger和AST的轻量级mock方案.md","raw":"---\n title: \"基于swagger和AST的轻量级mock方案\"\n date: 2021-07-29\n tags: [前端]\n categories: [前端笔记]\n---\n\n目前主流的mock方案\n-----------\n\n目前大多数公司都会搭建自己的mock server或接口平台，比如yapi;或者使用第三方的api管理平台，通常也会带mock功能。\n\n前后端协作过程中，后端将接口写入或者用用swagger.json导入接口平台，前端在接口平台编辑mock数据，并配置dev server的proxy代理到接口平台。\n\n然而，当项目进项到小范围迭代时，由于需要配置多个服务的多个接口的代理,当然每次配置修改，还得重启dev server，有些时候过于麻烦，不如跳过请求，直接模拟接口返回的数据。可是这些测试数据，一旦忘了删除，又会引起不小的事故。\n\n更轻量的mock方案\n----------\n\n我想要mock，但是又不想走mock server，又不想在代码里写测试数据，那么有没有办法呢？有的！\n\n通常情况下，如果公司后端能够提供swagger，那么前端可以根据json文件生成接口请求的统一代码。 比如\n\n![image.png](../imgs/10c5f00eda3c48d29258f27106bdd07d.png) 或者 ![image.png](../imgs/60e2c179cd9d4caa9cfd576459bd8a08.png)\n\n当然如果项目是用ts的，那么各种类型定义也可以生成，注释块中也不用写这么多内容。\n\n**既然返回信息都已经在注释中了，那么是否可以更进一步，支持mock呢？** 比如新增一个@mock符号，根据@returns中的类型定义，将mock好的数据注入进来。\n\n![image.png](../imgs/0be2614c9e344dae9bfddf91d293525b.png)\n\n**理论上可以，但是现实不允许**，就比如截图中，各种字段没有任何注释，result到底是什么结构也不清楚。上述想法只能在后端比较规范的情况下实施。\n\n**那么退而求其次，前端指定mock**。\n\n![image.png](../imgs/0e8108de34d14efdb7b72d13e37121ac.png)\n\n这样可行性就很高了，我们可以操作一下。\n\n自定义babel-plugin\n---------------\n\n生成的代码都是包含了\n\n```csharp\nconst res = await ...\nreturn res;\n```\n\n通过babel转换ast，我们可以将这个代码变为\n\n```php\nconst res = Mock.mock({code:0,msg:'@string'})\nreturn res;\n```\n\nplugin大致这个样子\n\n![image.png](../imgs/76bd8f8d77934079b3d1921ee8c65baa.png) process.env.NODE\\_ENV判断只有在开发环境下才会转换，对开发者来说，由于@mock是写在注释里的，他们不用关心提测上线的时候有没有把它去掉。\n\n### ast的几个重要概念\n\nnode： ast是一个树状结构，因此有很多节点，每个节点就是一个node，node是有类型的，一个node对应一个代码片段。\n\npath: 用来连接node的一个对象，node在path下，通过path可以找到其他的path，从而找到其他的node\n\nnode也是一个树形的数据结构，可以通过node的属性不断往下访问，但是这种方式，只能访问到下面的node，获取不到这个node对应的path； 而通过path.get得到的则是path\n\nvisitor以及visitor下面的方法：\n\n![image.png](../imgs/1902c6bb31c6405ca1c5c77e9f35fe1a.png)\n\nvisitor下的几个方法，基本上对应的是node的类型，进入某个节点后，会相应执行这个node的type对应的方法。第一个参数是path，第二个参数state可以获取文件名、plugin的选项等等。\n\n![image.png](../imgs/fb8618145de9463981c94d9afcd58dab.png)\n\n### ast的操作\n\nast是一个很复杂的对象，首先必备ast可视化工具 [astexplorer.net/](https://astexplorer.net%2F \"https://astexplorer.net/\")\n\n1.  遍历： 可以通过path.get或者通过path.traverse(visitor),当需要查询子path时用后者会比较方便\n2.  停止遍历 path.stop()\n3.  ast修改、替换 通过node我们可以得到某个ast片段，我们要修改这个片段，则可以通过@babel/type提供的方法，一点点构造ast，这个@babel/types 也就是截图中的{types:t},它的api可以参考包中的d.ts声明文件，挺清楚的。\n\n用@babel/types构造ast是很痛苦的，不过babel还有个工具可以直接将字符串转化为ast:@babel/parser\n\n`const { parseExpression } = require('@babel/parser')`\n\n![image.png](../imgs/e27249efe15b4c27b00bb6e5096c23d9.png)\n\n具体代码\n----\n\n![image.png](../imgs/a7c6fea42810464aa34b8a331ac925af.png)\n\n总结\n--\n\n这套方案胜在轻量灵活，可以很好地和mock server互补。并不是推荐用这种方式替换掉mock server，当然团队没有mock server时，编写个插件的成本肯定是很小的。另外如果团队文档规范的话，这套方案可以发挥更大的潜力。\n\n不要再说学了ast没处用，掌握ast，真的可以为所欲为！","slug":"基于swagger和AST的轻量级mock方案","published":1,"updated":"2024-04-04T15:27:03.221Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li1006xhajffv5z7lfm","content":"<h2 id=\"目前主流的mock方案\"><a href=\"#目前主流的mock方案\" class=\"headerlink\" title=\"目前主流的mock方案\"></a>目前主流的mock方案</h2><p>目前大多数公司都会搭建自己的mock server或接口平台，比如yapi;或者使用第三方的api管理平台，通常也会带mock功能。</p>\n<p>前后端协作过程中，后端将接口写入或者用用swagger.json导入接口平台，前端在接口平台编辑mock数据，并配置dev server的proxy代理到接口平台。</p>\n<p>然而，当项目进项到小范围迭代时，由于需要配置多个服务的多个接口的代理,当然每次配置修改，还得重启dev server，有些时候过于麻烦，不如跳过请求，直接模拟接口返回的数据。可是这些测试数据，一旦忘了删除，又会引起不小的事故。</p>\n<h2 id=\"更轻量的mock方案\"><a href=\"#更轻量的mock方案\" class=\"headerlink\" title=\"更轻量的mock方案\"></a>更轻量的mock方案</h2><p>我想要mock，但是又不想走mock server，又不想在代码里写测试数据，那么有没有办法呢？有的！</p>\n<p>通常情况下，如果公司后端能够提供swagger，那么前端可以根据json文件生成接口请求的统一代码。 比如</p>\n<p><img src=\"/../imgs/10c5f00eda3c48d29258f27106bdd07d.png\" alt=\"image.png\"> 或者 <img src=\"/../imgs/60e2c179cd9d4caa9cfd576459bd8a08.png\" alt=\"image.png\"></p>\n<p>当然如果项目是用ts的，那么各种类型定义也可以生成，注释块中也不用写这么多内容。</p>\n<p><strong>既然返回信息都已经在注释中了，那么是否可以更进一步，支持mock呢？</strong> 比如新增一个@mock符号，根据@returns中的类型定义，将mock好的数据注入进来。</p>\n<p><img src=\"/../imgs/0be2614c9e344dae9bfddf91d293525b.png\" alt=\"image.png\"></p>\n<p><strong>理论上可以，但是现实不允许</strong>，就比如截图中，各种字段没有任何注释，result到底是什么结构也不清楚。上述想法只能在后端比较规范的情况下实施。</p>\n<p><strong>那么退而求其次，前端指定mock</strong>。</p>\n<p><img src=\"/../imgs/0e8108de34d14efdb7b72d13e37121ac.png\" alt=\"image.png\"></p>\n<p>这样可行性就很高了，我们可以操作一下。</p>\n<h2 id=\"自定义babel-plugin\"><a href=\"#自定义babel-plugin\" class=\"headerlink\" title=\"自定义babel-plugin\"></a>自定义babel-plugin</h2><p>生成的代码都是包含了</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> ...</span><br><span class=\"line\"><span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<p>通过babel转换ast，我们可以将这个代码变为</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">res</span> = Mock.<span class=\"title function_ invoke__\">mock</span>(&#123;<span class=\"attr\">code</span>:<span class=\"number\">0</span>,<span class=\"attr\">msg</span>:<span class=\"string\">&#x27;@string&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<p>plugin大致这个样子</p>\n<p><img src=\"/../imgs/76bd8f8d77934079b3d1921ee8c65baa.png\" alt=\"image.png\"> process.env.NODE_ENV判断只有在开发环境下才会转换，对开发者来说，由于@mock是写在注释里的，他们不用关心提测上线的时候有没有把它去掉。</p>\n<h3 id=\"ast的几个重要概念\"><a href=\"#ast的几个重要概念\" class=\"headerlink\" title=\"ast的几个重要概念\"></a>ast的几个重要概念</h3><p>node： ast是一个树状结构，因此有很多节点，每个节点就是一个node，node是有类型的，一个node对应一个代码片段。</p>\n<p>path: 用来连接node的一个对象，node在path下，通过path可以找到其他的path，从而找到其他的node</p>\n<p>node也是一个树形的数据结构，可以通过node的属性不断往下访问，但是这种方式，只能访问到下面的node，获取不到这个node对应的path； 而通过path.get得到的则是path</p>\n<p>visitor以及visitor下面的方法：</p>\n<p><img src=\"/../imgs/1902c6bb31c6405ca1c5c77e9f35fe1a.png\" alt=\"image.png\"></p>\n<p>visitor下的几个方法，基本上对应的是node的类型，进入某个节点后，会相应执行这个node的type对应的方法。第一个参数是path，第二个参数state可以获取文件名、plugin的选项等等。</p>\n<p><img src=\"/../imgs/fb8618145de9463981c94d9afcd58dab.png\" alt=\"image.png\"></p>\n<h3 id=\"ast的操作\"><a href=\"#ast的操作\" class=\"headerlink\" title=\"ast的操作\"></a>ast的操作</h3><p>ast是一个很复杂的对象，首先必备ast可视化工具 <a href=\"https://astexplorer.net%2F\" title=\"https://astexplorer.net/\">astexplorer.net&#x2F;</a></p>\n<ol>\n<li>遍历： 可以通过path.get或者通过path.traverse(visitor),当需要查询子path时用后者会比较方便</li>\n<li>停止遍历 path.stop()</li>\n<li>ast修改、替换 通过node我们可以得到某个ast片段，我们要修改这个片段，则可以通过@babel&#x2F;type提供的方法，一点点构造ast，这个@babel&#x2F;types 也就是截图中的{types:t},它的api可以参考包中的d.ts声明文件，挺清楚的。</li>\n</ol>\n<p>用@babel&#x2F;types构造ast是很痛苦的，不过babel还有个工具可以直接将字符串转化为ast:@babel&#x2F;parser</p>\n<p><code>const &#123; parseExpression &#125; = require(&#39;@babel/parser&#39;)</code></p>\n<p><img src=\"/../imgs/e27249efe15b4c27b00bb6e5096c23d9.png\" alt=\"image.png\"></p>\n<h2 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h2><p><img src=\"/../imgs/a7c6fea42810464aa34b8a331ac925af.png\" alt=\"image.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这套方案胜在轻量灵活，可以很好地和mock server互补。并不是推荐用这种方式替换掉mock server，当然团队没有mock server时，编写个插件的成本肯定是很小的。另外如果团队文档规范的话，这套方案可以发挥更大的潜力。</p>\n<p>不要再说学了ast没处用，掌握ast，真的可以为所欲为！</p>\n","length":1746,"excerpt":"","more":"<h2 id=\"目前主流的mock方案\"><a href=\"#目前主流的mock方案\" class=\"headerlink\" title=\"目前主流的mock方案\"></a>目前主流的mock方案</h2><p>目前大多数公司都会搭建自己的mock server或接口平台，比如yapi;或者使用第三方的api管理平台，通常也会带mock功能。</p>\n<p>前后端协作过程中，后端将接口写入或者用用swagger.json导入接口平台，前端在接口平台编辑mock数据，并配置dev server的proxy代理到接口平台。</p>\n<p>然而，当项目进项到小范围迭代时，由于需要配置多个服务的多个接口的代理,当然每次配置修改，还得重启dev server，有些时候过于麻烦，不如跳过请求，直接模拟接口返回的数据。可是这些测试数据，一旦忘了删除，又会引起不小的事故。</p>\n<h2 id=\"更轻量的mock方案\"><a href=\"#更轻量的mock方案\" class=\"headerlink\" title=\"更轻量的mock方案\"></a>更轻量的mock方案</h2><p>我想要mock，但是又不想走mock server，又不想在代码里写测试数据，那么有没有办法呢？有的！</p>\n<p>通常情况下，如果公司后端能够提供swagger，那么前端可以根据json文件生成接口请求的统一代码。 比如</p>\n<p><img src=\"/../imgs/10c5f00eda3c48d29258f27106bdd07d.png\" alt=\"image.png\"> 或者 <img src=\"/../imgs/60e2c179cd9d4caa9cfd576459bd8a08.png\" alt=\"image.png\"></p>\n<p>当然如果项目是用ts的，那么各种类型定义也可以生成，注释块中也不用写这么多内容。</p>\n<p><strong>既然返回信息都已经在注释中了，那么是否可以更进一步，支持mock呢？</strong> 比如新增一个@mock符号，根据@returns中的类型定义，将mock好的数据注入进来。</p>\n<p><img src=\"/../imgs/0be2614c9e344dae9bfddf91d293525b.png\" alt=\"image.png\"></p>\n<p><strong>理论上可以，但是现实不允许</strong>，就比如截图中，各种字段没有任何注释，result到底是什么结构也不清楚。上述想法只能在后端比较规范的情况下实施。</p>\n<p><strong>那么退而求其次，前端指定mock</strong>。</p>\n<p><img src=\"/../imgs/0e8108de34d14efdb7b72d13e37121ac.png\" alt=\"image.png\"></p>\n<p>这样可行性就很高了，我们可以操作一下。</p>\n<h2 id=\"自定义babel-plugin\"><a href=\"#自定义babel-plugin\" class=\"headerlink\" title=\"自定义babel-plugin\"></a>自定义babel-plugin</h2><p>生成的代码都是包含了</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> ...</span><br><span class=\"line\"><span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<p>通过babel转换ast，我们可以将这个代码变为</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">res</span> = Mock.<span class=\"title function_ invoke__\">mock</span>(&#123;<span class=\"attr\">code</span>:<span class=\"number\">0</span>,<span class=\"attr\">msg</span>:<span class=\"string\">&#x27;@string&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<p>plugin大致这个样子</p>\n<p><img src=\"/../imgs/76bd8f8d77934079b3d1921ee8c65baa.png\" alt=\"image.png\"> process.env.NODE_ENV判断只有在开发环境下才会转换，对开发者来说，由于@mock是写在注释里的，他们不用关心提测上线的时候有没有把它去掉。</p>\n<h3 id=\"ast的几个重要概念\"><a href=\"#ast的几个重要概念\" class=\"headerlink\" title=\"ast的几个重要概念\"></a>ast的几个重要概念</h3><p>node： ast是一个树状结构，因此有很多节点，每个节点就是一个node，node是有类型的，一个node对应一个代码片段。</p>\n<p>path: 用来连接node的一个对象，node在path下，通过path可以找到其他的path，从而找到其他的node</p>\n<p>node也是一个树形的数据结构，可以通过node的属性不断往下访问，但是这种方式，只能访问到下面的node，获取不到这个node对应的path； 而通过path.get得到的则是path</p>\n<p>visitor以及visitor下面的方法：</p>\n<p><img src=\"/../imgs/1902c6bb31c6405ca1c5c77e9f35fe1a.png\" alt=\"image.png\"></p>\n<p>visitor下的几个方法，基本上对应的是node的类型，进入某个节点后，会相应执行这个node的type对应的方法。第一个参数是path，第二个参数state可以获取文件名、plugin的选项等等。</p>\n<p><img src=\"/../imgs/fb8618145de9463981c94d9afcd58dab.png\" alt=\"image.png\"></p>\n<h3 id=\"ast的操作\"><a href=\"#ast的操作\" class=\"headerlink\" title=\"ast的操作\"></a>ast的操作</h3><p>ast是一个很复杂的对象，首先必备ast可视化工具 <a href=\"https://astexplorer.net%2F\" title=\"https://astexplorer.net/\">astexplorer.net&#x2F;</a></p>\n<ol>\n<li>遍历： 可以通过path.get或者通过path.traverse(visitor),当需要查询子path时用后者会比较方便</li>\n<li>停止遍历 path.stop()</li>\n<li>ast修改、替换 通过node我们可以得到某个ast片段，我们要修改这个片段，则可以通过@babel&#x2F;type提供的方法，一点点构造ast，这个@babel&#x2F;types 也就是截图中的{types:t},它的api可以参考包中的d.ts声明文件，挺清楚的。</li>\n</ol>\n<p>用@babel&#x2F;types构造ast是很痛苦的，不过babel还有个工具可以直接将字符串转化为ast:@babel&#x2F;parser</p>\n<p><code>const &#123; parseExpression &#125; = require(&#39;@babel/parser&#39;)</code></p>\n<p><img src=\"/../imgs/e27249efe15b4c27b00bb6e5096c23d9.png\" alt=\"image.png\"></p>\n<h2 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h2><p><img src=\"/../imgs/a7c6fea42810464aa34b8a331ac925af.png\" alt=\"image.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这套方案胜在轻量灵活，可以很好地和mock server互补。并不是推荐用这种方式替换掉mock server，当然团队没有mock server时，编写个插件的成本肯定是很小的。另外如果团队文档规范的话，这套方案可以发挥更大的潜力。</p>\n<p>不要再说学了ast没处用，掌握ast，真的可以为所欲为！</p>\n"},{"title":"如何使TypeScript根据函数的实参推导其返回值类型","date":"2021-11-08T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第9天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n场景1：实参推导\n--------\n\n假设有这么一个函数，它接受一个简单的对象作为参数，并对这个对象扩展了一些字段并返回：\n\n```ini\nfunction a(p1: { [key: string]: any }) {\n  const p2 = { ...p1, extra: \"I'm p2\" };\n  return p2;\n}\nlet p2 = a({ name: 'p1' });\n```\n\n此时`p2`被推导的类型为\n\n![image.png](../imgs/3b9187f6322240598ef5bb8d761c8509.png)\n\n也就是说我们无法在p2上点出`name`属性 ![image.png](../imgs/7ebeb02d90d54c5c88501bab914a2dcd.png)\n\n如果对p1设置了明确的类型描述，那么ts将会根据这个类型推导p2d 类型。\n\n然而p1是一个简单的对象，并且有任意的key和value，也就是说我们对`p1`的类型描述只能为\n\n```css\n{\n    [key:string]:any;\n}\n```\n\n我们希望的是ts能够先根据p1推导出其具体的类型，再推导p2的类型\n\n![image.png](../imgs/6e3bfe5b9ff64cea9530258638e7adc9.png)\n\n就像图中的，将p1的类型推导为`{name:string}`,然后在这个基础上再推导p2。\n\n### 不设置类型\n\n如果不对`p1`设置类型，那么`p1`会被推导为`any`，从而导致p2也被推导为`any`;\n\n![image.png](../imgs/993504fc4765448fbba439d0f2af30aa.png)\n\n### 使用泛型\n\n如果我们将`p1`的类型设为`T`，那么\n\n```ini\nfunction a<T>(p1: T) {\n  const p2 = { ...p1, extra: \"I'm p2\" };\n  return p2;\n}\nlet p2 = a({ name: 'p1' });\n```\n\nts确实如我们希望的那样推导类型了\n\n![image.png](../imgs/0a93bdaa9fe94dc5a1ea5ca1a7b6560c.png)\n\n看起来问题解决了，我们将场景设置得更复杂些：\n\n场景2：约束泛型\n--------\n\n```css\ninterface I {\n  msg: string;\n  data: any;\n  [key: string]: any;\n}\n\nfunction a(p1: I) {\n  const p2 = { ...p1, extra: p1.data.extra };\n  return p2;\n}\nlet p2 = a({ msg: 'p1', data: { extra: { platform: 'h5' } }, code: -1 });\n```\n\n这里`p1`的类型一定要符合`interface I`的约束，此时又回到了场景1的问题：ts无法根据实参的类型推导出参的类型\n\n![image.png](../imgs/3301aafe08f84015a75606a2239dc394.png)\n\n### extends\n\n在这里我们需要对泛型`T`增加一些约束：\n\n```css\ninterface I {\n  msg: string;\n  data: any;\n  [key: string]: any;\n}\n\nfunction a<T extends I>(p1: T) {\n  const p2 = { ...p1, extra: p1.data.extra };\n  return p2;\n}\nlet p2 = a({ msg: 'p1', data: { extra: { platform: 'h5' } }, code: -1 });\n```\n\n这里的`extends`表明了`T`类型是`I`的一个子类型，而`T`的类型，则需要从实参推导：\n\n![image.png](../imgs/336a595311e841fd880a6c0ef46682e1.png)\n\n![image.png](../imgs/ad653329549a4673a85f0bff18ac4bfd.png)","source":"_posts/如何使TypeScript根据函数的实参推导其返回值类型.md","raw":"---\n title: \"如何使TypeScript根据函数的实参推导其返回值类型\"\n date: 2021-11-09\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第9天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095/ \"https://juejin.cn/post/7023643374569816095/\")\n\n场景1：实参推导\n--------\n\n假设有这么一个函数，它接受一个简单的对象作为参数，并对这个对象扩展了一些字段并返回：\n\n```ini\nfunction a(p1: { [key: string]: any }) {\n  const p2 = { ...p1, extra: \"I'm p2\" };\n  return p2;\n}\nlet p2 = a({ name: 'p1' });\n```\n\n此时`p2`被推导的类型为\n\n![image.png](../imgs/3b9187f6322240598ef5bb8d761c8509.png)\n\n也就是说我们无法在p2上点出`name`属性 ![image.png](../imgs/7ebeb02d90d54c5c88501bab914a2dcd.png)\n\n如果对p1设置了明确的类型描述，那么ts将会根据这个类型推导p2d 类型。\n\n然而p1是一个简单的对象，并且有任意的key和value，也就是说我们对`p1`的类型描述只能为\n\n```css\n{\n    [key:string]:any;\n}\n```\n\n我们希望的是ts能够先根据p1推导出其具体的类型，再推导p2的类型\n\n![image.png](../imgs/6e3bfe5b9ff64cea9530258638e7adc9.png)\n\n就像图中的，将p1的类型推导为`{name:string}`,然后在这个基础上再推导p2。\n\n### 不设置类型\n\n如果不对`p1`设置类型，那么`p1`会被推导为`any`，从而导致p2也被推导为`any`;\n\n![image.png](../imgs/993504fc4765448fbba439d0f2af30aa.png)\n\n### 使用泛型\n\n如果我们将`p1`的类型设为`T`，那么\n\n```ini\nfunction a<T>(p1: T) {\n  const p2 = { ...p1, extra: \"I'm p2\" };\n  return p2;\n}\nlet p2 = a({ name: 'p1' });\n```\n\nts确实如我们希望的那样推导类型了\n\n![image.png](../imgs/0a93bdaa9fe94dc5a1ea5ca1a7b6560c.png)\n\n看起来问题解决了，我们将场景设置得更复杂些：\n\n场景2：约束泛型\n--------\n\n```css\ninterface I {\n  msg: string;\n  data: any;\n  [key: string]: any;\n}\n\nfunction a(p1: I) {\n  const p2 = { ...p1, extra: p1.data.extra };\n  return p2;\n}\nlet p2 = a({ msg: 'p1', data: { extra: { platform: 'h5' } }, code: -1 });\n```\n\n这里`p1`的类型一定要符合`interface I`的约束，此时又回到了场景1的问题：ts无法根据实参的类型推导出参的类型\n\n![image.png](../imgs/3301aafe08f84015a75606a2239dc394.png)\n\n### extends\n\n在这里我们需要对泛型`T`增加一些约束：\n\n```css\ninterface I {\n  msg: string;\n  data: any;\n  [key: string]: any;\n}\n\nfunction a<T extends I>(p1: T) {\n  const p2 = { ...p1, extra: p1.data.extra };\n  return p2;\n}\nlet p2 = a({ msg: 'p1', data: { extra: { platform: 'h5' } }, code: -1 });\n```\n\n这里的`extends`表明了`T`类型是`I`的一个子类型，而`T`的类型，则需要从实参推导：\n\n![image.png](../imgs/336a595311e841fd880a6c0ef46682e1.png)\n\n![image.png](../imgs/ad653329549a4673a85f0bff18ac4bfd.png)","slug":"如何使TypeScript根据函数的实参推导其返回值类型","published":1,"updated":"2024-04-04T15:27:03.382Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li10071hajfelzh39l2","content":"<p>这是我参与11月更文挑战的第9天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"场景1：实参推导\"><a href=\"#场景1：实参推导\" class=\"headerlink\" title=\"场景1：实参推导\"></a>场景1：实参推导</h2><p>假设有这么一个函数，它接受一个简单的对象作为参数，并对这个对象扩展了一些字段并返回：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a(p1: &#123; <span class=\"section\">[key: string]</span>: any &#125;) &#123;</span><br><span class=\"line\">  const <span class=\"attr\">p2</span> = &#123; ...p1, extra: <span class=\"string\">&quot;I&#x27;m p2&quot;</span> &#125;<span class=\"comment\">;</span></span><br><span class=\"line\">  return p2<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let <span class=\"attr\">p2</span> = a(&#123; name: <span class=\"string\">&#x27;p1&#x27;</span> &#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>此时<code>p2</code>被推导的类型为</p>\n<p><img src=\"/../imgs/3b9187f6322240598ef5bb8d761c8509.png\" alt=\"image.png\"></p>\n<p>也就是说我们无法在p2上点出<code>name</code>属性 <img src=\"/../imgs/7ebeb02d90d54c5c88501bab914a2dcd.png\" alt=\"image.png\"></p>\n<p>如果对p1设置了明确的类型描述，那么ts将会根据这个类型推导p2d 类型。</p>\n<p>然而p1是一个简单的对象，并且有任意的key和value，也就是说我们对<code>p1</code>的类型描述只能为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"selector-attr\">[key:string]</span>:any;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们希望的是ts能够先根据p1推导出其具体的类型，再推导p2的类型</p>\n<p><img src=\"/../imgs/6e3bfe5b9ff64cea9530258638e7adc9.png\" alt=\"image.png\"></p>\n<p>就像图中的，将p1的类型推导为<code>&#123;name:string&#125;</code>,然后在这个基础上再推导p2。</p>\n<h3 id=\"不设置类型\"><a href=\"#不设置类型\" class=\"headerlink\" title=\"不设置类型\"></a>不设置类型</h3><p>如果不对<code>p1</code>设置类型，那么<code>p1</code>会被推导为<code>any</code>，从而导致p2也被推导为<code>any</code>;</p>\n<p><img src=\"/../imgs/993504fc4765448fbba439d0f2af30aa.png\" alt=\"image.png\"></p>\n<h3 id=\"使用泛型\"><a href=\"#使用泛型\" class=\"headerlink\" title=\"使用泛型\"></a>使用泛型</h3><p>如果我们将<code>p1</code>的类型设为<code>T</code>，那么</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a&lt;T&gt;(p1: T) &#123;</span><br><span class=\"line\">  const <span class=\"attr\">p2</span> = &#123; ...p1, extra: <span class=\"string\">&quot;I&#x27;m p2&quot;</span> &#125;<span class=\"comment\">;</span></span><br><span class=\"line\">  return p2<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let <span class=\"attr\">p2</span> = a(&#123; name: <span class=\"string\">&#x27;p1&#x27;</span> &#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>ts确实如我们希望的那样推导类型了</p>\n<p><img src=\"/../imgs/0a93bdaa9fe94dc5a1ea5ca1a7b6560c.png\" alt=\"image.png\"></p>\n<p>看起来问题解决了，我们将场景设置得更复杂些：</p>\n<h2 id=\"场景2：约束泛型\"><a href=\"#场景2：约束泛型\" class=\"headerlink\" title=\"场景2：约束泛型\"></a>场景2：约束泛型</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"selector-tag\">I</span> &#123;</span><br><span class=\"line\">  msg: string;</span><br><span class=\"line\">  data: any;</span><br><span class=\"line\">  <span class=\"selector-attr\">[key: string]</span>: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function <span class=\"selector-tag\">a</span>(p1: I) &#123;</span><br><span class=\"line\">  const p2 = &#123; ..<span class=\"selector-class\">.p1</span>, extra: p1.data.extra &#125;;</span><br><span class=\"line\">  return p2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let p2 = <span class=\"selector-tag\">a</span>(&#123; msg: <span class=\"string\">&#x27;p1&#x27;</span>, data: &#123; extra: &#123; platform: <span class=\"string\">&#x27;h5&#x27;</span> &#125; &#125;, <span class=\"selector-tag\">code</span>: -<span class=\"number\">1</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里<code>p1</code>的类型一定要符合<code>interface I</code>的约束，此时又回到了场景1的问题：ts无法根据实参的类型推导出参的类型</p>\n<p><img src=\"/../imgs/3301aafe08f84015a75606a2239dc394.png\" alt=\"image.png\"></p>\n<h3 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h3><p>在这里我们需要对泛型<code>T</code>增加一些约束：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"selector-tag\">I</span> &#123;</span><br><span class=\"line\">  msg: string;</span><br><span class=\"line\">  data: any;</span><br><span class=\"line\">  <span class=\"selector-attr\">[key: string]</span>: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function <span class=\"selector-tag\">a</span>&lt;T extends <span class=\"selector-tag\">I</span>&gt;(p1: T) &#123;</span><br><span class=\"line\">  const p2 = &#123; ..<span class=\"selector-class\">.p1</span>, extra: p1.data.extra &#125;;</span><br><span class=\"line\">  return p2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let p2 = <span class=\"selector-tag\">a</span>(&#123; msg: <span class=\"string\">&#x27;p1&#x27;</span>, data: &#123; extra: &#123; platform: <span class=\"string\">&#x27;h5&#x27;</span> &#125; &#125;, <span class=\"selector-tag\">code</span>: -<span class=\"number\">1</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>extends</code>表明了<code>T</code>类型是<code>I</code>的一个子类型，而<code>T</code>的类型，则需要从实参推导：</p>\n<p><img src=\"/../imgs/336a595311e841fd880a6c0ef46682e1.png\" alt=\"image.png\"></p>\n<p><img src=\"/../imgs/ad653329549a4673a85f0bff18ac4bfd.png\" alt=\"image.png\"></p>\n","length":1399,"excerpt":"","more":"<p>这是我参与11月更文挑战的第9天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h2 id=\"场景1：实参推导\"><a href=\"#场景1：实参推导\" class=\"headerlink\" title=\"场景1：实参推导\"></a>场景1：实参推导</h2><p>假设有这么一个函数，它接受一个简单的对象作为参数，并对这个对象扩展了一些字段并返回：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a(p1: &#123; <span class=\"section\">[key: string]</span>: any &#125;) &#123;</span><br><span class=\"line\">  const <span class=\"attr\">p2</span> = &#123; ...p1, extra: <span class=\"string\">&quot;I&#x27;m p2&quot;</span> &#125;<span class=\"comment\">;</span></span><br><span class=\"line\">  return p2<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let <span class=\"attr\">p2</span> = a(&#123; name: <span class=\"string\">&#x27;p1&#x27;</span> &#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>此时<code>p2</code>被推导的类型为</p>\n<p><img src=\"/../imgs/3b9187f6322240598ef5bb8d761c8509.png\" alt=\"image.png\"></p>\n<p>也就是说我们无法在p2上点出<code>name</code>属性 <img src=\"/../imgs/7ebeb02d90d54c5c88501bab914a2dcd.png\" alt=\"image.png\"></p>\n<p>如果对p1设置了明确的类型描述，那么ts将会根据这个类型推导p2d 类型。</p>\n<p>然而p1是一个简单的对象，并且有任意的key和value，也就是说我们对<code>p1</code>的类型描述只能为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"selector-attr\">[key:string]</span>:any;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们希望的是ts能够先根据p1推导出其具体的类型，再推导p2的类型</p>\n<p><img src=\"/../imgs/6e3bfe5b9ff64cea9530258638e7adc9.png\" alt=\"image.png\"></p>\n<p>就像图中的，将p1的类型推导为<code>&#123;name:string&#125;</code>,然后在这个基础上再推导p2。</p>\n<h3 id=\"不设置类型\"><a href=\"#不设置类型\" class=\"headerlink\" title=\"不设置类型\"></a>不设置类型</h3><p>如果不对<code>p1</code>设置类型，那么<code>p1</code>会被推导为<code>any</code>，从而导致p2也被推导为<code>any</code>;</p>\n<p><img src=\"/../imgs/993504fc4765448fbba439d0f2af30aa.png\" alt=\"image.png\"></p>\n<h3 id=\"使用泛型\"><a href=\"#使用泛型\" class=\"headerlink\" title=\"使用泛型\"></a>使用泛型</h3><p>如果我们将<code>p1</code>的类型设为<code>T</code>，那么</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a&lt;T&gt;(p1: T) &#123;</span><br><span class=\"line\">  const <span class=\"attr\">p2</span> = &#123; ...p1, extra: <span class=\"string\">&quot;I&#x27;m p2&quot;</span> &#125;<span class=\"comment\">;</span></span><br><span class=\"line\">  return p2<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let <span class=\"attr\">p2</span> = a(&#123; name: <span class=\"string\">&#x27;p1&#x27;</span> &#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>ts确实如我们希望的那样推导类型了</p>\n<p><img src=\"/../imgs/0a93bdaa9fe94dc5a1ea5ca1a7b6560c.png\" alt=\"image.png\"></p>\n<p>看起来问题解决了，我们将场景设置得更复杂些：</p>\n<h2 id=\"场景2：约束泛型\"><a href=\"#场景2：约束泛型\" class=\"headerlink\" title=\"场景2：约束泛型\"></a>场景2：约束泛型</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"selector-tag\">I</span> &#123;</span><br><span class=\"line\">  msg: string;</span><br><span class=\"line\">  data: any;</span><br><span class=\"line\">  <span class=\"selector-attr\">[key: string]</span>: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function <span class=\"selector-tag\">a</span>(p1: I) &#123;</span><br><span class=\"line\">  const p2 = &#123; ..<span class=\"selector-class\">.p1</span>, extra: p1.data.extra &#125;;</span><br><span class=\"line\">  return p2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let p2 = <span class=\"selector-tag\">a</span>(&#123; msg: <span class=\"string\">&#x27;p1&#x27;</span>, data: &#123; extra: &#123; platform: <span class=\"string\">&#x27;h5&#x27;</span> &#125; &#125;, <span class=\"selector-tag\">code</span>: -<span class=\"number\">1</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里<code>p1</code>的类型一定要符合<code>interface I</code>的约束，此时又回到了场景1的问题：ts无法根据实参的类型推导出参的类型</p>\n<p><img src=\"/../imgs/3301aafe08f84015a75606a2239dc394.png\" alt=\"image.png\"></p>\n<h3 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h3><p>在这里我们需要对泛型<code>T</code>增加一些约束：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"selector-tag\">I</span> &#123;</span><br><span class=\"line\">  msg: string;</span><br><span class=\"line\">  data: any;</span><br><span class=\"line\">  <span class=\"selector-attr\">[key: string]</span>: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function <span class=\"selector-tag\">a</span>&lt;T extends <span class=\"selector-tag\">I</span>&gt;(p1: T) &#123;</span><br><span class=\"line\">  const p2 = &#123; ..<span class=\"selector-class\">.p1</span>, extra: p1.data.extra &#125;;</span><br><span class=\"line\">  return p2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let p2 = <span class=\"selector-tag\">a</span>(&#123; msg: <span class=\"string\">&#x27;p1&#x27;</span>, data: &#123; extra: &#123; platform: <span class=\"string\">&#x27;h5&#x27;</span> &#125; &#125;, <span class=\"selector-tag\">code</span>: -<span class=\"number\">1</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>extends</code>表明了<code>T</code>类型是<code>I</code>的一个子类型，而<code>T</code>的类型，则需要从实参推导：</p>\n<p><img src=\"/../imgs/336a595311e841fd880a6c0ef46682e1.png\" alt=\"image.png\"></p>\n<p><img src=\"/../imgs/ad653329549a4673a85f0bff18ac4bfd.png\" alt=\"image.png\"></p>\n"},{"title":"如何备份掘金上的博客？用node写个爬虫吧~","date":"2022-01-28T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第11天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n之前一直在掘金记录博客，这两天打算把自己的个人博客建起来，把掘金上的都备份过去。看了一下不知不觉已经写了不少了，于是第一个想法便是写个爬虫把文章爬下来，自动生成markdown文件。\n\n文章的id和请求\n--------\n\n`https://juejin.cn/post/7057816301078577159`最后便的数字大概率是文章的id了，因此首先是找自己所有文章的id。\n\n文章管理页面能找到一个列表的请求`/article/list_by_user`,是一个分页，这里可以写个脚本或手动请求拿到所有的文章id。\n\n于是第一行代码就出来了：\n\n```js\nlet ids = [...];\n```\n\n这一步不是重点，重点是获取文章的内容。\n\n获取文章内容\n------\n\n首先得找到是哪个接口获取了文章的内容。原本以为是ssr，但是html请求返回的数据似乎并没有做服务端渲染。\n\n![image.png](../imgs/bf9e9b12206f47aaa241a0ab36fdce35.png)\n\n排查了一波接口，也都没有发现哪个接口能返回文章内容数据，只好又回到html文档请求上，终于在响应里找到了这个：\n\n![image.png](../imgs/b4009d0f599c4ac39009eef3265d140e.png)\n\n掘金并没有使用典型的服务端渲染，他们将文章内容放在了一段脚本里。可以先把里面的内容爬下来，然后用cheerio获取到那个script的内容。\n\n```ini\nlet url = \"https://juejin.cn/post/\" + id;\naxios.get(url).then((res) => {\n        const $ = cheerio.load(res.data);\n        let str = $(\"body script\")[0].children[0].data;\n        ...\n});\n\n```\n\ncheerio可以将文本解析为dom，并能够让你以jQuery的语法进行操作。\n\n使用AST解析js脚本\n-----------\n\n这段脚本内容非常长，字段很多，要用正则匹配出对应的文本，可能会有些棘手，因此选择用AST语法树解析。 ![image.png](../imgs/378d8fac26cd462790f75e6ae448bf23.png) 写过babel插件的一定很熟练这个套路了：\n\n1.  借助[astexplorer.net/](https://astexplorer.net%2F \"https://astexplorer.net/\") 格式化代码，并找到对应的节点和位置：\n\n![image.png](../imgs/9f72aa0dd7eb47db9af5f3d0d6a29c87.png)\n\n![image.png](../imgs/0bd071595c974b6eb36ed0b4ba7c22b3.png)\n\n2.  使用解析器遍历得到我们想要的节点内容 这里可以使用babel，不过内容并不复杂，可以直接用更底层的acorn。(babel使用的解析器是**babylon**，后更名为  **@babel/parser**，而babylon是基于**acorn**)\n\n核心代码如下：\n\n```js\nlet ast = acorn.parse(str, { ecmaVersion: 2020 });\nif (ast) {\n    let ps =\n        ast.body[0].expression.right.callee.body.body[0].argument.properties;\n    let state = ps.find((item) => item.key.name == \"state\");\n    let view = state.value.properties.find(item => item.key.name == 'view')\n    let column = view.value.properties.find(item => item.key.name == 'column')\n    let entry = column.value.properties.find(item => item.key.name == 'entry')\n    let article_info = entry.value.properties.find(item => item.key.name == 'article_info')\n    let mark_content = article_info.value.properties.find(item => item.key.name == 'mark_content')\n    let title = article_info.value.properties.find(item => item.key.name == 'title');\n    let t = title.value.value + '.md';\n    // 非法文件名\n    let filePath = './blogs/' + t.replace(/[\\\\\\/\\:\\*\\?\\\"<>]/g,' ');\n\n    fs.writeFile(filePath, mark_content.value.value, (err) => {\n        if (!err) {\n            console.log(`${t}：done`)\n            syncBlob(index+1)\n        } else {\n            console.log(err)\n        }\n    })\n```\n\n解析出文章标题和内容后就写入文件。需要注意的是，如果用解析出的文章标题作为文件名，可能有一些字符无法用作文件名，需要处理一下。\n\n最后效果如下：\n\n![image.png](../imgs/d29604aaea8d405183b8273b0578eab3.png)","source":"_posts/如何备份掘金上的博客？用node写个爬虫吧~.md","raw":"---\n title: \"如何备份掘金上的博客？用node写个爬虫吧~\"\n date: 2022-01-29\n tags: [Node.js,爬虫]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第11天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n之前一直在掘金记录博客，这两天打算把自己的个人博客建起来，把掘金上的都备份过去。看了一下不知不觉已经写了不少了，于是第一个想法便是写个爬虫把文章爬下来，自动生成markdown文件。\n\n文章的id和请求\n--------\n\n`https://juejin.cn/post/7057816301078577159`最后便的数字大概率是文章的id了，因此首先是找自己所有文章的id。\n\n文章管理页面能找到一个列表的请求`/article/list_by_user`,是一个分页，这里可以写个脚本或手动请求拿到所有的文章id。\n\n于是第一行代码就出来了：\n\n```js\nlet ids = [...];\n```\n\n这一步不是重点，重点是获取文章的内容。\n\n获取文章内容\n------\n\n首先得找到是哪个接口获取了文章的内容。原本以为是ssr，但是html请求返回的数据似乎并没有做服务端渲染。\n\n![image.png](../imgs/bf9e9b12206f47aaa241a0ab36fdce35.png)\n\n排查了一波接口，也都没有发现哪个接口能返回文章内容数据，只好又回到html文档请求上，终于在响应里找到了这个：\n\n![image.png](../imgs/b4009d0f599c4ac39009eef3265d140e.png)\n\n掘金并没有使用典型的服务端渲染，他们将文章内容放在了一段脚本里。可以先把里面的内容爬下来，然后用cheerio获取到那个script的内容。\n\n```ini\nlet url = \"https://juejin.cn/post/\" + id;\naxios.get(url).then((res) => {\n        const $ = cheerio.load(res.data);\n        let str = $(\"body script\")[0].children[0].data;\n        ...\n});\n\n```\n\ncheerio可以将文本解析为dom，并能够让你以jQuery的语法进行操作。\n\n使用AST解析js脚本\n-----------\n\n这段脚本内容非常长，字段很多，要用正则匹配出对应的文本，可能会有些棘手，因此选择用AST语法树解析。 ![image.png](../imgs/378d8fac26cd462790f75e6ae448bf23.png) 写过babel插件的一定很熟练这个套路了：\n\n1.  借助[astexplorer.net/](https://astexplorer.net%2F \"https://astexplorer.net/\") 格式化代码，并找到对应的节点和位置：\n\n![image.png](../imgs/9f72aa0dd7eb47db9af5f3d0d6a29c87.png)\n\n![image.png](../imgs/0bd071595c974b6eb36ed0b4ba7c22b3.png)\n\n2.  使用解析器遍历得到我们想要的节点内容 这里可以使用babel，不过内容并不复杂，可以直接用更底层的acorn。(babel使用的解析器是**babylon**，后更名为  **@babel/parser**，而babylon是基于**acorn**)\n\n核心代码如下：\n\n```js\nlet ast = acorn.parse(str, { ecmaVersion: 2020 });\nif (ast) {\n    let ps =\n        ast.body[0].expression.right.callee.body.body[0].argument.properties;\n    let state = ps.find((item) => item.key.name == \"state\");\n    let view = state.value.properties.find(item => item.key.name == 'view')\n    let column = view.value.properties.find(item => item.key.name == 'column')\n    let entry = column.value.properties.find(item => item.key.name == 'entry')\n    let article_info = entry.value.properties.find(item => item.key.name == 'article_info')\n    let mark_content = article_info.value.properties.find(item => item.key.name == 'mark_content')\n    let title = article_info.value.properties.find(item => item.key.name == 'title');\n    let t = title.value.value + '.md';\n    // 非法文件名\n    let filePath = './blogs/' + t.replace(/[\\\\\\/\\:\\*\\?\\\"<>]/g,' ');\n\n    fs.writeFile(filePath, mark_content.value.value, (err) => {\n        if (!err) {\n            console.log(`${t}：done`)\n            syncBlob(index+1)\n        } else {\n            console.log(err)\n        }\n    })\n```\n\n解析出文章标题和内容后就写入文件。需要注意的是，如果用解析出的文章标题作为文件名，可能有一些字符无法用作文件名，需要处理一下。\n\n最后效果如下：\n\n![image.png](../imgs/d29604aaea8d405183b8273b0578eab3.png)","slug":"如何备份掘金上的博客？用node写个爬虫吧~","published":1,"updated":"2024-04-04T15:27:03.374Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li10074hajffcdqgnpl","content":"<p>「这是我参与2022首次更文挑战的第11天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>之前一直在掘金记录博客，这两天打算把自己的个人博客建起来，把掘金上的都备份过去。看了一下不知不觉已经写了不少了，于是第一个想法便是写个爬虫把文章爬下来，自动生成markdown文件。</p>\n<h2 id=\"文章的id和请求\"><a href=\"#文章的id和请求\" class=\"headerlink\" title=\"文章的id和请求\"></a>文章的id和请求</h2><p><code>https://juejin.cn/post/7057816301078577159</code>最后便的数字大概率是文章的id了，因此首先是找自己所有文章的id。</p>\n<p>文章管理页面能找到一个列表的请求<code>/article/list_by_user</code>,是一个分页，这里可以写个脚本或手动请求拿到所有的文章id。</p>\n<p>于是第一行代码就出来了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ids = [...];</span><br></pre></td></tr></table></figure>\n\n<p>这一步不是重点，重点是获取文章的内容。</p>\n<h2 id=\"获取文章内容\"><a href=\"#获取文章内容\" class=\"headerlink\" title=\"获取文章内容\"></a>获取文章内容</h2><p>首先得找到是哪个接口获取了文章的内容。原本以为是ssr，但是html请求返回的数据似乎并没有做服务端渲染。</p>\n<p><img src=\"/../imgs/bf9e9b12206f47aaa241a0ab36fdce35.png\" alt=\"image.png\"></p>\n<p>排查了一波接口，也都没有发现哪个接口能返回文章内容数据，只好又回到html文档请求上，终于在响应里找到了这个：</p>\n<p><img src=\"/../imgs/b4009d0f599c4ac39009eef3265d140e.png\" alt=\"image.png\"></p>\n<p>掘金并没有使用典型的服务端渲染，他们将文章内容放在了一段脚本里。可以先把里面的内容爬下来，然后用cheerio获取到那个script的内容。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let <span class=\"attr\">url</span> = <span class=\"string\">&quot;https://juejin.cn/post/&quot;</span> + id<span class=\"comment\">;</span></span><br><span class=\"line\">axios.get(url).then((res) =&gt; &#123;</span><br><span class=\"line\">        const $ = cheerio.load(res.data)<span class=\"comment\">;</span></span><br><span class=\"line\">        let <span class=\"attr\">str</span> = $(<span class=\"string\">&quot;body script&quot;</span>)[<span class=\"number\">0</span>].children[<span class=\"number\">0</span>].data<span class=\"comment\">;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>cheerio可以将文本解析为dom，并能够让你以jQuery的语法进行操作。</p>\n<h2 id=\"使用AST解析js脚本\"><a href=\"#使用AST解析js脚本\" class=\"headerlink\" title=\"使用AST解析js脚本\"></a>使用AST解析js脚本</h2><p>这段脚本内容非常长，字段很多，要用正则匹配出对应的文本，可能会有些棘手，因此选择用AST语法树解析。 <img src=\"/../imgs/378d8fac26cd462790f75e6ae448bf23.png\" alt=\"image.png\"> 写过babel插件的一定很熟练这个套路了：</p>\n<ol>\n<li>借助<a href=\"https://astexplorer.net%2F\" title=\"https://astexplorer.net/\">astexplorer.net&#x2F;</a> 格式化代码，并找到对应的节点和位置：</li>\n</ol>\n<p><img src=\"/../imgs/9f72aa0dd7eb47db9af5f3d0d6a29c87.png\" alt=\"image.png\"></p>\n<p><img src=\"/../imgs/0bd071595c974b6eb36ed0b4ba7c22b3.png\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>使用解析器遍历得到我们想要的节点内容 这里可以使用babel，不过内容并不复杂，可以直接用更底层的acorn。(babel使用的解析器是<strong>babylon</strong>，后更名为  <strong>@babel&#x2F;parser</strong>，而babylon是基于<strong>acorn</strong>)</li>\n</ol>\n<p>核心代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ast = acorn.<span class=\"title function_\">parse</span>(str, &#123; <span class=\"attr\">ecmaVersion</span>: <span class=\"number\">2020</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ast) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ps =</span><br><span class=\"line\">        ast.<span class=\"property\">body</span>[<span class=\"number\">0</span>].<span class=\"property\">expression</span>.<span class=\"property\">right</span>.<span class=\"property\">callee</span>.<span class=\"property\">body</span>.<span class=\"property\">body</span>[<span class=\"number\">0</span>].<span class=\"property\">argument</span>.<span class=\"property\">properties</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state = ps.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.<span class=\"property\">key</span>.<span class=\"property\">name</span> == <span class=\"string\">&quot;state&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> view = state.<span class=\"property\">value</span>.<span class=\"property\">properties</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">key</span>.<span class=\"property\">name</span> == <span class=\"string\">&#x27;view&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> column = view.<span class=\"property\">value</span>.<span class=\"property\">properties</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">key</span>.<span class=\"property\">name</span> == <span class=\"string\">&#x27;column&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> entry = column.<span class=\"property\">value</span>.<span class=\"property\">properties</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">key</span>.<span class=\"property\">name</span> == <span class=\"string\">&#x27;entry&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> article_info = entry.<span class=\"property\">value</span>.<span class=\"property\">properties</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">key</span>.<span class=\"property\">name</span> == <span class=\"string\">&#x27;article_info&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mark_content = article_info.<span class=\"property\">value</span>.<span class=\"property\">properties</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">key</span>.<span class=\"property\">name</span> == <span class=\"string\">&#x27;mark_content&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> title = article_info.<span class=\"property\">value</span>.<span class=\"property\">properties</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">key</span>.<span class=\"property\">name</span> == <span class=\"string\">&#x27;title&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = title.<span class=\"property\">value</span>.<span class=\"property\">value</span> + <span class=\"string\">&#x27;.md&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 非法文件名</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> filePath = <span class=\"string\">&#x27;./blogs/&#x27;</span> + t.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[\\\\\\/\\:\\*\\?\\&quot;&lt;&gt;]/g</span>,<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFile</span>(filePath, mark_content.<span class=\"property\">value</span>.<span class=\"property\">value</span>, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!err) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;t&#125;</span>：done`</span>)</span><br><span class=\"line\">            <span class=\"title function_\">syncBlob</span>(index+<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>解析出文章标题和内容后就写入文件。需要注意的是，如果用解析出的文章标题作为文件名，可能有一些字符无法用作文件名，需要处理一下。</p>\n<p>最后效果如下：</p>\n<p><img src=\"/../imgs/d29604aaea8d405183b8273b0578eab3.png\" alt=\"image.png\"></p>\n","length":2111,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第11天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<p>之前一直在掘金记录博客，这两天打算把自己的个人博客建起来，把掘金上的都备份过去。看了一下不知不觉已经写了不少了，于是第一个想法便是写个爬虫把文章爬下来，自动生成markdown文件。</p>\n<h2 id=\"文章的id和请求\"><a href=\"#文章的id和请求\" class=\"headerlink\" title=\"文章的id和请求\"></a>文章的id和请求</h2><p><code>https://juejin.cn/post/7057816301078577159</code>最后便的数字大概率是文章的id了，因此首先是找自己所有文章的id。</p>\n<p>文章管理页面能找到一个列表的请求<code>/article/list_by_user</code>,是一个分页，这里可以写个脚本或手动请求拿到所有的文章id。</p>\n<p>于是第一行代码就出来了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ids = [...];</span><br></pre></td></tr></table></figure>\n\n<p>这一步不是重点，重点是获取文章的内容。</p>\n<h2 id=\"获取文章内容\"><a href=\"#获取文章内容\" class=\"headerlink\" title=\"获取文章内容\"></a>获取文章内容</h2><p>首先得找到是哪个接口获取了文章的内容。原本以为是ssr，但是html请求返回的数据似乎并没有做服务端渲染。</p>\n<p><img src=\"/../imgs/bf9e9b12206f47aaa241a0ab36fdce35.png\" alt=\"image.png\"></p>\n<p>排查了一波接口，也都没有发现哪个接口能返回文章内容数据，只好又回到html文档请求上，终于在响应里找到了这个：</p>\n<p><img src=\"/../imgs/b4009d0f599c4ac39009eef3265d140e.png\" alt=\"image.png\"></p>\n<p>掘金并没有使用典型的服务端渲染，他们将文章内容放在了一段脚本里。可以先把里面的内容爬下来，然后用cheerio获取到那个script的内容。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let <span class=\"attr\">url</span> = <span class=\"string\">&quot;https://juejin.cn/post/&quot;</span> + id<span class=\"comment\">;</span></span><br><span class=\"line\">axios.get(url).then((res) =&gt; &#123;</span><br><span class=\"line\">        const $ = cheerio.load(res.data)<span class=\"comment\">;</span></span><br><span class=\"line\">        let <span class=\"attr\">str</span> = $(<span class=\"string\">&quot;body script&quot;</span>)[<span class=\"number\">0</span>].children[<span class=\"number\">0</span>].data<span class=\"comment\">;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>cheerio可以将文本解析为dom，并能够让你以jQuery的语法进行操作。</p>\n<h2 id=\"使用AST解析js脚本\"><a href=\"#使用AST解析js脚本\" class=\"headerlink\" title=\"使用AST解析js脚本\"></a>使用AST解析js脚本</h2><p>这段脚本内容非常长，字段很多，要用正则匹配出对应的文本，可能会有些棘手，因此选择用AST语法树解析。 <img src=\"/../imgs/378d8fac26cd462790f75e6ae448bf23.png\" alt=\"image.png\"> 写过babel插件的一定很熟练这个套路了：</p>\n<ol>\n<li>借助<a href=\"https://astexplorer.net%2F\" title=\"https://astexplorer.net/\">astexplorer.net&#x2F;</a> 格式化代码，并找到对应的节点和位置：</li>\n</ol>\n<p><img src=\"/../imgs/9f72aa0dd7eb47db9af5f3d0d6a29c87.png\" alt=\"image.png\"></p>\n<p><img src=\"/../imgs/0bd071595c974b6eb36ed0b4ba7c22b3.png\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>使用解析器遍历得到我们想要的节点内容 这里可以使用babel，不过内容并不复杂，可以直接用更底层的acorn。(babel使用的解析器是<strong>babylon</strong>，后更名为  <strong>@babel&#x2F;parser</strong>，而babylon是基于<strong>acorn</strong>)</li>\n</ol>\n<p>核心代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ast = acorn.<span class=\"title function_\">parse</span>(str, &#123; <span class=\"attr\">ecmaVersion</span>: <span class=\"number\">2020</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ast) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ps =</span><br><span class=\"line\">        ast.<span class=\"property\">body</span>[<span class=\"number\">0</span>].<span class=\"property\">expression</span>.<span class=\"property\">right</span>.<span class=\"property\">callee</span>.<span class=\"property\">body</span>.<span class=\"property\">body</span>[<span class=\"number\">0</span>].<span class=\"property\">argument</span>.<span class=\"property\">properties</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state = ps.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.<span class=\"property\">key</span>.<span class=\"property\">name</span> == <span class=\"string\">&quot;state&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> view = state.<span class=\"property\">value</span>.<span class=\"property\">properties</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">key</span>.<span class=\"property\">name</span> == <span class=\"string\">&#x27;view&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> column = view.<span class=\"property\">value</span>.<span class=\"property\">properties</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">key</span>.<span class=\"property\">name</span> == <span class=\"string\">&#x27;column&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> entry = column.<span class=\"property\">value</span>.<span class=\"property\">properties</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">key</span>.<span class=\"property\">name</span> == <span class=\"string\">&#x27;entry&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> article_info = entry.<span class=\"property\">value</span>.<span class=\"property\">properties</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">key</span>.<span class=\"property\">name</span> == <span class=\"string\">&#x27;article_info&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mark_content = article_info.<span class=\"property\">value</span>.<span class=\"property\">properties</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">key</span>.<span class=\"property\">name</span> == <span class=\"string\">&#x27;mark_content&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> title = article_info.<span class=\"property\">value</span>.<span class=\"property\">properties</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">key</span>.<span class=\"property\">name</span> == <span class=\"string\">&#x27;title&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = title.<span class=\"property\">value</span>.<span class=\"property\">value</span> + <span class=\"string\">&#x27;.md&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 非法文件名</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> filePath = <span class=\"string\">&#x27;./blogs/&#x27;</span> + t.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[\\\\\\/\\:\\*\\?\\&quot;&lt;&gt;]/g</span>,<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFile</span>(filePath, mark_content.<span class=\"property\">value</span>.<span class=\"property\">value</span>, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!err) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;t&#125;</span>：done`</span>)</span><br><span class=\"line\">            <span class=\"title function_\">syncBlob</span>(index+<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>解析出文章标题和内容后就写入文件。需要注意的是，如果用解析出的文章标题作为文件名，可能有一些字符无法用作文件名，需要处理一下。</p>\n<p>最后效果如下：</p>\n<p><img src=\"/../imgs/d29604aaea8d405183b8273b0578eab3.png\" alt=\"image.png\"></p>\n"},{"title":"实操使用原子级样式快速精准还原设计稿","date":"2021-09-17T16:00:00.000Z","_content":"\n很多人觉得原子级样式还原设计稿很难精确，然而如果掌握了正确的布局思路，是可以做到优雅快速且精准的。\n\n比如说我们要还原这个小卡片，内容很简单 ![1631933191(1).png](../imgs/d02225b4919f4ea2adf6be3a0d35f97e.png)\n\n第一步：确定整体元素布局\n------------\n\n```xml\n <div>\n    <div>\n      <span>商品名称</span>\n      <span>xxxxxxxxxxxxxxxxxxxxx</span>\n    </div>\n    <div>\n      <span>商品编码</span>\n      <span>xxxxx</span>\n      <span><van-icon name=\"arrow\" :color=\"textColor.muted\"/></span>\n    </div>\n    <div>\n      <span>金额/税额</span>\n      <span>xxxc/xxxx</span>\n    </div>\n  </div>\n```\n\n效果如下：\n\n![1631933360(1).png](../imgs/8616c565ebff4ce8a4b478c7937e8698.png)\n\n第二步：对外层div进行调整，控制整体样式\n---------------------\n\n观察外层div，有背景、圆角、margin、padding需要进行设置,相关的样式分别是`bg-gray-100 rounded m-20 mt-0 p-30 pr-20`\n\n![image.png](../imgs/b6ea9aea43b94d7a931c4180550f1f14.png)\n\n```xml\n<div class=\"bg-gray-100 rounded m-20 mt-0 p-30 pr-20\">\n    <div>\n      <span>商品名称</span>\n      <span>xxxxxxx</span>\n    </div>\n    <div>\n      <span>商品编码</span>\n      <span>xxxxx</span>\n      <span><van-icon name=\"arrow\" :color=\"textColor.muted\"/></span>\n    </div>\n    <div>\n      <span>金额/税额</span>\n      <span>xxxc/xxxx</span>\n    </div>\n  </div>\n```\n\n这里对margin-top设置为0，也是一个布局小原则：同级上下间距使用margin-bottom，因为margin-top有合并到父元素上的风险。\n\n此时效果如下，整体布局已经完成\n\n![image.png](../imgs/dece515d4cda456cb685723dc7715a50.png)\n\n第三步：对内部进行调整，完成各局部布局\n-------------------\n\n观察设计稿，\n\n*   先看行间，有margin-bottom隔开，\n*   再看行内各元素间\n    *   左边字段名是固定宽度，\n    *   中间字段值看上去是占据剩余空间，但是有ellipsis的效果，因此也只能是固定宽度，否则可以使用flex：1，\n    *   中间的箭头，自然是被字段值元素给顶到右侧的\n    *   箭头的大小和文字不一致，因此需要注意居中对齐\n*   最后看每个行内元素：\n    *   文字大小为28px，也就是我们的默认值，不需要额外设置\n        \n    *   左侧文字的颜色为muted\n        \n    *   中间文字颜色为basic，也是默认值，不需要设置\n        \n    *   箭头的颜色需要设置，是第三方组件，找到对应的api，并将全局样式inject进来\n        \n\n![image.png](../imgs/c723562b8e9c44e1bec04f299dc10034.png)\n\n```xml\n<div class=\"bg-gray-100 rounded m-20 mt-0 p-30 pr-20\">\n    <div class=\"flex items-center mb-20\">\n      <span class=\"field text-muted mr-30\">商品名称</span>\n      <span class=\"value ellipsis\">xxxxxxx</span>\n    </div>\n    <div class=\"flex items-center mb-20\">\n      <span class=\"field text-muted mr-30\">商品编码</span>\n      <span class=\"value ellipsis\">xxxxx</span>\n      <span><van-icon name=\"arrow\" :color=\"textColor.muted\"/></span>\n    </div>\n    <div class=\"flex items-center\">\n      <span class=\"field text-muted mr-30\">金额/税额</span>\n      <span class=\"value ellipsis\">xxxc/xxxx</span>\n    </div>\n  </div>\n```\n\ncss:\n\n```css\n.field {\n  width: 126px;\n}\n.value {\n  width: 390px;\n}\n```\n\n由于field和value的宽度并不在我们的标准宽度内，因此只能额外设置样式。\n\n`<van-icon name=\"arrow\" :color=\"textColor.muted\"/>`则是vue组件的inject注入全局样式配置，再对第三方组件进行设置：`inject: ['textColor'],`\n\n此时效果如下，整体效果已经出来了\n\n![image.png](../imgs/cd9fd718405249d7b843d4d30271f96a.png)\n\n第四步：微调行高造成的误差\n-------------\n\n设计稿上行高为1，也就是28px（750设计稿），而我们默认14px文字的行高为19px，差了5px，因此需要微调一下\n\n```diff\n- <div class=\"bg-gray-100 rounded m-20 mt-0 p-30 pr-20\">\n+ <div class=\"bg-gray-100 rounded m-20 mt-0 py-24 pl-30 pr-20\">\n    <div class=\"flex items-center mb-20\">\n      <span class=\"field text-muted mr-30\">商品名称</span>\n      <span class=\"value ellipsis\">xxxxxxx</span>\n    </div>\n    <div class=\"flex items-center mb-20\">\n      <span class=\"field text-muted mr-30\">商品编码</span>\n      <span class=\"value ellipsis\">xxxxx</span>\n      <span><van-icon name=\"arrow\" :color=\"textColor.muted\"/></span>\n    </div>\n    <div class=\"flex items-center\">\n      <span class=\"field text-muted mr-30\">金额/税额</span>\n      <span class=\"value ellipsis\">xxxc/xxxx</span>\n    </div>\n  </div>\n```\n\n此时效果如下\n\n![image.png](../imgs/47858ec75dee4b88b03b6329ce438d72.png)\n\n最后检查实现效果\n--------\n\n设计稿card的高度为204px(2倍)，我们实现的是101px，因行高造成不到1%的误差，是完全能够接受的。\n\n总结\n--\n\n使用原子级样式的好处在于布局过程中可以对照设计稿进行盲写，一次性将绝大多数样式填充完毕，有经验的配合各种快捷方式甚至可以一次完成一个小组件的全部样式，整个过程行云流水。而传统的布局方式在实践中往往会写一部分看一部分，速度自然也就没那么快了。\n\n附：布局原则\n------\n\n*   从整体到局部： 也就是先勾勒骨架，再描绘细节，并确定各元素之间的划分和关系\n*   从上到下：也就是上下间距由上一个元素控制（例如用mt而不是mb）\n*   从左到右：也就是左右间距由左元素控制（也就是用ml而不是lr）\n*   先外围后内部：也就是先用margin控制同级间距，再用padding控制内部间距 这个原则简单浅显，我原本以为大家都是这么布局的，直到我review了多个团队多个项目的后，发现各种诡异的布局问题和牵一发而动全身的布局改动都源于违背了这个原则。嗯，大家的代码都很桀骜不羁~","source":"_posts/实操使用原子级样式快速精准还原设计稿.md","raw":"---\n title: \"实操使用原子级样式快速精准还原设计稿\"\n date: 2021-09-18\n tags: [前端]\n categories: [前端笔记]\n---\n\n很多人觉得原子级样式还原设计稿很难精确，然而如果掌握了正确的布局思路，是可以做到优雅快速且精准的。\n\n比如说我们要还原这个小卡片，内容很简单 ![1631933191(1).png](../imgs/d02225b4919f4ea2adf6be3a0d35f97e.png)\n\n第一步：确定整体元素布局\n------------\n\n```xml\n <div>\n    <div>\n      <span>商品名称</span>\n      <span>xxxxxxxxxxxxxxxxxxxxx</span>\n    </div>\n    <div>\n      <span>商品编码</span>\n      <span>xxxxx</span>\n      <span><van-icon name=\"arrow\" :color=\"textColor.muted\"/></span>\n    </div>\n    <div>\n      <span>金额/税额</span>\n      <span>xxxc/xxxx</span>\n    </div>\n  </div>\n```\n\n效果如下：\n\n![1631933360(1).png](../imgs/8616c565ebff4ce8a4b478c7937e8698.png)\n\n第二步：对外层div进行调整，控制整体样式\n---------------------\n\n观察外层div，有背景、圆角、margin、padding需要进行设置,相关的样式分别是`bg-gray-100 rounded m-20 mt-0 p-30 pr-20`\n\n![image.png](../imgs/b6ea9aea43b94d7a931c4180550f1f14.png)\n\n```xml\n<div class=\"bg-gray-100 rounded m-20 mt-0 p-30 pr-20\">\n    <div>\n      <span>商品名称</span>\n      <span>xxxxxxx</span>\n    </div>\n    <div>\n      <span>商品编码</span>\n      <span>xxxxx</span>\n      <span><van-icon name=\"arrow\" :color=\"textColor.muted\"/></span>\n    </div>\n    <div>\n      <span>金额/税额</span>\n      <span>xxxc/xxxx</span>\n    </div>\n  </div>\n```\n\n这里对margin-top设置为0，也是一个布局小原则：同级上下间距使用margin-bottom，因为margin-top有合并到父元素上的风险。\n\n此时效果如下，整体布局已经完成\n\n![image.png](../imgs/dece515d4cda456cb685723dc7715a50.png)\n\n第三步：对内部进行调整，完成各局部布局\n-------------------\n\n观察设计稿，\n\n*   先看行间，有margin-bottom隔开，\n*   再看行内各元素间\n    *   左边字段名是固定宽度，\n    *   中间字段值看上去是占据剩余空间，但是有ellipsis的效果，因此也只能是固定宽度，否则可以使用flex：1，\n    *   中间的箭头，自然是被字段值元素给顶到右侧的\n    *   箭头的大小和文字不一致，因此需要注意居中对齐\n*   最后看每个行内元素：\n    *   文字大小为28px，也就是我们的默认值，不需要额外设置\n        \n    *   左侧文字的颜色为muted\n        \n    *   中间文字颜色为basic，也是默认值，不需要设置\n        \n    *   箭头的颜色需要设置，是第三方组件，找到对应的api，并将全局样式inject进来\n        \n\n![image.png](../imgs/c723562b8e9c44e1bec04f299dc10034.png)\n\n```xml\n<div class=\"bg-gray-100 rounded m-20 mt-0 p-30 pr-20\">\n    <div class=\"flex items-center mb-20\">\n      <span class=\"field text-muted mr-30\">商品名称</span>\n      <span class=\"value ellipsis\">xxxxxxx</span>\n    </div>\n    <div class=\"flex items-center mb-20\">\n      <span class=\"field text-muted mr-30\">商品编码</span>\n      <span class=\"value ellipsis\">xxxxx</span>\n      <span><van-icon name=\"arrow\" :color=\"textColor.muted\"/></span>\n    </div>\n    <div class=\"flex items-center\">\n      <span class=\"field text-muted mr-30\">金额/税额</span>\n      <span class=\"value ellipsis\">xxxc/xxxx</span>\n    </div>\n  </div>\n```\n\ncss:\n\n```css\n.field {\n  width: 126px;\n}\n.value {\n  width: 390px;\n}\n```\n\n由于field和value的宽度并不在我们的标准宽度内，因此只能额外设置样式。\n\n`<van-icon name=\"arrow\" :color=\"textColor.muted\"/>`则是vue组件的inject注入全局样式配置，再对第三方组件进行设置：`inject: ['textColor'],`\n\n此时效果如下，整体效果已经出来了\n\n![image.png](../imgs/cd9fd718405249d7b843d4d30271f96a.png)\n\n第四步：微调行高造成的误差\n-------------\n\n设计稿上行高为1，也就是28px（750设计稿），而我们默认14px文字的行高为19px，差了5px，因此需要微调一下\n\n```diff\n- <div class=\"bg-gray-100 rounded m-20 mt-0 p-30 pr-20\">\n+ <div class=\"bg-gray-100 rounded m-20 mt-0 py-24 pl-30 pr-20\">\n    <div class=\"flex items-center mb-20\">\n      <span class=\"field text-muted mr-30\">商品名称</span>\n      <span class=\"value ellipsis\">xxxxxxx</span>\n    </div>\n    <div class=\"flex items-center mb-20\">\n      <span class=\"field text-muted mr-30\">商品编码</span>\n      <span class=\"value ellipsis\">xxxxx</span>\n      <span><van-icon name=\"arrow\" :color=\"textColor.muted\"/></span>\n    </div>\n    <div class=\"flex items-center\">\n      <span class=\"field text-muted mr-30\">金额/税额</span>\n      <span class=\"value ellipsis\">xxxc/xxxx</span>\n    </div>\n  </div>\n```\n\n此时效果如下\n\n![image.png](../imgs/47858ec75dee4b88b03b6329ce438d72.png)\n\n最后检查实现效果\n--------\n\n设计稿card的高度为204px(2倍)，我们实现的是101px，因行高造成不到1%的误差，是完全能够接受的。\n\n总结\n--\n\n使用原子级样式的好处在于布局过程中可以对照设计稿进行盲写，一次性将绝大多数样式填充完毕，有经验的配合各种快捷方式甚至可以一次完成一个小组件的全部样式，整个过程行云流水。而传统的布局方式在实践中往往会写一部分看一部分，速度自然也就没那么快了。\n\n附：布局原则\n------\n\n*   从整体到局部： 也就是先勾勒骨架，再描绘细节，并确定各元素之间的划分和关系\n*   从上到下：也就是上下间距由上一个元素控制（例如用mt而不是mb）\n*   从左到右：也就是左右间距由左元素控制（也就是用ml而不是lr）\n*   先外围后内部：也就是先用margin控制同级间距，再用padding控制内部间距 这个原则简单浅显，我原本以为大家都是这么布局的，直到我review了多个团队多个项目的后，发现各种诡异的布局问题和牵一发而动全身的布局改动都源于违背了这个原则。嗯，大家的代码都很桀骜不羁~","slug":"实操使用原子级样式快速精准还原设计稿","published":1,"updated":"2024-04-04T15:27:03.420Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li20078hajfc29j4p1y","content":"<p>很多人觉得原子级样式还原设计稿很难精确，然而如果掌握了正确的布局思路，是可以做到优雅快速且精准的。</p>\n<p>比如说我们要还原这个小卡片，内容很简单 <img src=\"/../imgs/d02225b4919f4ea2adf6be3a0d35f97e.png\" alt=\"1631933191(1).png\"></p>\n<h2 id=\"第一步：确定整体元素布局\"><a href=\"#第一步：确定整体元素布局\" class=\"headerlink\" title=\"第一步：确定整体元素布局\"></a>第一步：确定整体元素布局</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>商品名称<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>xxxxxxxxxxxxxxxxxxxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>商品编码<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>xxxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">van-icon</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;arrow&quot;</span> <span class=\"attr\">:color</span>=<span class=\"string\">&quot;textColor.muted&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>金额/税额<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>xxxc/xxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/../imgs/8616c565ebff4ce8a4b478c7937e8698.png\" alt=\"1631933360(1).png\"></p>\n<h2 id=\"第二步：对外层div进行调整，控制整体样式\"><a href=\"#第二步：对外层div进行调整，控制整体样式\" class=\"headerlink\" title=\"第二步：对外层div进行调整，控制整体样式\"></a>第二步：对外层div进行调整，控制整体样式</h2><p>观察外层div，有背景、圆角、margin、padding需要进行设置,相关的样式分别是<code>bg-gray-100 rounded m-20 mt-0 p-30 pr-20</code></p>\n<p><img src=\"/../imgs/b6ea9aea43b94d7a931c4180550f1f14.png\" alt=\"image.png\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-gray-100 rounded m-20 mt-0 p-30 pr-20&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>商品名称<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>xxxxxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>商品编码<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>xxxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">van-icon</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;arrow&quot;</span> <span class=\"attr\">:color</span>=<span class=\"string\">&quot;textColor.muted&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>金额/税额<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>xxxc/xxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里对margin-top设置为0，也是一个布局小原则：同级上下间距使用margin-bottom，因为margin-top有合并到父元素上的风险。</p>\n<p>此时效果如下，整体布局已经完成</p>\n<p><img src=\"/../imgs/dece515d4cda456cb685723dc7715a50.png\" alt=\"image.png\"></p>\n<h2 id=\"第三步：对内部进行调整，完成各局部布局\"><a href=\"#第三步：对内部进行调整，完成各局部布局\" class=\"headerlink\" title=\"第三步：对内部进行调整，完成各局部布局\"></a>第三步：对内部进行调整，完成各局部布局</h2><p>观察设计稿，</p>\n<ul>\n<li>先看行间，有margin-bottom隔开，</li>\n<li>再看行内各元素间<ul>\n<li>左边字段名是固定宽度，</li>\n<li>中间字段值看上去是占据剩余空间，但是有ellipsis的效果，因此也只能是固定宽度，否则可以使用flex：1，</li>\n<li>中间的箭头，自然是被字段值元素给顶到右侧的</li>\n<li>箭头的大小和文字不一致，因此需要注意居中对齐</li>\n</ul>\n</li>\n<li>最后看每个行内元素：<ul>\n<li><p>文字大小为28px，也就是我们的默认值，不需要额外设置</p>\n</li>\n<li><p>左侧文字的颜色为muted</p>\n</li>\n<li><p>中间文字颜色为basic，也是默认值，不需要设置</p>\n</li>\n<li><p>箭头的颜色需要设置，是第三方组件，找到对应的api，并将全局样式inject进来</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../imgs/c723562b8e9c44e1bec04f299dc10034.png\" alt=\"image.png\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-gray-100 rounded m-20 mt-0 p-30 pr-20&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex items-center mb-20&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;field text-muted mr-30&quot;</span>&gt;</span>商品名称<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;value ellipsis&quot;</span>&gt;</span>xxxxxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex items-center mb-20&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;field text-muted mr-30&quot;</span>&gt;</span>商品编码<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;value ellipsis&quot;</span>&gt;</span>xxxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">van-icon</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;arrow&quot;</span> <span class=\"attr\">:color</span>=<span class=\"string\">&quot;textColor.muted&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex items-center&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;field text-muted mr-30&quot;</span>&gt;</span>金额/税额<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;value ellipsis&quot;</span>&gt;</span>xxxc/xxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.field</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">126px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.value</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">390px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于field和value的宽度并不在我们的标准宽度内，因此只能额外设置样式。</p>\n<p><code>&lt;van-icon name=&quot;arrow&quot; :color=&quot;textColor.muted&quot;/&gt;</code>则是vue组件的inject注入全局样式配置，再对第三方组件进行设置：<code>inject: [&#39;textColor&#39;],</code></p>\n<p>此时效果如下，整体效果已经出来了</p>\n<p><img src=\"/../imgs/cd9fd718405249d7b843d4d30271f96a.png\" alt=\"image.png\"></p>\n<h2 id=\"第四步：微调行高造成的误差\"><a href=\"#第四步：微调行高造成的误差\" class=\"headerlink\" title=\"第四步：微调行高造成的误差\"></a>第四步：微调行高造成的误差</h2><p>设计稿上行高为1，也就是28px（750设计稿），而我们默认14px文字的行高为19px，差了5px，因此需要微调一下</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- &lt;div class=&quot;bg-gray-100 rounded m-20 mt-0 p-30 pr-20&quot;&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+ &lt;div class=&quot;bg-gray-100 rounded m-20 mt-0 py-24 pl-30 pr-20&quot;&gt;</span></span><br><span class=\"line\">    &lt;div class=&quot;flex items-center mb-20&quot;&gt;</span><br><span class=\"line\">      &lt;span class=&quot;field text-muted mr-30&quot;&gt;商品名称&lt;/span&gt;</span><br><span class=\"line\">      &lt;span class=&quot;value ellipsis&quot;&gt;xxxxxxx&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;flex items-center mb-20&quot;&gt;</span><br><span class=\"line\">      &lt;span class=&quot;field text-muted mr-30&quot;&gt;商品编码&lt;/span&gt;</span><br><span class=\"line\">      &lt;span class=&quot;value ellipsis&quot;&gt;xxxxx&lt;/span&gt;</span><br><span class=\"line\">      &lt;span&gt;&lt;van-icon name=&quot;arrow&quot; :color=&quot;textColor.muted&quot;/&gt;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;flex items-center&quot;&gt;</span><br><span class=\"line\">      &lt;span class=&quot;field text-muted mr-30&quot;&gt;金额/税额&lt;/span&gt;</span><br><span class=\"line\">      &lt;span class=&quot;value ellipsis&quot;&gt;xxxc/xxxx&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>此时效果如下</p>\n<p><img src=\"/../imgs/47858ec75dee4b88b03b6329ce438d72.png\" alt=\"image.png\"></p>\n<h2 id=\"最后检查实现效果\"><a href=\"#最后检查实现效果\" class=\"headerlink\" title=\"最后检查实现效果\"></a>最后检查实现效果</h2><p>设计稿card的高度为204px(2倍)，我们实现的是101px，因行高造成不到1%的误差，是完全能够接受的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用原子级样式的好处在于布局过程中可以对照设计稿进行盲写，一次性将绝大多数样式填充完毕，有经验的配合各种快捷方式甚至可以一次完成一个小组件的全部样式，整个过程行云流水。而传统的布局方式在实践中往往会写一部分看一部分，速度自然也就没那么快了。</p>\n<h2 id=\"附：布局原则\"><a href=\"#附：布局原则\" class=\"headerlink\" title=\"附：布局原则\"></a>附：布局原则</h2><ul>\n<li>从整体到局部： 也就是先勾勒骨架，再描绘细节，并确定各元素之间的划分和关系</li>\n<li>从上到下：也就是上下间距由上一个元素控制（例如用mt而不是mb）</li>\n<li>从左到右：也就是左右间距由左元素控制（也就是用ml而不是lr）</li>\n<li>先外围后内部：也就是先用margin控制同级间距，再用padding控制内部间距 这个原则简单浅显，我原本以为大家都是这么布局的，直到我review了多个团队多个项目的后，发现各种诡异的布局问题和牵一发而动全身的布局改动都源于违背了这个原则。嗯，大家的代码都很桀骜不羁~</li>\n</ul>\n","length":3781,"excerpt":"","more":"<p>很多人觉得原子级样式还原设计稿很难精确，然而如果掌握了正确的布局思路，是可以做到优雅快速且精准的。</p>\n<p>比如说我们要还原这个小卡片，内容很简单 <img src=\"/../imgs/d02225b4919f4ea2adf6be3a0d35f97e.png\" alt=\"1631933191(1).png\"></p>\n<h2 id=\"第一步：确定整体元素布局\"><a href=\"#第一步：确定整体元素布局\" class=\"headerlink\" title=\"第一步：确定整体元素布局\"></a>第一步：确定整体元素布局</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>商品名称<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>xxxxxxxxxxxxxxxxxxxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>商品编码<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>xxxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">van-icon</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;arrow&quot;</span> <span class=\"attr\">:color</span>=<span class=\"string\">&quot;textColor.muted&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>金额/税额<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>xxxc/xxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/../imgs/8616c565ebff4ce8a4b478c7937e8698.png\" alt=\"1631933360(1).png\"></p>\n<h2 id=\"第二步：对外层div进行调整，控制整体样式\"><a href=\"#第二步：对外层div进行调整，控制整体样式\" class=\"headerlink\" title=\"第二步：对外层div进行调整，控制整体样式\"></a>第二步：对外层div进行调整，控制整体样式</h2><p>观察外层div，有背景、圆角、margin、padding需要进行设置,相关的样式分别是<code>bg-gray-100 rounded m-20 mt-0 p-30 pr-20</code></p>\n<p><img src=\"/../imgs/b6ea9aea43b94d7a931c4180550f1f14.png\" alt=\"image.png\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-gray-100 rounded m-20 mt-0 p-30 pr-20&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>商品名称<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>xxxxxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>商品编码<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>xxxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">van-icon</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;arrow&quot;</span> <span class=\"attr\">:color</span>=<span class=\"string\">&quot;textColor.muted&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>金额/税额<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>xxxc/xxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里对margin-top设置为0，也是一个布局小原则：同级上下间距使用margin-bottom，因为margin-top有合并到父元素上的风险。</p>\n<p>此时效果如下，整体布局已经完成</p>\n<p><img src=\"/../imgs/dece515d4cda456cb685723dc7715a50.png\" alt=\"image.png\"></p>\n<h2 id=\"第三步：对内部进行调整，完成各局部布局\"><a href=\"#第三步：对内部进行调整，完成各局部布局\" class=\"headerlink\" title=\"第三步：对内部进行调整，完成各局部布局\"></a>第三步：对内部进行调整，完成各局部布局</h2><p>观察设计稿，</p>\n<ul>\n<li>先看行间，有margin-bottom隔开，</li>\n<li>再看行内各元素间<ul>\n<li>左边字段名是固定宽度，</li>\n<li>中间字段值看上去是占据剩余空间，但是有ellipsis的效果，因此也只能是固定宽度，否则可以使用flex：1，</li>\n<li>中间的箭头，自然是被字段值元素给顶到右侧的</li>\n<li>箭头的大小和文字不一致，因此需要注意居中对齐</li>\n</ul>\n</li>\n<li>最后看每个行内元素：<ul>\n<li><p>文字大小为28px，也就是我们的默认值，不需要额外设置</p>\n</li>\n<li><p>左侧文字的颜色为muted</p>\n</li>\n<li><p>中间文字颜色为basic，也是默认值，不需要设置</p>\n</li>\n<li><p>箭头的颜色需要设置，是第三方组件，找到对应的api，并将全局样式inject进来</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../imgs/c723562b8e9c44e1bec04f299dc10034.png\" alt=\"image.png\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-gray-100 rounded m-20 mt-0 p-30 pr-20&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex items-center mb-20&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;field text-muted mr-30&quot;</span>&gt;</span>商品名称<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;value ellipsis&quot;</span>&gt;</span>xxxxxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex items-center mb-20&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;field text-muted mr-30&quot;</span>&gt;</span>商品编码<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;value ellipsis&quot;</span>&gt;</span>xxxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">van-icon</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;arrow&quot;</span> <span class=\"attr\">:color</span>=<span class=\"string\">&quot;textColor.muted&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex items-center&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;field text-muted mr-30&quot;</span>&gt;</span>金额/税额<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;value ellipsis&quot;</span>&gt;</span>xxxc/xxxx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.field</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">126px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.value</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">390px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于field和value的宽度并不在我们的标准宽度内，因此只能额外设置样式。</p>\n<p><code>&lt;van-icon name=&quot;arrow&quot; :color=&quot;textColor.muted&quot;/&gt;</code>则是vue组件的inject注入全局样式配置，再对第三方组件进行设置：<code>inject: [&#39;textColor&#39;],</code></p>\n<p>此时效果如下，整体效果已经出来了</p>\n<p><img src=\"/../imgs/cd9fd718405249d7b843d4d30271f96a.png\" alt=\"image.png\"></p>\n<h2 id=\"第四步：微调行高造成的误差\"><a href=\"#第四步：微调行高造成的误差\" class=\"headerlink\" title=\"第四步：微调行高造成的误差\"></a>第四步：微调行高造成的误差</h2><p>设计稿上行高为1，也就是28px（750设计稿），而我们默认14px文字的行高为19px，差了5px，因此需要微调一下</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- &lt;div class=&quot;bg-gray-100 rounded m-20 mt-0 p-30 pr-20&quot;&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+ &lt;div class=&quot;bg-gray-100 rounded m-20 mt-0 py-24 pl-30 pr-20&quot;&gt;</span></span><br><span class=\"line\">    &lt;div class=&quot;flex items-center mb-20&quot;&gt;</span><br><span class=\"line\">      &lt;span class=&quot;field text-muted mr-30&quot;&gt;商品名称&lt;/span&gt;</span><br><span class=\"line\">      &lt;span class=&quot;value ellipsis&quot;&gt;xxxxxxx&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;flex items-center mb-20&quot;&gt;</span><br><span class=\"line\">      &lt;span class=&quot;field text-muted mr-30&quot;&gt;商品编码&lt;/span&gt;</span><br><span class=\"line\">      &lt;span class=&quot;value ellipsis&quot;&gt;xxxxx&lt;/span&gt;</span><br><span class=\"line\">      &lt;span&gt;&lt;van-icon name=&quot;arrow&quot; :color=&quot;textColor.muted&quot;/&gt;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;flex items-center&quot;&gt;</span><br><span class=\"line\">      &lt;span class=&quot;field text-muted mr-30&quot;&gt;金额/税额&lt;/span&gt;</span><br><span class=\"line\">      &lt;span class=&quot;value ellipsis&quot;&gt;xxxc/xxxx&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>此时效果如下</p>\n<p><img src=\"/../imgs/47858ec75dee4b88b03b6329ce438d72.png\" alt=\"image.png\"></p>\n<h2 id=\"最后检查实现效果\"><a href=\"#最后检查实现效果\" class=\"headerlink\" title=\"最后检查实现效果\"></a>最后检查实现效果</h2><p>设计稿card的高度为204px(2倍)，我们实现的是101px，因行高造成不到1%的误差，是完全能够接受的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用原子级样式的好处在于布局过程中可以对照设计稿进行盲写，一次性将绝大多数样式填充完毕，有经验的配合各种快捷方式甚至可以一次完成一个小组件的全部样式，整个过程行云流水。而传统的布局方式在实践中往往会写一部分看一部分，速度自然也就没那么快了。</p>\n<h2 id=\"附：布局原则\"><a href=\"#附：布局原则\" class=\"headerlink\" title=\"附：布局原则\"></a>附：布局原则</h2><ul>\n<li>从整体到局部： 也就是先勾勒骨架，再描绘细节，并确定各元素之间的划分和关系</li>\n<li>从上到下：也就是上下间距由上一个元素控制（例如用mt而不是mb）</li>\n<li>从左到右：也就是左右间距由左元素控制（也就是用ml而不是lr）</li>\n<li>先外围后内部：也就是先用margin控制同级间距，再用padding控制内部间距 这个原则简单浅显，我原本以为大家都是这么布局的，直到我review了多个团队多个项目的后，发现各种诡异的布局问题和牵一发而动全身的布局改动都源于违背了这个原则。嗯，大家的代码都很桀骜不羁~</li>\n</ul>\n"},{"title":"封装一个Request库需要考虑哪些","date":"2021-05-25T16:00:00.000Z","_content":"\n前言\n==\n\n最近在重新编写公司的脚手架全家桶，虽然以前也搞过一些小的脚手架，但大多基于download-git-repo一顿commander+inquirer的操作就完事儿了。但是搞全家桶的的任务不仅包含了一套cli，更重要的是核心的基础组件，比如说request库，事实上这个库的开发时间远远超过了我的排期，下面记录一下封装的过程重考虑到的一些问题。\n\n一、确定设计原则\n--------\n\n这里的设计原则其实就是组件特性，一个好的request库往往有如下特征：\n\n*   cross platform：比如说同时支持浏览器、node、微信小程序\n*   simple：简洁，即api简洁和配置友好，最好能够零配置，开箱即用\n*   promise： 基于promise，方便异步编程\n*   cancelable: 可以取消已发出的请求\n*   interceptor： 可以方便地进行请求和响应拦截设置\n*   instantial： 提供实例化，多个实例可以独立配置和共享全局配置，方便一个项目向多个服务发送请求的场景处理\n*   alternative： 可以支持request client的更换，比如底层更换xhr和fetch时是无感的 以上这么多可以参考项目的实际情况进行选择，或者制定开发路线，逐步实现\n\n二、选型\n----\n\n### 请求库选型\n\n$.ajax，axios，还是自己封装xhr或fetch？\n\n**axios**的好处十分明显：promise和各种配置、拦截器、cancel token等等，但是缺点也有不少，比如取消是基于cancelable promises proposal 而不是xhr的abort；无法配置全局拦截器让多实例共享；无法将底层更换为fetch等等。\n\n**fetch**的好处也很明显，基于promise和stream能带来非常多的操作便利性，而且还能在worker中使用，但是和xhr相比缺了不少配置，比如timeout等，需要自行实现\n\n个人觉得在时间有限的情况下，基于axios进行二次封装过渡是一个更好的方案，毕竟主要的需求它都提供了。\n\n### lib开发的技术选型\n\n**语言**，**es**还是**ts**？为了更好的开发和使用体验，往往会选择ts；\n\n**打包**：webpack？rollup？tsdx还是其他种种甚至单纯用tsc？虽然都可以达到目的，但是这个技术决策会影响后续的打包、发布时间，配置复杂度，其他人的接手成本等等，也是需要提前想好的。\n\n如果使用ts开发，个人感觉tsdx还是非常方便的。\n\n三、api设计\n-------\n\n### 确定最终的使用方式即核心api\n\n现在基本都用了**swagger**或者其他mock平台，那么基于swagger.json或者其他的api.json，是可以非常方便的生成接口代码已经定义参数和返回值类型的。但是编写这些生成脚本并不是这个库的目标，但是这个库需要提供非常简洁的api以支持这些脚本，比如这种\n\n![image.png](../imgs/207986b2db8a442c8f8fdb2435a0ad2a.png)\n\n装饰器`@HTTP.post`负责发送post请求，而`OpsHttpRequest`负责定义参数类型，使用者无需关心请求如何发送。 同时装饰器可以接受多个参数以满足配置需求，如\n\n![image.png](../imgs/987a8555af9c415083f9507ef7553f0b.png)\n\n为了满足更多的配置需求，可以**设计构造器、实例方法，以及static api**\n\n![image.png](../imgs/f877c9447b8447c2a70b2de3d7e87316.png)\n\n### 确定整体架构\n\n如果基于上图这套方案，可以分为三个模块：\n\n**httpDecorator**： 负责装饰器的逻辑\n\n**adapter**： 负责兼容不同的client，比如xhr和fetch，甚至其他第三方的request client\n\n**request**： 真正发送请求的client，将xhr、fetch或者axios的使用封装成一个Request对象\n\n三者的关系是：httpDecorator改写属性描述符，接受参数，并传递给adapter；adapter找到相应的request client；request进行请求发送和响应处理\n\n除了这些，**还可以设计middleware模块**，负责log、time监控记录和加密等，如果这个需求并不复杂和多变，直接放入request中实现也无不可\n\n而说起请求的监控，往往又会引出一堆的工作~\n\n四、确定内置处理\n--------\n\n比如默认的log输出、对所有请求加上id，对带content-disposition头的进行下载处理等等。 只做什么相比能做什么，是一件更难决定的事情。\n\n![image.png](../imgs/3c5cb59c512245b8bf051524553a8083.png)\n\n五、确定依赖\n------\n\n这个库依赖了哪些第三方的库，要用什么版本，是否固定这些依赖的PATCH版本？回答这些问题，往往需要仔细查阅这些依赖的各版本的changelog~\n\n六、确定测试方案\n--------\n\n作为一个核心库，自动化测试一定要有，测试场景一定要全面，往往需要自己写个简单的server测试各种场景：404，500，200，错误处理等等\n\n七、文档\n----\n\n阻止我们脚步的，不是开发难题，而是还要编写文档~\n\nreadme和changelog肯定是少不了的，设计架构、实现原理、未来迭代计划往往也少不了。更多的时候，还需要提供一个小demo供使用者参考","source":"_posts/封装一个Request库需要考虑哪些.md","raw":"---\n title: \"封装一个Request库需要考虑哪些\"\n date: 2021-05-26\n tags: [前端]\n categories: [前端笔记]\n---\n\n前言\n==\n\n最近在重新编写公司的脚手架全家桶，虽然以前也搞过一些小的脚手架，但大多基于download-git-repo一顿commander+inquirer的操作就完事儿了。但是搞全家桶的的任务不仅包含了一套cli，更重要的是核心的基础组件，比如说request库，事实上这个库的开发时间远远超过了我的排期，下面记录一下封装的过程重考虑到的一些问题。\n\n一、确定设计原则\n--------\n\n这里的设计原则其实就是组件特性，一个好的request库往往有如下特征：\n\n*   cross platform：比如说同时支持浏览器、node、微信小程序\n*   simple：简洁，即api简洁和配置友好，最好能够零配置，开箱即用\n*   promise： 基于promise，方便异步编程\n*   cancelable: 可以取消已发出的请求\n*   interceptor： 可以方便地进行请求和响应拦截设置\n*   instantial： 提供实例化，多个实例可以独立配置和共享全局配置，方便一个项目向多个服务发送请求的场景处理\n*   alternative： 可以支持request client的更换，比如底层更换xhr和fetch时是无感的 以上这么多可以参考项目的实际情况进行选择，或者制定开发路线，逐步实现\n\n二、选型\n----\n\n### 请求库选型\n\n$.ajax，axios，还是自己封装xhr或fetch？\n\n**axios**的好处十分明显：promise和各种配置、拦截器、cancel token等等，但是缺点也有不少，比如取消是基于cancelable promises proposal 而不是xhr的abort；无法配置全局拦截器让多实例共享；无法将底层更换为fetch等等。\n\n**fetch**的好处也很明显，基于promise和stream能带来非常多的操作便利性，而且还能在worker中使用，但是和xhr相比缺了不少配置，比如timeout等，需要自行实现\n\n个人觉得在时间有限的情况下，基于axios进行二次封装过渡是一个更好的方案，毕竟主要的需求它都提供了。\n\n### lib开发的技术选型\n\n**语言**，**es**还是**ts**？为了更好的开发和使用体验，往往会选择ts；\n\n**打包**：webpack？rollup？tsdx还是其他种种甚至单纯用tsc？虽然都可以达到目的，但是这个技术决策会影响后续的打包、发布时间，配置复杂度，其他人的接手成本等等，也是需要提前想好的。\n\n如果使用ts开发，个人感觉tsdx还是非常方便的。\n\n三、api设计\n-------\n\n### 确定最终的使用方式即核心api\n\n现在基本都用了**swagger**或者其他mock平台，那么基于swagger.json或者其他的api.json，是可以非常方便的生成接口代码已经定义参数和返回值类型的。但是编写这些生成脚本并不是这个库的目标，但是这个库需要提供非常简洁的api以支持这些脚本，比如这种\n\n![image.png](../imgs/207986b2db8a442c8f8fdb2435a0ad2a.png)\n\n装饰器`@HTTP.post`负责发送post请求，而`OpsHttpRequest`负责定义参数类型，使用者无需关心请求如何发送。 同时装饰器可以接受多个参数以满足配置需求，如\n\n![image.png](../imgs/987a8555af9c415083f9507ef7553f0b.png)\n\n为了满足更多的配置需求，可以**设计构造器、实例方法，以及static api**\n\n![image.png](../imgs/f877c9447b8447c2a70b2de3d7e87316.png)\n\n### 确定整体架构\n\n如果基于上图这套方案，可以分为三个模块：\n\n**httpDecorator**： 负责装饰器的逻辑\n\n**adapter**： 负责兼容不同的client，比如xhr和fetch，甚至其他第三方的request client\n\n**request**： 真正发送请求的client，将xhr、fetch或者axios的使用封装成一个Request对象\n\n三者的关系是：httpDecorator改写属性描述符，接受参数，并传递给adapter；adapter找到相应的request client；request进行请求发送和响应处理\n\n除了这些，**还可以设计middleware模块**，负责log、time监控记录和加密等，如果这个需求并不复杂和多变，直接放入request中实现也无不可\n\n而说起请求的监控，往往又会引出一堆的工作~\n\n四、确定内置处理\n--------\n\n比如默认的log输出、对所有请求加上id，对带content-disposition头的进行下载处理等等。 只做什么相比能做什么，是一件更难决定的事情。\n\n![image.png](../imgs/3c5cb59c512245b8bf051524553a8083.png)\n\n五、确定依赖\n------\n\n这个库依赖了哪些第三方的库，要用什么版本，是否固定这些依赖的PATCH版本？回答这些问题，往往需要仔细查阅这些依赖的各版本的changelog~\n\n六、确定测试方案\n--------\n\n作为一个核心库，自动化测试一定要有，测试场景一定要全面，往往需要自己写个简单的server测试各种场景：404，500，200，错误处理等等\n\n七、文档\n----\n\n阻止我们脚步的，不是开发难题，而是还要编写文档~\n\nreadme和changelog肯定是少不了的，设计架构、实现原理、未来迭代计划往往也少不了。更多的时候，还需要提供一个小demo供使用者参考","slug":"封装一个Request库需要考虑哪些","published":1,"updated":"2024-04-04T15:27:03.215Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li2007bhajf2uutgfr0","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在重新编写公司的脚手架全家桶，虽然以前也搞过一些小的脚手架，但大多基于download-git-repo一顿commander+inquirer的操作就完事儿了。但是搞全家桶的的任务不仅包含了一套cli，更重要的是核心的基础组件，比如说request库，事实上这个库的开发时间远远超过了我的排期，下面记录一下封装的过程重考虑到的一些问题。</p>\n<h2 id=\"一、确定设计原则\"><a href=\"#一、确定设计原则\" class=\"headerlink\" title=\"一、确定设计原则\"></a>一、确定设计原则</h2><p>这里的设计原则其实就是组件特性，一个好的request库往往有如下特征：</p>\n<ul>\n<li>cross platform：比如说同时支持浏览器、node、微信小程序</li>\n<li>simple：简洁，即api简洁和配置友好，最好能够零配置，开箱即用</li>\n<li>promise： 基于promise，方便异步编程</li>\n<li>cancelable: 可以取消已发出的请求</li>\n<li>interceptor： 可以方便地进行请求和响应拦截设置</li>\n<li>instantial： 提供实例化，多个实例可以独立配置和共享全局配置，方便一个项目向多个服务发送请求的场景处理</li>\n<li>alternative： 可以支持request client的更换，比如底层更换xhr和fetch时是无感的 以上这么多可以参考项目的实际情况进行选择，或者制定开发路线，逐步实现</li>\n</ul>\n<h2 id=\"二、选型\"><a href=\"#二、选型\" class=\"headerlink\" title=\"二、选型\"></a>二、选型</h2><h3 id=\"请求库选型\"><a href=\"#请求库选型\" class=\"headerlink\" title=\"请求库选型\"></a>请求库选型</h3><p>$.ajax，axios，还是自己封装xhr或fetch？</p>\n<p><strong>axios</strong>的好处十分明显：promise和各种配置、拦截器、cancel token等等，但是缺点也有不少，比如取消是基于cancelable promises proposal 而不是xhr的abort；无法配置全局拦截器让多实例共享；无法将底层更换为fetch等等。</p>\n<p><strong>fetch</strong>的好处也很明显，基于promise和stream能带来非常多的操作便利性，而且还能在worker中使用，但是和xhr相比缺了不少配置，比如timeout等，需要自行实现</p>\n<p>个人觉得在时间有限的情况下，基于axios进行二次封装过渡是一个更好的方案，毕竟主要的需求它都提供了。</p>\n<h3 id=\"lib开发的技术选型\"><a href=\"#lib开发的技术选型\" class=\"headerlink\" title=\"lib开发的技术选型\"></a>lib开发的技术选型</h3><p><strong>语言</strong>，<strong>es</strong>还是<strong>ts</strong>？为了更好的开发和使用体验，往往会选择ts；</p>\n<p><strong>打包</strong>：webpack？rollup？tsdx还是其他种种甚至单纯用tsc？虽然都可以达到目的，但是这个技术决策会影响后续的打包、发布时间，配置复杂度，其他人的接手成本等等，也是需要提前想好的。</p>\n<p>如果使用ts开发，个人感觉tsdx还是非常方便的。</p>\n<h2 id=\"三、api设计\"><a href=\"#三、api设计\" class=\"headerlink\" title=\"三、api设计\"></a>三、api设计</h2><h3 id=\"确定最终的使用方式即核心api\"><a href=\"#确定最终的使用方式即核心api\" class=\"headerlink\" title=\"确定最终的使用方式即核心api\"></a>确定最终的使用方式即核心api</h3><p>现在基本都用了<strong>swagger</strong>或者其他mock平台，那么基于swagger.json或者其他的api.json，是可以非常方便的生成接口代码已经定义参数和返回值类型的。但是编写这些生成脚本并不是这个库的目标，但是这个库需要提供非常简洁的api以支持这些脚本，比如这种</p>\n<p><img src=\"/../imgs/207986b2db8a442c8f8fdb2435a0ad2a.png\" alt=\"image.png\"></p>\n<p>装饰器<code>@HTTP.post</code>负责发送post请求，而<code>OpsHttpRequest</code>负责定义参数类型，使用者无需关心请求如何发送。 同时装饰器可以接受多个参数以满足配置需求，如</p>\n<p><img src=\"/../imgs/987a8555af9c415083f9507ef7553f0b.png\" alt=\"image.png\"></p>\n<p>为了满足更多的配置需求，可以<strong>设计构造器、实例方法，以及static api</strong></p>\n<p><img src=\"/../imgs/f877c9447b8447c2a70b2de3d7e87316.png\" alt=\"image.png\"></p>\n<h3 id=\"确定整体架构\"><a href=\"#确定整体架构\" class=\"headerlink\" title=\"确定整体架构\"></a>确定整体架构</h3><p>如果基于上图这套方案，可以分为三个模块：</p>\n<p><strong>httpDecorator</strong>： 负责装饰器的逻辑</p>\n<p><strong>adapter</strong>： 负责兼容不同的client，比如xhr和fetch，甚至其他第三方的request client</p>\n<p><strong>request</strong>： 真正发送请求的client，将xhr、fetch或者axios的使用封装成一个Request对象</p>\n<p>三者的关系是：httpDecorator改写属性描述符，接受参数，并传递给adapter；adapter找到相应的request client；request进行请求发送和响应处理</p>\n<p>除了这些，<strong>还可以设计middleware模块</strong>，负责log、time监控记录和加密等，如果这个需求并不复杂和多变，直接放入request中实现也无不可</p>\n<p>而说起请求的监控，往往又会引出一堆的工作~</p>\n<h2 id=\"四、确定内置处理\"><a href=\"#四、确定内置处理\" class=\"headerlink\" title=\"四、确定内置处理\"></a>四、确定内置处理</h2><p>比如默认的log输出、对所有请求加上id，对带content-disposition头的进行下载处理等等。 只做什么相比能做什么，是一件更难决定的事情。</p>\n<p><img src=\"/../imgs/3c5cb59c512245b8bf051524553a8083.png\" alt=\"image.png\"></p>\n<h2 id=\"五、确定依赖\"><a href=\"#五、确定依赖\" class=\"headerlink\" title=\"五、确定依赖\"></a>五、确定依赖</h2><p>这个库依赖了哪些第三方的库，要用什么版本，是否固定这些依赖的PATCH版本？回答这些问题，往往需要仔细查阅这些依赖的各版本的changelog~</p>\n<h2 id=\"六、确定测试方案\"><a href=\"#六、确定测试方案\" class=\"headerlink\" title=\"六、确定测试方案\"></a>六、确定测试方案</h2><p>作为一个核心库，自动化测试一定要有，测试场景一定要全面，往往需要自己写个简单的server测试各种场景：404，500，200，错误处理等等</p>\n<h2 id=\"七、文档\"><a href=\"#七、文档\" class=\"headerlink\" title=\"七、文档\"></a>七、文档</h2><p>阻止我们脚步的，不是开发难题，而是还要编写文档~</p>\n<p>readme和changelog肯定是少不了的，设计架构、实现原理、未来迭代计划往往也少不了。更多的时候，还需要提供一个小demo供使用者参考</p>\n","length":1927,"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在重新编写公司的脚手架全家桶，虽然以前也搞过一些小的脚手架，但大多基于download-git-repo一顿commander+inquirer的操作就完事儿了。但是搞全家桶的的任务不仅包含了一套cli，更重要的是核心的基础组件，比如说request库，事实上这个库的开发时间远远超过了我的排期，下面记录一下封装的过程重考虑到的一些问题。</p>\n<h2 id=\"一、确定设计原则\"><a href=\"#一、确定设计原则\" class=\"headerlink\" title=\"一、确定设计原则\"></a>一、确定设计原则</h2><p>这里的设计原则其实就是组件特性，一个好的request库往往有如下特征：</p>\n<ul>\n<li>cross platform：比如说同时支持浏览器、node、微信小程序</li>\n<li>simple：简洁，即api简洁和配置友好，最好能够零配置，开箱即用</li>\n<li>promise： 基于promise，方便异步编程</li>\n<li>cancelable: 可以取消已发出的请求</li>\n<li>interceptor： 可以方便地进行请求和响应拦截设置</li>\n<li>instantial： 提供实例化，多个实例可以独立配置和共享全局配置，方便一个项目向多个服务发送请求的场景处理</li>\n<li>alternative： 可以支持request client的更换，比如底层更换xhr和fetch时是无感的 以上这么多可以参考项目的实际情况进行选择，或者制定开发路线，逐步实现</li>\n</ul>\n<h2 id=\"二、选型\"><a href=\"#二、选型\" class=\"headerlink\" title=\"二、选型\"></a>二、选型</h2><h3 id=\"请求库选型\"><a href=\"#请求库选型\" class=\"headerlink\" title=\"请求库选型\"></a>请求库选型</h3><p>$.ajax，axios，还是自己封装xhr或fetch？</p>\n<p><strong>axios</strong>的好处十分明显：promise和各种配置、拦截器、cancel token等等，但是缺点也有不少，比如取消是基于cancelable promises proposal 而不是xhr的abort；无法配置全局拦截器让多实例共享；无法将底层更换为fetch等等。</p>\n<p><strong>fetch</strong>的好处也很明显，基于promise和stream能带来非常多的操作便利性，而且还能在worker中使用，但是和xhr相比缺了不少配置，比如timeout等，需要自行实现</p>\n<p>个人觉得在时间有限的情况下，基于axios进行二次封装过渡是一个更好的方案，毕竟主要的需求它都提供了。</p>\n<h3 id=\"lib开发的技术选型\"><a href=\"#lib开发的技术选型\" class=\"headerlink\" title=\"lib开发的技术选型\"></a>lib开发的技术选型</h3><p><strong>语言</strong>，<strong>es</strong>还是<strong>ts</strong>？为了更好的开发和使用体验，往往会选择ts；</p>\n<p><strong>打包</strong>：webpack？rollup？tsdx还是其他种种甚至单纯用tsc？虽然都可以达到目的，但是这个技术决策会影响后续的打包、发布时间，配置复杂度，其他人的接手成本等等，也是需要提前想好的。</p>\n<p>如果使用ts开发，个人感觉tsdx还是非常方便的。</p>\n<h2 id=\"三、api设计\"><a href=\"#三、api设计\" class=\"headerlink\" title=\"三、api设计\"></a>三、api设计</h2><h3 id=\"确定最终的使用方式即核心api\"><a href=\"#确定最终的使用方式即核心api\" class=\"headerlink\" title=\"确定最终的使用方式即核心api\"></a>确定最终的使用方式即核心api</h3><p>现在基本都用了<strong>swagger</strong>或者其他mock平台，那么基于swagger.json或者其他的api.json，是可以非常方便的生成接口代码已经定义参数和返回值类型的。但是编写这些生成脚本并不是这个库的目标，但是这个库需要提供非常简洁的api以支持这些脚本，比如这种</p>\n<p><img src=\"/../imgs/207986b2db8a442c8f8fdb2435a0ad2a.png\" alt=\"image.png\"></p>\n<p>装饰器<code>@HTTP.post</code>负责发送post请求，而<code>OpsHttpRequest</code>负责定义参数类型，使用者无需关心请求如何发送。 同时装饰器可以接受多个参数以满足配置需求，如</p>\n<p><img src=\"/../imgs/987a8555af9c415083f9507ef7553f0b.png\" alt=\"image.png\"></p>\n<p>为了满足更多的配置需求，可以<strong>设计构造器、实例方法，以及static api</strong></p>\n<p><img src=\"/../imgs/f877c9447b8447c2a70b2de3d7e87316.png\" alt=\"image.png\"></p>\n<h3 id=\"确定整体架构\"><a href=\"#确定整体架构\" class=\"headerlink\" title=\"确定整体架构\"></a>确定整体架构</h3><p>如果基于上图这套方案，可以分为三个模块：</p>\n<p><strong>httpDecorator</strong>： 负责装饰器的逻辑</p>\n<p><strong>adapter</strong>： 负责兼容不同的client，比如xhr和fetch，甚至其他第三方的request client</p>\n<p><strong>request</strong>： 真正发送请求的client，将xhr、fetch或者axios的使用封装成一个Request对象</p>\n<p>三者的关系是：httpDecorator改写属性描述符，接受参数，并传递给adapter；adapter找到相应的request client；request进行请求发送和响应处理</p>\n<p>除了这些，<strong>还可以设计middleware模块</strong>，负责log、time监控记录和加密等，如果这个需求并不复杂和多变，直接放入request中实现也无不可</p>\n<p>而说起请求的监控，往往又会引出一堆的工作~</p>\n<h2 id=\"四、确定内置处理\"><a href=\"#四、确定内置处理\" class=\"headerlink\" title=\"四、确定内置处理\"></a>四、确定内置处理</h2><p>比如默认的log输出、对所有请求加上id，对带content-disposition头的进行下载处理等等。 只做什么相比能做什么，是一件更难决定的事情。</p>\n<p><img src=\"/../imgs/3c5cb59c512245b8bf051524553a8083.png\" alt=\"image.png\"></p>\n<h2 id=\"五、确定依赖\"><a href=\"#五、确定依赖\" class=\"headerlink\" title=\"五、确定依赖\"></a>五、确定依赖</h2><p>这个库依赖了哪些第三方的库，要用什么版本，是否固定这些依赖的PATCH版本？回答这些问题，往往需要仔细查阅这些依赖的各版本的changelog~</p>\n<h2 id=\"六、确定测试方案\"><a href=\"#六、确定测试方案\" class=\"headerlink\" title=\"六、确定测试方案\"></a>六、确定测试方案</h2><p>作为一个核心库，自动化测试一定要有，测试场景一定要全面，往往需要自己写个简单的server测试各种场景：404，500，200，错误处理等等</p>\n<h2 id=\"七、文档\"><a href=\"#七、文档\" class=\"headerlink\" title=\"七、文档\"></a>七、文档</h2><p>阻止我们脚步的，不是开发难题，而是还要编写文档~</p>\n<p>readme和changelog肯定是少不了的，设计架构、实现原理、未来迭代计划往往也少不了。更多的时候，还需要提供一个小demo供使用者参考</p>\n"},{"title":"抛开State和Context谈前端组件通信(一)——实例劫持+中介者通信","date":"2021-11-15T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第16天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n前言\n--\n\n说起前端组件通信，大家都能想到好几个办法：父子props相传、提升公共state、使用Context，然而这些常规方法，往往依赖于框架本身的api，或者受限于组件之间的关系。那么抛开框架，两个独立的组件，我们应该如何让他们相互通信呢？\n\n我们不妨设想一个场景：页面上有两个标签页打开着：TabA和TabB, Tab A页面有一个按钮，点击后请求一个接口，然后关闭当前Tab，Tab B请求一个接口并弹出一个对话框组件,能够控制Tab 关闭的的组件是Tab Container C。\n\n关系分析\n----\n\n这里有三个对象：\n\n`class component TabA`,\n\n`class component TabB`,\n\n`class component TabContainerC`，\n\n还有三个关键方法：\n\n`TabA`的`function leave(){}` ,\n\n`TabContainerC`的`closeTab` 和\n\n`TabB`的`openDialog`。\n\nparam: 'A'\n\ntabA.leave()\n\ntabC.closeTab(param)\n\ntabB.openDialog()\n\n三个函数的管理和调用权应该在它所在的组件实例上，如果强行提升公共状态和方法，代码会既复杂又不容易维护。\n\n如果三个组件能相互调用，那么代码就会非常简单。\n\n劫持组件实例\n------\n\n利用TS的装饰器，我们可以很容易地劫持到组件实例\n\n```TS\nconst ins = {};\nfunction colleague(colleagueName: string) {\n    return function<T extends {new (...args: any[]): {}}>(target: T) {\n        // 劫持构造函数，获得this\n        let colleague: Colleague<any> = null;\n        return class extends target {\n            constructor(...arg: any[]) {\n                super(...arg);\n                // 获取this并放入集合中\n                ins[target.displayName] = this\n            }\n            componentWillUnmount() {\n                // 伪代码，卸载时清除被劫持的实例\n                delete ins[target.displayName]\n            }\n        };\n    };\n},\n\n```\n\n使用装饰器\n\n```TSX\n@colleague()\nclass TabContainerC extends React.Component<PropsTypes> {\n    close(param:string) {\n        ...\n    }\n}\n```\n\nTabA调用TabContainerC\n\n```TSX\nclass TabA extends React.Component<PropsTypes> {\n    leave(){\n        ins['TabContainerC']?.close('A')\n    }\n}\n```\n\n中介者模式\n-----\n\n上面的写法看似能解决问题，但有好几个缺陷，最大的问题就是**无序调用**。\n\nA\n\nB\n\nC\n\nD\n\nE\n\n如果`TabContainerC`的某个方法因为某些额外参数的问题，并不想对外暴露，怎么做屏蔽？\n\n如果项目组件有1000个，如何控制它们之间的调用，比如在调用时打个小小的`console.log`\n\n这时候便可以考虑中介者设计模式\n\nA\n\nX\n\nB\n\nC\n\nD\n\nE\n\nX为中介者，负责给其他成员进行沟通，那么X就可以对所有成员的交流进行管控：比如日志、容错、过滤等\n\n概念设计和Api设计\n----------\n\n### 两种角色\n\n*   Mediator ：中介者\n    *   用于管理成员间的消息传递。Colleague 注册后，Mediator 能够获得这个成员的信息，当需要调用某个 Colleague 的方法时，可以通知 Mediator 去找到对应的 Colleague\n*   Colleague ：成员\n    *   组件实例的描述，包括组件的实例，组件公开的方法。以成员名作为唯一标志，成员名默认是这个组件的名称，也支持自定义\n\n### 三个API\n\n*   `@colleague(colleagueName)` : 注册为成员,参数 colleagueName 是**必选**的成员名\n*   `@colleagueAction(actionName)`: 声明公开的方法，actionName 是方法标志\n*   `@notifyMediator(colleagueName, actionName,params?)`： 通知中介，让名为 colleagueName 的成员执行 actionName 这一公开的方法,并可以传递params参数\n\n使用方法：\n\n```tsx\n@colleague('TabContainerC')\nclass TabContainerC extends React.Component<PropsTypes> {\n    ...\n    @colleagueAction('closeTab')\n    close(params:string) {\n        ...\n    }\n    ...\n}\n\n@colleague('TabA')\nclass TabA extends React.Component<PropsTypes> {\n    @notifyMediator('TabContainerC', 'closeTab','A')\n    leave(newAccount: AccountManageModel.Account) {\n        ...\n    }\n}\n```\n\n### 若干细节\n\n*   `reflect-metadata`：方法装饰器在类装饰器前执行，导致处理公开方法时，还没有相应的成员生成，需要使用 reflect-metadata 对其标识，再在重写构造函数时遍历获取\n*   打包后class名会变，因此注册成员是,参数 colleagueName 是**必选**的成员名\n*   当返回promise时，支持异步调用其他实例\n\n代码参考\n----\n\n### 目录结构如下：\n\n```\n├───Colleague.ts\n├───index.ts    \n├───Mediator.ts \n└───readme.md   \n```\n\n### Colleague.ts:\n\n```TS\n/**\n * 成员类\n * 含有成员名称和源实例\n *\n */\nexport default class Colleague<T> {\n    actions = new Map<string, (payload?: any) => void>();\n\n    constructor(public name: string, private instance: T) {}\n    setInstance(instance: T) {\n        this.instance = instance;\n    }\n    getInstance() {\n        return this.instance;\n    }\n\n    setAction(actionName: string, fn: (payload?: any[]) => void) {\n        this.actions.set(actionName, fn);\n    }\n\n    // 执行特定的方法\n    performAction(actionName: string, payload?: any) {\n        const action = this.actions.get(actionName);\n        if (!action) {\n            console.warn('there is no action names ' + actionName + ' in colleague' + this.name);\n        } else {\n            return action.apply(this.instance, payload);\n        }\n    }\n}\n```\n\n### Mediator.ts：\n\n```TS\nimport Colleague from './Colleague';\n/**\n * 中介者类\n * 用于收集成员\n * 转发成员间消息\n */\nexport default class Mediator {\n    // 中介处登记的成员\n    colleagues = new Map<string, Colleague<any>>();\n\n    // 登记成员\n    registColleague(colleague: Colleague<any>): void {\n        this.colleagues.set(colleague.name, colleague);\n    }\n    // 清退成员\n    unRegistColleague(colleague: Colleague<any>): void {\n        this.colleagues.delete(colleague.name);\n    }\n    // 通知\n    notify(colleagueName: string, actionName: string, payload?: any[]): void {\n        const colleague = this.colleagues.get(colleagueName);\n        if (!colleague) {\n            console.warn('there is no colleague names ' + colleagueName);\n        } else {\n            colleague.performAction(actionName, payload);\n        }\n    }\n}\n\n```\n\n### index.ts:\n\n```TS\nimport Mediator from './Mediator';\nimport Colleague from './Colleague';\nimport 'reflect-metadata';\n\nfunction mediatorFactory() {\n    const mediator = new Mediator();\n    console.log(mediator);\n    // 创建闭包\n    return {\n        // 类装饰器\n        colleague: function (colleagueName: string) {\n            return function <T extends {new (...args: any[]): {}}>(target: T) {\n                    // 劫持构造函数只为获得this\n                    let colleague: Colleague<any> = null;\n                    return class extends target {\n                            static displayName = (target as any).displayName + '$Colleague';\n                            constructor(...arg: any[]) {\n                                    super(...arg);\n                                    colleague = new Colleague(colleagueName, this);\n                                    // 从元数据中获取保存的公开的方法\n                                    Reflect.ownKeys(target.prototype).forEach(key => {\n                                            if (typeof key === 'number') {\n                                                    key = key.toString();\n                                            }\n                                            const actionMethod = Reflect.getMetadata('action', target.prototype, key);\n                                            if (actionMethod) {\n                                                    colleague.setAction(actionMethod.name, actionMethod.value);\n                                            }\n                                    });\n                                    mediator.registColleague(colleague);\n                            }\n                            componentWillUnmount() {\n                                    mediator.unRegistColleague(colleague);\n                                    let willUnMount = target.prototype.componentWillUnmount;\n                                    willUnMount && willUnMount.call(this);\n                            }\n                    };\n            };\n        },\n        // 方法装饰器，开放的方法\n        colleagueAction: function (actionName: string) {\n            return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n                // 将开放的方法放入中介,此时还未执行类装饰器，需要先保存起来\n                Reflect.defineMetadata('action', {name: actionName, value: descriptor.value}, target, propertyKey);\n            };\n        },\n        // 方法装饰器\n        notifyMediator: function (colleagueName: string, actionName: string, ...payload: any[]) {\n            return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n                // 劫持方法，通知中介\n                return {\n                    writable: true,\n                    enumerable: true,\n                    configurable: true,\n                    value: function (...args: any[]) {\n                        // tslint:disable-next-line:no-invalid-this\n                        let result = descriptor.value.apply(this, args);\n                        if (result instanceof Promise) {\n                            result.then(function () {\n                                mediator.notify(colleagueName, actionName, payload);\n                            });\n                        } else {\n                            mediator.notify(colleagueName, actionName, payload);\n                        }\n                        return result;\n                    }\n                };\n            };\n        }\n    };\n}\n\nexport const {colleague, colleagueAction, notifyMediator} = mediatorFactory();\n\n```\n\n结尾\n--\n\n实例劫持的方式虽然api简单，思路清晰，但是在无ui组件实例的情况下（比如hooks）显然是无法使用的，下一遍便介绍另一个方法: **HOT EVENT**。","source":"_posts/抛开State和Context谈前端组件通信(一)——实例劫持+中介者通信.md","raw":"---\n title: \"抛开State和Context谈前端组件通信(一)——实例劫持+中介者通信\"\n date: 2021-11-16\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第16天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n前言\n--\n\n说起前端组件通信，大家都能想到好几个办法：父子props相传、提升公共state、使用Context，然而这些常规方法，往往依赖于框架本身的api，或者受限于组件之间的关系。那么抛开框架，两个独立的组件，我们应该如何让他们相互通信呢？\n\n我们不妨设想一个场景：页面上有两个标签页打开着：TabA和TabB, Tab A页面有一个按钮，点击后请求一个接口，然后关闭当前Tab，Tab B请求一个接口并弹出一个对话框组件,能够控制Tab 关闭的的组件是Tab Container C。\n\n关系分析\n----\n\n这里有三个对象：\n\n`class component TabA`,\n\n`class component TabB`,\n\n`class component TabContainerC`，\n\n还有三个关键方法：\n\n`TabA`的`function leave(){}` ,\n\n`TabContainerC`的`closeTab` 和\n\n`TabB`的`openDialog`。\n\nparam: 'A'\n\ntabA.leave()\n\ntabC.closeTab(param)\n\ntabB.openDialog()\n\n三个函数的管理和调用权应该在它所在的组件实例上，如果强行提升公共状态和方法，代码会既复杂又不容易维护。\n\n如果三个组件能相互调用，那么代码就会非常简单。\n\n劫持组件实例\n------\n\n利用TS的装饰器，我们可以很容易地劫持到组件实例\n\n```TS\nconst ins = {};\nfunction colleague(colleagueName: string) {\n    return function<T extends {new (...args: any[]): {}}>(target: T) {\n        // 劫持构造函数，获得this\n        let colleague: Colleague<any> = null;\n        return class extends target {\n            constructor(...arg: any[]) {\n                super(...arg);\n                // 获取this并放入集合中\n                ins[target.displayName] = this\n            }\n            componentWillUnmount() {\n                // 伪代码，卸载时清除被劫持的实例\n                delete ins[target.displayName]\n            }\n        };\n    };\n},\n\n```\n\n使用装饰器\n\n```TSX\n@colleague()\nclass TabContainerC extends React.Component<PropsTypes> {\n    close(param:string) {\n        ...\n    }\n}\n```\n\nTabA调用TabContainerC\n\n```TSX\nclass TabA extends React.Component<PropsTypes> {\n    leave(){\n        ins['TabContainerC']?.close('A')\n    }\n}\n```\n\n中介者模式\n-----\n\n上面的写法看似能解决问题，但有好几个缺陷，最大的问题就是**无序调用**。\n\nA\n\nB\n\nC\n\nD\n\nE\n\n如果`TabContainerC`的某个方法因为某些额外参数的问题，并不想对外暴露，怎么做屏蔽？\n\n如果项目组件有1000个，如何控制它们之间的调用，比如在调用时打个小小的`console.log`\n\n这时候便可以考虑中介者设计模式\n\nA\n\nX\n\nB\n\nC\n\nD\n\nE\n\nX为中介者，负责给其他成员进行沟通，那么X就可以对所有成员的交流进行管控：比如日志、容错、过滤等\n\n概念设计和Api设计\n----------\n\n### 两种角色\n\n*   Mediator ：中介者\n    *   用于管理成员间的消息传递。Colleague 注册后，Mediator 能够获得这个成员的信息，当需要调用某个 Colleague 的方法时，可以通知 Mediator 去找到对应的 Colleague\n*   Colleague ：成员\n    *   组件实例的描述，包括组件的实例，组件公开的方法。以成员名作为唯一标志，成员名默认是这个组件的名称，也支持自定义\n\n### 三个API\n\n*   `@colleague(colleagueName)` : 注册为成员,参数 colleagueName 是**必选**的成员名\n*   `@colleagueAction(actionName)`: 声明公开的方法，actionName 是方法标志\n*   `@notifyMediator(colleagueName, actionName,params?)`： 通知中介，让名为 colleagueName 的成员执行 actionName 这一公开的方法,并可以传递params参数\n\n使用方法：\n\n```tsx\n@colleague('TabContainerC')\nclass TabContainerC extends React.Component<PropsTypes> {\n    ...\n    @colleagueAction('closeTab')\n    close(params:string) {\n        ...\n    }\n    ...\n}\n\n@colleague('TabA')\nclass TabA extends React.Component<PropsTypes> {\n    @notifyMediator('TabContainerC', 'closeTab','A')\n    leave(newAccount: AccountManageModel.Account) {\n        ...\n    }\n}\n```\n\n### 若干细节\n\n*   `reflect-metadata`：方法装饰器在类装饰器前执行，导致处理公开方法时，还没有相应的成员生成，需要使用 reflect-metadata 对其标识，再在重写构造函数时遍历获取\n*   打包后class名会变，因此注册成员是,参数 colleagueName 是**必选**的成员名\n*   当返回promise时，支持异步调用其他实例\n\n代码参考\n----\n\n### 目录结构如下：\n\n```\n├───Colleague.ts\n├───index.ts    \n├───Mediator.ts \n└───readme.md   \n```\n\n### Colleague.ts:\n\n```TS\n/**\n * 成员类\n * 含有成员名称和源实例\n *\n */\nexport default class Colleague<T> {\n    actions = new Map<string, (payload?: any) => void>();\n\n    constructor(public name: string, private instance: T) {}\n    setInstance(instance: T) {\n        this.instance = instance;\n    }\n    getInstance() {\n        return this.instance;\n    }\n\n    setAction(actionName: string, fn: (payload?: any[]) => void) {\n        this.actions.set(actionName, fn);\n    }\n\n    // 执行特定的方法\n    performAction(actionName: string, payload?: any) {\n        const action = this.actions.get(actionName);\n        if (!action) {\n            console.warn('there is no action names ' + actionName + ' in colleague' + this.name);\n        } else {\n            return action.apply(this.instance, payload);\n        }\n    }\n}\n```\n\n### Mediator.ts：\n\n```TS\nimport Colleague from './Colleague';\n/**\n * 中介者类\n * 用于收集成员\n * 转发成员间消息\n */\nexport default class Mediator {\n    // 中介处登记的成员\n    colleagues = new Map<string, Colleague<any>>();\n\n    // 登记成员\n    registColleague(colleague: Colleague<any>): void {\n        this.colleagues.set(colleague.name, colleague);\n    }\n    // 清退成员\n    unRegistColleague(colleague: Colleague<any>): void {\n        this.colleagues.delete(colleague.name);\n    }\n    // 通知\n    notify(colleagueName: string, actionName: string, payload?: any[]): void {\n        const colleague = this.colleagues.get(colleagueName);\n        if (!colleague) {\n            console.warn('there is no colleague names ' + colleagueName);\n        } else {\n            colleague.performAction(actionName, payload);\n        }\n    }\n}\n\n```\n\n### index.ts:\n\n```TS\nimport Mediator from './Mediator';\nimport Colleague from './Colleague';\nimport 'reflect-metadata';\n\nfunction mediatorFactory() {\n    const mediator = new Mediator();\n    console.log(mediator);\n    // 创建闭包\n    return {\n        // 类装饰器\n        colleague: function (colleagueName: string) {\n            return function <T extends {new (...args: any[]): {}}>(target: T) {\n                    // 劫持构造函数只为获得this\n                    let colleague: Colleague<any> = null;\n                    return class extends target {\n                            static displayName = (target as any).displayName + '$Colleague';\n                            constructor(...arg: any[]) {\n                                    super(...arg);\n                                    colleague = new Colleague(colleagueName, this);\n                                    // 从元数据中获取保存的公开的方法\n                                    Reflect.ownKeys(target.prototype).forEach(key => {\n                                            if (typeof key === 'number') {\n                                                    key = key.toString();\n                                            }\n                                            const actionMethod = Reflect.getMetadata('action', target.prototype, key);\n                                            if (actionMethod) {\n                                                    colleague.setAction(actionMethod.name, actionMethod.value);\n                                            }\n                                    });\n                                    mediator.registColleague(colleague);\n                            }\n                            componentWillUnmount() {\n                                    mediator.unRegistColleague(colleague);\n                                    let willUnMount = target.prototype.componentWillUnmount;\n                                    willUnMount && willUnMount.call(this);\n                            }\n                    };\n            };\n        },\n        // 方法装饰器，开放的方法\n        colleagueAction: function (actionName: string) {\n            return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n                // 将开放的方法放入中介,此时还未执行类装饰器，需要先保存起来\n                Reflect.defineMetadata('action', {name: actionName, value: descriptor.value}, target, propertyKey);\n            };\n        },\n        // 方法装饰器\n        notifyMediator: function (colleagueName: string, actionName: string, ...payload: any[]) {\n            return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n                // 劫持方法，通知中介\n                return {\n                    writable: true,\n                    enumerable: true,\n                    configurable: true,\n                    value: function (...args: any[]) {\n                        // tslint:disable-next-line:no-invalid-this\n                        let result = descriptor.value.apply(this, args);\n                        if (result instanceof Promise) {\n                            result.then(function () {\n                                mediator.notify(colleagueName, actionName, payload);\n                            });\n                        } else {\n                            mediator.notify(colleagueName, actionName, payload);\n                        }\n                        return result;\n                    }\n                };\n            };\n        }\n    };\n}\n\nexport const {colleague, colleagueAction, notifyMediator} = mediatorFactory();\n\n```\n\n结尾\n--\n\n实例劫持的方式虽然api简单，思路清晰，但是在无ui组件实例的情况下（比如hooks）显然是无法使用的，下一遍便介绍另一个方法: **HOT EVENT**。","slug":"抛开State和Context谈前端组件通信(一)——实例劫持+中介者通信","published":1,"updated":"2024-04-04T15:27:03.270Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li2007ehajfa6ix4nzf","content":"<p>这是我参与11月更文挑战的第16天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>说起前端组件通信，大家都能想到好几个办法：父子props相传、提升公共state、使用Context，然而这些常规方法，往往依赖于框架本身的api，或者受限于组件之间的关系。那么抛开框架，两个独立的组件，我们应该如何让他们相互通信呢？</p>\n<p>我们不妨设想一个场景：页面上有两个标签页打开着：TabA和TabB, Tab A页面有一个按钮，点击后请求一个接口，然后关闭当前Tab，Tab B请求一个接口并弹出一个对话框组件,能够控制Tab 关闭的的组件是Tab Container C。</p>\n<h2 id=\"关系分析\"><a href=\"#关系分析\" class=\"headerlink\" title=\"关系分析\"></a>关系分析</h2><p>这里有三个对象：</p>\n<p><code>class component TabA</code>,</p>\n<p><code>class component TabB</code>,</p>\n<p><code>class component TabContainerC</code>，</p>\n<p>还有三个关键方法：</p>\n<p><code>TabA</code>的<code>function leave()&#123;&#125;</code> ,</p>\n<p><code>TabContainerC</code>的<code>closeTab</code> 和</p>\n<p><code>TabB</code>的<code>openDialog</code>。</p>\n<p>param: ‘A’</p>\n<p>tabA.leave()</p>\n<p>tabC.closeTab(param)</p>\n<p>tabB.openDialog()</p>\n<p>三个函数的管理和调用权应该在它所在的组件实例上，如果强行提升公共状态和方法，代码会既复杂又不容易维护。</p>\n<p>如果三个组件能相互调用，那么代码就会非常简单。</p>\n<h2 id=\"劫持组件实例\"><a href=\"#劫持组件实例\" class=\"headerlink\" title=\"劫持组件实例\"></a>劫持组件实例</h2><p>利用TS的装饰器，我们可以很容易地劫持到组件实例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ins = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">colleague</span>(<span class=\"params\">colleagueName: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>&lt;T <span class=\"keyword\">extends</span> &#123;<span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>[]): &#123;&#125;&#125;&gt;(<span class=\"attr\">target</span>: T) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 劫持构造函数，获得this</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">colleague</span>: <span class=\"title class_\">Colleague</span>&lt;<span class=\"built_in\">any</span>&gt; = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> target &#123;</span><br><span class=\"line\">            <span class=\"title function_\">constructor</span>(<span class=\"params\">...arg: <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">super</span>(...arg);</span><br><span class=\"line\">                <span class=\"comment\">// 获取this并放入集合中</span></span><br><span class=\"line\">                ins[target.<span class=\"property\">displayName</span>] = <span class=\"variable language_\">this</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 伪代码，卸载时清除被劫持的实例</span></span><br><span class=\"line\">                <span class=\"keyword\">delete</span> ins[target.<span class=\"property\">displayName</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用装饰器</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@colleague</span>()</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TabContainerC</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"title class_\">PropsTypes</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">close</span>(<span class=\"params\">param:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TabA调用TabContainerC</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TabA</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"title class_\">PropsTypes</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">leave</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        ins[<span class=\"string\">&#x27;TabContainerC&#x27;</span>]?.<span class=\"title function_\">close</span>(<span class=\"string\">&#x27;A&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h2><p>上面的写法看似能解决问题，但有好几个缺陷，最大的问题就是<strong>无序调用</strong>。</p>\n<p>A</p>\n<p>B</p>\n<p>C</p>\n<p>D</p>\n<p>E</p>\n<p>如果<code>TabContainerC</code>的某个方法因为某些额外参数的问题，并不想对外暴露，怎么做屏蔽？</p>\n<p>如果项目组件有1000个，如何控制它们之间的调用，比如在调用时打个小小的<code>console.log</code></p>\n<p>这时候便可以考虑中介者设计模式</p>\n<p>A</p>\n<p>X</p>\n<p>B</p>\n<p>C</p>\n<p>D</p>\n<p>E</p>\n<p>X为中介者，负责给其他成员进行沟通，那么X就可以对所有成员的交流进行管控：比如日志、容错、过滤等</p>\n<h2 id=\"概念设计和Api设计\"><a href=\"#概念设计和Api设计\" class=\"headerlink\" title=\"概念设计和Api设计\"></a>概念设计和Api设计</h2><h3 id=\"两种角色\"><a href=\"#两种角色\" class=\"headerlink\" title=\"两种角色\"></a>两种角色</h3><ul>\n<li>Mediator ：中介者<ul>\n<li>用于管理成员间的消息传递。Colleague 注册后，Mediator 能够获得这个成员的信息，当需要调用某个 Colleague 的方法时，可以通知 Mediator 去找到对应的 Colleague</li>\n</ul>\n</li>\n<li>Colleague ：成员<ul>\n<li>组件实例的描述，包括组件的实例，组件公开的方法。以成员名作为唯一标志，成员名默认是这个组件的名称，也支持自定义</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三个API\"><a href=\"#三个API\" class=\"headerlink\" title=\"三个API\"></a>三个API</h3><ul>\n<li><code>@colleague(colleagueName)</code> : 注册为成员,参数 colleagueName 是<strong>必选</strong>的成员名</li>\n<li><code>@colleagueAction(actionName)</code>: 声明公开的方法，actionName 是方法标志</li>\n<li><code>@notifyMediator(colleagueName, actionName,params?)</code>： 通知中介，让名为 colleagueName 的成员执行 actionName 这一公开的方法,并可以传递params参数</li>\n</ul>\n<p>使用方法：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@colleague</span>(<span class=\"string\">&#x27;TabContainerC&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TabContainerC</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"title class_\">PropsTypes</span>&gt; &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"meta\">@colleagueAction</span>(<span class=\"string\">&#x27;closeTab&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">close</span>(<span class=\"params\">params:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@colleague</span>(<span class=\"string\">&#x27;TabA&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TabA</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"title class_\">PropsTypes</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@notifyMediator</span>(<span class=\"string\">&#x27;TabContainerC&#x27;</span>, <span class=\"string\">&#x27;closeTab&#x27;</span>,<span class=\"string\">&#x27;A&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">leave</span>(<span class=\"params\">newAccount: AccountManageModel.Account</span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"若干细节\"><a href=\"#若干细节\" class=\"headerlink\" title=\"若干细节\"></a>若干细节</h3><ul>\n<li><code>reflect-metadata</code>：方法装饰器在类装饰器前执行，导致处理公开方法时，还没有相应的成员生成，需要使用 reflect-metadata 对其标识，再在重写构造函数时遍历获取</li>\n<li>打包后class名会变，因此注册成员是,参数 colleagueName 是<strong>必选</strong>的成员名</li>\n<li>当返回promise时，支持异步调用其他实例</li>\n</ul>\n<h2 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h2><h3 id=\"目录结构如下：\"><a href=\"#目录结构如下：\" class=\"headerlink\" title=\"目录结构如下：\"></a>目录结构如下：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├───Colleague.ts</span><br><span class=\"line\">├───index.ts    </span><br><span class=\"line\">├───Mediator.ts </span><br><span class=\"line\">└───readme.md   </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Colleague-ts\"><a href=\"#Colleague-ts\" class=\"headerlink\" title=\"Colleague.ts:\"></a>Colleague.ts:</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 成员类</span></span><br><span class=\"line\"><span class=\"comment\"> * 含有成员名称和源实例</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Colleague</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    actions = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"function\">(<span class=\"params\">payload?: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>, <span class=\"keyword\">private</span> instance: T</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"title function_\">setInstance</span>(<span class=\"params\">instance: T</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">instance</span> = instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">getInstance</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">instance</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">setAction</span>(<span class=\"params\">actionName: <span class=\"built_in\">string</span>, fn: (payload?: <span class=\"built_in\">any</span>[]) =&gt; <span class=\"built_in\">void</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">actions</span>.<span class=\"title function_\">set</span>(actionName, fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行特定的方法</span></span><br><span class=\"line\">    <span class=\"title function_\">performAction</span>(<span class=\"params\">actionName: <span class=\"built_in\">string</span>, payload?: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> action = <span class=\"variable language_\">this</span>.<span class=\"property\">actions</span>.<span class=\"title function_\">get</span>(actionName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!action) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;there is no action names &#x27;</span> + actionName + <span class=\"string\">&#x27; in colleague&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> action.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">instance</span>, payload);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mediator-ts：\"><a href=\"#Mediator-ts：\" class=\"headerlink\" title=\"Mediator.ts：\"></a>Mediator.ts：</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Colleague</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Colleague&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 中介者类</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于收集成员</span></span><br><span class=\"line\"><span class=\"comment\"> * 转发成员间消息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Mediator</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 中介处登记的成员</span></span><br><span class=\"line\">    colleagues = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">Colleague</span>&lt;<span class=\"built_in\">any</span>&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 登记成员</span></span><br><span class=\"line\">    <span class=\"title function_\">registColleague</span>(<span class=\"attr\">colleague</span>: <span class=\"title class_\">Colleague</span>&lt;<span class=\"built_in\">any</span>&gt;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">colleagues</span>.<span class=\"title function_\">set</span>(colleague.<span class=\"property\">name</span>, colleague);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 清退成员</span></span><br><span class=\"line\">    <span class=\"title function_\">unRegistColleague</span>(<span class=\"attr\">colleague</span>: <span class=\"title class_\">Colleague</span>&lt;<span class=\"built_in\">any</span>&gt;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">colleagues</span>.<span class=\"title function_\">delete</span>(colleague.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 通知</span></span><br><span class=\"line\">    <span class=\"title function_\">notify</span>(<span class=\"attr\">colleagueName</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">actionName</span>: <span class=\"built_in\">string</span>, payload?: <span class=\"built_in\">any</span>[]): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> colleague = <span class=\"variable language_\">this</span>.<span class=\"property\">colleagues</span>.<span class=\"title function_\">get</span>(colleagueName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!colleague) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;there is no colleague names &#x27;</span> + colleagueName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            colleague.<span class=\"title function_\">performAction</span>(actionName, payload);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"index-ts\"><a href=\"#index-ts\" class=\"headerlink\" title=\"index.ts:\"></a>index.ts:</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Mediator</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Mediator&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Colleague</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Colleague&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;reflect-metadata&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mediatorFactory</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mediator = <span class=\"keyword\">new</span> <span class=\"title class_\">Mediator</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(mediator);</span><br><span class=\"line\">    <span class=\"comment\">// 创建闭包</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 类装饰器</span></span><br><span class=\"line\">        <span class=\"attr\">colleague</span>: <span class=\"keyword\">function</span> (<span class=\"params\">colleagueName: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> &lt;T <span class=\"keyword\">extends</span> &#123;<span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>[]): &#123;&#125;&#125;&gt;(<span class=\"attr\">target</span>: T) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 劫持构造函数只为获得this</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> <span class=\"attr\">colleague</span>: <span class=\"title class_\">Colleague</span>&lt;<span class=\"built_in\">any</span>&gt; = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> target &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">static</span> displayName = (target <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">displayName</span> + <span class=\"string\">&#x27;$Colleague&#x27;</span>;</span><br><span class=\"line\">                            <span class=\"title function_\">constructor</span>(<span class=\"params\">...arg: <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">                                    <span class=\"variable language_\">super</span>(...arg);</span><br><span class=\"line\">                                    colleague = <span class=\"keyword\">new</span> <span class=\"title class_\">Colleague</span>(colleagueName, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">                                    <span class=\"comment\">// 从元数据中获取保存的公开的方法</span></span><br><span class=\"line\">                                    <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(target.<span class=\"property\"><span class=\"keyword\">prototype</span></span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">                                            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> key === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">                                                    key = key.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">                                            <span class=\"keyword\">const</span> actionMethod = <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">getMetadata</span>(<span class=\"string\">&#x27;action&#x27;</span>, target.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, key);</span><br><span class=\"line\">                                            <span class=\"keyword\">if</span> (actionMethod) &#123;</span><br><span class=\"line\">                                                    colleague.<span class=\"title function_\">setAction</span>(actionMethod.<span class=\"property\">name</span>, actionMethod.<span class=\"property\">value</span>);</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">                                    &#125;);</span><br><span class=\"line\">                                    mediator.<span class=\"title function_\">registColleague</span>(colleague);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                                    mediator.<span class=\"title function_\">unRegistColleague</span>(colleague);</span><br><span class=\"line\">                                    <span class=\"keyword\">let</span> willUnMount = target.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">componentWillUnmount</span>;</span><br><span class=\"line\">                                    willUnMount &amp;&amp; willUnMount.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 方法装饰器，开放的方法</span></span><br><span class=\"line\">        <span class=\"attr\">colleagueAction</span>: <span class=\"keyword\">function</span> (<span class=\"params\">actionName: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">target: <span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将开放的方法放入中介,此时还未执行类装饰器，需要先保存起来</span></span><br><span class=\"line\">                <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">defineMetadata</span>(<span class=\"string\">&#x27;action&#x27;</span>, &#123;<span class=\"attr\">name</span>: actionName, <span class=\"attr\">value</span>: descriptor.<span class=\"property\">value</span>&#125;, target, propertyKey);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 方法装饰器</span></span><br><span class=\"line\">        <span class=\"attr\">notifyMediator</span>: <span class=\"keyword\">function</span> (<span class=\"params\">colleagueName: <span class=\"built_in\">string</span>, actionName: <span class=\"built_in\">string</span>, ...payload: <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">target: <span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 劫持方法，通知中介</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">value</span>: <span class=\"keyword\">function</span> (<span class=\"params\">...args: <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// tslint:disable-next-line:no-invalid-this</span></span><br><span class=\"line\">                        <span class=\"keyword\">let</span> result = descriptor.<span class=\"property\">value</span>.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Promise</span>) &#123;</span><br><span class=\"line\">                            result.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                                mediator.<span class=\"title function_\">notify</span>(colleagueName, actionName, payload);</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            mediator.<span class=\"title function_\">notify</span>(colleagueName, actionName, payload);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123;colleague, colleagueAction, notifyMediator&#125; = <span class=\"title function_\">mediatorFactory</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>实例劫持的方式虽然api简单，思路清晰，但是在无ui组件实例的情况下（比如hooks）显然是无法使用的，下一遍便介绍另一个方法: <strong>HOT EVENT</strong>。</p>\n","length":6448,"excerpt":"","more":"<p>这是我参与11月更文挑战的第16天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>说起前端组件通信，大家都能想到好几个办法：父子props相传、提升公共state、使用Context，然而这些常规方法，往往依赖于框架本身的api，或者受限于组件之间的关系。那么抛开框架，两个独立的组件，我们应该如何让他们相互通信呢？</p>\n<p>我们不妨设想一个场景：页面上有两个标签页打开着：TabA和TabB, Tab A页面有一个按钮，点击后请求一个接口，然后关闭当前Tab，Tab B请求一个接口并弹出一个对话框组件,能够控制Tab 关闭的的组件是Tab Container C。</p>\n<h2 id=\"关系分析\"><a href=\"#关系分析\" class=\"headerlink\" title=\"关系分析\"></a>关系分析</h2><p>这里有三个对象：</p>\n<p><code>class component TabA</code>,</p>\n<p><code>class component TabB</code>,</p>\n<p><code>class component TabContainerC</code>，</p>\n<p>还有三个关键方法：</p>\n<p><code>TabA</code>的<code>function leave()&#123;&#125;</code> ,</p>\n<p><code>TabContainerC</code>的<code>closeTab</code> 和</p>\n<p><code>TabB</code>的<code>openDialog</code>。</p>\n<p>param: ‘A’</p>\n<p>tabA.leave()</p>\n<p>tabC.closeTab(param)</p>\n<p>tabB.openDialog()</p>\n<p>三个函数的管理和调用权应该在它所在的组件实例上，如果强行提升公共状态和方法，代码会既复杂又不容易维护。</p>\n<p>如果三个组件能相互调用，那么代码就会非常简单。</p>\n<h2 id=\"劫持组件实例\"><a href=\"#劫持组件实例\" class=\"headerlink\" title=\"劫持组件实例\"></a>劫持组件实例</h2><p>利用TS的装饰器，我们可以很容易地劫持到组件实例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ins = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">colleague</span>(<span class=\"params\">colleagueName: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>&lt;T <span class=\"keyword\">extends</span> &#123;<span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>[]): &#123;&#125;&#125;&gt;(<span class=\"attr\">target</span>: T) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 劫持构造函数，获得this</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">colleague</span>: <span class=\"title class_\">Colleague</span>&lt;<span class=\"built_in\">any</span>&gt; = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> target &#123;</span><br><span class=\"line\">            <span class=\"title function_\">constructor</span>(<span class=\"params\">...arg: <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">super</span>(...arg);</span><br><span class=\"line\">                <span class=\"comment\">// 获取this并放入集合中</span></span><br><span class=\"line\">                ins[target.<span class=\"property\">displayName</span>] = <span class=\"variable language_\">this</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 伪代码，卸载时清除被劫持的实例</span></span><br><span class=\"line\">                <span class=\"keyword\">delete</span> ins[target.<span class=\"property\">displayName</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用装饰器</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@colleague</span>()</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TabContainerC</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"title class_\">PropsTypes</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">close</span>(<span class=\"params\">param:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TabA调用TabContainerC</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TabA</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"title class_\">PropsTypes</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">leave</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        ins[<span class=\"string\">&#x27;TabContainerC&#x27;</span>]?.<span class=\"title function_\">close</span>(<span class=\"string\">&#x27;A&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h2><p>上面的写法看似能解决问题，但有好几个缺陷，最大的问题就是<strong>无序调用</strong>。</p>\n<p>A</p>\n<p>B</p>\n<p>C</p>\n<p>D</p>\n<p>E</p>\n<p>如果<code>TabContainerC</code>的某个方法因为某些额外参数的问题，并不想对外暴露，怎么做屏蔽？</p>\n<p>如果项目组件有1000个，如何控制它们之间的调用，比如在调用时打个小小的<code>console.log</code></p>\n<p>这时候便可以考虑中介者设计模式</p>\n<p>A</p>\n<p>X</p>\n<p>B</p>\n<p>C</p>\n<p>D</p>\n<p>E</p>\n<p>X为中介者，负责给其他成员进行沟通，那么X就可以对所有成员的交流进行管控：比如日志、容错、过滤等</p>\n<h2 id=\"概念设计和Api设计\"><a href=\"#概念设计和Api设计\" class=\"headerlink\" title=\"概念设计和Api设计\"></a>概念设计和Api设计</h2><h3 id=\"两种角色\"><a href=\"#两种角色\" class=\"headerlink\" title=\"两种角色\"></a>两种角色</h3><ul>\n<li>Mediator ：中介者<ul>\n<li>用于管理成员间的消息传递。Colleague 注册后，Mediator 能够获得这个成员的信息，当需要调用某个 Colleague 的方法时，可以通知 Mediator 去找到对应的 Colleague</li>\n</ul>\n</li>\n<li>Colleague ：成员<ul>\n<li>组件实例的描述，包括组件的实例，组件公开的方法。以成员名作为唯一标志，成员名默认是这个组件的名称，也支持自定义</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三个API\"><a href=\"#三个API\" class=\"headerlink\" title=\"三个API\"></a>三个API</h3><ul>\n<li><code>@colleague(colleagueName)</code> : 注册为成员,参数 colleagueName 是<strong>必选</strong>的成员名</li>\n<li><code>@colleagueAction(actionName)</code>: 声明公开的方法，actionName 是方法标志</li>\n<li><code>@notifyMediator(colleagueName, actionName,params?)</code>： 通知中介，让名为 colleagueName 的成员执行 actionName 这一公开的方法,并可以传递params参数</li>\n</ul>\n<p>使用方法：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@colleague</span>(<span class=\"string\">&#x27;TabContainerC&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TabContainerC</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"title class_\">PropsTypes</span>&gt; &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"meta\">@colleagueAction</span>(<span class=\"string\">&#x27;closeTab&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">close</span>(<span class=\"params\">params:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@colleague</span>(<span class=\"string\">&#x27;TabA&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TabA</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"title class_\">PropsTypes</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@notifyMediator</span>(<span class=\"string\">&#x27;TabContainerC&#x27;</span>, <span class=\"string\">&#x27;closeTab&#x27;</span>,<span class=\"string\">&#x27;A&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">leave</span>(<span class=\"params\">newAccount: AccountManageModel.Account</span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"若干细节\"><a href=\"#若干细节\" class=\"headerlink\" title=\"若干细节\"></a>若干细节</h3><ul>\n<li><code>reflect-metadata</code>：方法装饰器在类装饰器前执行，导致处理公开方法时，还没有相应的成员生成，需要使用 reflect-metadata 对其标识，再在重写构造函数时遍历获取</li>\n<li>打包后class名会变，因此注册成员是,参数 colleagueName 是<strong>必选</strong>的成员名</li>\n<li>当返回promise时，支持异步调用其他实例</li>\n</ul>\n<h2 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h2><h3 id=\"目录结构如下：\"><a href=\"#目录结构如下：\" class=\"headerlink\" title=\"目录结构如下：\"></a>目录结构如下：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├───Colleague.ts</span><br><span class=\"line\">├───index.ts    </span><br><span class=\"line\">├───Mediator.ts </span><br><span class=\"line\">└───readme.md   </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Colleague-ts\"><a href=\"#Colleague-ts\" class=\"headerlink\" title=\"Colleague.ts:\"></a>Colleague.ts:</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 成员类</span></span><br><span class=\"line\"><span class=\"comment\"> * 含有成员名称和源实例</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Colleague</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    actions = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"function\">(<span class=\"params\">payload?: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>, <span class=\"keyword\">private</span> instance: T</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"title function_\">setInstance</span>(<span class=\"params\">instance: T</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">instance</span> = instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">getInstance</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">instance</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">setAction</span>(<span class=\"params\">actionName: <span class=\"built_in\">string</span>, fn: (payload?: <span class=\"built_in\">any</span>[]) =&gt; <span class=\"built_in\">void</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">actions</span>.<span class=\"title function_\">set</span>(actionName, fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行特定的方法</span></span><br><span class=\"line\">    <span class=\"title function_\">performAction</span>(<span class=\"params\">actionName: <span class=\"built_in\">string</span>, payload?: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> action = <span class=\"variable language_\">this</span>.<span class=\"property\">actions</span>.<span class=\"title function_\">get</span>(actionName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!action) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;there is no action names &#x27;</span> + actionName + <span class=\"string\">&#x27; in colleague&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> action.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">instance</span>, payload);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mediator-ts：\"><a href=\"#Mediator-ts：\" class=\"headerlink\" title=\"Mediator.ts：\"></a>Mediator.ts：</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Colleague</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Colleague&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 中介者类</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于收集成员</span></span><br><span class=\"line\"><span class=\"comment\"> * 转发成员间消息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Mediator</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 中介处登记的成员</span></span><br><span class=\"line\">    colleagues = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">Colleague</span>&lt;<span class=\"built_in\">any</span>&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 登记成员</span></span><br><span class=\"line\">    <span class=\"title function_\">registColleague</span>(<span class=\"attr\">colleague</span>: <span class=\"title class_\">Colleague</span>&lt;<span class=\"built_in\">any</span>&gt;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">colleagues</span>.<span class=\"title function_\">set</span>(colleague.<span class=\"property\">name</span>, colleague);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 清退成员</span></span><br><span class=\"line\">    <span class=\"title function_\">unRegistColleague</span>(<span class=\"attr\">colleague</span>: <span class=\"title class_\">Colleague</span>&lt;<span class=\"built_in\">any</span>&gt;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">colleagues</span>.<span class=\"title function_\">delete</span>(colleague.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 通知</span></span><br><span class=\"line\">    <span class=\"title function_\">notify</span>(<span class=\"attr\">colleagueName</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">actionName</span>: <span class=\"built_in\">string</span>, payload?: <span class=\"built_in\">any</span>[]): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> colleague = <span class=\"variable language_\">this</span>.<span class=\"property\">colleagues</span>.<span class=\"title function_\">get</span>(colleagueName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!colleague) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;there is no colleague names &#x27;</span> + colleagueName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            colleague.<span class=\"title function_\">performAction</span>(actionName, payload);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"index-ts\"><a href=\"#index-ts\" class=\"headerlink\" title=\"index.ts:\"></a>index.ts:</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Mediator</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Mediator&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Colleague</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Colleague&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;reflect-metadata&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mediatorFactory</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mediator = <span class=\"keyword\">new</span> <span class=\"title class_\">Mediator</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(mediator);</span><br><span class=\"line\">    <span class=\"comment\">// 创建闭包</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 类装饰器</span></span><br><span class=\"line\">        <span class=\"attr\">colleague</span>: <span class=\"keyword\">function</span> (<span class=\"params\">colleagueName: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> &lt;T <span class=\"keyword\">extends</span> &#123;<span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>[]): &#123;&#125;&#125;&gt;(<span class=\"attr\">target</span>: T) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 劫持构造函数只为获得this</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> <span class=\"attr\">colleague</span>: <span class=\"title class_\">Colleague</span>&lt;<span class=\"built_in\">any</span>&gt; = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> target &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">static</span> displayName = (target <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">displayName</span> + <span class=\"string\">&#x27;$Colleague&#x27;</span>;</span><br><span class=\"line\">                            <span class=\"title function_\">constructor</span>(<span class=\"params\">...arg: <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">                                    <span class=\"variable language_\">super</span>(...arg);</span><br><span class=\"line\">                                    colleague = <span class=\"keyword\">new</span> <span class=\"title class_\">Colleague</span>(colleagueName, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">                                    <span class=\"comment\">// 从元数据中获取保存的公开的方法</span></span><br><span class=\"line\">                                    <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(target.<span class=\"property\"><span class=\"keyword\">prototype</span></span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">                                            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> key === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">                                                    key = key.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">                                            <span class=\"keyword\">const</span> actionMethod = <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">getMetadata</span>(<span class=\"string\">&#x27;action&#x27;</span>, target.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, key);</span><br><span class=\"line\">                                            <span class=\"keyword\">if</span> (actionMethod) &#123;</span><br><span class=\"line\">                                                    colleague.<span class=\"title function_\">setAction</span>(actionMethod.<span class=\"property\">name</span>, actionMethod.<span class=\"property\">value</span>);</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">                                    &#125;);</span><br><span class=\"line\">                                    mediator.<span class=\"title function_\">registColleague</span>(colleague);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                                    mediator.<span class=\"title function_\">unRegistColleague</span>(colleague);</span><br><span class=\"line\">                                    <span class=\"keyword\">let</span> willUnMount = target.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">componentWillUnmount</span>;</span><br><span class=\"line\">                                    willUnMount &amp;&amp; willUnMount.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 方法装饰器，开放的方法</span></span><br><span class=\"line\">        <span class=\"attr\">colleagueAction</span>: <span class=\"keyword\">function</span> (<span class=\"params\">actionName: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">target: <span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将开放的方法放入中介,此时还未执行类装饰器，需要先保存起来</span></span><br><span class=\"line\">                <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">defineMetadata</span>(<span class=\"string\">&#x27;action&#x27;</span>, &#123;<span class=\"attr\">name</span>: actionName, <span class=\"attr\">value</span>: descriptor.<span class=\"property\">value</span>&#125;, target, propertyKey);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 方法装饰器</span></span><br><span class=\"line\">        <span class=\"attr\">notifyMediator</span>: <span class=\"keyword\">function</span> (<span class=\"params\">colleagueName: <span class=\"built_in\">string</span>, actionName: <span class=\"built_in\">string</span>, ...payload: <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">target: <span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 劫持方法，通知中介</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">value</span>: <span class=\"keyword\">function</span> (<span class=\"params\">...args: <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// tslint:disable-next-line:no-invalid-this</span></span><br><span class=\"line\">                        <span class=\"keyword\">let</span> result = descriptor.<span class=\"property\">value</span>.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Promise</span>) &#123;</span><br><span class=\"line\">                            result.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                                mediator.<span class=\"title function_\">notify</span>(colleagueName, actionName, payload);</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            mediator.<span class=\"title function_\">notify</span>(colleagueName, actionName, payload);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123;colleague, colleagueAction, notifyMediator&#125; = <span class=\"title function_\">mediatorFactory</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>实例劫持的方式虽然api简单，思路清晰，但是在无ui组件实例的情况下（比如hooks）显然是无法使用的，下一遍便介绍另一个方法: <strong>HOT EVENT</strong>。</p>\n"},{"title":"抛开State和Context谈前端组件通信(二)——CustomEvent与 HotEvent","date":"2021-11-20T16:00:00.000Z","_content":"\n这是我参与11月更文挑战的第21天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n被忽略的通信方式：事件\n-----------\n\n回到jquery的时代，伴随着AMD、CMD等早期模块化规范的大规模实践，前端组件/模块之间的通信便越来越常见。而其中最简单直接的一个方式就是事件。\n\n而当进入框架时代后，跨组件的通信往往都依托于框架或状态管理库提供的能力，但依然有不少场景，天然地适合使用事件。\n\nCustomEvent\n-----------\n\nCustomEvent是浏览器自带的事件api，也是最常用的：\n\n```js\nwindow.addEventListener('token-unauthorized', function (e) {\n\tconsole.log('未授权', e.detail);\n});\nwindow.dispatchEvent(\n    new CustomEvent('token-unauthorized', {\n        bubbles: true, // 是否冒泡\n        cancelable: false, // 是否取消默认事件\n        detail: 'token过期了'\n    })\n);\n```\n\n![image.png](../imgs/3d01e29ce7914c27ad5e62d5fce649d6.png)\n\n但是这种方式有个缺点，比如下面这个需求：\n\n![image.png](../imgs/ff45d2fffea849128e2423b23572f2c4.png)\n\n![image.png](../imgs/5eefdcf6ba2440b1b0669f673f8c95b6.png)\n\n点击page2页面的按钮，打开page1页面的弹窗。\n\n因为page1页面都没有加载，自然在触发事件的时候无法响应。因此我们可以设计一个热点事件缓存系统：HotEvent.\n\nHotEvent\n--------\n\nHotEvent是自创的一个概念，一个热点事件，往往能够持续很久，即便在发生之后订阅，也能接收到。\n\n因此我们可以设计一个缓存，当标记开启热点事件时，将此次派发保存起来。当订阅到该事件时，先判断listener是否已经执行过了，如果没有的话，在订阅时立即执行。\n\n### 代码参考\n\n```typescript\n/**\n * 简易的事件发布、订阅、取消订阅\n * 支持热事件（能响应订阅之前发出的事件）\n * 尚有缺陷，但当下无影响：\n * 同名的事件后者会覆盖新的，也包括热事件\n *\n * @class EventHandler\n */\nexport default class EventHandler {\n  private static collection = new Map<string, EventHandler>();\n  // 单例模式\n  static event(event: string) {\n    let handler = this.collection.get(event);\n    if (!handler) {\n      handler = new EventHandler(event);\n      this.collection.set(event, handler);\n    }\n    return handler;\n  }\n  private events: Map<string, Array<[() => void, string?]>> = new Map(); // 这是个冗余设计，map只会有一个key\n  private event: string = '';\n  private hotCache: Map<string, string[]> = new Map();\n  constructor(event: string) {\n    this.event = event;\n    this.events.set(event, []);\n  }\n\n  subscribe(listener: () => void, config?: { hotKey: string }) {\n    const events = this.events;\n    const event = this.event;\n    // 对该event增加listeners\n    let listeners = events.get(event);\n    if (!listeners) {\n      events.set(event, [[listener!, config?.hotKey]]);\n    } else {\n      listeners.push([listener!, config?.hotKey]);\n    }\n    //如果是热事件，则寻找是否已经派发了事件\n    if (config?.hotKey) {\n      const called = this.hotCache.get(event);\n      if (called && !called.find((item) => item === config.hotKey)) {\n        listener.call(null);\n        called.push(config.hotKey);\n      }\n    }\n    const unsubscribe = () =>\n      this.unsubscribe(event, listener!, config?.hotKey);\n    return unsubscribe;\n  }\n  // 派发事件\n  dispatch(config?: { hot: boolean }) {\n    let event = this.event;\n    let listeners = this.events.get(event);\n\n    listeners?.forEach((item) => {\n      item[0].call(null);\n    });\n    // 如果是热事件，则记录这次派发\n    if (config?.hot) {\n      this.hotCache.set(\n        event,\n        listeners?.map((item) => item[1]!).filter(Boolean) || [],\n      );\n    } else {\n      this.hotCache.delete(event);\n    }\n  }\n  // 取消订阅\n  private unsubscribe(event: string, listener: () => void, hotKey?: string) {\n    const events = this.events;\n    let listeners = events.get(event);\n    if (!listeners) {\n      events.delete(event);\n    } else {\n      let index = listeners.findIndex((item) => {\n        return item[0] === listener && item[1] === hotKey;\n      });\n      if (~index) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n}\nexport const addUserEvent = EventHandler.event('addUser');\n\n```\n\n### page2派发事件：\n\n```ini\n  <Button\n      type=\"primary\"\n      onClick={() => {\n        props.history.push('/test/page1');\n        addUserEvent.dispatch({ hot: true });\n      }}\n    >\n      打开page1的弹窗\n    </Button>\n```\n\n### page1接收事件\n\n```scss\nuseEffect(() => {\n    const unsubscribe = addUserEvent.subscribe(\n      () => {\n        modalRef.current.open();\n      },\n      {\n        hotKey: 'user',\n      },\n    );\n    return () => unsubscribe();\n  }, []);\n```\n\n这只是一个简单的事件系统，对于一些多事件的场景，比如播放器sdk，我们还可以借助RxJS的各种强大能力。","source":"_posts/抛开State和Context谈前端组件通信(二)——CustomEvent与 HotEvent.md","raw":"---\n title: \"抛开State和Context谈前端组件通信(二)——CustomEvent与 HotEvent\"\n date: 2021-11-21\n tags: [前端]\n categories: [前端笔记]\n---\n\n这是我参与11月更文挑战的第21天，活动详情查看：[2021最后一次更文挑战](https://juejin.cn/post/7023643374569816095 \"https://juejin.cn/post/7023643374569816095\")\n\n被忽略的通信方式：事件\n-----------\n\n回到jquery的时代，伴随着AMD、CMD等早期模块化规范的大规模实践，前端组件/模块之间的通信便越来越常见。而其中最简单直接的一个方式就是事件。\n\n而当进入框架时代后，跨组件的通信往往都依托于框架或状态管理库提供的能力，但依然有不少场景，天然地适合使用事件。\n\nCustomEvent\n-----------\n\nCustomEvent是浏览器自带的事件api，也是最常用的：\n\n```js\nwindow.addEventListener('token-unauthorized', function (e) {\n\tconsole.log('未授权', e.detail);\n});\nwindow.dispatchEvent(\n    new CustomEvent('token-unauthorized', {\n        bubbles: true, // 是否冒泡\n        cancelable: false, // 是否取消默认事件\n        detail: 'token过期了'\n    })\n);\n```\n\n![image.png](../imgs/3d01e29ce7914c27ad5e62d5fce649d6.png)\n\n但是这种方式有个缺点，比如下面这个需求：\n\n![image.png](../imgs/ff45d2fffea849128e2423b23572f2c4.png)\n\n![image.png](../imgs/5eefdcf6ba2440b1b0669f673f8c95b6.png)\n\n点击page2页面的按钮，打开page1页面的弹窗。\n\n因为page1页面都没有加载，自然在触发事件的时候无法响应。因此我们可以设计一个热点事件缓存系统：HotEvent.\n\nHotEvent\n--------\n\nHotEvent是自创的一个概念，一个热点事件，往往能够持续很久，即便在发生之后订阅，也能接收到。\n\n因此我们可以设计一个缓存，当标记开启热点事件时，将此次派发保存起来。当订阅到该事件时，先判断listener是否已经执行过了，如果没有的话，在订阅时立即执行。\n\n### 代码参考\n\n```typescript\n/**\n * 简易的事件发布、订阅、取消订阅\n * 支持热事件（能响应订阅之前发出的事件）\n * 尚有缺陷，但当下无影响：\n * 同名的事件后者会覆盖新的，也包括热事件\n *\n * @class EventHandler\n */\nexport default class EventHandler {\n  private static collection = new Map<string, EventHandler>();\n  // 单例模式\n  static event(event: string) {\n    let handler = this.collection.get(event);\n    if (!handler) {\n      handler = new EventHandler(event);\n      this.collection.set(event, handler);\n    }\n    return handler;\n  }\n  private events: Map<string, Array<[() => void, string?]>> = new Map(); // 这是个冗余设计，map只会有一个key\n  private event: string = '';\n  private hotCache: Map<string, string[]> = new Map();\n  constructor(event: string) {\n    this.event = event;\n    this.events.set(event, []);\n  }\n\n  subscribe(listener: () => void, config?: { hotKey: string }) {\n    const events = this.events;\n    const event = this.event;\n    // 对该event增加listeners\n    let listeners = events.get(event);\n    if (!listeners) {\n      events.set(event, [[listener!, config?.hotKey]]);\n    } else {\n      listeners.push([listener!, config?.hotKey]);\n    }\n    //如果是热事件，则寻找是否已经派发了事件\n    if (config?.hotKey) {\n      const called = this.hotCache.get(event);\n      if (called && !called.find((item) => item === config.hotKey)) {\n        listener.call(null);\n        called.push(config.hotKey);\n      }\n    }\n    const unsubscribe = () =>\n      this.unsubscribe(event, listener!, config?.hotKey);\n    return unsubscribe;\n  }\n  // 派发事件\n  dispatch(config?: { hot: boolean }) {\n    let event = this.event;\n    let listeners = this.events.get(event);\n\n    listeners?.forEach((item) => {\n      item[0].call(null);\n    });\n    // 如果是热事件，则记录这次派发\n    if (config?.hot) {\n      this.hotCache.set(\n        event,\n        listeners?.map((item) => item[1]!).filter(Boolean) || [],\n      );\n    } else {\n      this.hotCache.delete(event);\n    }\n  }\n  // 取消订阅\n  private unsubscribe(event: string, listener: () => void, hotKey?: string) {\n    const events = this.events;\n    let listeners = events.get(event);\n    if (!listeners) {\n      events.delete(event);\n    } else {\n      let index = listeners.findIndex((item) => {\n        return item[0] === listener && item[1] === hotKey;\n      });\n      if (~index) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n}\nexport const addUserEvent = EventHandler.event('addUser');\n\n```\n\n### page2派发事件：\n\n```ini\n  <Button\n      type=\"primary\"\n      onClick={() => {\n        props.history.push('/test/page1');\n        addUserEvent.dispatch({ hot: true });\n      }}\n    >\n      打开page1的弹窗\n    </Button>\n```\n\n### page1接收事件\n\n```scss\nuseEffect(() => {\n    const unsubscribe = addUserEvent.subscribe(\n      () => {\n        modalRef.current.open();\n      },\n      {\n        hotKey: 'user',\n      },\n    );\n    return () => unsubscribe();\n  }, []);\n```\n\n这只是一个简单的事件系统，对于一些多事件的场景，比如播放器sdk，我们还可以借助RxJS的各种强大能力。","slug":"抛开State和Context谈前端组件通信(二)——CustomEvent与 HotEvent","published":1,"updated":"2024-04-04T15:27:03.265Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li2007ihajf0l4sfhna","content":"<p>这是我参与11月更文挑战的第21天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"被忽略的通信方式：事件\"><a href=\"#被忽略的通信方式：事件\" class=\"headerlink\" title=\"被忽略的通信方式：事件\"></a>被忽略的通信方式：事件</h2><p>回到jquery的时代，伴随着AMD、CMD等早期模块化规范的大规模实践，前端组件&#x2F;模块之间的通信便越来越常见。而其中最简单直接的一个方式就是事件。</p>\n<p>而当进入框架时代后，跨组件的通信往往都依托于框架或状态管理库提供的能力，但依然有不少场景，天然地适合使用事件。</p>\n<h2 id=\"CustomEvent\"><a href=\"#CustomEvent\" class=\"headerlink\" title=\"CustomEvent\"></a>CustomEvent</h2><p>CustomEvent是浏览器自带的事件api，也是最常用的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;token-unauthorized&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;未授权&#x27;</span>, e.<span class=\"property\">detail</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">dispatchEvent</span>(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CustomEvent</span>(<span class=\"string\">&#x27;token-unauthorized&#x27;</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">bubbles</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否冒泡</span></span><br><span class=\"line\">        <span class=\"attr\">cancelable</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否取消默认事件</span></span><br><span class=\"line\">        <span class=\"attr\">detail</span>: <span class=\"string\">&#x27;token过期了&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/3d01e29ce7914c27ad5e62d5fce649d6.png\" alt=\"image.png\"></p>\n<p>但是这种方式有个缺点，比如下面这个需求：</p>\n<p><img src=\"/../imgs/ff45d2fffea849128e2423b23572f2c4.png\" alt=\"image.png\"></p>\n<p><img src=\"/../imgs/5eefdcf6ba2440b1b0669f673f8c95b6.png\" alt=\"image.png\"></p>\n<p>点击page2页面的按钮，打开page1页面的弹窗。</p>\n<p>因为page1页面都没有加载，自然在触发事件的时候无法响应。因此我们可以设计一个热点事件缓存系统：HotEvent.</p>\n<h2 id=\"HotEvent\"><a href=\"#HotEvent\" class=\"headerlink\" title=\"HotEvent\"></a>HotEvent</h2><p>HotEvent是自创的一个概念，一个热点事件，往往能够持续很久，即便在发生之后订阅，也能接收到。</p>\n<p>因此我们可以设计一个缓存，当标记开启热点事件时，将此次派发保存起来。当订阅到该事件时，先判断listener是否已经执行过了，如果没有的话，在订阅时立即执行。</p>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 简易的事件发布、订阅、取消订阅</span></span><br><span class=\"line\"><span class=\"comment\"> * 支持热事件（能响应订阅之前发出的事件）</span></span><br><span class=\"line\"><span class=\"comment\"> * 尚有缺陷，但当下无影响：</span></span><br><span class=\"line\"><span class=\"comment\"> * 同名的事件后者会覆盖新的，也包括热事件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@class</span> <span class=\"variable\">EventHandler</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EventHandler</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> collection = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">EventHandler</span>&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// 单例模式</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">event</span>(<span class=\"params\">event: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handler = <span class=\"variable language_\">this</span>.<span class=\"property\">collection</span>.<span class=\"title function_\">get</span>(event);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!handler) &#123;</span><br><span class=\"line\">      handler = <span class=\"keyword\">new</span> <span class=\"title class_\">EventHandler</span>(event);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">collection</span>.<span class=\"title function_\">set</span>(event, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">events</span>: <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">Array</span>&lt;[<span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>, <span class=\"built_in\">string</span>?]&gt;&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>(); <span class=\"comment\">// 这是个冗余设计，map只会有一个key</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">event</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">hotCache</span>: <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>[]&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">event: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">event</span> = event;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">events</span>.<span class=\"title function_\">set</span>(event, []);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">subscribe</span>(<span class=\"params\">listener: () =&gt; <span class=\"built_in\">void</span>, config?: &#123; hotKey: <span class=\"built_in\">string</span> &#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> events = <span class=\"variable language_\">this</span>.<span class=\"property\">events</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> event = <span class=\"variable language_\">this</span>.<span class=\"property\">event</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 对该event增加listeners</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> listeners = events.<span class=\"title function_\">get</span>(event);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!listeners) &#123;</span><br><span class=\"line\">      events.<span class=\"title function_\">set</span>(event, [[listener!, config?.<span class=\"property\">hotKey</span>]]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      listeners.<span class=\"title function_\">push</span>([listener!, config?.<span class=\"property\">hotKey</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果是热事件，则寻找是否已经派发了事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (config?.<span class=\"property\">hotKey</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> called = <span class=\"variable language_\">this</span>.<span class=\"property\">hotCache</span>.<span class=\"title function_\">get</span>(event);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (called &amp;&amp; !called.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item === config.<span class=\"property\">hotKey</span>)) &#123;</span><br><span class=\"line\">        listener.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        called.<span class=\"title function_\">push</span>(config.<span class=\"property\">hotKey</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">unsubscribe</span> = (<span class=\"params\"></span>) =&gt;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">unsubscribe</span>(event, listener!, config?.<span class=\"property\">hotKey</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsubscribe;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 派发事件</span></span><br><span class=\"line\">  <span class=\"title function_\">dispatch</span>(<span class=\"params\">config?: &#123; hot: <span class=\"built_in\">boolean</span> &#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> event = <span class=\"variable language_\">this</span>.<span class=\"property\">event</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> listeners = <span class=\"variable language_\">this</span>.<span class=\"property\">events</span>.<span class=\"title function_\">get</span>(event);</span><br><span class=\"line\"></span><br><span class=\"line\">    listeners?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      item[<span class=\"number\">0</span>].<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 如果是热事件，则记录这次派发</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (config?.<span class=\"property\">hot</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">hotCache</span>.<span class=\"title function_\">set</span>(</span><br><span class=\"line\">        event,</span><br><span class=\"line\">        listeners?.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item[<span class=\"number\">1</span>]!).<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>) || [],</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">hotCache</span>.<span class=\"title function_\">delete</span>(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 取消订阅</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">unsubscribe</span>(<span class=\"params\">event: <span class=\"built_in\">string</span>, listener: () =&gt; <span class=\"built_in\">void</span>, hotKey?: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> events = <span class=\"variable language_\">this</span>.<span class=\"property\">events</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> listeners = events.<span class=\"title function_\">get</span>(event);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!listeners) &#123;</span><br><span class=\"line\">      events.<span class=\"title function_\">delete</span>(event);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = listeners.<span class=\"title function_\">findIndex</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item[<span class=\"number\">0</span>] === listener &amp;&amp; item[<span class=\"number\">1</span>] === hotKey;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (~index) &#123;</span><br><span class=\"line\">        listeners.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> addUserEvent = <span class=\"title class_\">EventHandler</span>.<span class=\"title function_\">event</span>(<span class=\"string\">&#x27;addUser&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"page2派发事件：\"><a href=\"#page2派发事件：\" class=\"headerlink\" title=\"page2派发事件：\"></a>page2派发事件：</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">onClick</span>=&#123;() =&gt; &#123;</span><br><span class=\"line\">      props.history.push(&#x27;/test/page1&#x27;)<span class=\"comment\">;</span></span><br><span class=\"line\">      addUserEvent.dispatch(&#123; hot: true &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;&#125;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    打开page1的弹窗</span><br><span class=\"line\">  &lt;/Button&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"page1接收事件\"><a href=\"#page1接收事件\" class=\"headerlink\" title=\"page1接收事件\"></a>page1接收事件</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">useEffect</span>(() =&gt; &#123;</span><br><span class=\"line\">    const unsubscribe = addUserEvent<span class=\"selector-class\">.subscribe</span>(</span><br><span class=\"line\">      () =&gt; &#123;</span><br><span class=\"line\">        modalRef<span class=\"selector-class\">.current</span><span class=\"selector-class\">.open</span>();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        hotKey: <span class=\"string\">&#x27;user&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    return () =&gt; <span class=\"built_in\">unsubscribe</span>();</span><br><span class=\"line\">  &#125;, <span class=\"selector-attr\">[]</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这只是一个简单的事件系统，对于一些多事件的场景，比如播放器sdk，我们还可以借助RxJS的各种强大能力。</p>\n","length":3400,"excerpt":"","more":"<p>这是我参与11月更文挑战的第21天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095\" title=\"https://juejin.cn/post/7023643374569816095\">2021最后一次更文挑战</a></p>\n<h2 id=\"被忽略的通信方式：事件\"><a href=\"#被忽略的通信方式：事件\" class=\"headerlink\" title=\"被忽略的通信方式：事件\"></a>被忽略的通信方式：事件</h2><p>回到jquery的时代，伴随着AMD、CMD等早期模块化规范的大规模实践，前端组件&#x2F;模块之间的通信便越来越常见。而其中最简单直接的一个方式就是事件。</p>\n<p>而当进入框架时代后，跨组件的通信往往都依托于框架或状态管理库提供的能力，但依然有不少场景，天然地适合使用事件。</p>\n<h2 id=\"CustomEvent\"><a href=\"#CustomEvent\" class=\"headerlink\" title=\"CustomEvent\"></a>CustomEvent</h2><p>CustomEvent是浏览器自带的事件api，也是最常用的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;token-unauthorized&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;未授权&#x27;</span>, e.<span class=\"property\">detail</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">dispatchEvent</span>(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CustomEvent</span>(<span class=\"string\">&#x27;token-unauthorized&#x27;</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">bubbles</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否冒泡</span></span><br><span class=\"line\">        <span class=\"attr\">cancelable</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否取消默认事件</span></span><br><span class=\"line\">        <span class=\"attr\">detail</span>: <span class=\"string\">&#x27;token过期了&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/3d01e29ce7914c27ad5e62d5fce649d6.png\" alt=\"image.png\"></p>\n<p>但是这种方式有个缺点，比如下面这个需求：</p>\n<p><img src=\"/../imgs/ff45d2fffea849128e2423b23572f2c4.png\" alt=\"image.png\"></p>\n<p><img src=\"/../imgs/5eefdcf6ba2440b1b0669f673f8c95b6.png\" alt=\"image.png\"></p>\n<p>点击page2页面的按钮，打开page1页面的弹窗。</p>\n<p>因为page1页面都没有加载，自然在触发事件的时候无法响应。因此我们可以设计一个热点事件缓存系统：HotEvent.</p>\n<h2 id=\"HotEvent\"><a href=\"#HotEvent\" class=\"headerlink\" title=\"HotEvent\"></a>HotEvent</h2><p>HotEvent是自创的一个概念，一个热点事件，往往能够持续很久，即便在发生之后订阅，也能接收到。</p>\n<p>因此我们可以设计一个缓存，当标记开启热点事件时，将此次派发保存起来。当订阅到该事件时，先判断listener是否已经执行过了，如果没有的话，在订阅时立即执行。</p>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 简易的事件发布、订阅、取消订阅</span></span><br><span class=\"line\"><span class=\"comment\"> * 支持热事件（能响应订阅之前发出的事件）</span></span><br><span class=\"line\"><span class=\"comment\"> * 尚有缺陷，但当下无影响：</span></span><br><span class=\"line\"><span class=\"comment\"> * 同名的事件后者会覆盖新的，也包括热事件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@class</span> <span class=\"variable\">EventHandler</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EventHandler</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> collection = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">EventHandler</span>&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// 单例模式</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">event</span>(<span class=\"params\">event: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handler = <span class=\"variable language_\">this</span>.<span class=\"property\">collection</span>.<span class=\"title function_\">get</span>(event);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!handler) &#123;</span><br><span class=\"line\">      handler = <span class=\"keyword\">new</span> <span class=\"title class_\">EventHandler</span>(event);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">collection</span>.<span class=\"title function_\">set</span>(event, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">events</span>: <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">Array</span>&lt;[<span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>, <span class=\"built_in\">string</span>?]&gt;&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>(); <span class=\"comment\">// 这是个冗余设计，map只会有一个key</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">event</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">hotCache</span>: <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>[]&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">event: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">event</span> = event;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">events</span>.<span class=\"title function_\">set</span>(event, []);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">subscribe</span>(<span class=\"params\">listener: () =&gt; <span class=\"built_in\">void</span>, config?: &#123; hotKey: <span class=\"built_in\">string</span> &#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> events = <span class=\"variable language_\">this</span>.<span class=\"property\">events</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> event = <span class=\"variable language_\">this</span>.<span class=\"property\">event</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 对该event增加listeners</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> listeners = events.<span class=\"title function_\">get</span>(event);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!listeners) &#123;</span><br><span class=\"line\">      events.<span class=\"title function_\">set</span>(event, [[listener!, config?.<span class=\"property\">hotKey</span>]]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      listeners.<span class=\"title function_\">push</span>([listener!, config?.<span class=\"property\">hotKey</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果是热事件，则寻找是否已经派发了事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (config?.<span class=\"property\">hotKey</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> called = <span class=\"variable language_\">this</span>.<span class=\"property\">hotCache</span>.<span class=\"title function_\">get</span>(event);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (called &amp;&amp; !called.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item === config.<span class=\"property\">hotKey</span>)) &#123;</span><br><span class=\"line\">        listener.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        called.<span class=\"title function_\">push</span>(config.<span class=\"property\">hotKey</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">unsubscribe</span> = (<span class=\"params\"></span>) =&gt;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">unsubscribe</span>(event, listener!, config?.<span class=\"property\">hotKey</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsubscribe;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 派发事件</span></span><br><span class=\"line\">  <span class=\"title function_\">dispatch</span>(<span class=\"params\">config?: &#123; hot: <span class=\"built_in\">boolean</span> &#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> event = <span class=\"variable language_\">this</span>.<span class=\"property\">event</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> listeners = <span class=\"variable language_\">this</span>.<span class=\"property\">events</span>.<span class=\"title function_\">get</span>(event);</span><br><span class=\"line\"></span><br><span class=\"line\">    listeners?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      item[<span class=\"number\">0</span>].<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 如果是热事件，则记录这次派发</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (config?.<span class=\"property\">hot</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">hotCache</span>.<span class=\"title function_\">set</span>(</span><br><span class=\"line\">        event,</span><br><span class=\"line\">        listeners?.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item[<span class=\"number\">1</span>]!).<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>) || [],</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">hotCache</span>.<span class=\"title function_\">delete</span>(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 取消订阅</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">unsubscribe</span>(<span class=\"params\">event: <span class=\"built_in\">string</span>, listener: () =&gt; <span class=\"built_in\">void</span>, hotKey?: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> events = <span class=\"variable language_\">this</span>.<span class=\"property\">events</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> listeners = events.<span class=\"title function_\">get</span>(event);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!listeners) &#123;</span><br><span class=\"line\">      events.<span class=\"title function_\">delete</span>(event);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = listeners.<span class=\"title function_\">findIndex</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item[<span class=\"number\">0</span>] === listener &amp;&amp; item[<span class=\"number\">1</span>] === hotKey;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (~index) &#123;</span><br><span class=\"line\">        listeners.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> addUserEvent = <span class=\"title class_\">EventHandler</span>.<span class=\"title function_\">event</span>(<span class=\"string\">&#x27;addUser&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"page2派发事件：\"><a href=\"#page2派发事件：\" class=\"headerlink\" title=\"page2派发事件：\"></a>page2派发事件：</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">onClick</span>=&#123;() =&gt; &#123;</span><br><span class=\"line\">      props.history.push(&#x27;/test/page1&#x27;)<span class=\"comment\">;</span></span><br><span class=\"line\">      addUserEvent.dispatch(&#123; hot: true &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;&#125;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    打开page1的弹窗</span><br><span class=\"line\">  &lt;/Button&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"page1接收事件\"><a href=\"#page1接收事件\" class=\"headerlink\" title=\"page1接收事件\"></a>page1接收事件</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">useEffect</span>(() =&gt; &#123;</span><br><span class=\"line\">    const unsubscribe = addUserEvent<span class=\"selector-class\">.subscribe</span>(</span><br><span class=\"line\">      () =&gt; &#123;</span><br><span class=\"line\">        modalRef<span class=\"selector-class\">.current</span><span class=\"selector-class\">.open</span>();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        hotKey: <span class=\"string\">&#x27;user&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    return () =&gt; <span class=\"built_in\">unsubscribe</span>();</span><br><span class=\"line\">  &#125;, <span class=\"selector-attr\">[]</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这只是一个简单的事件系统，对于一些多事件的场景，比如播放器sdk，我们还可以借助RxJS的各种强大能力。</p>\n"},{"title":"排序算法之冒泡排序","date":"2022-02-08T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第14天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n如果要学习排序算法，大多会先从冒泡算法开始，因为它是所有排序算法中最简单的一个。不过它也是最慢的一个。\n\n冒泡排序比较所有相邻的两个项，如果第一个比第二个大，则交换它们。元素项向上移动至正确的顺序，就好像气泡升至表面一样，冒泡排序因此得名。\n\n![sort-bub.gif](../imgs/296a67578b674e6bbbc08b04d8714646.png)\n\n实现\n--\n\n冒泡算法依次比较相邻两项，判断大小，并做交换。每一轮都只能确定一个数字的位置，因此如果有n个数，需要比较n轮。算法实现如下：\n\n```ini\nfunction bubbleSort(array) {\n  const { length } = array;\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        [array[j], array[j + 1]] = [array[j + 1], array[j]]\n      }\n    }\n  }\n  return array\n}\nbubbleSort([5, 4, 3, 2, 1]) //  [1, 2, 3, 4, 5]\n\n```\n\n_这里用了es6的语法 `[array[j], array[j + 1]] = [array[j + 1], array[j]]`，一行代码便可以交换两个数 的位置_。\n\n下图展示了冒泡排序的执行过程： ![image.png](../imgs/e03c00247a8d44febb9a8f79bade6c66.png)\n\n优化\n--\n\n冒泡算法有两层循环，外循环一共执行了5次，每轮内循环执行4次。但是外循环第一轮就可以求出最大的值5，第二轮的内循环只需执行3次，不需要比较4和5。因此如果从内循环减去外循环中已跑过的轮数，就可以避免内循环中所有不必要的比较。\n\n```ini\nfunction bubbleSort(array) {\n  const { length } = array;\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length - 1 - i; j++) {\n      if (array[j] > array[j + 1]) {\n        [array[j], array[j + 1]] = [array[j + 1], array[j]]\n      }\n    }\n  }\n  return array\n}\n```\n\n改进后的执行过程如下：\n\n![image.png](../imgs/2427be496cb94155af84d9370af28118.png)\n\n即便我们对它做了优化，冒泡算法的复杂度仍然是O(n2)O(n^2)O(n2)，因此在排序实践中，冒泡用的并不多。","source":"_posts/排序算法之冒泡排序.md","raw":"---\n title: \"排序算法之冒泡排序\"\n date: 2022-02-09\n tags: [算法]\n categories: [算法手册]\n---\n\n「这是我参与2022首次更文挑战的第14天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n如果要学习排序算法，大多会先从冒泡算法开始，因为它是所有排序算法中最简单的一个。不过它也是最慢的一个。\n\n冒泡排序比较所有相邻的两个项，如果第一个比第二个大，则交换它们。元素项向上移动至正确的顺序，就好像气泡升至表面一样，冒泡排序因此得名。\n\n![sort-bub.gif](../imgs/296a67578b674e6bbbc08b04d8714646.png)\n\n实现\n--\n\n冒泡算法依次比较相邻两项，判断大小，并做交换。每一轮都只能确定一个数字的位置，因此如果有n个数，需要比较n轮。算法实现如下：\n\n```ini\nfunction bubbleSort(array) {\n  const { length } = array;\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        [array[j], array[j + 1]] = [array[j + 1], array[j]]\n      }\n    }\n  }\n  return array\n}\nbubbleSort([5, 4, 3, 2, 1]) //  [1, 2, 3, 4, 5]\n\n```\n\n_这里用了es6的语法 `[array[j], array[j + 1]] = [array[j + 1], array[j]]`，一行代码便可以交换两个数 的位置_。\n\n下图展示了冒泡排序的执行过程： ![image.png](../imgs/e03c00247a8d44febb9a8f79bade6c66.png)\n\n优化\n--\n\n冒泡算法有两层循环，外循环一共执行了5次，每轮内循环执行4次。但是外循环第一轮就可以求出最大的值5，第二轮的内循环只需执行3次，不需要比较4和5。因此如果从内循环减去外循环中已跑过的轮数，就可以避免内循环中所有不必要的比较。\n\n```ini\nfunction bubbleSort(array) {\n  const { length } = array;\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length - 1 - i; j++) {\n      if (array[j] > array[j + 1]) {\n        [array[j], array[j + 1]] = [array[j + 1], array[j]]\n      }\n    }\n  }\n  return array\n}\n```\n\n改进后的执行过程如下：\n\n![image.png](../imgs/2427be496cb94155af84d9370af28118.png)\n\n即便我们对它做了优化，冒泡算法的复杂度仍然是O(n2)O(n^2)O(n2)，因此在排序实践中，冒泡用的并不多。","slug":"排序算法之冒泡排序","published":1,"updated":"2024-04-04T15:27:03.250Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li2007lhajf2b84631u","content":"<p>「这是我参与2022首次更文挑战的第14天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>如果要学习排序算法，大多会先从冒泡算法开始，因为它是所有排序算法中最简单的一个。不过它也是最慢的一个。</p>\n<p>冒泡排序比较所有相邻的两个项，如果第一个比第二个大，则交换它们。元素项向上移动至正确的顺序，就好像气泡升至表面一样，冒泡排序因此得名。</p>\n<p><img src=\"/../imgs/296a67578b674e6bbbc08b04d8714646.png\" alt=\"sort-bub.gif\"></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>冒泡算法依次比较相邻两项，判断大小，并做交换。每一轮都只能确定一个数字的位置，因此如果有n个数，需要比较n轮。算法实现如下：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bubbleSort(array) &#123;</span><br><span class=\"line\">  const &#123; length &#125; = array<span class=\"comment\">;</span></span><br><span class=\"line\">  for (let <span class=\"attr\">i</span> = <span class=\"number\">0</span><span class=\"comment\">; i &lt; length; i++) &#123;</span></span><br><span class=\"line\">    for (let <span class=\"attr\">j</span> = <span class=\"number\">0</span><span class=\"comment\">; j &lt; length - 1; j++) &#123;</span></span><br><span class=\"line\">      if (array<span class=\"section\">[j]</span> &gt; array<span class=\"section\">[j + 1]</span>) &#123;</span><br><span class=\"line\">        <span class=\"section\">[array[j]</span>, array<span class=\"section\">[j + 1]]</span> = <span class=\"section\">[array[j + 1]</span>, array<span class=\"section\">[j]]</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return array</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bubbleSort(<span class=\"section\">[5, 4, 3, 2, 1]</span>) //  <span class=\"section\">[1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>_这里用了es6的语法 <code>[array[j], array[j + 1]] = [array[j + 1], array[j]]</code>，一行代码便可以交换两个数 的位置_。</p>\n<p>下图展示了冒泡排序的执行过程： <img src=\"/../imgs/e03c00247a8d44febb9a8f79bade6c66.png\" alt=\"image.png\"></p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>冒泡算法有两层循环，外循环一共执行了5次，每轮内循环执行4次。但是外循环第一轮就可以求出最大的值5，第二轮的内循环只需执行3次，不需要比较4和5。因此如果从内循环减去外循环中已跑过的轮数，就可以避免内循环中所有不必要的比较。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bubbleSort(array) &#123;</span><br><span class=\"line\">  const &#123; length &#125; = array<span class=\"comment\">;</span></span><br><span class=\"line\">  for (let <span class=\"attr\">i</span> = <span class=\"number\">0</span><span class=\"comment\">; i &lt; length; i++) &#123;</span></span><br><span class=\"line\">    for (let <span class=\"attr\">j</span> = <span class=\"number\">0</span><span class=\"comment\">; j &lt; length - 1 - i; j++) &#123;</span></span><br><span class=\"line\">      if (array<span class=\"section\">[j]</span> &gt; array<span class=\"section\">[j + 1]</span>) &#123;</span><br><span class=\"line\">        <span class=\"section\">[array[j]</span>, array<span class=\"section\">[j + 1]]</span> = <span class=\"section\">[array[j + 1]</span>, array<span class=\"section\">[j]]</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return array</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改进后的执行过程如下：</p>\n<p><img src=\"/../imgs/2427be496cb94155af84d9370af28118.png\" alt=\"image.png\"></p>\n<p>即便我们对它做了优化，冒泡算法的复杂度仍然是O(n2)O(n^2)O(n2)，因此在排序实践中，冒泡用的并不多。</p>\n","length":1038,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第14天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>如果要学习排序算法，大多会先从冒泡算法开始，因为它是所有排序算法中最简单的一个。不过它也是最慢的一个。</p>\n<p>冒泡排序比较所有相邻的两个项，如果第一个比第二个大，则交换它们。元素项向上移动至正确的顺序，就好像气泡升至表面一样，冒泡排序因此得名。</p>\n<p><img src=\"/../imgs/296a67578b674e6bbbc08b04d8714646.png\" alt=\"sort-bub.gif\"></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>冒泡算法依次比较相邻两项，判断大小，并做交换。每一轮都只能确定一个数字的位置，因此如果有n个数，需要比较n轮。算法实现如下：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bubbleSort(array) &#123;</span><br><span class=\"line\">  const &#123; length &#125; = array<span class=\"comment\">;</span></span><br><span class=\"line\">  for (let <span class=\"attr\">i</span> = <span class=\"number\">0</span><span class=\"comment\">; i &lt; length; i++) &#123;</span></span><br><span class=\"line\">    for (let <span class=\"attr\">j</span> = <span class=\"number\">0</span><span class=\"comment\">; j &lt; length - 1; j++) &#123;</span></span><br><span class=\"line\">      if (array<span class=\"section\">[j]</span> &gt; array<span class=\"section\">[j + 1]</span>) &#123;</span><br><span class=\"line\">        <span class=\"section\">[array[j]</span>, array<span class=\"section\">[j + 1]]</span> = <span class=\"section\">[array[j + 1]</span>, array<span class=\"section\">[j]]</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return array</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bubbleSort(<span class=\"section\">[5, 4, 3, 2, 1]</span>) //  <span class=\"section\">[1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>_这里用了es6的语法 <code>[array[j], array[j + 1]] = [array[j + 1], array[j]]</code>，一行代码便可以交换两个数 的位置_。</p>\n<p>下图展示了冒泡排序的执行过程： <img src=\"/../imgs/e03c00247a8d44febb9a8f79bade6c66.png\" alt=\"image.png\"></p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>冒泡算法有两层循环，外循环一共执行了5次，每轮内循环执行4次。但是外循环第一轮就可以求出最大的值5，第二轮的内循环只需执行3次，不需要比较4和5。因此如果从内循环减去外循环中已跑过的轮数，就可以避免内循环中所有不必要的比较。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bubbleSort(array) &#123;</span><br><span class=\"line\">  const &#123; length &#125; = array<span class=\"comment\">;</span></span><br><span class=\"line\">  for (let <span class=\"attr\">i</span> = <span class=\"number\">0</span><span class=\"comment\">; i &lt; length; i++) &#123;</span></span><br><span class=\"line\">    for (let <span class=\"attr\">j</span> = <span class=\"number\">0</span><span class=\"comment\">; j &lt; length - 1 - i; j++) &#123;</span></span><br><span class=\"line\">      if (array<span class=\"section\">[j]</span> &gt; array<span class=\"section\">[j + 1]</span>) &#123;</span><br><span class=\"line\">        <span class=\"section\">[array[j]</span>, array<span class=\"section\">[j + 1]]</span> = <span class=\"section\">[array[j + 1]</span>, array<span class=\"section\">[j]]</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return array</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改进后的执行过程如下：</p>\n<p><img src=\"/../imgs/2427be496cb94155af84d9370af28118.png\" alt=\"image.png\"></p>\n<p>即便我们对它做了优化，冒泡算法的复杂度仍然是O(n2)O(n^2)O(n2)，因此在排序实践中，冒泡用的并不多。</p>\n"},{"title":"排序算法之归并排序","date":"2022-02-11T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第17天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n归并排序是第一个可以实际使用的排序算法，它的复杂度是O(nlog(n))O(nlog(n))O(nlog(n))。前面三种排序算法的复杂度都是O(n2)O(n^2)O(n2)，在最坏的情况下，每个数都要和其他任意一个数比较，但归并算法不需要。\n\n归并排序是一种分而治之算法。其思想是将原始数组切分成较小的数组，直到每个小数组只有一个位置，接着将小数组归并成较大的数组，直到最后只有一个排序完毕的大数组。\n\n这里举一个最简单的例子来解释为什么归并算法的性能比前面三种更好：\n\n比如排序3,1,4,2，则可以分为两组：3和1排序得1,3；4和2排序得2,4，之后再将这两组合并，1和2比，可以确定1的位置，而不用再与4比较，从而节省1次比较。\n\n可以从下面的两个图理解归并算法分组——排序——合并的过程：\n\n![sort-mer.gif](../imgs/3c1031d4444443d0b24ef31233934c57.png)\n\n![image.png](../imgs/f210a5129458480ebaeec2e859a5937a.png)\n\n实现\n--\n\n根据归并算法的思想，我们需要将排序函数分为两个部分：分组和排序合并。\n\n```css\nfunction mergeSort(array, compare) {\n  if (array.length > 1) {\n    const { length } = array;\n    const middle = Math.floor(length / 2);\n    // 递归分组\n    const left = mergeSort(array.slice(0, middle), compare);\n    const right = mergeSort(array.slice(middle), compare);\n    // 比较并合并\n    array = merge(left, right, compare)\n  }\n  return array;\n}\nfunction merge(left, right, compare = (a, b) => a > b) {\n  let i = 0; let j = 0;\n  const result = [];\n  while (i < left.length && j < right.length) {\n    // 这里的判断注意稳定性\n    compare(left[i], right[j]) > 0 ? result.push(right[j++]) : result.push(left[i++]);\n  }\n  const x = result.concat(i < left.length ? left.slice(i) : right.slice(j))\n  return x;\n}\n```\n\n这个算法实现的时候需要注意稳定性，如果两个值一样，则应该保持原先的顺序。\n\n测试稳定性\n-----\n\n为了测试我们实现的函数的排序稳定性，额外增加了一个comapre函数，该函数和`Array.prototype.sort`的第二个参数一样，当返回值大于0时，调换两个值的顺序。\n\n测试代码及输出如下：\n\n```css\nvar arr = [5, 1, 1, 4, 3, 2, 3, 1, 6].map((item, index) => ({ k: String.fromCharCode(97 + index), value: item }))\nmergeSort(arr, (a, b) => {\n  return a.value - b.value\n})\n```\n\n![image.png](../imgs/00bfff7f7dd748058ca38a1a7b0a754d.png)","source":"_posts/排序算法之归并排序.md","raw":"---\n title: \"排序算法之归并排序\"\n date: 2022-02-12\n tags: [算法]\n categories: [算法手册]\n---\n\n「这是我参与2022首次更文挑战的第17天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n归并排序是第一个可以实际使用的排序算法，它的复杂度是O(nlog(n))O(nlog(n))O(nlog(n))。前面三种排序算法的复杂度都是O(n2)O(n^2)O(n2)，在最坏的情况下，每个数都要和其他任意一个数比较，但归并算法不需要。\n\n归并排序是一种分而治之算法。其思想是将原始数组切分成较小的数组，直到每个小数组只有一个位置，接着将小数组归并成较大的数组，直到最后只有一个排序完毕的大数组。\n\n这里举一个最简单的例子来解释为什么归并算法的性能比前面三种更好：\n\n比如排序3,1,4,2，则可以分为两组：3和1排序得1,3；4和2排序得2,4，之后再将这两组合并，1和2比，可以确定1的位置，而不用再与4比较，从而节省1次比较。\n\n可以从下面的两个图理解归并算法分组——排序——合并的过程：\n\n![sort-mer.gif](../imgs/3c1031d4444443d0b24ef31233934c57.png)\n\n![image.png](../imgs/f210a5129458480ebaeec2e859a5937a.png)\n\n实现\n--\n\n根据归并算法的思想，我们需要将排序函数分为两个部分：分组和排序合并。\n\n```css\nfunction mergeSort(array, compare) {\n  if (array.length > 1) {\n    const { length } = array;\n    const middle = Math.floor(length / 2);\n    // 递归分组\n    const left = mergeSort(array.slice(0, middle), compare);\n    const right = mergeSort(array.slice(middle), compare);\n    // 比较并合并\n    array = merge(left, right, compare)\n  }\n  return array;\n}\nfunction merge(left, right, compare = (a, b) => a > b) {\n  let i = 0; let j = 0;\n  const result = [];\n  while (i < left.length && j < right.length) {\n    // 这里的判断注意稳定性\n    compare(left[i], right[j]) > 0 ? result.push(right[j++]) : result.push(left[i++]);\n  }\n  const x = result.concat(i < left.length ? left.slice(i) : right.slice(j))\n  return x;\n}\n```\n\n这个算法实现的时候需要注意稳定性，如果两个值一样，则应该保持原先的顺序。\n\n测试稳定性\n-----\n\n为了测试我们实现的函数的排序稳定性，额外增加了一个comapre函数，该函数和`Array.prototype.sort`的第二个参数一样，当返回值大于0时，调换两个值的顺序。\n\n测试代码及输出如下：\n\n```css\nvar arr = [5, 1, 1, 4, 3, 2, 3, 1, 6].map((item, index) => ({ k: String.fromCharCode(97 + index), value: item }))\nmergeSort(arr, (a, b) => {\n  return a.value - b.value\n})\n```\n\n![image.png](../imgs/00bfff7f7dd748058ca38a1a7b0a754d.png)","slug":"排序算法之归并排序","published":1,"updated":"2024-04-04T15:27:03.236Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li3007phajf6f7k7s6y","content":"<p>「这是我参与2022首次更文挑战的第17天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>归并排序是第一个可以实际使用的排序算法，它的复杂度是O(nlog(n))O(nlog(n))O(nlog(n))。前面三种排序算法的复杂度都是O(n2)O(n^2)O(n2)，在最坏的情况下，每个数都要和其他任意一个数比较，但归并算法不需要。</p>\n<p>归并排序是一种分而治之算法。其思想是将原始数组切分成较小的数组，直到每个小数组只有一个位置，接着将小数组归并成较大的数组，直到最后只有一个排序完毕的大数组。</p>\n<p>这里举一个最简单的例子来解释为什么归并算法的性能比前面三种更好：</p>\n<p>比如排序3,1,4,2，则可以分为两组：3和1排序得1,3；4和2排序得2,4，之后再将这两组合并，1和2比，可以确定1的位置，而不用再与4比较，从而节省1次比较。</p>\n<p>可以从下面的两个图理解归并算法分组——排序——合并的过程：</p>\n<p><img src=\"/../imgs/3c1031d4444443d0b24ef31233934c57.png\" alt=\"sort-mer.gif\"></p>\n<p><img src=\"/../imgs/f210a5129458480ebaeec2e859a5937a.png\" alt=\"image.png\"></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>根据归并算法的思想，我们需要将排序函数分为两个部分：分组和排序合并。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function mergeSort(array, compare) &#123;</span><br><span class=\"line\">  if (array<span class=\"selector-class\">.length</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    const &#123; length &#125; = array;</span><br><span class=\"line\">    const middle = Math<span class=\"selector-class\">.floor</span>(length / <span class=\"number\">2</span>);</span><br><span class=\"line\">    // 递归分组</span><br><span class=\"line\">    const <span class=\"attribute\">left</span> = mergeSort(array<span class=\"selector-class\">.slice</span>(<span class=\"number\">0</span>, middle), compare);</span><br><span class=\"line\">    const <span class=\"attribute\">right</span> = mergeSort(array<span class=\"selector-class\">.slice</span>(middle), compare);</span><br><span class=\"line\">    // 比较并合并</span><br><span class=\"line\">    array = merge(<span class=\"attribute\">left</span>, <span class=\"attribute\">right</span>, compare)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function merge(<span class=\"attribute\">left</span>, <span class=\"attribute\">right</span>, compare = (<span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">b</span>) =&gt; <span class=\"selector-tag\">a</span> &gt; <span class=\"selector-tag\">b</span>) &#123;</span><br><span class=\"line\">  let <span class=\"selector-tag\">i</span> = <span class=\"number\">0</span>; let j = <span class=\"number\">0</span>;</span><br><span class=\"line\">  const result = <span class=\"selector-attr\">[]</span>;</span><br><span class=\"line\">  while (<span class=\"selector-tag\">i</span> &lt; <span class=\"attribute\">left</span><span class=\"selector-class\">.length</span> &amp;&amp; j &lt; <span class=\"attribute\">right</span><span class=\"selector-class\">.length</span>) &#123;</span><br><span class=\"line\">    // 这里的判断注意稳定性</span><br><span class=\"line\">    compare(<span class=\"attribute\">left</span><span class=\"selector-attr\">[i]</span>, <span class=\"attribute\">right</span><span class=\"selector-attr\">[j]</span>) &gt; <span class=\"number\">0</span> ? result<span class=\"selector-class\">.push</span>(<span class=\"attribute\">right</span><span class=\"selector-attr\">[j++]</span>) : result.<span class=\"built_in\">push</span>(left[i++]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  const x = result<span class=\"selector-class\">.concat</span>(<span class=\"selector-tag\">i</span> &lt; <span class=\"attribute\">left</span><span class=\"selector-class\">.length</span> ? <span class=\"attribute\">left</span><span class=\"selector-class\">.slice</span>(<span class=\"selector-tag\">i</span>) : right.<span class=\"built_in\">slice</span>(j))</span><br><span class=\"line\">  return x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个算法实现的时候需要注意稳定性，如果两个值一样，则应该保持原先的顺序。</p>\n<h2 id=\"测试稳定性\"><a href=\"#测试稳定性\" class=\"headerlink\" title=\"测试稳定性\"></a>测试稳定性</h2><p>为了测试我们实现的函数的排序稳定性，额外增加了一个comapre函数，该函数和<code>Array.prototype.sort</code>的第二个参数一样，当返回值大于0时，调换两个值的顺序。</p>\n<p>测试代码及输出如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> arr = <span class=\"selector-attr\">[5, 1, 1, 4, 3, 2, 3, 1, 6]</span><span class=\"selector-class\">.map</span>((item, index) =&gt; (&#123; k: String.<span class=\"built_in\">fromCharCode</span>(<span class=\"number\">97</span> + index), value: item &#125;))</span><br><span class=\"line\">mergeSort(arr, (<span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">b</span>) =&gt; &#123;</span><br><span class=\"line\">  return <span class=\"selector-tag\">a</span><span class=\"selector-class\">.value</span> - <span class=\"selector-tag\">b</span><span class=\"selector-class\">.value</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/00bfff7f7dd748058ca38a1a7b0a754d.png\" alt=\"image.png\"></p>\n","length":1374,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第17天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>归并排序是第一个可以实际使用的排序算法，它的复杂度是O(nlog(n))O(nlog(n))O(nlog(n))。前面三种排序算法的复杂度都是O(n2)O(n^2)O(n2)，在最坏的情况下，每个数都要和其他任意一个数比较，但归并算法不需要。</p>\n<p>归并排序是一种分而治之算法。其思想是将原始数组切分成较小的数组，直到每个小数组只有一个位置，接着将小数组归并成较大的数组，直到最后只有一个排序完毕的大数组。</p>\n<p>这里举一个最简单的例子来解释为什么归并算法的性能比前面三种更好：</p>\n<p>比如排序3,1,4,2，则可以分为两组：3和1排序得1,3；4和2排序得2,4，之后再将这两组合并，1和2比，可以确定1的位置，而不用再与4比较，从而节省1次比较。</p>\n<p>可以从下面的两个图理解归并算法分组——排序——合并的过程：</p>\n<p><img src=\"/../imgs/3c1031d4444443d0b24ef31233934c57.png\" alt=\"sort-mer.gif\"></p>\n<p><img src=\"/../imgs/f210a5129458480ebaeec2e859a5937a.png\" alt=\"image.png\"></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>根据归并算法的思想，我们需要将排序函数分为两个部分：分组和排序合并。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function mergeSort(array, compare) &#123;</span><br><span class=\"line\">  if (array<span class=\"selector-class\">.length</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    const &#123; length &#125; = array;</span><br><span class=\"line\">    const middle = Math<span class=\"selector-class\">.floor</span>(length / <span class=\"number\">2</span>);</span><br><span class=\"line\">    // 递归分组</span><br><span class=\"line\">    const <span class=\"attribute\">left</span> = mergeSort(array<span class=\"selector-class\">.slice</span>(<span class=\"number\">0</span>, middle), compare);</span><br><span class=\"line\">    const <span class=\"attribute\">right</span> = mergeSort(array<span class=\"selector-class\">.slice</span>(middle), compare);</span><br><span class=\"line\">    // 比较并合并</span><br><span class=\"line\">    array = merge(<span class=\"attribute\">left</span>, <span class=\"attribute\">right</span>, compare)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function merge(<span class=\"attribute\">left</span>, <span class=\"attribute\">right</span>, compare = (<span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">b</span>) =&gt; <span class=\"selector-tag\">a</span> &gt; <span class=\"selector-tag\">b</span>) &#123;</span><br><span class=\"line\">  let <span class=\"selector-tag\">i</span> = <span class=\"number\">0</span>; let j = <span class=\"number\">0</span>;</span><br><span class=\"line\">  const result = <span class=\"selector-attr\">[]</span>;</span><br><span class=\"line\">  while (<span class=\"selector-tag\">i</span> &lt; <span class=\"attribute\">left</span><span class=\"selector-class\">.length</span> &amp;&amp; j &lt; <span class=\"attribute\">right</span><span class=\"selector-class\">.length</span>) &#123;</span><br><span class=\"line\">    // 这里的判断注意稳定性</span><br><span class=\"line\">    compare(<span class=\"attribute\">left</span><span class=\"selector-attr\">[i]</span>, <span class=\"attribute\">right</span><span class=\"selector-attr\">[j]</span>) &gt; <span class=\"number\">0</span> ? result<span class=\"selector-class\">.push</span>(<span class=\"attribute\">right</span><span class=\"selector-attr\">[j++]</span>) : result.<span class=\"built_in\">push</span>(left[i++]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  const x = result<span class=\"selector-class\">.concat</span>(<span class=\"selector-tag\">i</span> &lt; <span class=\"attribute\">left</span><span class=\"selector-class\">.length</span> ? <span class=\"attribute\">left</span><span class=\"selector-class\">.slice</span>(<span class=\"selector-tag\">i</span>) : right.<span class=\"built_in\">slice</span>(j))</span><br><span class=\"line\">  return x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个算法实现的时候需要注意稳定性，如果两个值一样，则应该保持原先的顺序。</p>\n<h2 id=\"测试稳定性\"><a href=\"#测试稳定性\" class=\"headerlink\" title=\"测试稳定性\"></a>测试稳定性</h2><p>为了测试我们实现的函数的排序稳定性，额外增加了一个comapre函数，该函数和<code>Array.prototype.sort</code>的第二个参数一样，当返回值大于0时，调换两个值的顺序。</p>\n<p>测试代码及输出如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> arr = <span class=\"selector-attr\">[5, 1, 1, 4, 3, 2, 3, 1, 6]</span><span class=\"selector-class\">.map</span>((item, index) =&gt; (&#123; k: String.<span class=\"built_in\">fromCharCode</span>(<span class=\"number\">97</span> + index), value: item &#125;))</span><br><span class=\"line\">mergeSort(arr, (<span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">b</span>) =&gt; &#123;</span><br><span class=\"line\">  return <span class=\"selector-tag\">a</span><span class=\"selector-class\">.value</span> - <span class=\"selector-tag\">b</span><span class=\"selector-class\">.value</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../imgs/00bfff7f7dd748058ca38a1a7b0a754d.png\" alt=\"image.png\"></p>\n"},{"title":"排序算法之快速排序","date":"2022-02-12T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第18天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n快排算法是最常用的算法之一，它的复杂度是O(nlog(n))O(nlog(n))O(nlog(n))。\n\n快排算法步骤比较复杂，这里总结一下它大致的思路：\n\n1.  从数组中去一个值作为主元pivot\n2.  创建两个指针，分别从左和右开始，将指针指向的值与主元pivot比较\n3.  如果左指针指向的值>pivot,则将这个值与右指针指向的值交换；同理如果右指针指向的数比pivot更大，则将其与左指针指向的数交换\n4.  直到两个指针交叉 上面的过程称之为划分partition，这一步结束后可以得到两个数组：较小值数组和较大值数组。\n\n比如3,5,2,4,1，我们去中间值2作为pivot，第一次划分得到的结果是：1,5,2,4,3，过程中进行了2次交换，意味着左边2个数是比pivot更小的，因此这里将数组划分为1,2和5,4,3两个部分。\n\n然后再分别对左右两个数组进行划分，最终得到排序后的结果。\n\n实现\n--\n\n```sql\nfunction quickSort(array) {\n  return quick(array, 0, array.length - 1)\n}\nfunction quick(array, left, right) {\n  let index;\n  if (array.length > 1) {\n    index = partition(array, left, right)\n    if (left < (index - 1)) {\n      quick(array, left, index - 1)\n    }\n    if (index < right) {\n      quick(array, index, right)\n    }\n  }\n  return array;\n}\nfunction partition(array, left, right) {\n  const pivot = array[Math.floor((left + right) / 2)];\n  let i = left; let j = right;\n  while (i < j) {\n    while (array[i] < pivot) {\n      i++\n    }\n    while (array[j] > pivot) {\n      j--\n    }\n    if (i <= j) {\n      [array[i], array[j]] = [array[j], array[i]];\n      i++;\n      j--;\n    }\n  }\n  return i\n}\n\n```\n\n需要注意的是，快速排序算法并**不是稳定排序**。\n\n假设数组是`[3, 5, 1, 6, 4, 7, 2]`,下面一步步展示算法过程:\n\n1.  对数组进行第一次划分：\n\n![image.png](../imgs/b3ad6b12445348d59a136143f3d19b24.png)\n\n2.  对较小值数组`[3,5,1,2,4]`进行划分：\n\n![image.png](../imgs/6df0bf2c4e544049831f180910faabcd.png)\n\n3.  继续对子数组`[5,3,2,4]`进行划分\n\n![image.png](../imgs/7711dd594c064fc48111b158c2c110b9.png)\n\n4.  分别比较`[2,3]`和`[5,4]`,最后比较较大值数组`[7,6]`\n\n![image.png](../imgs/f7aeab1411a1476cab6094fa7d7c3038.png)\n\n![image.png](../imgs/3ad8a4dec3364ba582900fe5428c8518.png)","source":"_posts/排序算法之快速排序.md","raw":"---\n title: \"排序算法之快速排序\"\n date: 2022-02-13\n tags: [算法]\n categories: [算法手册]\n---\n\n「这是我参与2022首次更文挑战的第18天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n快排算法是最常用的算法之一，它的复杂度是O(nlog(n))O(nlog(n))O(nlog(n))。\n\n快排算法步骤比较复杂，这里总结一下它大致的思路：\n\n1.  从数组中去一个值作为主元pivot\n2.  创建两个指针，分别从左和右开始，将指针指向的值与主元pivot比较\n3.  如果左指针指向的值>pivot,则将这个值与右指针指向的值交换；同理如果右指针指向的数比pivot更大，则将其与左指针指向的数交换\n4.  直到两个指针交叉 上面的过程称之为划分partition，这一步结束后可以得到两个数组：较小值数组和较大值数组。\n\n比如3,5,2,4,1，我们去中间值2作为pivot，第一次划分得到的结果是：1,5,2,4,3，过程中进行了2次交换，意味着左边2个数是比pivot更小的，因此这里将数组划分为1,2和5,4,3两个部分。\n\n然后再分别对左右两个数组进行划分，最终得到排序后的结果。\n\n实现\n--\n\n```sql\nfunction quickSort(array) {\n  return quick(array, 0, array.length - 1)\n}\nfunction quick(array, left, right) {\n  let index;\n  if (array.length > 1) {\n    index = partition(array, left, right)\n    if (left < (index - 1)) {\n      quick(array, left, index - 1)\n    }\n    if (index < right) {\n      quick(array, index, right)\n    }\n  }\n  return array;\n}\nfunction partition(array, left, right) {\n  const pivot = array[Math.floor((left + right) / 2)];\n  let i = left; let j = right;\n  while (i < j) {\n    while (array[i] < pivot) {\n      i++\n    }\n    while (array[j] > pivot) {\n      j--\n    }\n    if (i <= j) {\n      [array[i], array[j]] = [array[j], array[i]];\n      i++;\n      j--;\n    }\n  }\n  return i\n}\n\n```\n\n需要注意的是，快速排序算法并**不是稳定排序**。\n\n假设数组是`[3, 5, 1, 6, 4, 7, 2]`,下面一步步展示算法过程:\n\n1.  对数组进行第一次划分：\n\n![image.png](../imgs/b3ad6b12445348d59a136143f3d19b24.png)\n\n2.  对较小值数组`[3,5,1,2,4]`进行划分：\n\n![image.png](../imgs/6df0bf2c4e544049831f180910faabcd.png)\n\n3.  继续对子数组`[5,3,2,4]`进行划分\n\n![image.png](../imgs/7711dd594c064fc48111b158c2c110b9.png)\n\n4.  分别比较`[2,3]`和`[5,4]`,最后比较较大值数组`[7,6]`\n\n![image.png](../imgs/f7aeab1411a1476cab6094fa7d7c3038.png)\n\n![image.png](../imgs/3ad8a4dec3364ba582900fe5428c8518.png)","slug":"排序算法之快速排序","published":1,"updated":"2024-04-04T15:27:03.244Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li3007thajf56aobyu5","content":"<p>「这是我参与2022首次更文挑战的第18天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>快排算法是最常用的算法之一，它的复杂度是O(nlog(n))O(nlog(n))O(nlog(n))。</p>\n<p>快排算法步骤比较复杂，这里总结一下它大致的思路：</p>\n<ol>\n<li>从数组中去一个值作为主元pivot</li>\n<li>创建两个指针，分别从左和右开始，将指针指向的值与主元pivot比较</li>\n<li>如果左指针指向的值&gt;pivot,则将这个值与右指针指向的值交换；同理如果右指针指向的数比pivot更大，则将其与左指针指向的数交换</li>\n<li>直到两个指针交叉 上面的过程称之为划分partition，这一步结束后可以得到两个数组：较小值数组和较大值数组。</li>\n</ol>\n<p>比如3,5,2,4,1，我们去中间值2作为pivot，第一次划分得到的结果是：1,5,2,4,3，过程中进行了2次交换，意味着左边2个数是比pivot更小的，因此这里将数组划分为1,2和5,4,3两个部分。</p>\n<p>然后再分别对左右两个数组进行划分，最终得到排序后的结果。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> quickSort(<span class=\"keyword\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quick(<span class=\"keyword\">array</span>, <span class=\"number\">0</span>, array.length <span class=\"operator\">-</span> <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> quick(<span class=\"keyword\">array</span>, <span class=\"keyword\">left</span>, <span class=\"keyword\">right</span>) &#123;</span><br><span class=\"line\">  let index;</span><br><span class=\"line\">  if (array.length <span class=\"operator\">&gt;</span> <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    index <span class=\"operator\">=</span> <span class=\"keyword\">partition</span>(<span class=\"keyword\">array</span>, <span class=\"keyword\">left</span>, <span class=\"keyword\">right</span>)</span><br><span class=\"line\">    if (<span class=\"keyword\">left</span> <span class=\"operator\">&lt;</span> (index <span class=\"operator\">-</span> <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">      quick(<span class=\"keyword\">array</span>, <span class=\"keyword\">left</span>, index <span class=\"operator\">-</span> <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (index <span class=\"operator\">&lt;</span> <span class=\"keyword\">right</span>) &#123;</span><br><span class=\"line\">      quick(<span class=\"keyword\">array</span>, index, <span class=\"keyword\">right</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"keyword\">partition</span>(<span class=\"keyword\">array</span>, <span class=\"keyword\">left</span>, <span class=\"keyword\">right</span>) &#123;</span><br><span class=\"line\">  const pivot <span class=\"operator\">=</span> <span class=\"keyword\">array</span>[Math.<span class=\"built_in\">floor</span>((<span class=\"keyword\">left</span> <span class=\"operator\">+</span> <span class=\"keyword\">right</span>) <span class=\"operator\">/</span> <span class=\"number\">2</span>)];</span><br><span class=\"line\">  let i <span class=\"operator\">=</span> <span class=\"keyword\">left</span>; let j <span class=\"operator\">=</span> <span class=\"keyword\">right</span>;</span><br><span class=\"line\">  while (i <span class=\"operator\">&lt;</span> j) &#123;</span><br><span class=\"line\">    while (<span class=\"keyword\">array</span>[i] <span class=\"operator\">&lt;</span> pivot) &#123;</span><br><span class=\"line\">      i<span class=\"operator\">+</span><span class=\"operator\">+</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (<span class=\"keyword\">array</span>[j] <span class=\"operator\">&gt;</span> pivot) &#123;</span><br><span class=\"line\">      j<span class=\"comment\">--</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (i <span class=\"operator\">&lt;=</span> j) &#123;</span><br><span class=\"line\">      [<span class=\"keyword\">array</span>[i], <span class=\"keyword\">array</span>[j]] <span class=\"operator\">=</span> [<span class=\"keyword\">array</span>[j], <span class=\"keyword\">array</span>[i]];</span><br><span class=\"line\">      i<span class=\"operator\">+</span><span class=\"operator\">+</span>;</span><br><span class=\"line\">      j<span class=\"comment\">--;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，快速排序算法并<strong>不是稳定排序</strong>。</p>\n<p>假设数组是<code>[3, 5, 1, 6, 4, 7, 2]</code>,下面一步步展示算法过程:</p>\n<ol>\n<li>对数组进行第一次划分：</li>\n</ol>\n<p><img src=\"/../imgs/b3ad6b12445348d59a136143f3d19b24.png\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>对较小值数组<code>[3,5,1,2,4]</code>进行划分：</li>\n</ol>\n<p><img src=\"/../imgs/6df0bf2c4e544049831f180910faabcd.png\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>继续对子数组<code>[5,3,2,4]</code>进行划分</li>\n</ol>\n<p><img src=\"/../imgs/7711dd594c064fc48111b158c2c110b9.png\" alt=\"image.png\"></p>\n<ol start=\"4\">\n<li>分别比较<code>[2,3]</code>和<code>[5,4]</code>,最后比较较大值数组<code>[7,6]</code></li>\n</ol>\n<p><img src=\"/../imgs/f7aeab1411a1476cab6094fa7d7c3038.png\" alt=\"image.png\"></p>\n<p><img src=\"/../imgs/3ad8a4dec3364ba582900fe5428c8518.png\" alt=\"image.png\"></p>\n","length":1227,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第18天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>快排算法是最常用的算法之一，它的复杂度是O(nlog(n))O(nlog(n))O(nlog(n))。</p>\n<p>快排算法步骤比较复杂，这里总结一下它大致的思路：</p>\n<ol>\n<li>从数组中去一个值作为主元pivot</li>\n<li>创建两个指针，分别从左和右开始，将指针指向的值与主元pivot比较</li>\n<li>如果左指针指向的值&gt;pivot,则将这个值与右指针指向的值交换；同理如果右指针指向的数比pivot更大，则将其与左指针指向的数交换</li>\n<li>直到两个指针交叉 上面的过程称之为划分partition，这一步结束后可以得到两个数组：较小值数组和较大值数组。</li>\n</ol>\n<p>比如3,5,2,4,1，我们去中间值2作为pivot，第一次划分得到的结果是：1,5,2,4,3，过程中进行了2次交换，意味着左边2个数是比pivot更小的，因此这里将数组划分为1,2和5,4,3两个部分。</p>\n<p>然后再分别对左右两个数组进行划分，最终得到排序后的结果。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> quickSort(<span class=\"keyword\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quick(<span class=\"keyword\">array</span>, <span class=\"number\">0</span>, array.length <span class=\"operator\">-</span> <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> quick(<span class=\"keyword\">array</span>, <span class=\"keyword\">left</span>, <span class=\"keyword\">right</span>) &#123;</span><br><span class=\"line\">  let index;</span><br><span class=\"line\">  if (array.length <span class=\"operator\">&gt;</span> <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    index <span class=\"operator\">=</span> <span class=\"keyword\">partition</span>(<span class=\"keyword\">array</span>, <span class=\"keyword\">left</span>, <span class=\"keyword\">right</span>)</span><br><span class=\"line\">    if (<span class=\"keyword\">left</span> <span class=\"operator\">&lt;</span> (index <span class=\"operator\">-</span> <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">      quick(<span class=\"keyword\">array</span>, <span class=\"keyword\">left</span>, index <span class=\"operator\">-</span> <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (index <span class=\"operator\">&lt;</span> <span class=\"keyword\">right</span>) &#123;</span><br><span class=\"line\">      quick(<span class=\"keyword\">array</span>, index, <span class=\"keyword\">right</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"keyword\">partition</span>(<span class=\"keyword\">array</span>, <span class=\"keyword\">left</span>, <span class=\"keyword\">right</span>) &#123;</span><br><span class=\"line\">  const pivot <span class=\"operator\">=</span> <span class=\"keyword\">array</span>[Math.<span class=\"built_in\">floor</span>((<span class=\"keyword\">left</span> <span class=\"operator\">+</span> <span class=\"keyword\">right</span>) <span class=\"operator\">/</span> <span class=\"number\">2</span>)];</span><br><span class=\"line\">  let i <span class=\"operator\">=</span> <span class=\"keyword\">left</span>; let j <span class=\"operator\">=</span> <span class=\"keyword\">right</span>;</span><br><span class=\"line\">  while (i <span class=\"operator\">&lt;</span> j) &#123;</span><br><span class=\"line\">    while (<span class=\"keyword\">array</span>[i] <span class=\"operator\">&lt;</span> pivot) &#123;</span><br><span class=\"line\">      i<span class=\"operator\">+</span><span class=\"operator\">+</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (<span class=\"keyword\">array</span>[j] <span class=\"operator\">&gt;</span> pivot) &#123;</span><br><span class=\"line\">      j<span class=\"comment\">--</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (i <span class=\"operator\">&lt;=</span> j) &#123;</span><br><span class=\"line\">      [<span class=\"keyword\">array</span>[i], <span class=\"keyword\">array</span>[j]] <span class=\"operator\">=</span> [<span class=\"keyword\">array</span>[j], <span class=\"keyword\">array</span>[i]];</span><br><span class=\"line\">      i<span class=\"operator\">+</span><span class=\"operator\">+</span>;</span><br><span class=\"line\">      j<span class=\"comment\">--;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，快速排序算法并<strong>不是稳定排序</strong>。</p>\n<p>假设数组是<code>[3, 5, 1, 6, 4, 7, 2]</code>,下面一步步展示算法过程:</p>\n<ol>\n<li>对数组进行第一次划分：</li>\n</ol>\n<p><img src=\"/../imgs/b3ad6b12445348d59a136143f3d19b24.png\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>对较小值数组<code>[3,5,1,2,4]</code>进行划分：</li>\n</ol>\n<p><img src=\"/../imgs/6df0bf2c4e544049831f180910faabcd.png\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>继续对子数组<code>[5,3,2,4]</code>进行划分</li>\n</ol>\n<p><img src=\"/../imgs/7711dd594c064fc48111b158c2c110b9.png\" alt=\"image.png\"></p>\n<ol start=\"4\">\n<li>分别比较<code>[2,3]</code>和<code>[5,4]</code>,最后比较较大值数组<code>[7,6]</code></li>\n</ol>\n<p><img src=\"/../imgs/f7aeab1411a1476cab6094fa7d7c3038.png\" alt=\"image.png\"></p>\n<p><img src=\"/../imgs/3ad8a4dec3364ba582900fe5428c8518.png\" alt=\"image.png\"></p>\n"},{"title":"排序算法之插入排序","date":"2022-02-10T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第16天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n插入排序是依次取出一个数，并和前面的数比较大小，插入到合适的位置。\n\n就好像我们手动整理一副乱序的扑克，先将第2张和第1张比，如果比第1张小，则放在它前面；然后将第3张和第2张比，如果比它小，再和第1张比，如果比它大，则插入到第2和第1张中间。\n\n![sort-ins.gif](../imgs/0c276dd1937c4e649bcbbc5a034a2b34.png)\n\n实现\n--\n\njs代码实现如下：\n\n```php\nfunction insertSort(array) {\n  const { length } = array;\n  // 这里从第2个数开始往前比\n  for (let i = 1; i < length; i++) {\n    let j = i;\n    // 后续计算的过程会修改i位置的值，因此需要保存一个临时变量\n    const temp = array[i]\n    while (j > 0 && array[j - 1] > temp) {\n      // 如果前一个数小于待插入的数，则将前一个数后移一位\n      array[j] = array[j - 1]\n      j--\n    }\n    // 最后j就是需要插入的位置，这个位置上原本的数已经后移了一位\n    array[j] = temp\n  }\n  return array;\n}\n\n```\n\n这个算法实现的时候需要注意减少赋值次数：\n\n比如3,5,1,4,2。当待插入数为1时，1与5比较，1<5,则对5后一个位置赋值5，但不需要此时就将1插入到5原先的位置（不需要交换1和5的位置）。之后1与3比较，1<3，则继续将3后一个位置赋值为3，这样通过向后赋值，完成数组的位移。\n\n插入算法的执行过程可以参考下图：\n\n![image.png](../imgs/f08580f2d68a41f89945c559ebb019b3.png)\n\n插入排序的时间复杂度O(n2)O(n^2)O(n2)，与冒泡排序一样，在实践中也只应用于小型数组，但是它的性能要比冒泡排序更好。\n\n为什么说插入排序优于冒泡排序\n--------------\n\n插入排序和冒泡排序都是稳定排序，而插入排序比冒泡更优的点在于赋值次数。\n\n同样对3,5,1,4,2进行排序：\n\n冒泡排序比较5和1时会直接交换：3,1,5,4,2，通常需要3次赋值。\n\n```ini\n// 交换x和y\ntemp = x;\nx=y;\ny=temp;\n\n```\n\n而插入排序比较5和1时，仅做一次赋值：3,5,5,4,2。","source":"_posts/排序算法之插入排序.md","raw":"---\n title: \"排序算法之插入排序\"\n date: 2022-02-11\n tags: [算法]\n categories: [算法手册]\n---\n\n「这是我参与2022首次更文挑战的第16天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n插入排序是依次取出一个数，并和前面的数比较大小，插入到合适的位置。\n\n就好像我们手动整理一副乱序的扑克，先将第2张和第1张比，如果比第1张小，则放在它前面；然后将第3张和第2张比，如果比它小，再和第1张比，如果比它大，则插入到第2和第1张中间。\n\n![sort-ins.gif](../imgs/0c276dd1937c4e649bcbbc5a034a2b34.png)\n\n实现\n--\n\njs代码实现如下：\n\n```php\nfunction insertSort(array) {\n  const { length } = array;\n  // 这里从第2个数开始往前比\n  for (let i = 1; i < length; i++) {\n    let j = i;\n    // 后续计算的过程会修改i位置的值，因此需要保存一个临时变量\n    const temp = array[i]\n    while (j > 0 && array[j - 1] > temp) {\n      // 如果前一个数小于待插入的数，则将前一个数后移一位\n      array[j] = array[j - 1]\n      j--\n    }\n    // 最后j就是需要插入的位置，这个位置上原本的数已经后移了一位\n    array[j] = temp\n  }\n  return array;\n}\n\n```\n\n这个算法实现的时候需要注意减少赋值次数：\n\n比如3,5,1,4,2。当待插入数为1时，1与5比较，1<5,则对5后一个位置赋值5，但不需要此时就将1插入到5原先的位置（不需要交换1和5的位置）。之后1与3比较，1<3，则继续将3后一个位置赋值为3，这样通过向后赋值，完成数组的位移。\n\n插入算法的执行过程可以参考下图：\n\n![image.png](../imgs/f08580f2d68a41f89945c559ebb019b3.png)\n\n插入排序的时间复杂度O(n2)O(n^2)O(n2)，与冒泡排序一样，在实践中也只应用于小型数组，但是它的性能要比冒泡排序更好。\n\n为什么说插入排序优于冒泡排序\n--------------\n\n插入排序和冒泡排序都是稳定排序，而插入排序比冒泡更优的点在于赋值次数。\n\n同样对3,5,1,4,2进行排序：\n\n冒泡排序比较5和1时会直接交换：3,1,5,4,2，通常需要3次赋值。\n\n```ini\n// 交换x和y\ntemp = x;\nx=y;\ny=temp;\n\n```\n\n而插入排序比较5和1时，仅做一次赋值：3,5,5,4,2。","slug":"排序算法之插入排序","published":1,"updated":"2024-04-04T15:27:03.232Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li3007xhajf781x0ad0","content":"<p>「这是我参与2022首次更文挑战的第16天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>插入排序是依次取出一个数，并和前面的数比较大小，插入到合适的位置。</p>\n<p>就好像我们手动整理一副乱序的扑克，先将第2张和第1张比，如果比第1张小，则放在它前面；然后将第3张和第2张比，如果比它小，再和第1张比，如果比它大，则插入到第2和第1张中间。</p>\n<p><img src=\"/../imgs/0c276dd1937c4e649bcbbc5a034a2b34.png\" alt=\"sort-ins.gif\"></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>js代码实现如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSort</span>(<span class=\"params\"><span class=\"keyword\">array</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; length &#125; = <span class=\"keyword\">array</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 这里从第2个数开始往前比</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (let i = <span class=\"number\">1</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    let j = i;</span><br><span class=\"line\">    <span class=\"comment\">// 后续计算的过程会修改i位置的值，因此需要保存一个临时变量</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">temp</span> = <span class=\"keyword\">array</span>[i]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"keyword\">array</span>[j - <span class=\"number\">1</span>] &gt; temp) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果前一个数小于待插入的数，则将前一个数后移一位</span></span><br><span class=\"line\">      <span class=\"keyword\">array</span>[j] = <span class=\"keyword\">array</span>[j - <span class=\"number\">1</span>]</span><br><span class=\"line\">      j--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 最后j就是需要插入的位置，这个位置上原本的数已经后移了一位</span></span><br><span class=\"line\">    <span class=\"keyword\">array</span>[j] = temp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这个算法实现的时候需要注意减少赋值次数：</p>\n<p>比如3,5,1,4,2。当待插入数为1时，1与5比较，1&lt;5,则对5后一个位置赋值5，但不需要此时就将1插入到5原先的位置（不需要交换1和5的位置）。之后1与3比较，1&lt;3，则继续将3后一个位置赋值为3，这样通过向后赋值，完成数组的位移。</p>\n<p>插入算法的执行过程可以参考下图：</p>\n<p><img src=\"/../imgs/f08580f2d68a41f89945c559ebb019b3.png\" alt=\"image.png\"></p>\n<p>插入排序的时间复杂度O(n2)O(n^2)O(n2)，与冒泡排序一样，在实践中也只应用于小型数组，但是它的性能要比冒泡排序更好。</p>\n<h2 id=\"为什么说插入排序优于冒泡排序\"><a href=\"#为什么说插入排序优于冒泡排序\" class=\"headerlink\" title=\"为什么说插入排序优于冒泡排序\"></a>为什么说插入排序优于冒泡排序</h2><p>插入排序和冒泡排序都是稳定排序，而插入排序比冒泡更优的点在于赋值次数。</p>\n<p>同样对3,5,1,4,2进行排序：</p>\n<p>冒泡排序比较5和1时会直接交换：3,1,5,4,2，通常需要3次赋值。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 交换x和y</span><br><span class=\"line\"><span class=\"attr\">temp</span> = x<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attr\">x</span>=y<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attr\">y</span>=temp<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>而插入排序比较5和1时，仅做一次赋值：3,5,5,4,2。</p>\n","length":917,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第16天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>插入排序是依次取出一个数，并和前面的数比较大小，插入到合适的位置。</p>\n<p>就好像我们手动整理一副乱序的扑克，先将第2张和第1张比，如果比第1张小，则放在它前面；然后将第3张和第2张比，如果比它小，再和第1张比，如果比它大，则插入到第2和第1张中间。</p>\n<p><img src=\"/../imgs/0c276dd1937c4e649bcbbc5a034a2b34.png\" alt=\"sort-ins.gif\"></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>js代码实现如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSort</span>(<span class=\"params\"><span class=\"keyword\">array</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; length &#125; = <span class=\"keyword\">array</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 这里从第2个数开始往前比</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (let i = <span class=\"number\">1</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    let j = i;</span><br><span class=\"line\">    <span class=\"comment\">// 后续计算的过程会修改i位置的值，因此需要保存一个临时变量</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">temp</span> = <span class=\"keyword\">array</span>[i]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"keyword\">array</span>[j - <span class=\"number\">1</span>] &gt; temp) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果前一个数小于待插入的数，则将前一个数后移一位</span></span><br><span class=\"line\">      <span class=\"keyword\">array</span>[j] = <span class=\"keyword\">array</span>[j - <span class=\"number\">1</span>]</span><br><span class=\"line\">      j--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 最后j就是需要插入的位置，这个位置上原本的数已经后移了一位</span></span><br><span class=\"line\">    <span class=\"keyword\">array</span>[j] = temp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这个算法实现的时候需要注意减少赋值次数：</p>\n<p>比如3,5,1,4,2。当待插入数为1时，1与5比较，1&lt;5,则对5后一个位置赋值5，但不需要此时就将1插入到5原先的位置（不需要交换1和5的位置）。之后1与3比较，1&lt;3，则继续将3后一个位置赋值为3，这样通过向后赋值，完成数组的位移。</p>\n<p>插入算法的执行过程可以参考下图：</p>\n<p><img src=\"/../imgs/f08580f2d68a41f89945c559ebb019b3.png\" alt=\"image.png\"></p>\n<p>插入排序的时间复杂度O(n2)O(n^2)O(n2)，与冒泡排序一样，在实践中也只应用于小型数组，但是它的性能要比冒泡排序更好。</p>\n<h2 id=\"为什么说插入排序优于冒泡排序\"><a href=\"#为什么说插入排序优于冒泡排序\" class=\"headerlink\" title=\"为什么说插入排序优于冒泡排序\"></a>为什么说插入排序优于冒泡排序</h2><p>插入排序和冒泡排序都是稳定排序，而插入排序比冒泡更优的点在于赋值次数。</p>\n<p>同样对3,5,1,4,2进行排序：</p>\n<p>冒泡排序比较5和1时会直接交换：3,1,5,4,2，通常需要3次赋值。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 交换x和y</span><br><span class=\"line\"><span class=\"attr\">temp</span> = x<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attr\">x</span>=y<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attr\">y</span>=temp<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>而插入排序比较5和1时，仅做一次赋值：3,5,5,4,2。</p>\n"},{"title":"排序算法之桶排序","date":"2022-02-26T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第28天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n桶排序，又称为箱排序，也是一种分布式排序算法。大致思想是先对元素进行分组（桶），然后对每个组内的元素进行排序（借助其他排序算法），最后将所有的桶合并为结果数组。\n\n桶排序在最优情况下的时间复杂度为O(n)O(n)O(n),这种情况下每个桶只有一个数字，不需要进行比较。但是如果数据量巨大，会创建大量的桶而占用更多的内存。\n\n实现\n--\n\n首先准备一个简单的排序算法，比如插入排序（归并或快排是更好的选择，插入排序的复杂度更高，不过胜在简单，另外桶排序和核心也并不在这点上）。\n\n```js\nfunction insertSort(array) {\n  const { length } = array;\n \n  for (let i = 1; i < length; i++) {\n    let j = i;\n    const temp = array[i]\n    while (j > 0 && array[j - 1] > temp) {\n      array[j] = array[j - 1]\n      j--\n    }\n    array[j] = temp\n  }\n  return array;\n}\n\n```\n\n桶排序算法如下：\n\n首先需要指定每个桶存最多存放多少数据，这里默认指定为3。桶排序需要尽量将数据平均分配到桶中，如果数据比较密集，使用较少的桶更好。\n\n桶排序的过程需要两个函数来实现：分组和排序。\n\n```php\nfunction bucketSort(array, bucketSize = 3) {\n\n    if (array.length < 2) {\n\n        return array;\n\n    }\n\n    const buckets = createBuckets(array, bucketSize)\n\n    return sortBuckets(buckets)\n\n}\n```\n\n### 分组\n\n然后确定创建多少个桶，需要找到最大值和最小值，并以`Math.ceil((max - min + 1) / bucketSize)`得到`bucketCount`。\n\n之后需要将所有元素分配到每个桶中，这里用`Math.floor((array[i] - min)/bucketSize)`确定该数字属于哪个桶。\n\n```ini\n// 进行分组\nfunction createBuckets(array, bucketSize) {\n    // 找到最大值和最小值\n    let min = array[0];\n\n    let max = array[0];\n\n    for (let i = 1; i < array.length; i++) {\n\n        if (array[i] < min) {\n\n            min = array[i]\n\n        } else if (array[i] > max) {\n\n            max = array[i]\n\n        }\n\n    }\n    // 根据最大值、最小值和每组个数，确定桶的个数。\n    const bucketCount = Math.ceil((max - min + 1) / bucketSize)\n\n    const buckets = [];\n    // 创建桶，初始为空\n    for (let i = 0; i < bucketCount; i++) {\n\n        buckets[i] = []\n\n    }\n    // 将每个元素分配桶各自的桶中\n    for (let i = 0; i < array.length; i++) {\n\n        const bucketIndex = Math.floor((array[i] - min)/bucketSize)\n\n        buckets[bucketIndex].push(array[i])\n\n    }\n\n    return buckets\n\n}\n```\n\n### 排序\n\n使用其他排序算法，对每个桶内的数字进行排序，最后再合并\n\n```js\nfunction sortBuckets(buckets) {\n\n    const sortedArray = [];\n\n    for (let i = 0; i < buckets.length; i++) {\n\n        if (buckets[i] !== null) {\n\n            insertionSort(buckets[i]);\n\n            sortedArray.push(...buckets[i])\n\n        }\n\n    }\n\n    return sortedArray;\n\n}\n```\n\n对以上实现的桶排序，计算过程可以参考下图：\n\n![image.png](../imgs/04acdded1bcb4dc6818e55be7838dc36.png)","source":"_posts/排序算法之桶排序.md","raw":"---\n title: \"排序算法之桶排序\"\n date: 2022-02-27\n tags: [算法]\n categories: [算法手册]\n---\n\n「这是我参与2022首次更文挑战的第28天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n桶排序，又称为箱排序，也是一种分布式排序算法。大致思想是先对元素进行分组（桶），然后对每个组内的元素进行排序（借助其他排序算法），最后将所有的桶合并为结果数组。\n\n桶排序在最优情况下的时间复杂度为O(n)O(n)O(n),这种情况下每个桶只有一个数字，不需要进行比较。但是如果数据量巨大，会创建大量的桶而占用更多的内存。\n\n实现\n--\n\n首先准备一个简单的排序算法，比如插入排序（归并或快排是更好的选择，插入排序的复杂度更高，不过胜在简单，另外桶排序和核心也并不在这点上）。\n\n```js\nfunction insertSort(array) {\n  const { length } = array;\n \n  for (let i = 1; i < length; i++) {\n    let j = i;\n    const temp = array[i]\n    while (j > 0 && array[j - 1] > temp) {\n      array[j] = array[j - 1]\n      j--\n    }\n    array[j] = temp\n  }\n  return array;\n}\n\n```\n\n桶排序算法如下：\n\n首先需要指定每个桶存最多存放多少数据，这里默认指定为3。桶排序需要尽量将数据平均分配到桶中，如果数据比较密集，使用较少的桶更好。\n\n桶排序的过程需要两个函数来实现：分组和排序。\n\n```php\nfunction bucketSort(array, bucketSize = 3) {\n\n    if (array.length < 2) {\n\n        return array;\n\n    }\n\n    const buckets = createBuckets(array, bucketSize)\n\n    return sortBuckets(buckets)\n\n}\n```\n\n### 分组\n\n然后确定创建多少个桶，需要找到最大值和最小值，并以`Math.ceil((max - min + 1) / bucketSize)`得到`bucketCount`。\n\n之后需要将所有元素分配到每个桶中，这里用`Math.floor((array[i] - min)/bucketSize)`确定该数字属于哪个桶。\n\n```ini\n// 进行分组\nfunction createBuckets(array, bucketSize) {\n    // 找到最大值和最小值\n    let min = array[0];\n\n    let max = array[0];\n\n    for (let i = 1; i < array.length; i++) {\n\n        if (array[i] < min) {\n\n            min = array[i]\n\n        } else if (array[i] > max) {\n\n            max = array[i]\n\n        }\n\n    }\n    // 根据最大值、最小值和每组个数，确定桶的个数。\n    const bucketCount = Math.ceil((max - min + 1) / bucketSize)\n\n    const buckets = [];\n    // 创建桶，初始为空\n    for (let i = 0; i < bucketCount; i++) {\n\n        buckets[i] = []\n\n    }\n    // 将每个元素分配桶各自的桶中\n    for (let i = 0; i < array.length; i++) {\n\n        const bucketIndex = Math.floor((array[i] - min)/bucketSize)\n\n        buckets[bucketIndex].push(array[i])\n\n    }\n\n    return buckets\n\n}\n```\n\n### 排序\n\n使用其他排序算法，对每个桶内的数字进行排序，最后再合并\n\n```js\nfunction sortBuckets(buckets) {\n\n    const sortedArray = [];\n\n    for (let i = 0; i < buckets.length; i++) {\n\n        if (buckets[i] !== null) {\n\n            insertionSort(buckets[i]);\n\n            sortedArray.push(...buckets[i])\n\n        }\n\n    }\n\n    return sortedArray;\n\n}\n```\n\n对以上实现的桶排序，计算过程可以参考下图：\n\n![image.png](../imgs/04acdded1bcb4dc6818e55be7838dc36.png)","slug":"排序算法之桶排序","published":1,"updated":"2024-04-04T15:27:03.256Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li3007zhajfdd2c6oze","content":"<p>「这是我参与2022首次更文挑战的第28天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>桶排序，又称为箱排序，也是一种分布式排序算法。大致思想是先对元素进行分组（桶），然后对每个组内的元素进行排序（借助其他排序算法），最后将所有的桶合并为结果数组。</p>\n<p>桶排序在最优情况下的时间复杂度为O(n)O(n)O(n),这种情况下每个桶只有一个数字，不需要进行比较。但是如果数据量巨大，会创建大量的桶而占用更多的内存。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>首先准备一个简单的排序算法，比如插入排序（归并或快排是更好的选择，插入排序的复杂度更高，不过胜在简单，另外桶排序和核心也并不在这点上）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">insertSort</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; length &#125; = array;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = i;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temp = array[i]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; array[j - <span class=\"number\">1</span>] &gt; temp) &#123;</span><br><span class=\"line\">      array[j] = array[j - <span class=\"number\">1</span>]</span><br><span class=\"line\">      j--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    array[j] = temp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>桶排序算法如下：</p>\n<p>首先需要指定每个桶存最多存放多少数据，这里默认指定为3。桶排序需要尽量将数据平均分配到桶中，如果数据比较密集，使用较少的桶更好。</p>\n<p>桶排序的过程需要两个函数来实现：分组和排序。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bucketSort</span>(<span class=\"params\"><span class=\"keyword\">array</span>, bucketSize = <span class=\"number\">3</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">array</span>.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">buckets</span> = <span class=\"title function_ invoke__\">createBuckets</span>(<span class=\"keyword\">array</span>, bucketSize)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">sortBuckets</span>(buckets)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p>然后确定创建多少个桶，需要找到最大值和最小值，并以<code>Math.ceil((max - min + 1) / bucketSize)</code>得到<code>bucketCount</code>。</p>\n<p>之后需要将所有元素分配到每个桶中，这里用<code>Math.floor((array[i] - min)/bucketSize)</code>确定该数字属于哪个桶。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 进行分组</span><br><span class=\"line\">function createBuckets(array, bucketSize) &#123;</span><br><span class=\"line\">    // 找到最大值和最小值</span><br><span class=\"line\">    let <span class=\"attr\">min</span> = array[<span class=\"number\">0</span>]<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    let <span class=\"attr\">max</span> = array[<span class=\"number\">0</span>]<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    for (let <span class=\"attr\">i</span> = <span class=\"number\">1</span><span class=\"comment\">; i &lt; array.length; i++) &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        if (array<span class=\"section\">[i]</span> &lt; min) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">min</span> = array[i]</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; else if (array<span class=\"section\">[i]</span> &gt; max) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">max</span> = array[i]</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 根据最大值、最小值和每组个数，确定桶的个数。</span><br><span class=\"line\">    const <span class=\"attr\">bucketCount</span> = Math.ceil((max - min + <span class=\"number\">1</span>) / bucketSize)</span><br><span class=\"line\"></span><br><span class=\"line\">    const <span class=\"attr\">buckets</span> = []<span class=\"comment\">;</span></span><br><span class=\"line\">    // 创建桶，初始为空</span><br><span class=\"line\">    for (let <span class=\"attr\">i</span> = <span class=\"number\">0</span><span class=\"comment\">; i &lt; bucketCount; i++) &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        buckets<span class=\"section\">[i]</span> = <span class=\"section\">[]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 将每个元素分配桶各自的桶中</span><br><span class=\"line\">    for (let <span class=\"attr\">i</span> = <span class=\"number\">0</span><span class=\"comment\">; i &lt; array.length; i++) &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        const <span class=\"attr\">bucketIndex</span> = Math.floor((array[i] - min)/bucketSize)</span><br><span class=\"line\"></span><br><span class=\"line\">        buckets<span class=\"section\">[bucketIndex]</span>.push(array<span class=\"section\">[i]</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return buckets</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><p>使用其他排序算法，对每个桶内的数字进行排序，最后再合并</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sortBuckets</span>(<span class=\"params\">buckets</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> sortedArray = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; buckets.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buckets[i] !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"title function_\">insertionSort</span>(buckets[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            sortedArray.<span class=\"title function_\">push</span>(...buckets[i])</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sortedArray;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对以上实现的桶排序，计算过程可以参考下图：</p>\n<p><img src=\"/../imgs/04acdded1bcb4dc6818e55be7838dc36.png\" alt=\"image.png\"></p>\n","length":1863,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第28天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>桶排序，又称为箱排序，也是一种分布式排序算法。大致思想是先对元素进行分组（桶），然后对每个组内的元素进行排序（借助其他排序算法），最后将所有的桶合并为结果数组。</p>\n<p>桶排序在最优情况下的时间复杂度为O(n)O(n)O(n),这种情况下每个桶只有一个数字，不需要进行比较。但是如果数据量巨大，会创建大量的桶而占用更多的内存。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>首先准备一个简单的排序算法，比如插入排序（归并或快排是更好的选择，插入排序的复杂度更高，不过胜在简单，另外桶排序和核心也并不在这点上）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">insertSort</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; length &#125; = array;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = i;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temp = array[i]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; array[j - <span class=\"number\">1</span>] &gt; temp) &#123;</span><br><span class=\"line\">      array[j] = array[j - <span class=\"number\">1</span>]</span><br><span class=\"line\">      j--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    array[j] = temp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>桶排序算法如下：</p>\n<p>首先需要指定每个桶存最多存放多少数据，这里默认指定为3。桶排序需要尽量将数据平均分配到桶中，如果数据比较密集，使用较少的桶更好。</p>\n<p>桶排序的过程需要两个函数来实现：分组和排序。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bucketSort</span>(<span class=\"params\"><span class=\"keyword\">array</span>, bucketSize = <span class=\"number\">3</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">array</span>.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">buckets</span> = <span class=\"title function_ invoke__\">createBuckets</span>(<span class=\"keyword\">array</span>, bucketSize)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">sortBuckets</span>(buckets)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p>然后确定创建多少个桶，需要找到最大值和最小值，并以<code>Math.ceil((max - min + 1) / bucketSize)</code>得到<code>bucketCount</code>。</p>\n<p>之后需要将所有元素分配到每个桶中，这里用<code>Math.floor((array[i] - min)/bucketSize)</code>确定该数字属于哪个桶。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 进行分组</span><br><span class=\"line\">function createBuckets(array, bucketSize) &#123;</span><br><span class=\"line\">    // 找到最大值和最小值</span><br><span class=\"line\">    let <span class=\"attr\">min</span> = array[<span class=\"number\">0</span>]<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    let <span class=\"attr\">max</span> = array[<span class=\"number\">0</span>]<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    for (let <span class=\"attr\">i</span> = <span class=\"number\">1</span><span class=\"comment\">; i &lt; array.length; i++) &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        if (array<span class=\"section\">[i]</span> &lt; min) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">min</span> = array[i]</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; else if (array<span class=\"section\">[i]</span> &gt; max) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">max</span> = array[i]</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 根据最大值、最小值和每组个数，确定桶的个数。</span><br><span class=\"line\">    const <span class=\"attr\">bucketCount</span> = Math.ceil((max - min + <span class=\"number\">1</span>) / bucketSize)</span><br><span class=\"line\"></span><br><span class=\"line\">    const <span class=\"attr\">buckets</span> = []<span class=\"comment\">;</span></span><br><span class=\"line\">    // 创建桶，初始为空</span><br><span class=\"line\">    for (let <span class=\"attr\">i</span> = <span class=\"number\">0</span><span class=\"comment\">; i &lt; bucketCount; i++) &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        buckets<span class=\"section\">[i]</span> = <span class=\"section\">[]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 将每个元素分配桶各自的桶中</span><br><span class=\"line\">    for (let <span class=\"attr\">i</span> = <span class=\"number\">0</span><span class=\"comment\">; i &lt; array.length; i++) &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        const <span class=\"attr\">bucketIndex</span> = Math.floor((array[i] - min)/bucketSize)</span><br><span class=\"line\"></span><br><span class=\"line\">        buckets<span class=\"section\">[bucketIndex]</span>.push(array<span class=\"section\">[i]</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return buckets</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><p>使用其他排序算法，对每个桶内的数字进行排序，最后再合并</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sortBuckets</span>(<span class=\"params\">buckets</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> sortedArray = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; buckets.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buckets[i] !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"title function_\">insertionSort</span>(buckets[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            sortedArray.<span class=\"title function_\">push</span>(...buckets[i])</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sortedArray;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对以上实现的桶排序，计算过程可以参考下图：</p>\n<p><img src=\"/../imgs/04acdded1bcb4dc6818e55be7838dc36.png\" alt=\"image.png\"></p>\n"},{"title":"排序算法之计数排序","date":"2022-02-15T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第21天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n前面的算法都是通过比较得到值的位置，但是计数排序并不需要进行比较。基于比较的排序算法，理论上的时间复杂度下限为O(nlog(n))O(nlog(n))O(nlog(n))，而计数排序时间复杂度为O(n+k)O(n+k)O(n+k)。\n\n计数排序的原理时借助一些特殊的数据结构来帮助我们进行排序，比如数组。首先遍历输入数组，得到最大值m，然后创建一个临时数组，然后遍历输入数组，将每个值放入临时数组的下标，最后只要遍历临时数组有哪些下标，就可以得到排序后的结果。\n\n从这个原理可以看出，计数排序有一个前提——整数排序，并且由于需要创建额外的临时数组，它所需要的空间要更多。\n\n实现\n--\n\njs实现如下：\n\n```js\nfunction findMax(array) {\n  let max = array[0];\n  array.forEach(item => {\n    item > max && (max = item);\n  });\n  return max;\n}\nfunction countingSort(array) {\n  if (array.length < 2) return array;\n  const max = findMax(array);\n  const counts = new Array(max + 1);\n  array.forEach(item => {\n    if (!counts[item]) {\n      counts[item] = 0;\n    }\n    counts[item]++;\n  });\n  console.log('counts:', counts);\n  let sortedIndex = 0;\n  counts.forEach((count, i) => {\n    while (count > 0) {\n      array[sortedIndex++] = i;\n      console.log(count, i, array);\n      count--;\n    }\n  });\n  return array;\n}\n\n```\n\n对`[5, 4, 3, 2, 3, 1]`排序，执行过程如下：\n\n1.  得到最大值5，创建长度为5+1的临时数组\n2.  遍历数组，将每个值放到临时数组相应的坐标上，计数+1。比如遍历到的值为3，则在临时数组下标为3的位置计数count为1，再次遍历到3时，临时数组下标为3的位置计数count增为2\n3.  从临时数组中取出count>0下标,下标数组即为排序后的数组\n\n![image.png](../imgs/c9dba75186da46c384c5783cca062791.png)\n\n### 冷知识\n\njs中的数组是不定长数组，因此无需关注最大值。如果没有按照index顺序设置值，则跳过的index上的值为empty，且该值和index都不会被forEach遍历到。\n\n```js\nvar arr = [];\narr[5] = 1;\narr[3] = 2;\n// arr: [空属性 × 3, 2, 空白, 1]\narr.forEach((element,index)=>{console.log(element,index)})\n// 2 3\n// 1 5\n```","source":"_posts/排序算法之计数排序.md","raw":"---\n title: \"排序算法之计数排序\"\n date: 2022-02-16\n tags: [算法]\n categories: [算法手册]\n---\n\n「这是我参与2022首次更文挑战的第21天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n前面的算法都是通过比较得到值的位置，但是计数排序并不需要进行比较。基于比较的排序算法，理论上的时间复杂度下限为O(nlog(n))O(nlog(n))O(nlog(n))，而计数排序时间复杂度为O(n+k)O(n+k)O(n+k)。\n\n计数排序的原理时借助一些特殊的数据结构来帮助我们进行排序，比如数组。首先遍历输入数组，得到最大值m，然后创建一个临时数组，然后遍历输入数组，将每个值放入临时数组的下标，最后只要遍历临时数组有哪些下标，就可以得到排序后的结果。\n\n从这个原理可以看出，计数排序有一个前提——整数排序，并且由于需要创建额外的临时数组，它所需要的空间要更多。\n\n实现\n--\n\njs实现如下：\n\n```js\nfunction findMax(array) {\n  let max = array[0];\n  array.forEach(item => {\n    item > max && (max = item);\n  });\n  return max;\n}\nfunction countingSort(array) {\n  if (array.length < 2) return array;\n  const max = findMax(array);\n  const counts = new Array(max + 1);\n  array.forEach(item => {\n    if (!counts[item]) {\n      counts[item] = 0;\n    }\n    counts[item]++;\n  });\n  console.log('counts:', counts);\n  let sortedIndex = 0;\n  counts.forEach((count, i) => {\n    while (count > 0) {\n      array[sortedIndex++] = i;\n      console.log(count, i, array);\n      count--;\n    }\n  });\n  return array;\n}\n\n```\n\n对`[5, 4, 3, 2, 3, 1]`排序，执行过程如下：\n\n1.  得到最大值5，创建长度为5+1的临时数组\n2.  遍历数组，将每个值放到临时数组相应的坐标上，计数+1。比如遍历到的值为3，则在临时数组下标为3的位置计数count为1，再次遍历到3时，临时数组下标为3的位置计数count增为2\n3.  从临时数组中取出count>0下标,下标数组即为排序后的数组\n\n![image.png](../imgs/c9dba75186da46c384c5783cca062791.png)\n\n### 冷知识\n\njs中的数组是不定长数组，因此无需关注最大值。如果没有按照index顺序设置值，则跳过的index上的值为empty，且该值和index都不会被forEach遍历到。\n\n```js\nvar arr = [];\narr[5] = 1;\narr[3] = 2;\n// arr: [空属性 × 3, 2, 空白, 1]\narr.forEach((element,index)=>{console.log(element,index)})\n// 2 3\n// 1 5\n```","slug":"排序算法之计数排序","published":1,"updated":"2024-04-04T15:27:03.241Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li30083hajf9n5ag9ke","content":"<p>「这是我参与2022首次更文挑战的第21天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>前面的算法都是通过比较得到值的位置，但是计数排序并不需要进行比较。基于比较的排序算法，理论上的时间复杂度下限为O(nlog(n))O(nlog(n))O(nlog(n))，而计数排序时间复杂度为O(n+k)O(n+k)O(n+k)。</p>\n<p>计数排序的原理时借助一些特殊的数据结构来帮助我们进行排序，比如数组。首先遍历输入数组，得到最大值m，然后创建一个临时数组，然后遍历输入数组，将每个值放入临时数组的下标，最后只要遍历临时数组有哪些下标，就可以得到排序后的结果。</p>\n<p>从这个原理可以看出，计数排序有一个前提——整数排序，并且由于需要创建额外的临时数组，它所需要的空间要更多。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>js实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findMax</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> max = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">  array.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    item &gt; max &amp;&amp; (max = item);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">countingSort</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> max = <span class=\"title function_\">findMax</span>(array);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> counts = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(max + <span class=\"number\">1</span>);</span><br><span class=\"line\">  array.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!counts[item]) &#123;</span><br><span class=\"line\">      counts[item] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    counts[item]++;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;counts:&#x27;</span>, counts);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sortedIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">  counts.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">count, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      array[sortedIndex++] = i;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count, i, array);</span><br><span class=\"line\">      count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对<code>[5, 4, 3, 2, 3, 1]</code>排序，执行过程如下：</p>\n<ol>\n<li>得到最大值5，创建长度为5+1的临时数组</li>\n<li>遍历数组，将每个值放到临时数组相应的坐标上，计数+1。比如遍历到的值为3，则在临时数组下标为3的位置计数count为1，再次遍历到3时，临时数组下标为3的位置计数count增为2</li>\n<li>从临时数组中取出count&gt;0下标,下标数组即为排序后的数组</li>\n</ol>\n<p><img src=\"/../imgs/c9dba75186da46c384c5783cca062791.png\" alt=\"image.png\"></p>\n<h3 id=\"冷知识\"><a href=\"#冷知识\" class=\"headerlink\" title=\"冷知识\"></a>冷知识</h3><p>js中的数组是不定长数组，因此无需关注最大值。如果没有按照index顺序设置值，则跳过的index上的值为empty，且该值和index都不会被forEach遍历到。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">arr[<span class=\"number\">5</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">arr[<span class=\"number\">3</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// arr: [空属性 × 3, 2, 空白, 1]</span></span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">element,index</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element,index)&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 2 3</span></span><br><span class=\"line\"><span class=\"comment\">// 1 5</span></span><br></pre></td></tr></table></figure>","length":1315,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第21天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>前面的算法都是通过比较得到值的位置，但是计数排序并不需要进行比较。基于比较的排序算法，理论上的时间复杂度下限为O(nlog(n))O(nlog(n))O(nlog(n))，而计数排序时间复杂度为O(n+k)O(n+k)O(n+k)。</p>\n<p>计数排序的原理时借助一些特殊的数据结构来帮助我们进行排序，比如数组。首先遍历输入数组，得到最大值m，然后创建一个临时数组，然后遍历输入数组，将每个值放入临时数组的下标，最后只要遍历临时数组有哪些下标，就可以得到排序后的结果。</p>\n<p>从这个原理可以看出，计数排序有一个前提——整数排序，并且由于需要创建额外的临时数组，它所需要的空间要更多。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>js实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findMax</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> max = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">  array.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    item &gt; max &amp;&amp; (max = item);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">countingSort</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> max = <span class=\"title function_\">findMax</span>(array);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> counts = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(max + <span class=\"number\">1</span>);</span><br><span class=\"line\">  array.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!counts[item]) &#123;</span><br><span class=\"line\">      counts[item] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    counts[item]++;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;counts:&#x27;</span>, counts);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sortedIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">  counts.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">count, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      array[sortedIndex++] = i;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count, i, array);</span><br><span class=\"line\">      count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对<code>[5, 4, 3, 2, 3, 1]</code>排序，执行过程如下：</p>\n<ol>\n<li>得到最大值5，创建长度为5+1的临时数组</li>\n<li>遍历数组，将每个值放到临时数组相应的坐标上，计数+1。比如遍历到的值为3，则在临时数组下标为3的位置计数count为1，再次遍历到3时，临时数组下标为3的位置计数count增为2</li>\n<li>从临时数组中取出count&gt;0下标,下标数组即为排序后的数组</li>\n</ol>\n<p><img src=\"/../imgs/c9dba75186da46c384c5783cca062791.png\" alt=\"image.png\"></p>\n<h3 id=\"冷知识\"><a href=\"#冷知识\" class=\"headerlink\" title=\"冷知识\"></a>冷知识</h3><p>js中的数组是不定长数组，因此无需关注最大值。如果没有按照index顺序设置值，则跳过的index上的值为empty，且该值和index都不会被forEach遍历到。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">arr[<span class=\"number\">5</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">arr[<span class=\"number\">3</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// arr: [空属性 × 3, 2, 空白, 1]</span></span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">element,index</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element,index)&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 2 3</span></span><br><span class=\"line\"><span class=\"comment\">// 1 5</span></span><br></pre></td></tr></table></figure>"},{"title":"排序算法之选择排序","date":"2022-02-09T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第15天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n选择排序算法是一种原址比较排序算法。选择排序大致的思路是找到数据结构中的最小值并将其放置在第一位，接着找到第二小的值并将其放在第二位，以此类推。\n\n排序算法的执行过程可以参考下图（红色标注的变化就是最小值寻找的过程）：\n\n![sort-sel.gif](../imgs/421da5155239416399fc34bc31930d0a.png)\n\n实现\n--\n\n我们需要实现的，是一个不断寻找最小值并交换顺序的过程。\n\n首先从第一位开始往后比较，得到第一个最小值，并将它和首位交换；之后从第二位开始，寻找最小值，并将它和第二位数交换，依次往下，直到最后。因此这里也需要两层循环，实现如下：\n\n```ini\nfunction selectionSort(array) {\n  const { length } = array;\n  let indexMin;\n  for (let i = 0; i < length - 1; i++) {\n    // 设置当前最小值的下标为i(初始为0)\n    indexMin = i;\n    for (let j = i+1; j < length; j++) {\n      if (array[indexMin] > array[j]) {\n        // 比较大小，并更改下标\n        indexMin = j;\n      }\n    }\n    // 当内循环完成时得到了最小值的下标\n    // 和一开始设置的不一样，则交换两个数的位置，将最小值挪到前面\n    if (i !== indexMin) {\n      [array[i], array[indexMin]] = [array[indexMin], array[i]]\n    }\n  }\n  return array\n}\n```\n\n选择排序的执行过程如下图所示： ![image.png](../imgs/71ba173548ce4f9eb5e1e84cea9501eb.png)\n\n数组底部的箭头指示出当前迭代轮寻找最小值的数组范围（内循环），示意图中的每一步则表示外循环。\n\n选择排序与冒泡排序一样，有两层循环，它的复杂度也是O(n2)O(n^2)O(n2)。\n\n选择排序的不稳定性\n---------\n\n另外相比冒泡排序，选择排序还有一个缺点：不稳定。\n\n假设ABC三个数分别为： A(5)，B(5)，C(1)，将它们从小到大排序后为：C(1)，B(5)，A(5)，A和B的顺序被破坏了，这就是选择排序的不稳定性。","source":"_posts/排序算法之选择排序.md","raw":"---\n title: \"排序算法之选择排序\"\n date: 2022-02-10\n tags: [算法]\n categories: [算法手册]\n---\n\n「这是我参与2022首次更文挑战的第15天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n介绍\n--\n\n选择排序算法是一种原址比较排序算法。选择排序大致的思路是找到数据结构中的最小值并将其放置在第一位，接着找到第二小的值并将其放在第二位，以此类推。\n\n排序算法的执行过程可以参考下图（红色标注的变化就是最小值寻找的过程）：\n\n![sort-sel.gif](../imgs/421da5155239416399fc34bc31930d0a.png)\n\n实现\n--\n\n我们需要实现的，是一个不断寻找最小值并交换顺序的过程。\n\n首先从第一位开始往后比较，得到第一个最小值，并将它和首位交换；之后从第二位开始，寻找最小值，并将它和第二位数交换，依次往下，直到最后。因此这里也需要两层循环，实现如下：\n\n```ini\nfunction selectionSort(array) {\n  const { length } = array;\n  let indexMin;\n  for (let i = 0; i < length - 1; i++) {\n    // 设置当前最小值的下标为i(初始为0)\n    indexMin = i;\n    for (let j = i+1; j < length; j++) {\n      if (array[indexMin] > array[j]) {\n        // 比较大小，并更改下标\n        indexMin = j;\n      }\n    }\n    // 当内循环完成时得到了最小值的下标\n    // 和一开始设置的不一样，则交换两个数的位置，将最小值挪到前面\n    if (i !== indexMin) {\n      [array[i], array[indexMin]] = [array[indexMin], array[i]]\n    }\n  }\n  return array\n}\n```\n\n选择排序的执行过程如下图所示： ![image.png](../imgs/71ba173548ce4f9eb5e1e84cea9501eb.png)\n\n数组底部的箭头指示出当前迭代轮寻找最小值的数组范围（内循环），示意图中的每一步则表示外循环。\n\n选择排序与冒泡排序一样，有两层循环，它的复杂度也是O(n2)O(n^2)O(n2)。\n\n选择排序的不稳定性\n---------\n\n另外相比冒泡排序，选择排序还有一个缺点：不稳定。\n\n假设ABC三个数分别为： A(5)，B(5)，C(1)，将它们从小到大排序后为：C(1)，B(5)，A(5)，A和B的顺序被破坏了，这就是选择排序的不稳定性。","slug":"排序算法之选择排序","published":1,"updated":"2024-04-04T15:27:03.260Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li40085hajfggevgohy","content":"<p>「这是我参与2022首次更文挑战的第15天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>选择排序算法是一种原址比较排序算法。选择排序大致的思路是找到数据结构中的最小值并将其放置在第一位，接着找到第二小的值并将其放在第二位，以此类推。</p>\n<p>排序算法的执行过程可以参考下图（红色标注的变化就是最小值寻找的过程）：</p>\n<p><img src=\"/../imgs/421da5155239416399fc34bc31930d0a.png\" alt=\"sort-sel.gif\"></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>我们需要实现的，是一个不断寻找最小值并交换顺序的过程。</p>\n<p>首先从第一位开始往后比较，得到第一个最小值，并将它和首位交换；之后从第二位开始，寻找最小值，并将它和第二位数交换，依次往下，直到最后。因此这里也需要两层循环，实现如下：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function selectionSort(array) &#123;</span><br><span class=\"line\">  const &#123; length &#125; = array<span class=\"comment\">;</span></span><br><span class=\"line\">  let indexMin<span class=\"comment\">;</span></span><br><span class=\"line\">  for (let <span class=\"attr\">i</span> = <span class=\"number\">0</span><span class=\"comment\">; i &lt; length - 1; i++) &#123;</span></span><br><span class=\"line\">    // 设置当前最小值的下标为i(初始为0)</span><br><span class=\"line\">    <span class=\"attr\">indexMin</span> = i<span class=\"comment\">;</span></span><br><span class=\"line\">    for (let <span class=\"attr\">j</span> = i+<span class=\"number\">1</span><span class=\"comment\">; j &lt; length; j++) &#123;</span></span><br><span class=\"line\">      if (array<span class=\"section\">[indexMin]</span> &gt; array<span class=\"section\">[j]</span>) &#123;</span><br><span class=\"line\">        // 比较大小，并更改下标</span><br><span class=\"line\">        <span class=\"attr\">indexMin</span> = j<span class=\"comment\">;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 当内循环完成时得到了最小值的下标</span><br><span class=\"line\">    // 和一开始设置的不一样，则交换两个数的位置，将最小值挪到前面</span><br><span class=\"line\">    if (i !== indexMin) &#123;</span><br><span class=\"line\">      <span class=\"section\">[array[i]</span>, array<span class=\"section\">[indexMin]]</span> = <span class=\"section\">[array[indexMin]</span>, array<span class=\"section\">[i]]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return array</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>选择排序的执行过程如下图所示： <img src=\"/../imgs/71ba173548ce4f9eb5e1e84cea9501eb.png\" alt=\"image.png\"></p>\n<p>数组底部的箭头指示出当前迭代轮寻找最小值的数组范围（内循环），示意图中的每一步则表示外循环。</p>\n<p>选择排序与冒泡排序一样，有两层循环，它的复杂度也是O(n2)O(n^2)O(n2)。</p>\n<h2 id=\"选择排序的不稳定性\"><a href=\"#选择排序的不稳定性\" class=\"headerlink\" title=\"选择排序的不稳定性\"></a>选择排序的不稳定性</h2><p>另外相比冒泡排序，选择排序还有一个缺点：不稳定。</p>\n<p>假设ABC三个数分别为： A(5)，B(5)，C(1)，将它们从小到大排序后为：C(1)，B(5)，A(5)，A和B的顺序被破坏了，这就是选择排序的不稳定性。</p>\n","length":909,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第15天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>选择排序算法是一种原址比较排序算法。选择排序大致的思路是找到数据结构中的最小值并将其放置在第一位，接着找到第二小的值并将其放在第二位，以此类推。</p>\n<p>排序算法的执行过程可以参考下图（红色标注的变化就是最小值寻找的过程）：</p>\n<p><img src=\"/../imgs/421da5155239416399fc34bc31930d0a.png\" alt=\"sort-sel.gif\"></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>我们需要实现的，是一个不断寻找最小值并交换顺序的过程。</p>\n<p>首先从第一位开始往后比较，得到第一个最小值，并将它和首位交换；之后从第二位开始，寻找最小值，并将它和第二位数交换，依次往下，直到最后。因此这里也需要两层循环，实现如下：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function selectionSort(array) &#123;</span><br><span class=\"line\">  const &#123; length &#125; = array<span class=\"comment\">;</span></span><br><span class=\"line\">  let indexMin<span class=\"comment\">;</span></span><br><span class=\"line\">  for (let <span class=\"attr\">i</span> = <span class=\"number\">0</span><span class=\"comment\">; i &lt; length - 1; i++) &#123;</span></span><br><span class=\"line\">    // 设置当前最小值的下标为i(初始为0)</span><br><span class=\"line\">    <span class=\"attr\">indexMin</span> = i<span class=\"comment\">;</span></span><br><span class=\"line\">    for (let <span class=\"attr\">j</span> = i+<span class=\"number\">1</span><span class=\"comment\">; j &lt; length; j++) &#123;</span></span><br><span class=\"line\">      if (array<span class=\"section\">[indexMin]</span> &gt; array<span class=\"section\">[j]</span>) &#123;</span><br><span class=\"line\">        // 比较大小，并更改下标</span><br><span class=\"line\">        <span class=\"attr\">indexMin</span> = j<span class=\"comment\">;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 当内循环完成时得到了最小值的下标</span><br><span class=\"line\">    // 和一开始设置的不一样，则交换两个数的位置，将最小值挪到前面</span><br><span class=\"line\">    if (i !== indexMin) &#123;</span><br><span class=\"line\">      <span class=\"section\">[array[i]</span>, array<span class=\"section\">[indexMin]]</span> = <span class=\"section\">[array[indexMin]</span>, array<span class=\"section\">[i]]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return array</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>选择排序的执行过程如下图所示： <img src=\"/../imgs/71ba173548ce4f9eb5e1e84cea9501eb.png\" alt=\"image.png\"></p>\n<p>数组底部的箭头指示出当前迭代轮寻找最小值的数组范围（内循环），示意图中的每一步则表示外循环。</p>\n<p>选择排序与冒泡排序一样，有两层循环，它的复杂度也是O(n2)O(n^2)O(n2)。</p>\n<h2 id=\"选择排序的不稳定性\"><a href=\"#选择排序的不稳定性\" class=\"headerlink\" title=\"选择排序的不稳定性\"></a>选择排序的不稳定性</h2><p>另外相比冒泡排序，选择排序还有一个缺点：不稳定。</p>\n<p>假设ABC三个数分别为： A(5)，B(5)，C(1)，将它们从小到大排序后为：C(1)，B(5)，A(5)，A和B的顺序被破坏了，这就是选择排序的不稳定性。</p>\n"},{"title":"架构方法之C4模型","date":"2022-02-07T16:00:00.000Z","_content":"\n「这是我参与2022首次更文挑战的第13天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n前言\n--\n\nSimon Brown在《程序员必读之软件架构》中介绍了一种建模方法：C4模型。我觉得这是一种简单但很实用的架构方法，无论是在做软件设计还是做产品设计都可以借鉴这个模型思考。\n\n介绍\n--\n\nC4模型认为，大多数软件系统都可以划分为4个层次：\n\n*   **系统** 也称系统上下文或语境。这一层标识环境、参与者、外部软件系统和软件系统。\n*   **容器** 容器可以是应用程序、数据存储、微服务等，它标识高维度上的技术选择，以及各容器的职责划分、如何通信。\n*   **组件** 将单个容器放大，显示其中关键逻辑组件及它们间的关系。\n*   **代码** 这一层即最直接的代码，包括接口和类。\n\n![image.png](../imgs/a0a1f189ea544841a6de2146387bc0a4.png)\n\n系统上下文（语境图）\n----------\n\n给软件系统画图和做文档时，语境图是很有用的起点，让你可以后退一步观察大局。\n\n语境图中间以一个简单的框图展示你的系统，周围是它的用户和其他与之相互作用的系统。\n\n![image.png](../imgs/6b6c08c2c5fa427b8fb4097dae06489e.png)\n\n语境图需要回答这三个问题：\n\n1.  我们构建的（或已经构建的）软件系统是什么？\n2.  谁会用它？\n3.  如何融入已有的IT环境？ 我们可以从下面几个维度进行整理和标注：\n\n*   用户与角色：有哪些人会使用这个系统，分别扮演什么角色和使用哪些功能\n*   其他系统：比如监控系统，第三方系统等\n*   交互：确定该系统与用户和其他系统的交互内容以及通信方式\n\n容器图\n---\n\n一旦通过语境图了解了你的系统如何融入整个IT环境，真正有用的下一步就是通过容器图说明高层次的技术选择。\n\n所谓容器，是指组成软件系统的逻辑上的可执行文件或过程。比如web服务器、应用服务器、业务流程编排引擎、数据库、定时任务的工作容器、浏览器等。\n\n每个容器需要指定名称、技术、职责。 ![image.png](../imgs/5684e00d041c465abf5555c420de8e70.png)\n\n容器图需要回答以下问题：\n\n1.  软件系统的整体形态是什么样的？\n2.  高层次技术决策有哪些？\n3.  职责在系统中如何分布？\n4.  容器之间如何相互交流？\n5.  为了实现特性，作为一个开发者，我需要在哪里写代码？ 除了罗列系统中的容器，我们可以从交互与边界两个方面进行思考：\n\n*   交互：容器之间的通信目的（如读写数据、发送报告）、通信方法（如REST、消息服务）、通信方式（如同步、异步）、协议和端口\n*   边界：划分容器职责、确定系统边界。\n\n组件图\n---\n\n完成容器图后，我们可以对每个容器进行分解，划分出主要的逻辑组件及其交互。\n\n![image.png](../imgs/864e1f106d2d4687978cfcf98ec59a4d.png)\n\n![image.png](../imgs/5b1a7835440741e788b41f42c44210ca.png)\n\n组件图需要回答以下问题：\n\n1.  系统由哪些组件/服务组成？\n2.  在高层次上，系统如何工作？\n3.  所有组件/服务的归属容器？\n\n代码\n--\n\n最后可以放大每个组件，确定如何实现为代码的。这里可以使用UML图\n\n![image.png](../imgs/3f6abef66117405f98542802150a8ce5.png)\n\n总结\n--\n\nC4模型的特点在于简单清晰，非常适合初入架构的程序员使用。但它更偏向于对明确需求的技术架构，而缺少了对于复杂需求的拆解到对技术架构的映射过程。我们可以学习其思想，而不必拘泥于它的方法。","source":"_posts/架构方法之C4模型.md","raw":"---\n title: \"架构方法之C4模型\"\n date: 2022-02-08\n tags: [架构]\n categories: [前端笔记]\n---\n\n「这是我参与2022首次更文挑战的第13天，活动详情查看：[2022首次更文挑战](https://juejin.cn/post/7052884569032392740 \"https://juejin.cn/post/7052884569032392740\")」\n\n前言\n--\n\nSimon Brown在《程序员必读之软件架构》中介绍了一种建模方法：C4模型。我觉得这是一种简单但很实用的架构方法，无论是在做软件设计还是做产品设计都可以借鉴这个模型思考。\n\n介绍\n--\n\nC4模型认为，大多数软件系统都可以划分为4个层次：\n\n*   **系统** 也称系统上下文或语境。这一层标识环境、参与者、外部软件系统和软件系统。\n*   **容器** 容器可以是应用程序、数据存储、微服务等，它标识高维度上的技术选择，以及各容器的职责划分、如何通信。\n*   **组件** 将单个容器放大，显示其中关键逻辑组件及它们间的关系。\n*   **代码** 这一层即最直接的代码，包括接口和类。\n\n![image.png](../imgs/a0a1f189ea544841a6de2146387bc0a4.png)\n\n系统上下文（语境图）\n----------\n\n给软件系统画图和做文档时，语境图是很有用的起点，让你可以后退一步观察大局。\n\n语境图中间以一个简单的框图展示你的系统，周围是它的用户和其他与之相互作用的系统。\n\n![image.png](../imgs/6b6c08c2c5fa427b8fb4097dae06489e.png)\n\n语境图需要回答这三个问题：\n\n1.  我们构建的（或已经构建的）软件系统是什么？\n2.  谁会用它？\n3.  如何融入已有的IT环境？ 我们可以从下面几个维度进行整理和标注：\n\n*   用户与角色：有哪些人会使用这个系统，分别扮演什么角色和使用哪些功能\n*   其他系统：比如监控系统，第三方系统等\n*   交互：确定该系统与用户和其他系统的交互内容以及通信方式\n\n容器图\n---\n\n一旦通过语境图了解了你的系统如何融入整个IT环境，真正有用的下一步就是通过容器图说明高层次的技术选择。\n\n所谓容器，是指组成软件系统的逻辑上的可执行文件或过程。比如web服务器、应用服务器、业务流程编排引擎、数据库、定时任务的工作容器、浏览器等。\n\n每个容器需要指定名称、技术、职责。 ![image.png](../imgs/5684e00d041c465abf5555c420de8e70.png)\n\n容器图需要回答以下问题：\n\n1.  软件系统的整体形态是什么样的？\n2.  高层次技术决策有哪些？\n3.  职责在系统中如何分布？\n4.  容器之间如何相互交流？\n5.  为了实现特性，作为一个开发者，我需要在哪里写代码？ 除了罗列系统中的容器，我们可以从交互与边界两个方面进行思考：\n\n*   交互：容器之间的通信目的（如读写数据、发送报告）、通信方法（如REST、消息服务）、通信方式（如同步、异步）、协议和端口\n*   边界：划分容器职责、确定系统边界。\n\n组件图\n---\n\n完成容器图后，我们可以对每个容器进行分解，划分出主要的逻辑组件及其交互。\n\n![image.png](../imgs/864e1f106d2d4687978cfcf98ec59a4d.png)\n\n![image.png](../imgs/5b1a7835440741e788b41f42c44210ca.png)\n\n组件图需要回答以下问题：\n\n1.  系统由哪些组件/服务组成？\n2.  在高层次上，系统如何工作？\n3.  所有组件/服务的归属容器？\n\n代码\n--\n\n最后可以放大每个组件，确定如何实现为代码的。这里可以使用UML图\n\n![image.png](../imgs/3f6abef66117405f98542802150a8ce5.png)\n\n总结\n--\n\nC4模型的特点在于简单清晰，非常适合初入架构的程序员使用。但它更偏向于对明确需求的技术架构，而缺少了对于复杂需求的拆解到对技术架构的映射过程。我们可以学习其思想，而不必拘泥于它的方法。","slug":"架构方法之C4模型","published":1,"updated":"2024-04-04T15:27:03.225Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li4008ahajf4xnvhgor","content":"<p>「这是我参与2022首次更文挑战的第13天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Simon Brown在《程序员必读之软件架构》中介绍了一种建模方法：C4模型。我觉得这是一种简单但很实用的架构方法，无论是在做软件设计还是做产品设计都可以借鉴这个模型思考。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>C4模型认为，大多数软件系统都可以划分为4个层次：</p>\n<ul>\n<li><strong>系统</strong> 也称系统上下文或语境。这一层标识环境、参与者、外部软件系统和软件系统。</li>\n<li><strong>容器</strong> 容器可以是应用程序、数据存储、微服务等，它标识高维度上的技术选择，以及各容器的职责划分、如何通信。</li>\n<li><strong>组件</strong> 将单个容器放大，显示其中关键逻辑组件及它们间的关系。</li>\n<li><strong>代码</strong> 这一层即最直接的代码，包括接口和类。</li>\n</ul>\n<p><img src=\"/../imgs/a0a1f189ea544841a6de2146387bc0a4.png\" alt=\"image.png\"></p>\n<h2 id=\"系统上下文（语境图）\"><a href=\"#系统上下文（语境图）\" class=\"headerlink\" title=\"系统上下文（语境图）\"></a>系统上下文（语境图）</h2><p>给软件系统画图和做文档时，语境图是很有用的起点，让你可以后退一步观察大局。</p>\n<p>语境图中间以一个简单的框图展示你的系统，周围是它的用户和其他与之相互作用的系统。</p>\n<p><img src=\"/../imgs/6b6c08c2c5fa427b8fb4097dae06489e.png\" alt=\"image.png\"></p>\n<p>语境图需要回答这三个问题：</p>\n<ol>\n<li>我们构建的（或已经构建的）软件系统是什么？</li>\n<li>谁会用它？</li>\n<li>如何融入已有的IT环境？ 我们可以从下面几个维度进行整理和标注：</li>\n</ol>\n<ul>\n<li>用户与角色：有哪些人会使用这个系统，分别扮演什么角色和使用哪些功能</li>\n<li>其他系统：比如监控系统，第三方系统等</li>\n<li>交互：确定该系统与用户和其他系统的交互内容以及通信方式</li>\n</ul>\n<h2 id=\"容器图\"><a href=\"#容器图\" class=\"headerlink\" title=\"容器图\"></a>容器图</h2><p>一旦通过语境图了解了你的系统如何融入整个IT环境，真正有用的下一步就是通过容器图说明高层次的技术选择。</p>\n<p>所谓容器，是指组成软件系统的逻辑上的可执行文件或过程。比如web服务器、应用服务器、业务流程编排引擎、数据库、定时任务的工作容器、浏览器等。</p>\n<p>每个容器需要指定名称、技术、职责。 <img src=\"/../imgs/5684e00d041c465abf5555c420de8e70.png\" alt=\"image.png\"></p>\n<p>容器图需要回答以下问题：</p>\n<ol>\n<li>软件系统的整体形态是什么样的？</li>\n<li>高层次技术决策有哪些？</li>\n<li>职责在系统中如何分布？</li>\n<li>容器之间如何相互交流？</li>\n<li>为了实现特性，作为一个开发者，我需要在哪里写代码？ 除了罗列系统中的容器，我们可以从交互与边界两个方面进行思考：</li>\n</ol>\n<ul>\n<li>交互：容器之间的通信目的（如读写数据、发送报告）、通信方法（如REST、消息服务）、通信方式（如同步、异步）、协议和端口</li>\n<li>边界：划分容器职责、确定系统边界。</li>\n</ul>\n<h2 id=\"组件图\"><a href=\"#组件图\" class=\"headerlink\" title=\"组件图\"></a>组件图</h2><p>完成容器图后，我们可以对每个容器进行分解，划分出主要的逻辑组件及其交互。</p>\n<p><img src=\"/../imgs/864e1f106d2d4687978cfcf98ec59a4d.png\" alt=\"image.png\"></p>\n<p><img src=\"/../imgs/5b1a7835440741e788b41f42c44210ca.png\" alt=\"image.png\"></p>\n<p>组件图需要回答以下问题：</p>\n<ol>\n<li>系统由哪些组件&#x2F;服务组成？</li>\n<li>在高层次上，系统如何工作？</li>\n<li>所有组件&#x2F;服务的归属容器？</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>最后可以放大每个组件，确定如何实现为代码的。这里可以使用UML图</p>\n<p><img src=\"/../imgs/3f6abef66117405f98542802150a8ce5.png\" alt=\"image.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>C4模型的特点在于简单清晰，非常适合初入架构的程序员使用。但它更偏向于对明确需求的技术架构，而缺少了对于复杂需求的拆解到对技术架构的映射过程。我们可以学习其思想，而不必拘泥于它的方法。</p>\n","length":1087,"excerpt":"","more":"<p>「这是我参与2022首次更文挑战的第13天，活动详情查看：<a href=\"https://juejin.cn/post/7052884569032392740\" title=\"https://juejin.cn/post/7052884569032392740\">2022首次更文挑战</a>」</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Simon Brown在《程序员必读之软件架构》中介绍了一种建模方法：C4模型。我觉得这是一种简单但很实用的架构方法，无论是在做软件设计还是做产品设计都可以借鉴这个模型思考。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>C4模型认为，大多数软件系统都可以划分为4个层次：</p>\n<ul>\n<li><strong>系统</strong> 也称系统上下文或语境。这一层标识环境、参与者、外部软件系统和软件系统。</li>\n<li><strong>容器</strong> 容器可以是应用程序、数据存储、微服务等，它标识高维度上的技术选择，以及各容器的职责划分、如何通信。</li>\n<li><strong>组件</strong> 将单个容器放大，显示其中关键逻辑组件及它们间的关系。</li>\n<li><strong>代码</strong> 这一层即最直接的代码，包括接口和类。</li>\n</ul>\n<p><img src=\"/../imgs/a0a1f189ea544841a6de2146387bc0a4.png\" alt=\"image.png\"></p>\n<h2 id=\"系统上下文（语境图）\"><a href=\"#系统上下文（语境图）\" class=\"headerlink\" title=\"系统上下文（语境图）\"></a>系统上下文（语境图）</h2><p>给软件系统画图和做文档时，语境图是很有用的起点，让你可以后退一步观察大局。</p>\n<p>语境图中间以一个简单的框图展示你的系统，周围是它的用户和其他与之相互作用的系统。</p>\n<p><img src=\"/../imgs/6b6c08c2c5fa427b8fb4097dae06489e.png\" alt=\"image.png\"></p>\n<p>语境图需要回答这三个问题：</p>\n<ol>\n<li>我们构建的（或已经构建的）软件系统是什么？</li>\n<li>谁会用它？</li>\n<li>如何融入已有的IT环境？ 我们可以从下面几个维度进行整理和标注：</li>\n</ol>\n<ul>\n<li>用户与角色：有哪些人会使用这个系统，分别扮演什么角色和使用哪些功能</li>\n<li>其他系统：比如监控系统，第三方系统等</li>\n<li>交互：确定该系统与用户和其他系统的交互内容以及通信方式</li>\n</ul>\n<h2 id=\"容器图\"><a href=\"#容器图\" class=\"headerlink\" title=\"容器图\"></a>容器图</h2><p>一旦通过语境图了解了你的系统如何融入整个IT环境，真正有用的下一步就是通过容器图说明高层次的技术选择。</p>\n<p>所谓容器，是指组成软件系统的逻辑上的可执行文件或过程。比如web服务器、应用服务器、业务流程编排引擎、数据库、定时任务的工作容器、浏览器等。</p>\n<p>每个容器需要指定名称、技术、职责。 <img src=\"/../imgs/5684e00d041c465abf5555c420de8e70.png\" alt=\"image.png\"></p>\n<p>容器图需要回答以下问题：</p>\n<ol>\n<li>软件系统的整体形态是什么样的？</li>\n<li>高层次技术决策有哪些？</li>\n<li>职责在系统中如何分布？</li>\n<li>容器之间如何相互交流？</li>\n<li>为了实现特性，作为一个开发者，我需要在哪里写代码？ 除了罗列系统中的容器，我们可以从交互与边界两个方面进行思考：</li>\n</ol>\n<ul>\n<li>交互：容器之间的通信目的（如读写数据、发送报告）、通信方法（如REST、消息服务）、通信方式（如同步、异步）、协议和端口</li>\n<li>边界：划分容器职责、确定系统边界。</li>\n</ul>\n<h2 id=\"组件图\"><a href=\"#组件图\" class=\"headerlink\" title=\"组件图\"></a>组件图</h2><p>完成容器图后，我们可以对每个容器进行分解，划分出主要的逻辑组件及其交互。</p>\n<p><img src=\"/../imgs/864e1f106d2d4687978cfcf98ec59a4d.png\" alt=\"image.png\"></p>\n<p><img src=\"/../imgs/5b1a7835440741e788b41f42c44210ca.png\" alt=\"image.png\"></p>\n<p>组件图需要回答以下问题：</p>\n<ol>\n<li>系统由哪些组件&#x2F;服务组成？</li>\n<li>在高层次上，系统如何工作？</li>\n<li>所有组件&#x2F;服务的归属容器？</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>最后可以放大每个组件，确定如何实现为代码的。这里可以使用UML图</p>\n<p><img src=\"/../imgs/3f6abef66117405f98542802150a8ce5.png\" alt=\"image.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>C4模型的特点在于简单清晰，非常适合初入架构的程序员使用。但它更偏向于对明确需求的技术架构，而缺少了对于复杂需求的拆解到对技术架构的映射过程。我们可以学习其思想，而不必拘泥于它的方法。</p>\n"},{"title":"解决antd icon打包过大的问题","date":"2019-12-30T16:00:00.000Z","_content":"\n1.webpack配置alias\n\n```vim\nresolve: {\n    alias: {\n        ...\n        '@ant-design/icons/lib/dist$': path.resolve(__dirname, '../src/icons.ts'),\n        '@': path.resolve(__dirname, '../src')\n    }\n}\n```\n\n2.在src目录下编写icons.ts,内容是使用到的icon\n\n```coffeescript\nexport {default as UserOutline} from '@ant-design/icons/lib/outline/UserOutline';\nexport {default as CloseCircleFill} from '@ant-design/icons/lib/fill/CloseCircleFill';\nexport {default as InfoCircleFill} from '@ant-design/icons/lib/fill/InfoCircleFill';\nexport {default as CheckCircleFill} from '@ant-design/icons/lib/fill/CheckCircleFill';\n```\n\n注：1.如果打包错误，请检查alias的配置和icons.ts的路径2.icon.ts的内容，包括自己用到的icon和组件用到的icon","source":"_posts/解决antd icon打包过大的问题.md","raw":"---\n title: \"解决antd icon打包过大的问题\"\n date: 2019-12-31\n tags: [Ant Design]\n categories: \n---\n\n1.webpack配置alias\n\n```vim\nresolve: {\n    alias: {\n        ...\n        '@ant-design/icons/lib/dist$': path.resolve(__dirname, '../src/icons.ts'),\n        '@': path.resolve(__dirname, '../src')\n    }\n}\n```\n\n2.在src目录下编写icons.ts,内容是使用到的icon\n\n```coffeescript\nexport {default as UserOutline} from '@ant-design/icons/lib/outline/UserOutline';\nexport {default as CloseCircleFill} from '@ant-design/icons/lib/fill/CloseCircleFill';\nexport {default as InfoCircleFill} from '@ant-design/icons/lib/fill/InfoCircleFill';\nexport {default as CheckCircleFill} from '@ant-design/icons/lib/fill/CheckCircleFill';\n```\n\n注：1.如果打包错误，请检查alias的配置和icons.ts的路径2.icon.ts的内容，包括自己用到的icon和组件用到的icon","slug":"解决antd icon打包过大的问题","published":1,"updated":"2024-04-04T15:27:03.228Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li4008dhajf9c7xgra1","content":"<p>1.webpack配置alias</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">resolve</span>: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"string\">&#x27;@ant-design/icons/lib/dist$&#x27;</span>: path.<span class=\"built_in\">resolve</span>(__dirname, <span class=\"string\">&#x27;../src/icons.ts&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;@&#x27;</span>: path.<span class=\"built_in\">resolve</span>(__dirname, <span class=\"string\">&#x27;../src&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.在src目录下编写icons.ts,内容是使用到的icon</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> UserOutline&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ant-design/icons/lib/outline/UserOutline&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> CloseCircleFill&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ant-design/icons/lib/fill/CloseCircleFill&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> InfoCircleFill&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ant-design/icons/lib/fill/InfoCircleFill&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> CheckCircleFill&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ant-design/icons/lib/fill/CheckCircleFill&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>注：1.如果打包错误，请检查alias的配置和icons.ts的路径2.icon.ts的内容，包括自己用到的icon和组件用到的icon</p>\n","length":712,"excerpt":"","more":"<p>1.webpack配置alias</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">resolve</span>: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"string\">&#x27;@ant-design/icons/lib/dist$&#x27;</span>: path.<span class=\"built_in\">resolve</span>(__dirname, <span class=\"string\">&#x27;../src/icons.ts&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;@&#x27;</span>: path.<span class=\"built_in\">resolve</span>(__dirname, <span class=\"string\">&#x27;../src&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.在src目录下编写icons.ts,内容是使用到的icon</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> UserOutline&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ant-design/icons/lib/outline/UserOutline&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> CloseCircleFill&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ant-design/icons/lib/fill/CloseCircleFill&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> InfoCircleFill&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ant-design/icons/lib/fill/InfoCircleFill&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> CheckCircleFill&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ant-design/icons/lib/fill/CheckCircleFill&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>注：1.如果打包错误，请检查alias的配置和icons.ts的路径2.icon.ts的内容，包括自己用到的icon和组件用到的icon</p>\n"},{"title":"过年啦，用canvas画个烟花吧","date":"2020-01-15T16:00:00.000Z","_content":"\n前言：马上过年了，我打算在后台里面偷偷地埋个新春祝福+放烟花的彩蛋。项目是基于react+typescript的，因此最后封装成了一个组件，设置好开启时间就可以显示了。\n\n目录结构\n----\n\n目录结构大致如下  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/16/16fadb245b35b83e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n我们将烟花分为两个阶段，一个是未炸开持续上升时期，另一个是炸开后分散的时期。  \n其中Vector表示一个坐标，Particle表示一个烟花的亮点，Firewor表示烟花未炸开时持续上升的亮点。index.tsx就是组件了，绘制了canvas，并执行了动画。\n\nVector\n------\n\n这个坐标就很简单，后面涉及到位置的变更都可以使用它的add方法进行偏移操作\n\n```typescript\nexport default class Vector {\n    constructor(public x: number, public y: number) {}\n    add(vec2: {x: number; y: number}) {\n        this.x = this.x + vec2.x;\n        this.y = this.y + vec2.y;\n    }\n}\n```\n\nParticle\n--------\n\n初始创建的时候给个坐标，后续每次更新的时候控制y坐标下落，gravity变量就是下落的值。timeSpan用于控制烟花展示的时长\n\n```kotlin\nimport Vector from './Vector';\nexport default class Particle {\n    pos: Vector = null;\n    vel: {x: number; y: number} = null;\n    dead: boolean = false;\n    start: number = 0;\n    ctx: CanvasRenderingContext2D = null;\n    constructor(pos: {x: number; y: number}, vel: {x: number; y: number}, ctx: CanvasRenderingContext2D) {\n        this.pos = new Vector(pos.x, pos.y);\n        this.vel = vel;\n        this.dead = false;\n        this.start = 0;\n        this.ctx = ctx;\n    }\n    update(time: number, gravity: number) {\n        let timeSpan = time - this.start;\n\n        if (timeSpan > 500) {\n            this.dead = true;\n        }\n\n        if (!this.dead) {\n            this.pos.add(this.vel);\n            this.vel.y = this.vel.y + gravity;\n        }\n    }\n\n    draw() {\n        if (!this.dead) {\n            this.drawDot(this.pos.x, this.pos.y, Math.random() > 0.5 ? 1 : 2);\n        }\n    }\n    drawDot(x: number, y: number, size: number) {\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, size, 0, Math.PI * 2);\n        this.ctx.fill();\n        this.ctx.closePath();\n    }\n}\n```\n\nFirework\n--------\n\n生成随机的hsl颜色，`hsl(' + rndNum(360) + ', 100%, 60%)`;Firework每次上升的距离是一个递减的过程，我们初始设置一个上升的距离，之后每次绘制的时候，这个距离减gravity，当距离小于零的时候，说明该出现烟花绽放的动画了。\n\n```kotlin\nimport Vector from './Vector';\nimport Particle from './Particle';\nlet rnd = Math.random;\nfunction rndNum(num: number) {\n    return rnd() * num + 1;\n}\nexport default class Firework {\n    pos: Vector = null;\n    vel: Vector = null;\n    color: string = null;\n    size: number = 0;\n    dead: boolean = false;\n    start: number = 0;\n    ctx: CanvasRenderingContext2D = null;\n    gravity: number = null;\n    exParticles: Particle[] = [];\n    exPLen: number = 100;\n    rootShow: boolean = true;\n    constructor(x: number, y: number, gravity: number, ctx: CanvasRenderingContext2D) {\n        this.pos = new Vector(x, y);\n        this.vel = new Vector(0, -rndNum(10) - 3);\n        this.color = 'hsl(' + rndNum(360) + ', 100%, 60%)';\n        this.size = 4;\n        this.dead = false;\n        this.start = 0;\n        this.ctx = ctx;\n        this.gravity = gravity;\n    }\n    update(time: number, gravity: number) {\n        if (this.dead) {\n            return;\n        }\n\n        this.rootShow = this.vel.y < 0;\n\n        if (this.rootShow) {\n            this.pos.add(this.vel);\n            this.vel.y = this.vel.y + gravity;\n        } else {\n            if (this.exParticles.length === 0) {\n                for (let i = 0; i < this.exPLen; i++) {\n                    let randomR = rndNum(5);\n                    let randomX = -rndNum(Math.abs(randomR) * 2) + Math.abs(randomR);\n                    let randomY =\n                        Math.sqrt(Math.abs(Math.pow(randomR, 2) - Math.pow(randomX, 2))) *\n                        (Math.random() > 0.5 ? 1 : -1);\n                    this.exParticles.push(new Particle(this.pos, new Vector(randomX, randomY), this.ctx));\n                    this.exParticles[this.exParticles.length - 1].start = time;\n                }\n            }\n            let numOfDead = 0;\n            for (let i = 0; i < this.exPLen; i++) {\n                let p = this.exParticles[i];\n                p.update(time, this.gravity);\n                if (p.dead) {\n                    numOfDead++;\n                }\n            }\n\n            if (numOfDead === this.exPLen) {\n                this.dead = true;\n            }\n        }\n    }\n\n    draw() {\n        if (this.dead) {\n            return;\n        }\n\n        this.ctx.fillStyle = this.color;\n        if (this.rootShow) {\n            this.drawDot(this.pos.x, this.pos.y, this.size);\n        } else {\n            for (let i = 0; i < this.exPLen; i++) {\n                let p = this.exParticles[i];\n                p.draw();\n            }\n        }\n    }\n    drawDot(x: number, y: number, size: number) {\n        this.ctx.beginPath();\n\n        this.ctx.arc(x, y, size, 0, Math.PI * 2);\n        this.ctx.fill();\n\n        this.ctx.closePath();\n    }\n}\n```\n\nFireworkComponent\n-----------------\n\n组件本身就很简单了，生成和绘制Firework。我们在这里面可以额外加一些文字\n\n```kotlin\nimport React from 'react';\nimport Firework from './Firework';\nimport {autobind} from 'core-decorators';\nlet rnd = Math.random;\nfunction rndNum(num: number) {\n    return rnd() * num + 1;\n}\ninterface PropTypes {\n    onClick?: () => void;\n}\n@autobind\nclass FireworkComponent extends React.Component<PropTypes> {\n    canvas: HTMLCanvasElement = null;\n    ctx: CanvasRenderingContext2D = null;\n    snapTime: number = 0;\n    fireworks: Firework[] = [];\n    gravity: number = 0.1;\n    componentDidMount() {\n        this.canvas = document.querySelector('#fireworks');\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = window.innerHeight;\n        this.ctx = this.canvas.getContext('2d');\n        this.init();\n        this.draw();\n    }\n\n    init() {\n        let numOfFireworks = 20;\n        for (let i = 0; i < numOfFireworks; i++) {\n            this.fireworks.push(new Firework(rndNum(this.canvas.width), this.canvas.height, this.gravity, this.ctx));\n        }\n    }\n\n    update(time: number) {\n        for (let i = 0, len = this.fireworks.length; i < len; i++) {\n            let p = this.fireworks[i];\n            p.update(time, this.gravity);\n        }\n    }\n    draw(time?: number) {\n        this.update(time);\n\n        this.ctx.fillStyle = 'rgba(0,0,0,0.3)';\n\n        this.ctx.fillStyle = 'rgba(0,0,0,0)';\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        this.ctx.font = 'bold 30px cursive';\n        this.ctx.fillStyle = '#e91818';\n        let text = 'XX项目组给您拜个早年！';\n        let textWidth = this.ctx.measureText(text);\n        this.ctx.fillText(text, this.canvas.width / 2 - textWidth.width / 2, 200);\n        text = '在新年来临之际，祝您：';\n        textWidth = this.ctx.measureText(text);\n        this.ctx.fillText(text, this.canvas.width / 2 - textWidth.width / 2, 260);\n        text = '工作顺利，新春快乐!';\n        this.ctx.font = 'bold 48px STCaiyun';\n        this.ctx.fillStyle = 'orangered';\n        textWidth = this.ctx.measureText(text);\n        this.ctx.fillText(text, this.canvas.width / 2 - textWidth.width / 2, 340);\n        this.ctx.fillStyle = 'gray';\n        this.ctx.font = '18px Arial';\n        text = '点击任意处关闭';\n        textWidth = this.ctx.measureText(text);\n        this.ctx.fillText(text, this.canvas.width - 20 - textWidth.width, 60);\n        this.snapTime = time;\n\n        this.ctx.fillStyle = 'blue';\n        for (let i = 0, len = this.fireworks.length; i < len; i++) {\n            let p = this.fireworks[i];\n            if (p.dead) {\n                p = this.fireworks[i] = new Firework(\n                    rndNum(this.canvas.width),\n                    this.canvas.height,\n                    this.gravity,\n                    this.ctx\n                );\n                p.start = time;\n            }\n            p.draw();\n        }\n\n        window.requestAnimationFrame(this.draw);\n    }\n\n    render() {\n        return (\n            <canvas\n                id=\"fireworks\"\n                onClick={this.props.onClick}\n                style={{position: 'fixed', zIndex: 99, background: 'rgba(0,0,0, 0.8)'}}\n                width=\"400\"\n                height=\"400\"></canvas>\n        );\n    }\n}\nexport default FireworkComponent;\n```\n\n大致效果![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/16/16fadb244c40c533~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")","source":"_posts/过年啦，用canvas画个烟花吧.md","raw":"---\n title: \"过年啦，用canvas画个烟花吧\"\n date: 2020-01-16\n tags: [Canvas]\n categories: [前端笔记]\n---\n\n前言：马上过年了，我打算在后台里面偷偷地埋个新春祝福+放烟花的彩蛋。项目是基于react+typescript的，因此最后封装成了一个组件，设置好开启时间就可以显示了。\n\n目录结构\n----\n\n目录结构大致如下  \n![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/16/16fadb245b35b83e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")  \n我们将烟花分为两个阶段，一个是未炸开持续上升时期，另一个是炸开后分散的时期。  \n其中Vector表示一个坐标，Particle表示一个烟花的亮点，Firewor表示烟花未炸开时持续上升的亮点。index.tsx就是组件了，绘制了canvas，并执行了动画。\n\nVector\n------\n\n这个坐标就很简单，后面涉及到位置的变更都可以使用它的add方法进行偏移操作\n\n```typescript\nexport default class Vector {\n    constructor(public x: number, public y: number) {}\n    add(vec2: {x: number; y: number}) {\n        this.x = this.x + vec2.x;\n        this.y = this.y + vec2.y;\n    }\n}\n```\n\nParticle\n--------\n\n初始创建的时候给个坐标，后续每次更新的时候控制y坐标下落，gravity变量就是下落的值。timeSpan用于控制烟花展示的时长\n\n```kotlin\nimport Vector from './Vector';\nexport default class Particle {\n    pos: Vector = null;\n    vel: {x: number; y: number} = null;\n    dead: boolean = false;\n    start: number = 0;\n    ctx: CanvasRenderingContext2D = null;\n    constructor(pos: {x: number; y: number}, vel: {x: number; y: number}, ctx: CanvasRenderingContext2D) {\n        this.pos = new Vector(pos.x, pos.y);\n        this.vel = vel;\n        this.dead = false;\n        this.start = 0;\n        this.ctx = ctx;\n    }\n    update(time: number, gravity: number) {\n        let timeSpan = time - this.start;\n\n        if (timeSpan > 500) {\n            this.dead = true;\n        }\n\n        if (!this.dead) {\n            this.pos.add(this.vel);\n            this.vel.y = this.vel.y + gravity;\n        }\n    }\n\n    draw() {\n        if (!this.dead) {\n            this.drawDot(this.pos.x, this.pos.y, Math.random() > 0.5 ? 1 : 2);\n        }\n    }\n    drawDot(x: number, y: number, size: number) {\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, size, 0, Math.PI * 2);\n        this.ctx.fill();\n        this.ctx.closePath();\n    }\n}\n```\n\nFirework\n--------\n\n生成随机的hsl颜色，`hsl(' + rndNum(360) + ', 100%, 60%)`;Firework每次上升的距离是一个递减的过程，我们初始设置一个上升的距离，之后每次绘制的时候，这个距离减gravity，当距离小于零的时候，说明该出现烟花绽放的动画了。\n\n```kotlin\nimport Vector from './Vector';\nimport Particle from './Particle';\nlet rnd = Math.random;\nfunction rndNum(num: number) {\n    return rnd() * num + 1;\n}\nexport default class Firework {\n    pos: Vector = null;\n    vel: Vector = null;\n    color: string = null;\n    size: number = 0;\n    dead: boolean = false;\n    start: number = 0;\n    ctx: CanvasRenderingContext2D = null;\n    gravity: number = null;\n    exParticles: Particle[] = [];\n    exPLen: number = 100;\n    rootShow: boolean = true;\n    constructor(x: number, y: number, gravity: number, ctx: CanvasRenderingContext2D) {\n        this.pos = new Vector(x, y);\n        this.vel = new Vector(0, -rndNum(10) - 3);\n        this.color = 'hsl(' + rndNum(360) + ', 100%, 60%)';\n        this.size = 4;\n        this.dead = false;\n        this.start = 0;\n        this.ctx = ctx;\n        this.gravity = gravity;\n    }\n    update(time: number, gravity: number) {\n        if (this.dead) {\n            return;\n        }\n\n        this.rootShow = this.vel.y < 0;\n\n        if (this.rootShow) {\n            this.pos.add(this.vel);\n            this.vel.y = this.vel.y + gravity;\n        } else {\n            if (this.exParticles.length === 0) {\n                for (let i = 0; i < this.exPLen; i++) {\n                    let randomR = rndNum(5);\n                    let randomX = -rndNum(Math.abs(randomR) * 2) + Math.abs(randomR);\n                    let randomY =\n                        Math.sqrt(Math.abs(Math.pow(randomR, 2) - Math.pow(randomX, 2))) *\n                        (Math.random() > 0.5 ? 1 : -1);\n                    this.exParticles.push(new Particle(this.pos, new Vector(randomX, randomY), this.ctx));\n                    this.exParticles[this.exParticles.length - 1].start = time;\n                }\n            }\n            let numOfDead = 0;\n            for (let i = 0; i < this.exPLen; i++) {\n                let p = this.exParticles[i];\n                p.update(time, this.gravity);\n                if (p.dead) {\n                    numOfDead++;\n                }\n            }\n\n            if (numOfDead === this.exPLen) {\n                this.dead = true;\n            }\n        }\n    }\n\n    draw() {\n        if (this.dead) {\n            return;\n        }\n\n        this.ctx.fillStyle = this.color;\n        if (this.rootShow) {\n            this.drawDot(this.pos.x, this.pos.y, this.size);\n        } else {\n            for (let i = 0; i < this.exPLen; i++) {\n                let p = this.exParticles[i];\n                p.draw();\n            }\n        }\n    }\n    drawDot(x: number, y: number, size: number) {\n        this.ctx.beginPath();\n\n        this.ctx.arc(x, y, size, 0, Math.PI * 2);\n        this.ctx.fill();\n\n        this.ctx.closePath();\n    }\n}\n```\n\nFireworkComponent\n-----------------\n\n组件本身就很简单了，生成和绘制Firework。我们在这里面可以额外加一些文字\n\n```kotlin\nimport React from 'react';\nimport Firework from './Firework';\nimport {autobind} from 'core-decorators';\nlet rnd = Math.random;\nfunction rndNum(num: number) {\n    return rnd() * num + 1;\n}\ninterface PropTypes {\n    onClick?: () => void;\n}\n@autobind\nclass FireworkComponent extends React.Component<PropTypes> {\n    canvas: HTMLCanvasElement = null;\n    ctx: CanvasRenderingContext2D = null;\n    snapTime: number = 0;\n    fireworks: Firework[] = [];\n    gravity: number = 0.1;\n    componentDidMount() {\n        this.canvas = document.querySelector('#fireworks');\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = window.innerHeight;\n        this.ctx = this.canvas.getContext('2d');\n        this.init();\n        this.draw();\n    }\n\n    init() {\n        let numOfFireworks = 20;\n        for (let i = 0; i < numOfFireworks; i++) {\n            this.fireworks.push(new Firework(rndNum(this.canvas.width), this.canvas.height, this.gravity, this.ctx));\n        }\n    }\n\n    update(time: number) {\n        for (let i = 0, len = this.fireworks.length; i < len; i++) {\n            let p = this.fireworks[i];\n            p.update(time, this.gravity);\n        }\n    }\n    draw(time?: number) {\n        this.update(time);\n\n        this.ctx.fillStyle = 'rgba(0,0,0,0.3)';\n\n        this.ctx.fillStyle = 'rgba(0,0,0,0)';\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        this.ctx.font = 'bold 30px cursive';\n        this.ctx.fillStyle = '#e91818';\n        let text = 'XX项目组给您拜个早年！';\n        let textWidth = this.ctx.measureText(text);\n        this.ctx.fillText(text, this.canvas.width / 2 - textWidth.width / 2, 200);\n        text = '在新年来临之际，祝您：';\n        textWidth = this.ctx.measureText(text);\n        this.ctx.fillText(text, this.canvas.width / 2 - textWidth.width / 2, 260);\n        text = '工作顺利，新春快乐!';\n        this.ctx.font = 'bold 48px STCaiyun';\n        this.ctx.fillStyle = 'orangered';\n        textWidth = this.ctx.measureText(text);\n        this.ctx.fillText(text, this.canvas.width / 2 - textWidth.width / 2, 340);\n        this.ctx.fillStyle = 'gray';\n        this.ctx.font = '18px Arial';\n        text = '点击任意处关闭';\n        textWidth = this.ctx.measureText(text);\n        this.ctx.fillText(text, this.canvas.width - 20 - textWidth.width, 60);\n        this.snapTime = time;\n\n        this.ctx.fillStyle = 'blue';\n        for (let i = 0, len = this.fireworks.length; i < len; i++) {\n            let p = this.fireworks[i];\n            if (p.dead) {\n                p = this.fireworks[i] = new Firework(\n                    rndNum(this.canvas.width),\n                    this.canvas.height,\n                    this.gravity,\n                    this.ctx\n                );\n                p.start = time;\n            }\n            p.draw();\n        }\n\n        window.requestAnimationFrame(this.draw);\n    }\n\n    render() {\n        return (\n            <canvas\n                id=\"fireworks\"\n                onClick={this.props.onClick}\n                style={{position: 'fixed', zIndex: 99, background: 'rgba(0,0,0, 0.8)'}}\n                width=\"400\"\n                height=\"400\"></canvas>\n        );\n    }\n}\nexport default FireworkComponent;\n```\n\n大致效果![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/16/16fadb244c40c533~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png \"image.png\")","slug":"过年啦，用canvas画个烟花吧","published":1,"updated":"2024-04-04T15:27:03.218Z","comments":1,"layout":"post","photos":[],"_id":"clulf0li7009yhajf8kfj6nv3","content":"<p>前言：马上过年了，我打算在后台里面偷偷地埋个新春祝福+放烟花的彩蛋。项目是基于react+typescript的，因此最后封装成了一个组件，设置好开启时间就可以显示了。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>目录结构大致如下<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/16/16fadb245b35b83e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>我们将烟花分为两个阶段，一个是未炸开持续上升时期，另一个是炸开后分散的时期。<br>其中Vector表示一个坐标，Particle表示一个烟花的亮点，Firewor表示烟花未炸开时持续上升的亮点。index.tsx就是组件了，绘制了canvas，并执行了动画。</p>\n<h2 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h2><p>这个坐标就很简单，后面涉及到位置的变更都可以使用它的add方法进行偏移操作</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Vector</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> x: <span class=\"built_in\">number</span>, <span class=\"keyword\">public</span> y: <span class=\"built_in\">number</span></span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"title function_\">add</span>(<span class=\"params\">vec2: &#123;x: <span class=\"built_in\">number</span>; y: <span class=\"built_in\">number</span>&#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> + vec2.<span class=\"property\">x</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> + vec2.<span class=\"property\">y</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Particle\"><a href=\"#Particle\" class=\"headerlink\" title=\"Particle\"></a>Particle</h2><p>初始创建的时候给个坐标，后续每次更新的时候控制y坐标下落，gravity变量就是下落的值。timeSpan用于控制烟花展示的时长</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vector from <span class=\"string\">&#x27;./Vector&#x27;</span>;</span><br><span class=\"line\">export default <span class=\"keyword\">class</span> <span class=\"title class_\">Particle</span> &#123;</span><br><span class=\"line\">    pos: Vector = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    vel: &#123;x: number; y: number&#125; = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    dead: boolean = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    start: number = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ctx: CanvasRenderingContext2D = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(pos: &#123;x: number; y: number&#125;, vel: &#123;x: number; y: number&#125;, ctx: CanvasRenderingContext2D) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pos = new Vector(pos.x, pos.y);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.vel = vel;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dead = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx = ctx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    update(time: number, gravity: number) &#123;</span><br><span class=\"line\">        let timeSpan = time - <span class=\"keyword\">this</span>.start;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeSpan &gt; <span class=\"number\">500</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.dead = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.dead) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.pos.add(<span class=\"keyword\">this</span>.vel);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.vel.y = <span class=\"keyword\">this</span>.vel.y + gravity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    draw() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.dead) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.drawDot(<span class=\"keyword\">this</span>.pos.x, <span class=\"keyword\">this</span>.pos.y, Math.random() &gt; <span class=\"number\">0.5</span> ? <span class=\"number\">1</span> : <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    drawDot(x: number, y: number, size: number) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.beginPath();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.arc(x, y, size, <span class=\"number\">0</span>, Math.PI * <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fill();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.closePath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Firework\"><a href=\"#Firework\" class=\"headerlink\" title=\"Firework\"></a>Firework</h2><p>生成随机的hsl颜色，<code>hsl(&#39; + rndNum(360) + &#39;, 100%, 60%)</code>;Firework每次上升的距离是一个递减的过程，我们初始设置一个上升的距离，之后每次绘制的时候，这个距离减gravity，当距离小于零的时候，说明该出现烟花绽放的动画了。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vector from <span class=\"string\">&#x27;./Vector&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Particle from <span class=\"string\">&#x27;./Particle&#x27;</span>;</span><br><span class=\"line\">let rnd = Math.random;</span><br><span class=\"line\">function rndNum(num: number) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rnd() * num + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default <span class=\"keyword\">class</span> <span class=\"title class_\">Firework</span> &#123;</span><br><span class=\"line\">    pos: Vector = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    vel: Vector = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    color: string = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    size: number = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dead: boolean = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    start: number = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ctx: CanvasRenderingContext2D = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    gravity: number = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    exParticles: Particle[] = [];</span><br><span class=\"line\">    exPLen: number = <span class=\"number\">100</span>;</span><br><span class=\"line\">    rootShow: boolean = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x: number, y: number, gravity: number, ctx: CanvasRenderingContext2D) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pos = new Vector(x, y);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.vel = new Vector(<span class=\"number\">0</span>, -rndNum(<span class=\"number\">10</span>) - <span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.color = <span class=\"string\">&#x27;hsl(&#x27;</span> + rndNum(<span class=\"number\">360</span>) + <span class=\"string\">&#x27;, 100%, 60%)&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dead = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx = ctx;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.gravity = gravity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    update(time: number, gravity: number) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dead) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.rootShow = <span class=\"keyword\">this</span>.vel.y &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.rootShow) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.pos.add(<span class=\"keyword\">this</span>.vel);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.vel.y = <span class=\"keyword\">this</span>.vel.y + gravity;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.exParticles.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (let i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.exPLen; i++) &#123;</span><br><span class=\"line\">                    let randomR = rndNum(<span class=\"number\">5</span>);</span><br><span class=\"line\">                    let randomX = -rndNum(Math.abs(randomR) * <span class=\"number\">2</span>) + Math.abs(randomR);</span><br><span class=\"line\">                    let randomY =</span><br><span class=\"line\">                        Math.sqrt(Math.abs(Math.pow(randomR, <span class=\"number\">2</span>) - Math.pow(randomX, <span class=\"number\">2</span>))) *</span><br><span class=\"line\">                        (Math.random() &gt; <span class=\"number\">0.5</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.exParticles.push(new Particle(<span class=\"keyword\">this</span>.pos, new Vector(randomX, randomY), <span class=\"keyword\">this</span>.ctx));</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.exParticles[<span class=\"keyword\">this</span>.exParticles.length - <span class=\"number\">1</span>].start = time;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            let numOfDead = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (let i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.exPLen; i++) &#123;</span><br><span class=\"line\">                let p = <span class=\"keyword\">this</span>.exParticles[i];</span><br><span class=\"line\">                p.update(time, <span class=\"keyword\">this</span>.gravity);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p.dead) &#123;</span><br><span class=\"line\">                    numOfDead++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numOfDead === <span class=\"keyword\">this</span>.exPLen) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.dead = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    draw() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dead) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillStyle = <span class=\"keyword\">this</span>.color;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.rootShow) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.drawDot(<span class=\"keyword\">this</span>.pos.x, <span class=\"keyword\">this</span>.pos.y, <span class=\"keyword\">this</span>.size);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (let i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.exPLen; i++) &#123;</span><br><span class=\"line\">                let p = <span class=\"keyword\">this</span>.exParticles[i];</span><br><span class=\"line\">                p.draw();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    drawDot(x: number, y: number, size: number) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.beginPath();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.arc(x, y, size, <span class=\"number\">0</span>, Math.PI * <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fill();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.closePath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FireworkComponent\"><a href=\"#FireworkComponent\" class=\"headerlink\" title=\"FireworkComponent\"></a>FireworkComponent</h2><p>组件本身就很简单了，生成和绘制Firework。我们在这里面可以额外加一些文字</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React from <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Firework from <span class=\"string\">&#x27;./Firework&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;autobind&#125; from <span class=\"string\">&#x27;core-decorators&#x27;</span>;</span><br><span class=\"line\">let rnd = Math.random;</span><br><span class=\"line\">function rndNum(num: number) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rnd() * num + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PropTypes</span> &#123;</span><br><span class=\"line\">    onClick?: () =&gt; void;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@autobind</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FireworkComponent</span> <span class=\"title\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"type\">PropTypes</span>&gt; &#123;</span><br><span class=\"line\">    canvas: HTMLCanvasElement = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    ctx: CanvasRenderingContext2D = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    snapTime: number = <span class=\"number\">0</span>;</span><br><span class=\"line\">    fireworks: Firework[] = [];</span><br><span class=\"line\">    gravity: number = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.canvas = document.querySelector(<span class=\"string\">&#x27;#fireworks&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.canvas.width = window.innerWidth;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.canvas.height = window.innerHeight;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx = <span class=\"keyword\">this</span>.canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">init</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        let numOfFireworks = <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (let i = <span class=\"number\">0</span>; i &lt; numOfFireworks; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.fireworks.push(new Firework(rndNum(<span class=\"keyword\">this</span>.canvas.width), <span class=\"keyword\">this</span>.canvas.height, <span class=\"keyword\">this</span>.gravity, <span class=\"keyword\">this</span>.ctx));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    update(time: number) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (let i = <span class=\"number\">0</span>, len = <span class=\"keyword\">this</span>.fireworks.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            let p = <span class=\"keyword\">this</span>.fireworks[i];</span><br><span class=\"line\">            p.update(time, <span class=\"keyword\">this</span>.gravity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    draw(time?: number) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.update(time);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillStyle = <span class=\"string\">&#x27;rgba(0,0,0,0.3)&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillStyle = <span class=\"string\">&#x27;rgba(0,0,0,0)&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.canvas.width, <span class=\"keyword\">this</span>.canvas.height);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.font = <span class=\"string\">&#x27;bold 30px cursive&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillStyle = <span class=\"string\">&#x27;#e91818&#x27;</span>;</span><br><span class=\"line\">        let text = <span class=\"string\">&#x27;XX项目组给您拜个早年！&#x27;</span>;</span><br><span class=\"line\">        let textWidth = <span class=\"keyword\">this</span>.ctx.measureText(text);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillText(text, <span class=\"keyword\">this</span>.canvas.width / <span class=\"number\">2</span> - textWidth.width / <span class=\"number\">2</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">        text = <span class=\"string\">&#x27;在新年来临之际，祝您：&#x27;</span>;</span><br><span class=\"line\">        textWidth = <span class=\"keyword\">this</span>.ctx.measureText(text);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillText(text, <span class=\"keyword\">this</span>.canvas.width / <span class=\"number\">2</span> - textWidth.width / <span class=\"number\">2</span>, <span class=\"number\">260</span>);</span><br><span class=\"line\">        text = <span class=\"string\">&#x27;工作顺利，新春快乐!&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.font = <span class=\"string\">&#x27;bold 48px STCaiyun&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillStyle = <span class=\"string\">&#x27;orangered&#x27;</span>;</span><br><span class=\"line\">        textWidth = <span class=\"keyword\">this</span>.ctx.measureText(text);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillText(text, <span class=\"keyword\">this</span>.canvas.width / <span class=\"number\">2</span> - textWidth.width / <span class=\"number\">2</span>, <span class=\"number\">340</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillStyle = <span class=\"string\">&#x27;gray&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.font = <span class=\"string\">&#x27;18px Arial&#x27;</span>;</span><br><span class=\"line\">        text = <span class=\"string\">&#x27;点击任意处关闭&#x27;</span>;</span><br><span class=\"line\">        textWidth = <span class=\"keyword\">this</span>.ctx.measureText(text);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillText(text, <span class=\"keyword\">this</span>.canvas.width - <span class=\"number\">20</span> - textWidth.width, <span class=\"number\">60</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.snapTime = time;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillStyle = <span class=\"string\">&#x27;blue&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (let i = <span class=\"number\">0</span>, len = <span class=\"keyword\">this</span>.fireworks.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            let p = <span class=\"keyword\">this</span>.fireworks[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p.dead) &#123;</span><br><span class=\"line\">                p = <span class=\"keyword\">this</span>.fireworks[i] = new Firework(</span><br><span class=\"line\">                    rndNum(<span class=\"keyword\">this</span>.canvas.width),</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.canvas.height,</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.gravity,</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.ctx</span><br><span class=\"line\">                );</span><br><span class=\"line\">                p.start = time;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p.draw();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        window.requestAnimationFrame(<span class=\"keyword\">this</span>.draw);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;canvas</span><br><span class=\"line\">                id=<span class=\"string\">&quot;fireworks&quot;</span></span><br><span class=\"line\">                onClick=&#123;<span class=\"keyword\">this</span>.props.onClick&#125;</span><br><span class=\"line\">                style=&#123;&#123;position: <span class=\"string\">&#x27;fixed&#x27;</span>, zIndex: <span class=\"number\">99</span>, background: <span class=\"string\">&#x27;rgba(0,0,0, 0.8)&#x27;</span>&#125;&#125;</span><br><span class=\"line\">                width=<span class=\"string\">&quot;400&quot;</span></span><br><span class=\"line\">                height=<span class=\"string\">&quot;400&quot;</span>&gt;&lt;/canvas&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default FireworkComponent;</span><br></pre></td></tr></table></figure>\n\n<p>大致效果<img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/16/16fadb244c40c533~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n","length":6519,"excerpt":"","more":"<p>前言：马上过年了，我打算在后台里面偷偷地埋个新春祝福+放烟花的彩蛋。项目是基于react+typescript的，因此最后封装成了一个组件，设置好开启时间就可以显示了。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>目录结构大致如下<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/16/16fadb245b35b83e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"><br>我们将烟花分为两个阶段，一个是未炸开持续上升时期，另一个是炸开后分散的时期。<br>其中Vector表示一个坐标，Particle表示一个烟花的亮点，Firewor表示烟花未炸开时持续上升的亮点。index.tsx就是组件了，绘制了canvas，并执行了动画。</p>\n<h2 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h2><p>这个坐标就很简单，后面涉及到位置的变更都可以使用它的add方法进行偏移操作</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Vector</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> x: <span class=\"built_in\">number</span>, <span class=\"keyword\">public</span> y: <span class=\"built_in\">number</span></span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"title function_\">add</span>(<span class=\"params\">vec2: &#123;x: <span class=\"built_in\">number</span>; y: <span class=\"built_in\">number</span>&#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> + vec2.<span class=\"property\">x</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> + vec2.<span class=\"property\">y</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Particle\"><a href=\"#Particle\" class=\"headerlink\" title=\"Particle\"></a>Particle</h2><p>初始创建的时候给个坐标，后续每次更新的时候控制y坐标下落，gravity变量就是下落的值。timeSpan用于控制烟花展示的时长</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vector from <span class=\"string\">&#x27;./Vector&#x27;</span>;</span><br><span class=\"line\">export default <span class=\"keyword\">class</span> <span class=\"title class_\">Particle</span> &#123;</span><br><span class=\"line\">    pos: Vector = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    vel: &#123;x: number; y: number&#125; = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    dead: boolean = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    start: number = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ctx: CanvasRenderingContext2D = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(pos: &#123;x: number; y: number&#125;, vel: &#123;x: number; y: number&#125;, ctx: CanvasRenderingContext2D) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pos = new Vector(pos.x, pos.y);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.vel = vel;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dead = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx = ctx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    update(time: number, gravity: number) &#123;</span><br><span class=\"line\">        let timeSpan = time - <span class=\"keyword\">this</span>.start;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeSpan &gt; <span class=\"number\">500</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.dead = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.dead) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.pos.add(<span class=\"keyword\">this</span>.vel);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.vel.y = <span class=\"keyword\">this</span>.vel.y + gravity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    draw() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.dead) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.drawDot(<span class=\"keyword\">this</span>.pos.x, <span class=\"keyword\">this</span>.pos.y, Math.random() &gt; <span class=\"number\">0.5</span> ? <span class=\"number\">1</span> : <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    drawDot(x: number, y: number, size: number) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.beginPath();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.arc(x, y, size, <span class=\"number\">0</span>, Math.PI * <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fill();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.closePath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Firework\"><a href=\"#Firework\" class=\"headerlink\" title=\"Firework\"></a>Firework</h2><p>生成随机的hsl颜色，<code>hsl(&#39; + rndNum(360) + &#39;, 100%, 60%)</code>;Firework每次上升的距离是一个递减的过程，我们初始设置一个上升的距离，之后每次绘制的时候，这个距离减gravity，当距离小于零的时候，说明该出现烟花绽放的动画了。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vector from <span class=\"string\">&#x27;./Vector&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Particle from <span class=\"string\">&#x27;./Particle&#x27;</span>;</span><br><span class=\"line\">let rnd = Math.random;</span><br><span class=\"line\">function rndNum(num: number) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rnd() * num + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default <span class=\"keyword\">class</span> <span class=\"title class_\">Firework</span> &#123;</span><br><span class=\"line\">    pos: Vector = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    vel: Vector = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    color: string = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    size: number = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dead: boolean = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    start: number = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ctx: CanvasRenderingContext2D = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    gravity: number = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    exParticles: Particle[] = [];</span><br><span class=\"line\">    exPLen: number = <span class=\"number\">100</span>;</span><br><span class=\"line\">    rootShow: boolean = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x: number, y: number, gravity: number, ctx: CanvasRenderingContext2D) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pos = new Vector(x, y);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.vel = new Vector(<span class=\"number\">0</span>, -rndNum(<span class=\"number\">10</span>) - <span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.color = <span class=\"string\">&#x27;hsl(&#x27;</span> + rndNum(<span class=\"number\">360</span>) + <span class=\"string\">&#x27;, 100%, 60%)&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dead = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx = ctx;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.gravity = gravity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    update(time: number, gravity: number) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dead) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.rootShow = <span class=\"keyword\">this</span>.vel.y &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.rootShow) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.pos.add(<span class=\"keyword\">this</span>.vel);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.vel.y = <span class=\"keyword\">this</span>.vel.y + gravity;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.exParticles.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (let i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.exPLen; i++) &#123;</span><br><span class=\"line\">                    let randomR = rndNum(<span class=\"number\">5</span>);</span><br><span class=\"line\">                    let randomX = -rndNum(Math.abs(randomR) * <span class=\"number\">2</span>) + Math.abs(randomR);</span><br><span class=\"line\">                    let randomY =</span><br><span class=\"line\">                        Math.sqrt(Math.abs(Math.pow(randomR, <span class=\"number\">2</span>) - Math.pow(randomX, <span class=\"number\">2</span>))) *</span><br><span class=\"line\">                        (Math.random() &gt; <span class=\"number\">0.5</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.exParticles.push(new Particle(<span class=\"keyword\">this</span>.pos, new Vector(randomX, randomY), <span class=\"keyword\">this</span>.ctx));</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.exParticles[<span class=\"keyword\">this</span>.exParticles.length - <span class=\"number\">1</span>].start = time;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            let numOfDead = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (let i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.exPLen; i++) &#123;</span><br><span class=\"line\">                let p = <span class=\"keyword\">this</span>.exParticles[i];</span><br><span class=\"line\">                p.update(time, <span class=\"keyword\">this</span>.gravity);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p.dead) &#123;</span><br><span class=\"line\">                    numOfDead++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numOfDead === <span class=\"keyword\">this</span>.exPLen) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.dead = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    draw() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dead) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillStyle = <span class=\"keyword\">this</span>.color;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.rootShow) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.drawDot(<span class=\"keyword\">this</span>.pos.x, <span class=\"keyword\">this</span>.pos.y, <span class=\"keyword\">this</span>.size);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (let i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.exPLen; i++) &#123;</span><br><span class=\"line\">                let p = <span class=\"keyword\">this</span>.exParticles[i];</span><br><span class=\"line\">                p.draw();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    drawDot(x: number, y: number, size: number) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.beginPath();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.arc(x, y, size, <span class=\"number\">0</span>, Math.PI * <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fill();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.closePath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FireworkComponent\"><a href=\"#FireworkComponent\" class=\"headerlink\" title=\"FireworkComponent\"></a>FireworkComponent</h2><p>组件本身就很简单了，生成和绘制Firework。我们在这里面可以额外加一些文字</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React from <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Firework from <span class=\"string\">&#x27;./Firework&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;autobind&#125; from <span class=\"string\">&#x27;core-decorators&#x27;</span>;</span><br><span class=\"line\">let rnd = Math.random;</span><br><span class=\"line\">function rndNum(num: number) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rnd() * num + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PropTypes</span> &#123;</span><br><span class=\"line\">    onClick?: () =&gt; void;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@autobind</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FireworkComponent</span> <span class=\"title\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"type\">PropTypes</span>&gt; &#123;</span><br><span class=\"line\">    canvas: HTMLCanvasElement = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    ctx: CanvasRenderingContext2D = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    snapTime: number = <span class=\"number\">0</span>;</span><br><span class=\"line\">    fireworks: Firework[] = [];</span><br><span class=\"line\">    gravity: number = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.canvas = document.querySelector(<span class=\"string\">&#x27;#fireworks&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.canvas.width = window.innerWidth;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.canvas.height = window.innerHeight;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx = <span class=\"keyword\">this</span>.canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">init</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        let numOfFireworks = <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (let i = <span class=\"number\">0</span>; i &lt; numOfFireworks; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.fireworks.push(new Firework(rndNum(<span class=\"keyword\">this</span>.canvas.width), <span class=\"keyword\">this</span>.canvas.height, <span class=\"keyword\">this</span>.gravity, <span class=\"keyword\">this</span>.ctx));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    update(time: number) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (let i = <span class=\"number\">0</span>, len = <span class=\"keyword\">this</span>.fireworks.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            let p = <span class=\"keyword\">this</span>.fireworks[i];</span><br><span class=\"line\">            p.update(time, <span class=\"keyword\">this</span>.gravity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    draw(time?: number) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.update(time);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillStyle = <span class=\"string\">&#x27;rgba(0,0,0,0.3)&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillStyle = <span class=\"string\">&#x27;rgba(0,0,0,0)&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.canvas.width, <span class=\"keyword\">this</span>.canvas.height);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.font = <span class=\"string\">&#x27;bold 30px cursive&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillStyle = <span class=\"string\">&#x27;#e91818&#x27;</span>;</span><br><span class=\"line\">        let text = <span class=\"string\">&#x27;XX项目组给您拜个早年！&#x27;</span>;</span><br><span class=\"line\">        let textWidth = <span class=\"keyword\">this</span>.ctx.measureText(text);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillText(text, <span class=\"keyword\">this</span>.canvas.width / <span class=\"number\">2</span> - textWidth.width / <span class=\"number\">2</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">        text = <span class=\"string\">&#x27;在新年来临之际，祝您：&#x27;</span>;</span><br><span class=\"line\">        textWidth = <span class=\"keyword\">this</span>.ctx.measureText(text);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillText(text, <span class=\"keyword\">this</span>.canvas.width / <span class=\"number\">2</span> - textWidth.width / <span class=\"number\">2</span>, <span class=\"number\">260</span>);</span><br><span class=\"line\">        text = <span class=\"string\">&#x27;工作顺利，新春快乐!&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.font = <span class=\"string\">&#x27;bold 48px STCaiyun&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillStyle = <span class=\"string\">&#x27;orangered&#x27;</span>;</span><br><span class=\"line\">        textWidth = <span class=\"keyword\">this</span>.ctx.measureText(text);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillText(text, <span class=\"keyword\">this</span>.canvas.width / <span class=\"number\">2</span> - textWidth.width / <span class=\"number\">2</span>, <span class=\"number\">340</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillStyle = <span class=\"string\">&#x27;gray&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.font = <span class=\"string\">&#x27;18px Arial&#x27;</span>;</span><br><span class=\"line\">        text = <span class=\"string\">&#x27;点击任意处关闭&#x27;</span>;</span><br><span class=\"line\">        textWidth = <span class=\"keyword\">this</span>.ctx.measureText(text);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillText(text, <span class=\"keyword\">this</span>.canvas.width - <span class=\"number\">20</span> - textWidth.width, <span class=\"number\">60</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.snapTime = time;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ctx.fillStyle = <span class=\"string\">&#x27;blue&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (let i = <span class=\"number\">0</span>, len = <span class=\"keyword\">this</span>.fireworks.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            let p = <span class=\"keyword\">this</span>.fireworks[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p.dead) &#123;</span><br><span class=\"line\">                p = <span class=\"keyword\">this</span>.fireworks[i] = new Firework(</span><br><span class=\"line\">                    rndNum(<span class=\"keyword\">this</span>.canvas.width),</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.canvas.height,</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.gravity,</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.ctx</span><br><span class=\"line\">                );</span><br><span class=\"line\">                p.start = time;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p.draw();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        window.requestAnimationFrame(<span class=\"keyword\">this</span>.draw);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;canvas</span><br><span class=\"line\">                id=<span class=\"string\">&quot;fireworks&quot;</span></span><br><span class=\"line\">                onClick=&#123;<span class=\"keyword\">this</span>.props.onClick&#125;</span><br><span class=\"line\">                style=&#123;&#123;position: <span class=\"string\">&#x27;fixed&#x27;</span>, zIndex: <span class=\"number\">99</span>, background: <span class=\"string\">&#x27;rgba(0,0,0, 0.8)&#x27;</span>&#125;&#125;</span><br><span class=\"line\">                width=<span class=\"string\">&quot;400&quot;</span></span><br><span class=\"line\">                height=<span class=\"string\">&quot;400&quot;</span>&gt;&lt;/canvas&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default FireworkComponent;</span><br></pre></td></tr></table></figure>\n\n<p>大致效果<img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/16/16fadb244c40c533~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\" alt=\"image.png\" title=\"image.png\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clulf0lhh0008hajfg83hc0fy","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhj000ehajf784rdm42"},{"post_id":"clulf0lhg0003hajfdsvaeu4g","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhj000ihajfbcm92kub"},{"post_id":"clulf0lhi0009hajfewjr5eq4","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhk000lhajf24yn6yf2"},{"post_id":"clulf0lhi000chajffnc62aay","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhk000phajfge0h8is3"},{"post_id":"clulf0lhg0004hajf7lvpatqj","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhk000shajfhrkjd1e9"},{"post_id":"clulf0lhj000dhajf6985f7x3","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhl000whajfda47269z"},{"post_id":"clulf0lhj000hhajf0yagbeb2","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhl000zhajf4p41h3vn"},{"post_id":"clulf0lhh0007hajfd469aukq","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhl0012hajfhcmu4bxy"},{"post_id":"clulf0lhj000khajfcc8k3zly","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhl0015hajfft9n1wcv"},{"post_id":"clulf0lhk000ohajf64f638ax","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhl0019hajf8y6eae4d"},{"post_id":"clulf0lhk000rhajf5otm4nlv","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhm001chajfe6dff59v"},{"post_id":"clulf0lhk000vhajf6nyegrjc","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhm001ghajf963t9j17"},{"post_id":"clulf0lhl000yhajfhz3c0ida","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhm001jhajf3jy1cwtc"},{"post_id":"clulf0lhl0011hajfcp0efgjl","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhm001nhajfaoiu6uhu"},{"post_id":"clulf0lhl0014hajfbp323o8h","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhn001qhajf0i80eoxd"},{"post_id":"clulf0lhl0018hajf1bxyb3rx","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhn001uhajf3rbaexvc"},{"post_id":"clulf0lhm001bhajf3oh7aao5","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhn001xhajf56lwbcmp"},{"post_id":"clulf0lhm001fhajf57b37bnc","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhn0021hajf9ypk6faa"},{"post_id":"clulf0lhm001ihajf6su7g17u","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhn0024hajf2twz3glp"},{"post_id":"clulf0lhm001mhajf3qs21njd","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lho0027hajffamxbrqv"},{"post_id":"clulf0lhn001phajf7h27bey0","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lho002bhajf7rs8evtg"},{"post_id":"clulf0lhn001thajf1c9ye3ov","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lho002ehajfankechk8"},{"post_id":"clulf0lhn001whajfdc22hpb7","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lho002ihajf5yimch9w"},{"post_id":"clulf0lhn0020hajf29bfb2ml","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhp002lhajf8p9tcz0y"},{"post_id":"clulf0lhn0023hajf2yccfgq0","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhp002phajf2nf9cg4v"},{"post_id":"clulf0lho0026hajfhcalcg34","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhp002shajf39q4gl23"},{"post_id":"clulf0lho002ahajfgz1gae4c","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhp002whajf9wn89h7j"},{"post_id":"clulf0lho002dhajf7iqu812a","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhp002zhajf39pj4c3r"},{"post_id":"clulf0lho002hhajfg5jb2cps","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhq0033hajf4m331z98"},{"post_id":"clulf0lhp002ohajfbfi4al4v","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhq0036hajf3vsyb34f"},{"post_id":"clulf0lhp002rhajfefz0a0ko","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhq003ahajf5upu61q2"},{"post_id":"clulf0lhp002vhajfectn4v8y","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhq003dhajf6xteb7aq"},{"post_id":"clulf0lhp002yhajf826gak3b","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhr003hhajf9xfjepz1"},{"post_id":"clulf0lhq0035hajf663mefe4","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhr003khajf4yl29chq"},{"post_id":"clulf0lhq0039hajf2dzyh0d1","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhs003ohajf4ifl54sc"},{"post_id":"clulf0lhq003ghajfflys6b4a","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhs003rhajf7rpv1mhi"},{"post_id":"clulf0lhr003jhajf6i3ihamw","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhs003vhajf2ilmbmh9"},{"post_id":"clulf0lhs003nhajf7qlj4ysc","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lht003yhajf9ayu0y9u"},{"post_id":"clulf0lhs003qhajf19tp5e5b","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lht0042hajfbnwlhhoh"},{"post_id":"clulf0lht003xhajf3w1o2szv","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lht0047hajf7059b0j1"},{"post_id":"clulf0lht0041hajf3p8ie73g","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhu004bhajfdllj1pjc"},{"post_id":"clulf0lht0044hajfcxvz59ri","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhu004ehajf6rej1x69"},{"post_id":"clulf0lht0046hajfdiox6br1","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhu004ihajf8i1g57ro"},{"post_id":"clulf0lht004ahajf0mmb528e","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhu004lhajfb9d89hrv"},{"post_id":"clulf0lhu004dhajfbk1zgyvt","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhv004phajfbd82ewj9"},{"post_id":"clulf0lhu004hhajfh7zlcmbj","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhw004shajf9w2u9fe9"},{"post_id":"clulf0lhu004khajfbpjo9ygg","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhw004whajf67x95ua6"},{"post_id":"clulf0lhu004ohajf85wl2coj","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhx004zhajf3y38a072"},{"post_id":"clulf0lhv004rhajf6cvo8lwd","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhx0053hajfh7hm8d8e"},{"post_id":"clulf0lhw004vhajff05jak6m","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhx0056hajf04gr8inz"},{"post_id":"clulf0lhw004yhajfh1u2510n","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhy005ahajfebsl7iu8"},{"post_id":"clulf0lhx0055hajf09o62wtw","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhy005ghajfa1ovf1ir"},{"post_id":"clulf0lhy0059hajf8hgqd8jd","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhy005jhajf1hee8hj8"},{"post_id":"clulf0lhy005chajf8empboda","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhz005nhajfedqwawm3"},{"post_id":"clulf0lhy005fhajf8p8j6ctp","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhz005qhajf9hbz440g"},{"post_id":"clulf0lhy005ihajf9mljf3j4","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhz005uhajfai9a843e"},{"post_id":"clulf0lhy005mhajf0jloe7t3","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhz005xhajf9si9hbiw"},{"post_id":"clulf0lhz005phajfcexe481k","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0lhz0060hajf0h3hg8qe"},{"post_id":"clulf0lhz005thajfdn356dd9","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li00064hajf3uhogout"},{"post_id":"clulf0lhz005whajf74ai2lw5","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li00067hajf769i4nuw"},{"post_id":"clulf0lhz005zhajfcszlcjkd","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li0006bhajf7687dmsg"},{"post_id":"clulf0lhz0063hajf8bro4xsc","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li0006ehajf3btv77hw"},{"post_id":"clulf0li00066hajf7rbxfm5e","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li0006ihajf8sla3g7f"},{"post_id":"clulf0li0006ahajfausve6bs","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li0006lhajf3o4d1738"},{"post_id":"clulf0li0006dhajf0k4hbn7a","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li1006phajfg1rg2z57"},{"post_id":"clulf0li0006hhajfcikn1k4t","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li1006shajf3qet2sn1"},{"post_id":"clulf0li1006ohajf1a5r0dvb","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li1006yhajf6uwi6mul"},{"post_id":"clulf0li1006rhajff78z970l","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li10072hajffd4zgcwi"},{"post_id":"clulf0li1006vhajfeibk30lp","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li20075hajf8hsh5gxe"},{"post_id":"clulf0li1006xhajffv5z7lfm","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li20079hajfbytfexn9"},{"post_id":"clulf0li10071hajfelzh39l2","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li2007chajf5oa2fycv"},{"post_id":"clulf0li10074hajffcdqgnpl","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li2007fhajf470jep7s"},{"post_id":"clulf0li20078hajfc29j4p1y","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li2007jhajf7quw8uz4"},{"post_id":"clulf0li2007bhajf2uutgfr0","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li2007mhajfftmc1l5p"},{"post_id":"clulf0li2007ehajfa6ix4nzf","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li3007qhajf9riz0w6o"},{"post_id":"clulf0li2007ihajf0l4sfhna","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li3007uhajfbwi581ho"},{"post_id":"clulf0li3007xhajf781x0ad0","category_id":"clulf0li3007rhajf1v04hyuh","_id":"clulf0li40086hajffktu7b6w"},{"post_id":"clulf0li2007lhajf2b84631u","category_id":"clulf0li3007rhajf1v04hyuh","_id":"clulf0li4008bhajfck46h7xk"},{"post_id":"clulf0li3007zhajfdd2c6oze","category_id":"clulf0li3007rhajf1v04hyuh","_id":"clulf0li4008ehajf3kby8a70"},{"post_id":"clulf0li30083hajf9n5ag9ke","category_id":"clulf0li3007rhajf1v04hyuh","_id":"clulf0li4008hhajfgw1g4vsw"},{"post_id":"clulf0li3007phajf6f7k7s6y","category_id":"clulf0li3007rhajf1v04hyuh","_id":"clulf0li4008jhajff2bbgpyb"},{"post_id":"clulf0li40085hajfggevgohy","category_id":"clulf0li3007rhajf1v04hyuh","_id":"clulf0li4008mhajfgiy87qqr"},{"post_id":"clulf0li4008ahajf4xnvhgor","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li4008ohajf00rrdy3p"},{"post_id":"clulf0li3007thajf56aobyu5","category_id":"clulf0li3007rhajf1v04hyuh","_id":"clulf0li4008rhajf1ze7c472"},{"post_id":"clulf0li7009yhajf8kfj6nv3","category_id":"clulf0lhg0005hajf0gnf58jd","_id":"clulf0li700a0hajf89w23e5m"}],"PostTag":[{"post_id":"clulf0lhg0003hajfdsvaeu4g","tag_id":"clulf0lhh0006hajf8hbc5tdm","_id":"clulf0lhj000jhajfh5wg1e2z"},{"post_id":"clulf0lhg0003hajfdsvaeu4g","tag_id":"clulf0lhi000bhajfaxmv9wz1","_id":"clulf0lhk000mhajfabg7g37d"},{"post_id":"clulf0lhj000hhajf0yagbeb2","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhk000qhajfgcd2333y"},{"post_id":"clulf0lhg0004hajf7lvpatqj","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhk000thajf0pzz4y71"},{"post_id":"clulf0lhj000khajfcc8k3zly","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhl000xhajf0es59q2j"},{"post_id":"clulf0lhh0007hajfd469aukq","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhl0013hajf8r882070"},{"post_id":"clulf0lhh0007hajfd469aukq","tag_id":"clulf0lhk000uhajfhind1ymt","_id":"clulf0lhl0016hajfg7zd03wq"},{"post_id":"clulf0lhl000yhajfhz3c0ida","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhm001ahajffyrn6xzr"},{"post_id":"clulf0lhl0011hajfcp0efgjl","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhm001dhajf7j520i42"},{"post_id":"clulf0lhh0008hajfg83hc0fy","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhm001hhajf7iyahgnx"},{"post_id":"clulf0lhl0018hajf1bxyb3rx","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhm001khajf97rlff37"},{"post_id":"clulf0lhi0009hajfewjr5eq4","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhn001ohajffz1b399l"},{"post_id":"clulf0lhi0009hajfewjr5eq4","tag_id":"clulf0lhk000uhajfhind1ymt","_id":"clulf0lhn001rhajfh7md2p7q"},{"post_id":"clulf0lhi000chajffnc62aay","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhn001vhajfa0yhc1zj"},{"post_id":"clulf0lhn001phajf7h27bey0","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhn001yhajfhm951sb6"},{"post_id":"clulf0lhn001thajf1c9ye3ov","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhn0022hajf1gfmd063"},{"post_id":"clulf0lhj000dhajf6985f7x3","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lho0025hajfa5244dn0"},{"post_id":"clulf0lhn0023hajf2yccfgq0","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lho0029hajf6jro6enk"},{"post_id":"clulf0lhk000ohajf64f638ax","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lho002chajf5jxch4ai"},{"post_id":"clulf0lhk000ohajf64f638ax","tag_id":"clulf0lhn001zhajf7ovk084h","_id":"clulf0lho002ghajfgnyuc4q5"},{"post_id":"clulf0lho0026hajfhcalcg34","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lho002jhajfhq0z6dny"},{"post_id":"clulf0lho002ahajfgz1gae4c","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhp002nhajf2v743rou"},{"post_id":"clulf0lhk000rhajf5otm4nlv","tag_id":"clulf0lho0028hajf37z2h2a5","_id":"clulf0lhp002qhajf2a8a8qjm"},{"post_id":"clulf0lho002dhajf7iqu812a","tag_id":"clulf0lhh0006hajf8hbc5tdm","_id":"clulf0lhp002uhajfa19z6vj9"},{"post_id":"clulf0lho002hhajfg5jb2cps","tag_id":"clulf0lhh0006hajf8hbc5tdm","_id":"clulf0lhp002xhajfbsea8aft"},{"post_id":"clulf0lhk000vhajf6nyegrjc","tag_id":"clulf0lho002fhajf66uv4bvf","_id":"clulf0lhp0031hajf827a4fe4"},{"post_id":"clulf0lhl0014hajfbp323o8h","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhq0034hajfg2ii4fi0"},{"post_id":"clulf0lhl0014hajfbp323o8h","tag_id":"clulf0lho002fhajf66uv4bvf","_id":"clulf0lhq0037hajfgkbeba4m"},{"post_id":"clulf0lhm001bhajf3oh7aao5","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhq003bhajfh8uq353g"},{"post_id":"clulf0lhm001bhajf3oh7aao5","tag_id":"clulf0lho002fhajf66uv4bvf","_id":"clulf0lhq003ehajfa86xdn4b"},{"post_id":"clulf0lhm001fhajf57b37bnc","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhr003ihajf1zylh0fk"},{"post_id":"clulf0lhm001fhajf57b37bnc","tag_id":"clulf0lhp0030hajfhmpmc2l4","_id":"clulf0lhs003lhajfdlzx1x7m"},{"post_id":"clulf0lhq0039hajf2dzyh0d1","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhs003phajf6mjj4s7m"},{"post_id":"clulf0lhq003chajfbboa04io","tag_id":"clulf0lhh0006hajf8hbc5tdm","_id":"clulf0lhs003shajfby05fw1s"},{"post_id":"clulf0lhq003ghajfflys6b4a","tag_id":"clulf0lhk000uhajfhind1ymt","_id":"clulf0lht003whajf9mgueqn3"},{"post_id":"clulf0lhq003ghajfflys6b4a","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lht003zhajfaunk7grq"},{"post_id":"clulf0lhm001ihajf6su7g17u","tag_id":"clulf0lhp0030hajfhmpmc2l4","_id":"clulf0lht0043hajf7d96djhv"},{"post_id":"clulf0lhm001ihajf6su7g17u","tag_id":"clulf0lho002fhajf66uv4bvf","_id":"clulf0lht0045hajfchm437if"},{"post_id":"clulf0lhr003jhajf6i3ihamw","tag_id":"clulf0lhk000uhajfhind1ymt","_id":"clulf0lht0049hajf71fc13nd"},{"post_id":"clulf0lhr003jhajf6i3ihamw","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhu004chajfe1hd8r1u"},{"post_id":"clulf0lhs003nhajf7qlj4ysc","tag_id":"clulf0lhk000uhajfhind1ymt","_id":"clulf0lhu004ghajffhy10x80"},{"post_id":"clulf0lhm001mhajf3qs21njd","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhu004jhajfdq9i2tlz"},{"post_id":"clulf0lhm001mhajf3qs21njd","tag_id":"clulf0lho002fhajf66uv4bvf","_id":"clulf0lhu004nhajfh8c8cua2"},{"post_id":"clulf0lhs003qhajf19tp5e5b","tag_id":"clulf0lhk000uhajfhind1ymt","_id":"clulf0lhv004qhajf5x2e0qjt"},{"post_id":"clulf0lhn001whajfdc22hpb7","tag_id":"clulf0lho002fhajf66uv4bvf","_id":"clulf0lhw004thajfb5pga4a2"},{"post_id":"clulf0lht003xhajf3w1o2szv","tag_id":"clulf0lho002fhajf66uv4bvf","_id":"clulf0lhw004xhajf4dql7twl"},{"post_id":"clulf0lht003xhajf3w1o2szv","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhx0050hajf6l2yfqym"},{"post_id":"clulf0lht0044hajfcxvz59ri","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhx0054hajfft0wfyrt"},{"post_id":"clulf0lhn0020hajf29bfb2ml","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhy0057hajfhbo12m60"},{"post_id":"clulf0lhn0020hajf29bfb2ml","tag_id":"clulf0lht0040hajffl6baq9p","_id":"clulf0lhy005bhajf2tuh0bjq"},{"post_id":"clulf0lht0046hajfdiox6br1","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhy005dhajfhjglanaj"},{"post_id":"clulf0lht0046hajfdiox6br1","tag_id":"clulf0lhk000uhajfhind1ymt","_id":"clulf0lhy005hhajf84n699aw"},{"post_id":"clulf0lht004ahajf0mmb528e","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhy005khajfbpb9ag4i"},{"post_id":"clulf0lho002khajf0ek06jiu","tag_id":"clulf0lht0048hajf1x99dgi2","_id":"clulf0lhz005ohajf0d2y8n0k"},{"post_id":"clulf0lhu004ohajf85wl2coj","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhz005rhajf07xxamml"},{"post_id":"clulf0lhp002ohajfbfi4al4v","tag_id":"clulf0lhu004fhajf0nrbeylm","_id":"clulf0lhz005vhajf99n72107"},{"post_id":"clulf0lhp002ohajfbfi4al4v","tag_id":"clulf0lhu004mhajf77fv9ucp","_id":"clulf0lhz005yhajf7dck69up"},{"post_id":"clulf0lhv004rhajf6cvo8lwd","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0lhz0062hajfeed8afog"},{"post_id":"clulf0lhv004rhajf6cvo8lwd","tag_id":"clulf0lho002fhajf66uv4bvf","_id":"clulf0li00065hajf6vus4qtx"},{"post_id":"clulf0lhw004vhajff05jak6m","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li00069hajf6jh1eups"},{"post_id":"clulf0lhw004vhajff05jak6m","tag_id":"clulf0lht0048hajf1x99dgi2","_id":"clulf0li0006chajf0k5x2335"},{"post_id":"clulf0lhp002rhajfefz0a0ko","tag_id":"clulf0lhu004fhajf0nrbeylm","_id":"clulf0li0006ghajfex32athn"},{"post_id":"clulf0lhp002vhajfectn4v8y","tag_id":"clulf0lhu004fhajf0nrbeylm","_id":"clulf0li0006jhajfclyr42x0"},{"post_id":"clulf0lhp002vhajfectn4v8y","tag_id":"clulf0lhu004mhajf77fv9ucp","_id":"clulf0li0006nhajfas08cr2t"},{"post_id":"clulf0lhp002yhajf826gak3b","tag_id":"clulf0lhu004fhajf0nrbeylm","_id":"clulf0li1006qhajf4nw9bg2v"},{"post_id":"clulf0lhp002yhajf826gak3b","tag_id":"clulf0lhu004mhajf77fv9ucp","_id":"clulf0li1006uhajf4jk24wu1"},{"post_id":"clulf0lhz005phajfcexe481k","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li1006whajf6ahtf1gz"},{"post_id":"clulf0lhz005phajfcexe481k","tag_id":"clulf0lho002fhajf66uv4bvf","_id":"clulf0li1006zhajfakfvckby"},{"post_id":"clulf0lhz005thajfdn356dd9","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li10073hajfgwhy866t"},{"post_id":"clulf0lhz005whajf74ai2lw5","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li20076hajf46600wk3"},{"post_id":"clulf0lhz005whajf74ai2lw5","tag_id":"clulf0lho002fhajf66uv4bvf","_id":"clulf0li2007ahajfhzpq065z"},{"post_id":"clulf0lhp0032hajf0ism0tcj","tag_id":"clulf0lhz005shajf8v290dql","_id":"clulf0li2007dhajfhghsggc6"},{"post_id":"clulf0lhz005zhajfcszlcjkd","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li2007hhajf8mchfdvh"},{"post_id":"clulf0lhz0063hajf8bro4xsc","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li2007khajfbig18vlq"},{"post_id":"clulf0lhq0035hajf663mefe4","tag_id":"clulf0lht0048hajf1x99dgi2","_id":"clulf0li3007ohajf75j561kz"},{"post_id":"clulf0li00066hajf7rbxfm5e","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li3007shajfh45t9h9g"},{"post_id":"clulf0lhs003uhajf8rqv1sy1","tag_id":"clulf0li00068hajfb08c1q4o","_id":"clulf0li3007whajfctm8fro6"},{"post_id":"clulf0lht0041hajf3p8ie73g","tag_id":"clulf0li0006fhajf13z258ww","_id":"clulf0li3007yhajfb2thgzss"},{"post_id":"clulf0li0006khajfhwcob2wi","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li30082hajf79iteilb"},{"post_id":"clulf0li1006ohajf1a5r0dvb","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li30084hajf8sdga8g5"},{"post_id":"clulf0lhu004dhajfbk1zgyvt","tag_id":"clulf0lhz005shajf8v290dql","_id":"clulf0li40089hajfdjbr15mq"},{"post_id":"clulf0li1006rhajff78z970l","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li4008chajf8q1abscz"},{"post_id":"clulf0li1006vhajfeibk30lp","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li4008ghajf7swm2hos"},{"post_id":"clulf0lhu004hhajfh7zlcmbj","tag_id":"clulf0li1006thajf3uru7qxk","_id":"clulf0li4008ihajf331q0hdy"},{"post_id":"clulf0li1006xhajffv5z7lfm","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li4008khajf1sub7aot"},{"post_id":"clulf0li10071hajfelzh39l2","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li4008nhajfcxjf4bmr"},{"post_id":"clulf0lhu004khajfbpjo9ygg","tag_id":"clulf0li1006thajf3uru7qxk","_id":"clulf0li4008phajfesi7dzh1"},{"post_id":"clulf0li20078hajfc29j4p1y","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li4008shajf10lu8s2m"},{"post_id":"clulf0li2007bhajf2uutgfr0","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li4008thajf4hz02gy9"},{"post_id":"clulf0lhw004yhajfh1u2510n","tag_id":"clulf0li20077hajf6fi2337n","_id":"clulf0li4008vhajf626s7mso"},{"post_id":"clulf0li2007ehajfa6ix4nzf","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li5008whajf0af19ojv"},{"post_id":"clulf0li2007ihajf0l4sfhna","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li5008yhajfdtnu5nis"},{"post_id":"clulf0lhx0052hajfe43x9uns","tag_id":"clulf0li2007ghajf8em3bdzi","_id":"clulf0li5008zhajf0st0hlxm"},{"post_id":"clulf0lhx0055hajf09o62wtw","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li50091hajf75jt84n7"},{"post_id":"clulf0lhx0055hajf09o62wtw","tag_id":"clulf0li00068hajfb08c1q4o","_id":"clulf0li50092hajfbfi51j56"},{"post_id":"clulf0lhy0059hajf8hgqd8jd","tag_id":"clulf0li3007vhajfgta9d5is","_id":"clulf0li50094hajf4qfh5r48"},{"post_id":"clulf0lhy005chajf8empboda","tag_id":"clulf0li3007vhajfgta9d5is","_id":"clulf0li50095hajf1qz2ba1m"},{"post_id":"clulf0li4008ahajf4xnvhgor","tag_id":"clulf0lhu004fhajf0nrbeylm","_id":"clulf0li50096hajf78lvb8mu"},{"post_id":"clulf0lhy005fhajf8p8j6ctp","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li50098hajf8hfb965q"},{"post_id":"clulf0lhy005fhajf8p8j6ctp","tag_id":"clulf0li3007vhajfgta9d5is","_id":"clulf0li50099hajfbdde5cst"},{"post_id":"clulf0lhy005ihajf9mljf3j4","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li5009bhajf94bw3hob"},{"post_id":"clulf0lhy005ihajf9mljf3j4","tag_id":"clulf0li4008fhajf2zj78g3a","_id":"clulf0li5009chajf4arz5wnw"},{"post_id":"clulf0lhy005mhajf0jloe7t3","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li5009ehajf8j52hn75"},{"post_id":"clulf0lhy005mhajf0jloe7t3","tag_id":"clulf0li00068hajfb08c1q4o","_id":"clulf0li5009fhajf9pecfm2y"},{"post_id":"clulf0li0006ahajfausve6bs","tag_id":"clulf0lhj000ghajffnih0ptb","_id":"clulf0li5009hhajfa24t365n"},{"post_id":"clulf0li0006ahajfausve6bs","tag_id":"clulf0li4008qhajf9b163fwn","_id":"clulf0li5009ihajf3000esmc"},{"post_id":"clulf0li0006dhajf0k4hbn7a","tag_id":"clulf0li4008uhajf1z2y5x6l","_id":"clulf0li6009khajf79yk3vhg"},{"post_id":"clulf0li0006hhajfcikn1k4t","tag_id":"clulf0li4008uhajf1z2y5x6l","_id":"clulf0li6009lhajf621b5oma"},{"post_id":"clulf0li10074hajffcdqgnpl","tag_id":"clulf0lhh0006hajf8hbc5tdm","_id":"clulf0li6009nhajf7oc792m9"},{"post_id":"clulf0li10074hajffcdqgnpl","tag_id":"clulf0li50090hajf7cub5y1u","_id":"clulf0li6009ohajfeeau4udv"},{"post_id":"clulf0li2007lhajf2b84631u","tag_id":"clulf0li50093hajfctiqdhm0","_id":"clulf0li6009qhajfdz4acyc8"},{"post_id":"clulf0li3007phajf6f7k7s6y","tag_id":"clulf0li50093hajfctiqdhm0","_id":"clulf0li6009rhajf1bmw15am"},{"post_id":"clulf0li3007thajf56aobyu5","tag_id":"clulf0li50093hajfctiqdhm0","_id":"clulf0li6009shajfbdit0xcn"},{"post_id":"clulf0li3007xhajf781x0ad0","tag_id":"clulf0li50093hajfctiqdhm0","_id":"clulf0li6009thajfajspb964"},{"post_id":"clulf0li3007zhajfdd2c6oze","tag_id":"clulf0li50093hajfctiqdhm0","_id":"clulf0li6009uhajfgfzm9ug1"},{"post_id":"clulf0li30083hajf9n5ag9ke","tag_id":"clulf0li50093hajfctiqdhm0","_id":"clulf0li6009vhajf31drheh5"},{"post_id":"clulf0li40085hajfggevgohy","tag_id":"clulf0li50093hajfctiqdhm0","_id":"clulf0li6009whajfcy01eyy4"},{"post_id":"clulf0li4008dhajf9c7xgra1","tag_id":"clulf0li6009phajfgyih7klu","_id":"clulf0li6009xhajf4df20auo"},{"post_id":"clulf0li7009yhajf8kfj6nv3","tag_id":"clulf0li7009zhajf11i6hwkt","_id":"clulf0li700a1hajf04zi78q3"}],"Tag":[{"name":"Node.js","_id":"clulf0lhh0006hajf8hbc5tdm"},{"name":"NestJS","_id":"clulf0lhi000bhajfaxmv9wz1"},{"name":"前端","_id":"clulf0lhj000ghajffnih0ptb"},{"name":"CSS","_id":"clulf0lhk000uhajfhind1ymt"},{"name":"MobX","_id":"clulf0lhn001zhajf7ovk084h"},{"name":"MongoDB","_id":"clulf0lho0028hajf37z2h2a5"},{"name":"React.js","_id":"clulf0lho002fhajf66uv4bvf"},{"name":"源码","_id":"clulf0lhp0030hajfhmpmc2l4"},{"name":"Redux","_id":"clulf0lht0040hajffl6baq9p"},{"name":"TypeScript","_id":"clulf0lht0048hajf1x99dgi2"},{"name":"架构","_id":"clulf0lhu004fhajf0nrbeylm"},{"name":"UML","_id":"clulf0lhu004mhajf77fv9ucp"},{"name":"ECMAScript 6","_id":"clulf0lhz005shajf8v290dql"},{"name":"JavaScript","_id":"clulf0li00068hajfb08c1q4o"},{"name":"Webpack","_id":"clulf0li0006fhajf13z258ww"},{"name":"正则表达式","_id":"clulf0li1006thajf3uru7qxk"},{"name":"Less","_id":"clulf0li20077hajf6fi2337n"},{"name":"Postman","_id":"clulf0li2007ghajf8em3bdzi"},{"name":"Docker","_id":"clulf0li3007vhajfgta9d5is"},{"name":"NPM","_id":"clulf0li4008fhajf2zj78g3a"},{"name":"Yeoman","_id":"clulf0li4008qhajf9b163fwn"},{"name":"面试","_id":"clulf0li4008uhajf1z2y5x6l"},{"name":"爬虫","_id":"clulf0li50090hajf7cub5y1u"},{"name":"算法","_id":"clulf0li50093hajfctiqdhm0"},{"name":"Ant Design","_id":"clulf0li6009phajfgyih7klu"},{"name":"Canvas","_id":"clulf0li7009zhajf11i6hwkt"}]}}
